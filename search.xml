<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【游记】  HNOI2019酱油记</title>
      <link href="/2019/04/08/%5B%E6%B8%B8%E8%AE%B0%5DHNOI2019/"/>
      <url>/2019/04/08/%5B%E6%B8%B8%E8%AE%B0%5DHNOI2019/</url>
      
        <content type="html"><![CDATA[<p>嘤嘤嘤嘤虽然还是六年级不至于退役但鸭梨还是好大好大。</p><p>这一次 $HNOI2019$ 仅仅是去走过场，$HNOI2020$ 才是真正需要重视的，于是鸭梨又小了许多，却还是不希望分数太难看。算了比完了再说吧。($2019.4.4 $$\ Qiuly$记)</p><a id="more"></a><hr><h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day   -2"></a>Day   -2</h1><p>上午考试，下午改题，<del>晚上颓废</del></p><p>上午考的不是很好，本来估计又 $150$ 的结果第三题全炸变成了 $85$ ……</p><p>晚上和 $JerryC$ 一起颓废，后来有些虚了于是不玩了，去 $\texttt{HNFMSOJ}$ 上将喵星球上的点名过掉了，实际上是看了题解的所以还是有些虚。然后九点的时候 $JerryC$ 问窝最小路径覆盖问题怎么做，讨论了一番，<del>然后感觉又没那么虚了。</del></p><hr><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day   -1"></a>Day   -1</h1><p>上午考试，下午不想改题。</p><p>上午的考试不想写总结了，因为没有改出来一道题。上午的题目确实没有昨天的好做看到第二题是比较裸的 $AC$ 自动机于是做掉了<del>(结果最后只有 $80$ 分？！)</del> ，众所周知 $AC$ 自动机是很好打的，我打完就没事干了，于是去高一机房看 $JerryC$ 秒题去了。</p><p>中午和 $JerryC$ 和史哥一起吃饭，但是出去的时候已经完了，出不了校门了。于是去小卖部吃泡面，味道海星。</p><p>下午回来先休息，$2$ 点钟开始，然后看到洛谷智推有个永无乡于是切掉了。期间高二的年级组长(貌似是？)和高二机房的常规班上的班主任来了，说是来鼓励大家，给大家带来的许多吃的。当然没有窝的份于是窝继续做窝的永无乡，哎感觉我从头到尾就是个客人。</p><p>嗯打完了永无乡后将线段树合并的代码发给史哥了，因为史哥中午曾问窝线段树合并肿么打。</p><p>然后写 $\texttt{HNOI2019}​$ 游记(就是现在这篇)。</p><p>写完游记没事干了，然后去切掉了最小路径覆盖问题。这个时候差不多要吃晚饭于是跟着 $JerryC,CYjian,Yasar$ 一起吃的晚饭。他们是住的什么托管，感觉……那个晚饭还是不吃为好。</p><p>结果最后回机房的时候也没有碰过一点吃的东西，于是 $JerryC$ 给了窝一包巧克力充充饥，好久没有这么一大包巧克力了，一口大满足美滋滋。</p><p>晚上无聊，不敢颓，于是康康板子，康康别人的博客，然后整理了一下自己的博客，差不多就回家了。</p><hr><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day   0"></a>Day   0</h1><p>清明节是不可能有假期的，今天还是要来机房，没有睡成懒觉……</p><p>嗯但是今天不考试，于是上午继续康康板子，不是很想打，只是看了一遍之前的代码：</p><blockquote><p>$\texttt{AC}$自动机，$\texttt{SAM}$，$\texttt{SA}$，$\texttt{FFT}$，$\texttt{NTT}$，$\texttt{MTT}$，$\texttt{Splay}$，$\texttt{LCT}$，树剖，杜教筛，莫比乌斯反演，$\texttt{CDQ}$分治，$\texttt{K-D Tree}$</p></blockquote><p>当然树套树是不可能看的，这辈子也不会复习的……光是码量就可以吓到我了。</p><p>$JerryC$ 说昨天他去康了 $\texttt{ICPC2019}$ 直播，但是窝没看<del>因为窝不知道有这个比赛</del>因为窝不能颓。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  [HNOI2012]永无乡  线段树+启发式合并  luoguP3224</title>
      <link href="/2019/04/04/%5B%E9%A2%98%E8%A7%A3%5DluoguP3224/"/>
      <url>/2019/04/04/%5B%E9%A2%98%E8%A7%A3%5DluoguP3224/</url>
      
        <content type="html"><![CDATA[<p>实际上可以用平衡树做的但是不喜欢平衡树。</p><p>还是喜欢可爱的线段树，于是打了一发线段树合并。很久没有这样子的做题感觉了，真是美妙，思路清晰，交上去一遍过(窝不会告诉泥萌窝第一次交的时候忘关文件=。=)。</p><a id="more"></a><p>我们对于每一个点维护一个权值线段树，然后用并查集维护点与点之间的联通关系。对于一个连通块，该连通块的所有结点信息都保留在该连通块的 $root$ 上。</p><p>这样子我们合并两个岛的时候 $x,y$ ，可以直接将 $x$ 所在连通块的 $root$ (简称 $fx$ ) 和  $y$ 所在连通块的 $root$ (简称 $fy$ ) 合并起来，也就是将 $fy$ 的线段树并到 $fx$ 上去。这样子 $fx$ 就维护了这两个连通块的信息了，最后我们按照并查集的套路将 $fy$ 的父亲设为 $fx$ 即可。</p><p>询问就是基础操作，权值线段树就像主席树那样询问即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=N*<span class="number">650</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg_Tree</span> &#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> cnt,rt[N],val[Max],lc[Max],rc[Max];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        val[x]=val[lc[x]]+val[rc[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) x=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;++val[x];<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid) update(lc[x],l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> update(rc[x],mid+<span class="number">1</span>,r,pos);</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> th=val[lc[x]];</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=th) query(lc[x],l,mid,k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(rc[x],mid+<span class="number">1</span>,r,k-th);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;val[x]+=val[y];<span class="keyword">return</span> x;&#125;</span><br><span class="line">        lc[x]=merge(lc[x],lc[y],l,mid),</span><br><span class="line">        rc[x]=merge(rc[x],rc[y],mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(x);<span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[N],pos[N],n,m,q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i)</span><br><span class="line">        fa[i]=i,IN(x),pos[x]=i,T.update(T.rt[i],<span class="number">1</span>,n,x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;IN(u),IN(v);</span><br><span class="line">        <span class="keyword">int</span> fu=find(u),fv=find(v);</span><br><span class="line">        <span class="keyword">if</span>(fu!=fv) T.merge(T.rt[fu],T.rt[fv],<span class="number">1</span>,n),fa[fv]=fu;</span><br><span class="line">    &#125;</span><br><span class="line">    IN(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">2</span>];<span class="keyword">int</span> x,y,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'B'</span>) &#123;</span><br><span class="line">            IN(x),IN(y);</span><br><span class="line">            <span class="keyword">int</span> fx=find(x),fy=find(y);</span><br><span class="line">            <span class="keyword">if</span>(fx!=fy) T.merge(T.rt[fx],T.rt[fy],<span class="number">1</span>,n),fa[fy]=fx;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'Q'</span>) &#123;</span><br><span class="line">            IN(x),IN(k);</span><br><span class="line">            <span class="keyword">int</span> fx=find(x);</span><br><span class="line">            <span class="keyword">if</span>(T.val[T.rt[fx]]&lt;k) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pos[T.query(T.rt[fx],<span class="number">1</span>,n,k)]);</span><br><span class="line">            <span class="comment">/*我们query到的是第K大的权值而非岛屿的编号*/</span></span><br><span class="line">            <span class="comment">/*于是加个pos数组就好了*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【考试总结】  Test-2019.4.3  HNOI2019模拟</title>
      <link href="/2019/04/03/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190403/"/>
      <url>/2019/04/03/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190403/</url>
      
        <content type="html"><![CDATA[<p>三道题目，一眼出算法。</p><blockquote><p>第一道题目显然是后缀自动机，<br>第二道题目显然是莫比乌斯反演加上杜教筛。<br>第三道题目显然是网络流。</p></blockquote><p>然而考场上都没做出来……自闭了。</p><blockquote><p>真的，现在已经是傍晚了，大后天就是毒瘤的省选了……小学中现在正在举办运动会，班级群中一群人在那里一个劲的喊加油，但是，班上有人给我加油吗？除了几个好朋友之外……</p></blockquote><a id="more"></a><p><a href="https://github.com/monlights/image/blob/master/problem20190403.zip?raw=true" target="_blank" rel="noopener">题目压缩包戳我!!!<code>~\(≧▽≦)/~</code>(有时链接可能会崩，如果崩了的话请稍后尝试QwQ)</a></p><hr><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><blockquote><p>期望得分：40分<br>实际得分：40分<br>正解：后缀自动机(SAM)+FFT<br>窝的解法：哈希</p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>嗯后缀自动机是会的但是感觉不好做。</p><p>于是弄了个哈希上去骗分，暴力枚举字串然后玄学哈希即可。</p><p>不会正解。。。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">666</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">100000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k,m,cnt,res[N*N],ans;</span><br><span class="line"><span class="keyword">char</span> s[N],c[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step,<span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(step==k+<span class="number">1</span>&amp;&amp;sum==m) &#123;++ans;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(step==k+<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum&gt;m) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">        dfs(step+<span class="number">1</span>,sum+res[i]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"tele.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"tele.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    IN(k),IN(m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j;++k) tot=(<span class="number">1l</span>l*tot*<span class="number">27</span>%MOD+s[k]-<span class="string">'a'</span>+<span class="number">1</span>)%MOD;</span><br><span class="line">            <span class="comment">/*大力玄学哈希+map判重*/</span></span><br><span class="line">            hash[tot]++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j;++k) tot=(<span class="number">1l</span>l*tot*<span class="number">27</span>%MOD+s[k]-<span class="string">'a'</span>+<span class="number">1</span>)%MOD;</span><br><span class="line">            res[++cnt]=hash[tot];</span><br><span class="line">        &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*灵机一动这样写，那么k打于2的时候如果数据小可以多拿一些分*/</span></span><br><span class="line">    <span class="comment">/*实验证明这样布星*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><blockquote><p>期望得分：60分<br>实际得分：40分<br>正解：莫比乌斯反演+杜教筛<br>窝的解法：莫比乌斯反演</p></blockquote><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>考场上忘记了杜教筛，于是GG。</p><p>本来有六十分的……脑抽的窝，预处理 $\sum_{i=1}^{T}\lfloor\frac{T}{i}\rfloor$ 居然用 $O(n\sqrt{n})$ 来解决……实际上改两个字符就变成 $O(n)$ 的复杂度了，就有 $60$ 分了……</p><p>嗯然后筛 $\mu$ 的时候可以搞个杜教筛加速，这样子的话 $\mu$ 函数的前缀和就可以 $O(n^{\frac{2}{3}})$ 筛出。不过估计是标程质量不行，题目范围只有 $10^9$ ……杜教筛可以解决 $O(10^{11})$ 左右的问题……吧?</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt;N+7&gt; vis;</span><br><span class="line"><span class="keyword">int</span> n,mui[N+<span class="number">7</span>],prime[N],cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;N;++j) &#123;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j])) &#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i) mui[i]+=mui[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(<span class="keyword">int</span> MX)</span> </span>&#123;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=MX;l=r+<span class="number">1</span>) &#123;</span><br><span class="line">        r=MX/(MX/l);</span><br><span class="line">        sum=(sum+<span class="number">1l</span>l*(r-l+<span class="number">1</span>)*(MX/l)%MOD)%MOD;</span><br><span class="line">    &#125;<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; MU;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/*杜教筛*/</span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;N) <span class="keyword">return</span> mui[x];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(MU.count(x)) <span class="keyword">return</span> MU[x];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">2</span>,r;l&lt;=x;l=r+<span class="number">1</span>) &#123;</span><br><span class="line">            r=x/(x/l);</span><br><span class="line">            s-=(r-l+<span class="number">1</span>)*Sum(x/l);</span><br><span class="line">        &#125;<span class="keyword">return</span> MU[x]=s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"math.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"math.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    pre();</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>) &#123;</span><br><span class="line">        r=n/(n/l);</span><br><span class="line">        ll num=S(n/l);</span><br><span class="line">        res=(res+<span class="number">1l</span>l*(Sum(r)-Sum(l<span class="number">-1</span>))*num*num%MOD+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(res+MOD)%MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯实际这题窝觉得是一道莫反板子题，但是没做出来，看来杜教筛还是不会……</p><hr><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><blockquote><p>期望得分：50分<br>实际得分：0分<br>正解：最小割<br>窝的解法：最小割+爆搜</p></blockquote><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>看完题目后，窝决定第一个看这道题。</p><p>哇，一眼网络流题目欸！</p><p>咦这题好像小$M$的作物欸，但是第二个操作又不对劲了……(实际上第二个操作就是文理分科那题，但是窝没做那题)。</p><p>嗯，需要花费的什么费用……费用流？！然后手画了一下图……自己模拟一下发现根本不好模拟，想着费用流板子也就 $10$ 分钟的事，于是打了个费用流照着窝之前的想法建一下边，跑一下后发现错了……</p><p>然后苦苦思索……转眼间 $30$ 分钟过去了。<del>发现时间过得比较快</del>，于是决定先将暴力 $30$ 打好再想……嗯爆搜一下救过了样例(不过窝的爆搜又打错了以至于窝没拿到分？！)</p><p>嗯这个时候感觉前 $30$ 分稳了，于是观察部分分，发现有 $\%20$ 的数据不包含第二个操作，直接上小$M$的作物发现自己忘了，没办法只好自己瞎 $YY$ 一通。最后的结果发现是最小割，然后拆点，拆成牛羊两个点，源点连牛点，边权自然是其收益，羊点同理。然后中间连一条边权为 $inf$ 的边，表示这个要不圈牛要不圈羊只能圈一个。</p><p>嗯，发现还挺有道理的。对于，对于限制的话我们只需要再限制的两个牛羊点之间连上一条边权为 $inf$ 的边即可。</p><p>一遍过样例，美滋滋地开始造数据拍，嗯第一次和爆搜拍得挺顺利 $500$ 组数据全过了。</p><p>没过瘾，再来一组，结果第二组 $500$ 数据，拍到三百多个就 $WA$ 了……</p><p>后面没有想出来，于是弃疗了。</p><p><strong>接下来讲一讲正解怎么做</strong></p><p>小$M$的作物自然不用讲，我们来讲讲文理分科怎么做。</p><p>对于本题的第二个操作，我们需要新建一个结点 $p​$ ，然后如果这个操作的 $a​$ 是 $0​$ 我们就从源点向其连一条边权为 $b​$ 的边，$a​$ 是 $1​$ 的情况同理。</p><p>然后呢，对于 $S$ 中的每个点，如果 $a$ 为 $0$ 则从 $p$ 向该点连边，$a$ 是 $1$ 的情况同理。</p><p>嗯，然后就是不需要拆点。然后就差不多了。</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],b[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">int</span> s,t,head[N],dep[N],cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[v],u,<span class="number">0</span>&#125;,head[v]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s]=<span class="number">1</span>,q.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">                <span class="keyword">if</span>(!dep[v]&amp;&amp;G[i].val&gt;<span class="number">0</span>) </span><br><span class="line">                    dep[v]=dep[u]+<span class="number">1</span>,q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u==t||!flow) <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                used+=(rlow=dfs(v,min(flow-used,G[i].val)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used) dep[u]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"work.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"work.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    IN(n),IN(m),IN(k);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,nodetot=n+<span class="number">1</span>;s=<span class="number">0</span>,t=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(a[i]),sum+=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(b[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;IN(x),IN(y),IN(z);</span><br><span class="line">        add(x,y,z),add(y,x,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> size,x,y;</span><br><span class="line">        IN(size),IN(x),IN(y);</span><br><span class="line">        sum+=y,++nodetot;</span><br><span class="line">        x?add(nodetot,t,y):add(s,nodetot,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=size;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> c;IN(c);</span><br><span class="line">            x?add(c,nodetot,inf):add(nodetot,c,inf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=b[i]) add(s,i,a[i]-b[i]);</span><br><span class="line">        <span class="keyword">else</span> add(i,t,b[i]-a[i]),sum+=b[i]-a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs()) maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum-maxflow);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [Vani有约会]雨天的尾巴  线段树+启发式合并  luoguP4556</title>
      <link href="/2019/04/02/%5B%E9%A2%98%E8%A7%A3%5DluoguP4556/"/>
      <url>/2019/04/02/%5B%E9%A2%98%E8%A7%A3%5DluoguP4556/</url>
      
        <content type="html"><![CDATA[<p>毒瘤出题人，卡时间卡空间！</p><p>嗯，如果这一题不是在树上的话貌似可以直接权值线段树维护？不过到了树上的话难道可以权值线段树+树链剖分，表示不明白。于是尝试了一发线段树合并，但是我们的线段树是权值线段树。</p><a id="more"></a><p>我们的权值线段树是用来存原树中 $x$ 结点以及其子树中的每种救济粮的个数。</p><p>怎么个合并法呢，其实特别简单，两个线段树同时进行，发现到了一个节点的时候一个线段树有这个结点另一个没有这个节点，那么这个节点以及其下面的结点的信息都可以直接作为新线段树的这个节点的信息。</p><p>当然如果到了一个叶子节点，直接将两个线段树的这个位置的救济粮的个数加起来即可。</p><p>嗯，每个线段树再维护一个值存出现最多次数的救济粮是什么，这样就可以得到答案了。但是为了避免一些结点与其子树压根就没有救济粮的情况，我们需要判断一下这个节点与其子树是否有救济粮即可。</p><p>然后直接一遍 $dfs$ ，遍历 $u$ 的所有孩子然后拿 $u$ 的线段树依次去和 $u$ 的儿子的线段树合并。最终合并完的线段树存储的就是 $u$ 以及其子树的信息了。然后就可以获得答案了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">6e6</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,X[N],Y[N],Z[N],Ans[N],head[N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nxt,to;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[u],v&#125;,head[u]=cnt;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[v],u&#125;,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=--x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Lca &#123;</span><br><span class="line">    <span class="keyword">int</span> dep[N],fa[N][LogN+<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(G[i].to!=f) dfs(G[i].to,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(dep[x]&lt;dep[y]) swap(x,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            <span class="keyword">if</span>(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i];</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            <span class="keyword">if</span>(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];</span><br><span class="line">        <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Lca;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> &#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> rt[N],lc[M],rc[M],d[M],t[M],tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[lc[x]]&gt;=d[rc[x]]) d[x]=d[lc[x]],t[x]=t[lc[x]];</span><br><span class="line">        <span class="keyword">else</span> d[x]=d[rc[x]],t[x]=t[rc[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) x=++tot;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;d[x]+=val;t[x]=l;<span class="keyword">return</span> x;&#125;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid) lc[x]=update(lc[x],l,mid,pos,val);</span><br><span class="line">        <span class="keyword">else</span> rc[x]=update(rc[x],mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">        pushup(x);<span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span> y;</span><br><span class="line">        <span class="keyword">if</span>(!y) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;d[x]+=d[y];t[x]=l;<span class="keyword">return</span> x;&#125;</span><br><span class="line">        lc[x]=merge(lc[x],lc[y],l,mid);</span><br><span class="line">        rc[x]=merge(rc[x],rc[y],mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(x);<span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=f) </span><br><span class="line">            calc(G[i].to,u),</span><br><span class="line">            T.rt[u]=T.merge(T.rt[u],T.rt[G[i].to],<span class="number">1</span>,m);</span><br><span class="line">    <span class="keyword">if</span>(T.d[T.rt[u]]) Ans[u]=T.t[T.rt[u]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;++i)</span><br><span class="line">        IN(x),IN(y),add(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)</span><br><span class="line">        IN(X[i]),IN(Y[i]),IN(Z[i]),m=max(m,Z[i]);</span><br><span class="line">   <span class="comment">//权值线段树离线处理</span></span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> lca_xy=lca(X[i],Y[i]);</span><br><span class="line">        T.rt[X[i]]=T.update(T.rt[X[i]],<span class="number">1</span>,m,Z[i],<span class="number">1</span>);</span><br><span class="line">        T.rt[Y[i]]=T.update(T.rt[Y[i]],<span class="number">1</span>,m,Z[i],<span class="number">1</span>);</span><br><span class="line">        T.rt[lca_xy]=T.update(T.rt[lca_xy],<span class="number">1</span>,m,Z[i],<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(fa[lca_xy][<span class="number">0</span>]) T.rt[fa[lca_xy][<span class="number">0</span>]]=T.update(T.rt[fa[lca_xy][<span class="number">0</span>]],<span class="number">1</span>,m,Z[i],<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    calc(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2005]维护数列  Splay  luoguP2042</title>
      <link href="/2019/04/02/%5B%E9%A2%98%E8%A7%A3%5DluoguP2042/"/>
      <url>/2019/04/02/%5B%E9%A2%98%E8%A7%A3%5DluoguP2042/</url>
      
        <content type="html"><![CDATA[<p>神奇的题目。</p><p>网上说什么做了这道题 $Splay$ 就差不多了，嗯对窝也这么觉得。于是终于码掉了。</p><p>主要涉及的操作还是提取区间，我们组需要将 $l-1$ 提取至 $root$ ， 然后将 $r+1$ 提取至 $l-1$ 的下方，最终询问的 $l,r$ 区间的 $Splay$ 就是 $r+1$ 的左孩子。</p><a id="more"></a><p>这个时候该输出的就输出，该打标记的就打标记就好了。</p><p>至于插入的话我们可以先将所有需要插入的结点 $build$ 成一棵树，然后直接挂到 $r+1$ 的左孩子即可。</p><p>但是毒瘤出题人卡空间，于是我们需要将删除的结点全部重新应用，就像垃圾回收那样，搞个栈就行了。</p><p>最后因为怕 $l-1$ 和 $r+1$ 出界我们还需要新增两个”哨兵结点”，这样子的话需要提取的结点都加上了 $1$ ，提取区间变动的两个节点就变成 $l$ 和 $r+2$ 了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5.5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Splay</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> root,cnt;</span><br><span class="line">    <span class="keyword">int</span> ch[N][<span class="number">2</span>],sz[N],fa[N],val[N],tag[N],rev[N];</span><br><span class="line">    <span class="keyword">int</span> sum[N],lmax[N],rmax[N],smax[N];</span><br><span class="line">    <span class="keyword">int</span> date[N],trash[N],top;</span><br><span class="line"></span><br><span class="line">    Splay()&#123;root=cnt=top=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> ch[fa[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        ch[node][<span class="number">0</span>]=ch[node][<span class="number">0</span>]=sz[node]=fa[node]=val[node]=<span class="number">0</span>,</span><br><span class="line">        rev[node]=sum[node]=lmax[node]=rmax[node]=smax[node]=<span class="number">0</span>;</span><br><span class="line">        tag[node]=inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MKN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> node;</span><br><span class="line">        node=top?trash[top--]:++cnt;</span><br><span class="line">        clear(node);<span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=ch[x][<span class="number">0</span>],r=ch[x][<span class="number">1</span>];</span><br><span class="line">        sz[x]=sz[l]+sz[r]+<span class="number">1</span>;</span><br><span class="line">        sum[x]=sum[l]+sum[r]+val[x];</span><br><span class="line">        lmax[x]=max(lmax[l],sum[l]+val[x]+lmax[r]);</span><br><span class="line">        rmax[x]=max(rmax[r],sum[r]+val[x]+rmax[l]);</span><br><span class="line">        smax[x]=max(rmax[l]+lmax[r]+val[x],max(smax[l],smax[r]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=ch[x][<span class="number">0</span>],r=ch[x][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(tag[x]!=inf) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l) val[l]=tag[l]=tag[x],sum[l]=tag[x]*sz[l];</span><br><span class="line">            <span class="keyword">if</span>(r) val[r]=tag[r]=tag[x],sum[r]=tag[x]*sz[r];</span><br><span class="line">            <span class="keyword">if</span>(tag[x]&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(l) lmax[l]=rmax[l]=smax[l]=sum[l];</span><br><span class="line">                <span class="keyword">if</span>(r) lmax[r]=rmax[r]=smax[r]=sum[r];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(tag[x]&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(l) lmax[l]=rmax[l]=<span class="number">0</span>,smax[l]=tag[x];</span><br><span class="line">                <span class="keyword">if</span>(r) lmax[r]=rmax[r]=<span class="number">0</span>,smax[r]=tag[x];</span><br><span class="line">            &#125;</span><br><span class="line">            tag[x]=inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rev[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l) swap(ch[l][<span class="number">0</span>],ch[l][<span class="number">1</span>]),swap(lmax[l],rmax[l]),rev[l]^=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(r) swap(ch[r][<span class="number">0</span>],ch[r][<span class="number">1</span>]),swap(lmax[r],rmax[r]),rev[r]^=<span class="number">1</span>;</span><br><span class="line">            rev[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">        pushdown(y),pushdown(x);</span><br><span class="line">        <span class="keyword">int</span> k=chk(x),v=ch[x][k^<span class="number">1</span>];</span><br><span class="line">        ch[z][chk(y)]=x,fa[x]=z,ch[y][k]=v,fa[v]=y,</span><br><span class="line">        ch[x][k^<span class="number">1</span>]=y,fa[y]=x;pushup(y),pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> gola=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(fa[x]!=gola) &#123;</span><br><span class="line">            <span class="keyword">if</span>(fa[fa[x]]!=gola)</span><br><span class="line">                rotate(chk(x)^chk(fa[x])?x:fa[x]);</span><br><span class="line">            rotate(x);</span><br><span class="line">        &#125;<span class="keyword">if</span>(!gola) root=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos=root;</span><br><span class="line">        <span class="keyword">while</span>(pos) &#123;</span><br><span class="line">            pushdown(pos);</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=sz[ch[pos][<span class="number">0</span>]]) pos=ch[pos][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                x-=sz[ch[pos][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!x) <span class="keyword">return</span> pos;</span><br><span class="line">                pos=ch[pos][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x=MKN(),mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ch[x][<span class="number">0</span>]=build(l,mid<span class="number">-1</span>,x),ch[x][<span class="number">1</span>]=build(mid+<span class="number">1</span>,r,x);</span><br><span class="line">        val[x]=date[mid],fa[x]=f,pushup(x);</span><br><span class="line">        <span class="keyword">return</span> x;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">trashcan_node</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">        trash[++top]=x,trashcan_node(ch[x][<span class="number">0</span>]),trashcan_node(ch[x][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span>&amp;l,<span class="keyword">int</span>&amp;r,<span class="keyword">int</span> pos,<span class="keyword">int</span> tot)</span> </span>&#123;</span><br><span class="line">        l=kth(pos),r=kth(pos+tot+<span class="number">1</span>);splay(l),splay(r,l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,l,r;</span><br><span class="line">        IN(pos),IN(tot);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) IN(date[i]);</span><br><span class="line">        split(l,r,pos+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        ch[r][<span class="number">0</span>]=build(<span class="number">1</span>,tot,r),pushup(r),pushup(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,l,r;</span><br><span class="line">        IN(pos),IN(tot),split(l,r,pos,tot);</span><br><span class="line">        trashcan_node(ch[r][<span class="number">0</span>]),ch[r][<span class="number">0</span>]=<span class="number">0</span>,pushup(r),pushup(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_same</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,c,l,r;</span><br><span class="line">        IN(pos),IN(tot),IN(c),split(l,r,pos,tot);</span><br><span class="line">        <span class="keyword">int</span> p=ch[r][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(p) &#123;</span><br><span class="line">            val[p]=tag[p]=c,sum[p]=c*sz[p];</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="number">0</span>) lmax[p]=rmax[p]=smax[p]=sum[p];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c&lt;<span class="number">0</span>) lmax[p]=rmax[p]=<span class="number">0</span>,smax[p]=c;</span><br><span class="line">        &#125;pushup(r),pushup(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_rev</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,l,r;</span><br><span class="line">        IN(pos),IN(tot),split(l,r,pos,tot);</span><br><span class="line">        <span class="keyword">if</span>(ch[r][<span class="number">0</span>]) &#123;</span><br><span class="line">            swap(ch[ch[r][<span class="number">0</span>]][<span class="number">0</span>],ch[ch[r][<span class="number">0</span>]][<span class="number">1</span>]);</span><br><span class="line">            swap(lmax[ch[r][<span class="number">0</span>]],rmax[ch[r][<span class="number">0</span>]]);</span><br><span class="line">            rev[ch[r][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line">        &#125;pushup(r),pushup(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,l,r;</span><br><span class="line">        IN(pos),IN(tot),split(l,r,pos,tot);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum[ch[r][<span class="number">0</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=kth(<span class="number">1</span>),r=kth(sz[root]);splay(l),splay(r,l);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,smax[ch[r][<span class="number">0</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("testdata.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("myout.out","w",stdout);</span></span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(T.date[i+<span class="number">1</span>]);</span><br><span class="line">    T.smax[<span class="number">0</span>]=T.date[<span class="number">1</span>]=-inf,T.date[n+<span class="number">2</span>]=inf;</span><br><span class="line">    T.root=T.build(<span class="number">1</span>,n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'M'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(op[<span class="number">3</span>]==<span class="string">'E'</span>) T.work_same();</span><br><span class="line">            <span class="keyword">else</span> T.work_max();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'I'</span>) T.work_insert();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'D'</span>) T.work_delete();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'R'</span>) T.work_rev();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'G'</span>) T.work_sum();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哎离 $HNOI2019$ 不远了，感觉多多更博增加 $RP$ …… $QwQ$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 虚树入门</title>
      <link href="/2019/04/01/%5B%E7%AE%97%E6%B3%95%5D%E8%99%9A%E6%A0%91/"/>
      <url>/2019/04/01/%5B%E7%AE%97%E6%B3%95%5D%E8%99%9A%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>虚树一般用于优化树形 $DP$ ，通常的关键词有”关键点”等。如果关键点的个数非常少，直接树形 $DP$ 无疑是处理了很多没有用的点，浪费时间。这个时候我们用虚树来优化，可以大大增加效率。</p><p>虚树的主要思想就是，只保留这些关键点以及这些关键点的 $lca$ ，那么虚树中的这些点都是有用的，直接在虚树上 $DP$ 就好了。</p><a id="more"></a><p>下面给出几个虚树的例子(其中红色的为关键点) ：</p><p><img src="/2019/04/01/[算法]虚树/A.png" alt=""></p><p><img src="/2019/04/01/[算法]虚树/B.png" alt=""></p><p><img src="/2019/04/01/[算法]虚树/C.png" alt=""></p><p>不过要注意的一点就是，如果我们一个一个去求 $lca$ ，那么复杂度就会变成 $O(k^2logn)$ (其中 $k$ 为关键点数) 。这个复杂度我们承受不了，我们需要一个更加高级的计算方式。</p><p>我们使用单调栈，单调的是结点 $dfn$ 时间戳。我们使用单调栈维护原点上的一条链。</p><p>假设，现在我们的单调栈维护的是原树中的这一条链(蓝色)：</p><p><img src="/2019/04/01/[算法]虚树/D.png" alt=""></p><p>然后这条链上的两个关键点(红色)显然已经被处理过了，我们下一个需要处理的将是这个点：</p><p><img src="/2019/04/01/[算法]虚树/E.png" alt=""></p><p>没错吧？按照时间戳排序后的顺序来依次处理这些关键点。</p><p>然后当前的栈顶显然是最下面的那个关键点，我们很简单的可以发现，当前要处理的关键点和栈顶点不在一条链上——这意味着我们需要退栈，换一条维护的链！</p><p>我们先求出栈顶点和当前要处理的关键点的 $lca$ ，也就是上面的那个关键点。显而易见，我们可以先从栈顶逐次弹出节点直到当前栈顶是 $lca$ ，然后将当前要处理的关键点入栈。</p><p>当然我们的虚树也是要连边的，对于那些要弹出的节点直接依次连边就好了。</p><p>所以当前维护的链变成了这样：</p><p><img src="/2019/04/01/[算法]虚树/F.png" alt=""></p><p>但是实际情况可能会糟糕一些。比如说栈顶点和当前要处理的关键点的 $lca$ 不在栈中，这个时候我们还需要将其加入栈中。</p><p>先举个例子吧，比方说我们需要对下面的树建造虚树：</p><p><img src="/2019/04/01/[算法]虚树/G.png" alt=""></p><ul><li>首先，输入数据给我们的关键点分别为：$5,7,10,8$</li><li>然后我们按照 $dfn$ 排个序，排完序后显然变为了：$7,8,5,10$</li><li>然后我们先将根节点($1$)入队。</li><li>第一个需要处理的关键点为 $7$ ，发现当前需要处理的关键点($7$)和栈顶结点($1$)的 $lca$ 为 $1$ ，也就说明了 $1,7$ 在同一条链上，直接将 $7$ 入栈即可。此时的栈为：$1,7$</li><li>然后看到下一个需要处理的关键点($8$) ，这个时候栈顶结点($7$)和当前需要处理的关键点($8$) 的 $lca$ 不是栈顶结点，这说明不在一条链上了，于是我们连边 ($4,7$) ，然后将 $4$ 和 $7$ 入栈。</li><li>为什么要将 $4$ 入栈呢？我们发现判断的时候栈顶$-1$的结点是 $1$ ，$1$ 的 $dfn$ 是大于 $4$ 的，这说明 $4$ 没出现过，我们的虚树要有所有关键点的 $lca$ ，于是将 $4$ 入栈。</li><li>接下来看到 $5​$ ，发现又不在一条链上了，这个时候我们还发现 $2​$ 也没有算过，所以我们连完 $(4,8),(2,4)​$ 两条边并弹出两个结点后我们还需要将 $2​$ 入栈，然后再将 $5​$ 入栈。</li><li>下一个点是 $10$ ，我们发现又不在一条链上了于是我们沿着 $2,5$ 退栈，发现 $lca(5,10)$ 就是 $1$ ，也就是弹出 $2,5$ 后的栈顶结点。既然在栈中发现了 $lca$ 我们就没必要将 $lca$ 入栈了。这个时候直接将 $10$ 入栈。</li><li>发现没有关键点了，我们逐次退栈，由于栈维护的结点是在同一条链上的，我们直接连边就好。 </li></ul><p>所以，最后我们建成的虚树如下：</p><p><img src="/2019/04/01/[算法]虚树/H.png" alt=""></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;<span class="comment">//建造虚树,k:关键点个数</span></span><br><span class="line">    sort(point+<span class="number">1</span>,point+<span class="number">1</span>+k,cmp);<span class="comment">//关键点按照时间戳排好序</span></span><br><span class="line">    <span class="built_in">stack</span>[top=<span class="number">1</span>]=<span class="number">1</span>,<span class="comment">//根节点入栈</span></span><br><span class="line">    G.cnt=<span class="number">0</span>,G.head[<span class="number">1</span>]=<span class="number">-1</span>;<span class="comment">//初始化</span></span><br><span class="line">    <span class="comment">/*枚举每一个关键点，依次处理*/</span></span><br><span class="line">    <span class="comment">/*这里判断的原因是为了防止1重复计算*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i) <span class="keyword">if</span>(point[i]!=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/*获取当前要处理的关键点与栈顶结点的lca*/</span></span><br><span class="line">        <span class="keyword">int</span> l=lca(<span class="built_in">stack</span>[top],point[i]);</span><br><span class="line">        <span class="comment">/*发现不在同一条链上了，需要换链*/</span></span><br><span class="line">        <span class="keyword">if</span>(l!=<span class="built_in">stack</span>[top]) &#123;</span><br><span class="line">            <span class="keyword">while</span>(id[l]&lt;id[<span class="built_in">stack</span>[top<span class="number">-1</span>]]) &#123;<span class="comment">//弹出lca下面的结点</span></span><br><span class="line">                G.add(<span class="built_in">stack</span>[top<span class="number">-1</span>],<span class="built_in">stack</span>[top]);<span class="comment">//顺带连边</span></span><br><span class="line">                --top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(id[l]&gt;id[<span class="built_in">stack</span>[top<span class="number">-1</span>]]) &#123;<span class="comment">//发现lca并没有访问过</span></span><br><span class="line">                G.head[l]=<span class="number">-1</span>;<span class="comment">//初始化</span></span><br><span class="line">                <span class="comment">/*丢掉依旧在lca下面的栈顶结点并将lca入栈*/</span></span><br><span class="line">                G.add(l,<span class="built_in">stack</span>[top]),<span class="built_in">stack</span>[top]=l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                G.add(l,<span class="built_in">stack</span>[top]),--top;<span class="comment">//直接入栈就好了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        G.head[point[i]]=<span class="number">-1</span>,<span class="built_in">stack</span>[++top]=point[i];<span class="comment">//将当前关键点入栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;top;++i)<span class="comment">//对于最后栈中剩余的元素依次连边</span></span><br><span class="line">    G.add(<span class="built_in">stack</span>[i],<span class="built_in">stack</span>[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来一道例题吧。</p><h3 id="SDOI2011-消耗战"><a href="#SDOI2011-消耗战" class="headerlink" title="[SDOI2011]消耗战"></a>[SDOI2011]消耗战</h3><p><a href="https://monlights.github.io/2019/03/31/[%E9%A2%98%E8%A7%A3]luoguP2495/">题解戳我(≧ω≦)/！</a></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 虚树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HAOI2012]高速公路  线段树  luoguP2221</title>
      <link href="/2019/03/31/%5B%E9%A2%98%E8%A7%A3%5DluoguP2221/"/>
      <url>/2019/03/31/%5B%E9%A2%98%E8%A7%A3%5DluoguP2221/</url>
      
        <content type="html"><![CDATA[<p>$3$ 月份的最后一篇题解了呢……明天就属于 $4$ 月了，离省选不远了…$QwQ$…</p><p>发现窝真的很制杖，我们先来聊聊刚开始窝的想法。</p><p>我画了画图，然后发现，对于最后答案的分母(不是最简)，是这个序列中这些数的值(废话)，然后发现了每个点的出现次数，然后线段树维护求和。发现效率很低于是试图将出现次数般到二维平面上，然后曼哈顿距离转切比雪夫距离然后二维树状数组维护然后 $WA$ 了然后弃疗。</p><a id="more"></a><p><del>你可能认为窝很傻对吧？</del></p><p>嗯对窝是挺傻的。</p><p>正解是线段树，没猜错，<del>但是和什么二维树状数组有什么关系</del></p><p>我们考虑区间中的一个点 $i$ ，权值为 $v_i$ 。然后我们观察当前询问区间中有多少子区间包含了 $v_i$ ，这个个数就是点 $i$ 做出的贡献。现在我们来考虑怎么计算这个包含了 $i$ 的子区间个数。</p><p>可以发现，我们从 $i$ 向左扩展若干个点，然后又向右扩展若干个点，这样子一来就成了一个包含了 $i$ 子区间。这个就很好计算了，答案显然为 $(i-l)\times(r-i)$ 。然后还要算进没有向左/右扩展的情况，并且算上权值，最终 $i$ 造成的贡献显然为：</p><script type="math/tex; mode=display">v_i\times(i-l+1)\times (r-i+1)</script><p>那么我们将式子拆开可以得到：</p><script type="math/tex; mode=display">v_i\times [i\times (r-i+1)-l\times(r-i+1)+(r-i+1)]</script><script type="math/tex; mode=display">v_i\times [i\times r-i\times i+i-l\times r+l\times i-l+r-i+1]</script><script type="math/tex; mode=display">v_i\times [i(r+l)-i^2-lr-l+r+1]</script><script type="math/tex; mode=display">v_i i(r+l)-v_ii^2-v_ilr+v_i(r-l)+v_i</script><p>其中 $l,r$ 为当前询问区间，这个是可以直接算出的。我们发现我们需要维护的就是 $v_i\ ,\ v_ii\ ,\ v_ii^2$  三个值，用线段树维护即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OI &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; _<span class="function">Tp <span class="title">gcd</span><span class="params">(_Tp x,_Tp y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y?gcd(y,x%y):x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> OI;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> &#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> LS(x) ((x)&lt;&lt;1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> RS(x) ((x)&lt;&lt;1|1)</span></span><br><span class="line"></span><br><span class="line">    ll ans1,ans2,ans3;</span><br><span class="line">    ll sum1[N&lt;&lt;<span class="number">2</span>],sum2[N&lt;&lt;<span class="number">2</span>],sum3[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    ll tag[N&lt;&lt;<span class="number">2</span>],suq[N&lt;&lt;<span class="number">2</span>],rle[N&lt;&lt;<span class="number">2</span>],len[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll x,ll l,ll r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">            len[x]=<span class="number">1</span>,suq[x]=l,rle[x]=l*l;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        build(LS(x),l,mid),build(RS(x),mid+<span class="number">1</span>,r);</span><br><span class="line">        len[x]=len[LS(x)]+len[RS(x)];</span><br><span class="line">        suq[x]=suq[LS(x)]+suq[RS(x)],</span><br><span class="line">        rle[x]=rle[LS(x)]+rle[RS(x)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(ll x,ll l,ll r)</span> </span>&#123;</span><br><span class="line">        ll k=tag[x];tag[x]=<span class="number">0</span>;</span><br><span class="line">        sum1[LS(x)]+=len[LS(x)]*k,sum1[RS(x)]+=len[RS(x)]*k;</span><br><span class="line">        sum2[LS(x)]+=suq[LS(x)]*k,sum2[RS(x)]+=suq[RS(x)]*k;</span><br><span class="line">        sum3[LS(x)]+=rle[LS(x)]*k,sum3[RS(x)]+=rle[RS(x)]*k;</span><br><span class="line">        tag[LS(x)]+=k,tag[RS(x)]+=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x,ll l,ll r,ll L,ll R,ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">            tag[x]+=v;</span><br><span class="line">            sum1[x]+=len[x]*v;</span><br><span class="line">            sum2[x]+=suq[x]*v;</span><br><span class="line">            sum3[x]+=rle[x]*v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tag[x])pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)update(LS(x),l,mid,L,R,v);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)update(RS(x),mid+<span class="number">1</span>,r,L,R,v);</span><br><span class="line">        sum1[x]=sum1[LS(x)]+sum1[RS(x)];</span><br><span class="line">        sum2[x]=sum2[LS(x)]+sum2[RS(x)];</span><br><span class="line">        sum3[x]=sum3[LS(x)]+sum3[RS(x)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(ll x,ll l,ll r,ll L,ll R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">            ans1+=sum1[x],ans2+=sum2[x],ans3+=sum3[x];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tag[x])pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)query(LS(x),l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)query(RS(x),mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    T.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">        ll l,r;IN(l),IN(r);--r;</span><br><span class="line">        ll v;</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'C'</span>) IN(v),T.update(<span class="number">1</span>,<span class="number">1</span>,n,l,r,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'Q'</span>) &#123;</span><br><span class="line">            T.ans1=T.ans2=T.ans3=<span class="number">0</span>;</span><br><span class="line">            T.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line">            ll res1=T.ans1,res2=T.ans2,res3=T.ans3;</span><br><span class="line">            ll ans=(r-l+<span class="number">1</span>-l*r)*res1+(r+l)*res2-res3;</span><br><span class="line">            ll len=(r-l+<span class="number">1</span>)*(r-l+<span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line">            ll esw=gcd(ans,len);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>,ans/esw,len/esw);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2011]消耗战  虚树+树形DP  luoguP2495</title>
      <link href="/2019/03/31/%5B%E9%A2%98%E8%A7%A3%5DluoguP2495/"/>
      <url>/2019/03/31/%5B%E9%A2%98%E8%A7%A3%5DluoguP2495/</url>
      
        <content type="html"><![CDATA[<p>去 $Mina!$ 上了解了一波虚树，$\%\%\% XZY$ 学长太强辣！</p><p>这次总算明白了些虚树，然后 $XZY$ 大佬的例题就是消耗战。</p><p>于是看了过来。</p><a id="more"></a><p>首先，考虑普通的树形 $DP​$ ，设 $dp[u]​$ 表示<strong>在 $u​$ 为根的子树中满足目标所花费的最小代价</strong> ，那么转移方程也不是很难，我们枚举 $u​$ 的孩子 $v​$ 。如果 $v​$ 本身就是”能源丰富的岛屿”那么 $dp[u]+=G[i].val​$ ，其中 $G[i].val​$ 表示 $u​$ 到 $v​$ 的边的边权。为什么这样转移呢？因为 $v​$ 必须切断。</p><p>那么没有必要切断的岛屿呢？就分切/不切两种情况了：</p><script type="math/tex; mode=display">dp[u]+=min(G.val[i],dp[G.to[i]]);</script><p>这个也很好懂。</p><p>这个时候我们打完代码交一发发现只有 $40$ 分……往下看，可以看到 $n$ 到最后的顶尖数据有 $250000$ ……</p><p>但是我们可以观察到，$\sum k_i \leq 5*10^5$ ，发现总共的 $k$ 也不过这么大，这个时候我们可以用虚树来解决。</p><p>$Qiuly$ ：有关虚树的文章先咕一下蛤，最近有点忙。</p><p>建好虚树后直接用上面的转移方程做就得了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2.5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> head[N],nxt[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>],val[N&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));cnt=<span class="number">0</span>;&#125;</span><br><span class="line">    graph() &#123;init();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        nxt[cnt]=head[u],to[cnt]=v,val[cnt]=w,head[u]=cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,point[N],<span class="built_in">stack</span>[N],top;</span><br><span class="line">ll dp[N];<span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCA &#123;</span><br><span class="line">    <span class="keyword">int</span> dep[N],fa[N][LogN+<span class="number">3</span>],num[N][LogN+<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> id[N],dfn,Edge_Mx;</span><br><span class="line">    <span class="keyword">void</span> _Pre_Lca(<span class="keyword">int</span> u,<span class="keyword">int</span> f) &#123;</span><br><span class="line">        fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>,id[u]=++dfn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) &#123;</span><br><span class="line">            fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">            num[u][i]=min(num[u][i<span class="number">-1</span>],num[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=G.head[u];~i;i=G.nxt[i]) </span><br><span class="line">            <span class="keyword">if</span>(G.to[i]!=f)num[G.to[i]][<span class="number">0</span>]=G.val[i],_Pre_Lca(G.to[i],u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Edge_Mx=inf;</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            <span class="keyword">if</span>(dep[fa[x][i]]&gt;=dep[y])</span><br><span class="line">                Edge_Mx=min(Edge_Mx,num[x][i]),x=fa[x][i];</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            <span class="keyword">if</span>(fa[x][i]!=fa[y][i])</span><br><span class="line">                Edge_Mx=min(Edge_Mx,min(num[x][i],num[y][i])),</span><br><span class="line">                x=fa[x][i],y=fa[y][i];</span><br><span class="line">        <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> LCA;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> id[x]&lt;id[y];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="comment">//DP过程</span></span><br><span class="line">    dp[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=G.head[u];~i;i=G.nxt[i]) &#123;</span><br><span class="line">        solve(G.to[i]);</span><br><span class="line">        <span class="keyword">if</span>(vis[G.to[i]])dp[u]+=G.val[i];</span><br><span class="line">        <span class="keyword">else</span> dp[u]+=min((ll)G.val[i],dp[G.to[i]]);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;<span class="comment">//建立虚树</span></span><br><span class="line">    sort(point+<span class="number">1</span>,point+<span class="number">1</span>+k,cmp);</span><br><span class="line">    <span class="built_in">stack</span>[top=<span class="number">1</span>]=<span class="number">1</span>,G.cnt=<span class="number">0</span>,G.head[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i) <span class="keyword">if</span>(point[i]!=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> l=lca(<span class="built_in">stack</span>[top],point[i]);</span><br><span class="line">        <span class="keyword">if</span>(l!=<span class="built_in">stack</span>[top]) &#123;</span><br><span class="line">            <span class="keyword">while</span>(id[l]&lt;id[<span class="built_in">stack</span>[top<span class="number">-1</span>]]) &#123;</span><br><span class="line">                lca(<span class="built_in">stack</span>[top<span class="number">-1</span>],<span class="built_in">stack</span>[top]);</span><br><span class="line">                G.add(<span class="built_in">stack</span>[top<span class="number">-1</span>],<span class="built_in">stack</span>[top],Edge_Mx);</span><br><span class="line">                --top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(id[l]&gt;id[<span class="built_in">stack</span>[top<span class="number">-1</span>]]) &#123;</span><br><span class="line">                G.head[l]=<span class="number">-1</span>,lca(l,<span class="built_in">stack</span>[top]);</span><br><span class="line">                G.add(l,<span class="built_in">stack</span>[top],Edge_Mx),<span class="built_in">stack</span>[top]=l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> lca(l,<span class="built_in">stack</span>[top]),G.add(l,<span class="built_in">stack</span>[top],Edge_Mx),--top;</span><br><span class="line">        &#125;</span><br><span class="line">        G.head[point[i]]=<span class="number">-1</span>,<span class="built_in">stack</span>[++top]=point[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;top;++i)</span><br><span class="line">        lca(<span class="built_in">stack</span>[i],<span class="built_in">stack</span>[i+<span class="number">1</span>]),G.add(<span class="built_in">stack</span>[i],<span class="built_in">stack</span>[i+<span class="number">1</span>],Edge_Mx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;IN(u),IN(v),IN(w);</span><br><span class="line">        G.add(u,v,w),G.add(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    _Pre_Lca(<span class="number">1</span>,<span class="number">0</span>),IN(m);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k;IN(k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)IN(point[i]),vis[point[i]]=<span class="literal">true</span>;</span><br><span class="line">        build(k);</span><br><span class="line">        solve(<span class="number">1</span>),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)vis[point[i]]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚树 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  [CQOI2011]动态逆序对  CDQ分治  luoguP3157</title>
      <link href="/2019/03/30/%5B%E9%A2%98%E8%A7%A3%5DluoguP3157/"/>
      <url>/2019/03/30/%5B%E9%A2%98%E8%A7%A3%5DluoguP3157/</url>
      
        <content type="html"><![CDATA[<p>一个可爱的 $CDQ$ ，我们将原始序列看成一个一个加入，然后后面的操作就是一个一个删除，这么一个一个操作我们都记下来，然后每个操作记一个 $id$ 表示它将为第几个时间点做出贡献。</p><p>当然对于原始序列的一个一个插入的操作这里的贡献是 $1$ ，删除操作的贡献自然是 $-1$ 。</p><a id="more"></a><p>每个时间点统计答案，最后输出前做一个前缀和然后依次输出就好了。</p><p>这是具体的框架，但是统计 $ans$ 数组具体怎么做呢？</p><p>可以知道对于一个位置 $i$ ，位置上的元素是 $a_i$ 。对于一个 $j$ 满足 $j\leq i$ ，并且 $a_i\leq a_j$ ，而且还要保证 $id_j\leq id_i$ ，那么 $j$ 就可以对 $i$ 做出贡献。这个就是在 $i$ 前面的元素可以做出的贡献。$i$ 后面的元素做出的贡献同理。</p><p>这就是一个很普通的三位偏序了，注意要开 $long\ long$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">0</span>;<span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,cnt,pos[N],a[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span><span class="keyword">int</span> r,v,d,id;&#125;Q[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query a,Query b)</span> </span>&#123;<span class="keyword">return</span> a.d&lt;b.d;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> C[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>&#123;<span class="keyword">for</span>(;x&lt;=n;x+=lowbit(x))C[x]+=v;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">int</span> res=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=lowbit(x))res+=C[x];<span class="keyword">return</span> res;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    CDQ(l,mid),CDQ(mid+<span class="number">1</span>,r);</span><br><span class="line">    sort(Q+l,Q+mid+<span class="number">1</span>,cmp),sort(Q+mid+<span class="number">1</span>,Q+r+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> j=l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=mid&amp;&amp;Q[j].d&lt;=Q[i].d) add(Q[j].v,Q[j].r),++j;</span><br><span class="line">        ans[Q[i].id]+=Q[i].r*(sum(n)-sum(Q[i].v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;j;++i) add(Q[i].v,-Q[i].r);</span><br><span class="line">    j=mid;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&gt;mid;--i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=l&amp;&amp;Q[j].d&gt;=Q[i].d) add(Q[j].v,Q[j].r),--j;</span><br><span class="line">        ans[Q[i].id]+=Q[i].r*sum(Q[i].v<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid;i&gt;j;--i) add(Q[i].v,-Q[i].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(a[i]),pos[a[i]]=i,Q[++cnt]=(Query)&#123;<span class="number">1</span>,a[i],i,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;IN(x);</span><br><span class="line">        Q[++cnt]=(Query)&#123;<span class="number">-1</span>,x,pos[x],i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    CDQ(<span class="number">1</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) ans[i]+=ans[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  [AHOI2013]差异  后缀自动机.SAM  luoguP4248</title>
      <link href="/2019/03/30/%5B%E9%A2%98%E8%A7%A3%5DluoguP4248/"/>
      <url>/2019/03/30/%5B%E9%A2%98%E8%A7%A3%5DluoguP4248/</url>
      
        <content type="html"><![CDATA[<p>刚开始发现 $SA$ 很可做，不过当时没有看范围，心想美滋滋了这个就是 $SA$ 的板子，然后一看范围心就凉了。</p><p>不过可以用 $SAM$ ，我们知道，对于两个串，它们的最长公共子串就是它们在前缀树上的 $Lca$ 。这是显然的，不明白的同学可以康康 $Qiuly$ 酱之前写的 $SAM$ ，可以观察观察图片。</p><a id="more"></a><p>我们观察式子，发现  $\sum_{1\leq i&lt;j\leq n} len(T_i)+len(T_j)$ 是等于 $\frac{(n-1)\times n\times(n+1)}{2}$ 的，这个可以 $O(1)$ 算出。</p><p>那么 $2\times lcp(T_i,T_j)$ 怎么求呢？</p><p>那么对于一个结点 $x$ ，我们依次统计 $x$ 的儿子，并依次更新 $x$ 的 $size$ ，对于一个 $x$ 的儿子 $y$ ，枚举的时候它对答案的贡献显然是 $size[x]\times len[x]\times size[y]$ ，因为 $y$ 的子树中的任意一结点(包括 $y$ ) ，与 $x$ 之前枚举过的所有儿子的子树中的所有结点的 $Lca$ 都是 $x$ 。并且对于一个 $x$ ，它所造成的贡献就是 $Len[x]$ 。 </p><p>最后统计出来的答案再乘上 $2$ 就是后面那个式子啦<code>~\(≧▽≦)/~</code> 。</p><p>不过要注意一点，后缀自动机是会复制结点的，这些复制的结点不属于原串因此不能计算贡献。</p><p>然后就是代码的问题了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> last,cnt;</span><br><span class="line">    <span class="keyword">int</span> ch[N][<span class="number">26</span>],fa[N],len[N],sz[N],hep[N],tot[N];</span><br><span class="line">    SAM() &#123;last=cnt=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=last,np=++cnt;</span><br><span class="line">        last=np,len[np]=len[p]+<span class="number">1</span>,sz[np]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;!ch[p][c]) ch[p][c]=np,p=fa[p];</span><br><span class="line">        <span class="keyword">if</span>(!p)fa[np]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> q=ch[p][c];</span><br><span class="line">            <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>)fa[np]=q;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> nq=++cnt;len[nq]=len[p]+<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(ch[nq],ch[q],<span class="keyword">sizeof</span>(ch[q]));</span><br><span class="line">                fa[nq]=fa[q],fa[q]=fa[np]=nq;</span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;ch[p][c]==q) ch[p][c]=nq,p=fa[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) hep[len[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) hep[i]+=hep[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) tot[hep[len[i]]--]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;--i) &#123;</span><br><span class="line">            <span class="keyword">int</span> node=tot[i];</span><br><span class="line">            res+=(ll)sz[fa[node]]*sz[node]*len[fa[node]];</span><br><span class="line">            sz[fa[node]]+=sz[node];</span><br><span class="line">        &#125;<span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)T.ins(s[i]-<span class="string">'a'</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ll)(n<span class="number">-1</span>)*n*(n+<span class="number">1</span>)/<span class="number">2</span><span class="number">-2</span>*T.calc());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 后缀自动机.SAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2013]森林  主席树+启发式合并  luoguP3302</title>
      <link href="/2019/03/29/%5B%E9%A2%98%E8%A7%A3%5DluoguP3302/"/>
      <url>/2019/03/29/%5B%E9%A2%98%E8%A7%A3%5DluoguP3302/</url>
      
        <content type="html"><![CDATA[<p>初看题面，看到 $K$ 大我们可以想到主席树，但是连边却又符合 $LCT$ ，但是毕竟 $LCT$ 是不能支持 $K$ 大的，因为 $Splay$ 辅助树不是二叉查找树。</p><p>不过主席树我们可以大力启发式合并，合并的时候重建节点的倍增数组并且重新建立节点的权值线段树。这样子每个节点要被修改的期望次数为 $logn​$ 次，那么时间复杂度就是 $O(nlog^2n)​$ (貌似是的)，这足以让我们过这道题了。</p><a id="more"></a><h3 id="1-主席树如何上树"><a href="#1-主席树如何上树" class="headerlink" title="1.主席树如何上树"></a>1.主席树如何上树</h3><p>上树[手动滑稽]……</p><p>首先，对于节点 $u$ 的权值线段树，$ta$ 是由 $fa[u]$ 的权值线段树继承过来的，因为只是多了一个 $u$ ，所以主席树只是多增加了 $logn$ 个节点。</p><p>既然是从父亲节点继承过来的话，那么很显然我们可以在预处理倍增数组的时候顺便将主席树建好。</p><h4 id="Code-builld"><a href="#Code-builld" class="headerlink" title="Code-builld:"></a>Code-builld:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    update(root[u],root[f],<span class="number">1</span>,tmp,S(a[u]));</span><br><span class="line">    fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=f) dfs(G[i].to,u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个很容易理解，那么我们怎么暴力合并两颗树呢？</p><p>对于要合并的两颗树，我们选择将 $size$ 小的往 $size$ 大的并，对于给出的 $x,y$ ，我们先给 $x,y$ 连好边，然后将 $y$ 的权值线段树从 $x$ 更新，丢掉以前的。最后遍历 $y$ 的子树，更新其倍增数组和权值线段树即可。</p><p>至于 $size$ 的维护的话，我们可以找到 $x,y$ 所在的树的根。这个样子 $size$ 谁大谁小只需要判断 $x,y$ 所在的树的根的 $size$ 谁大谁小即可。我们在网下遍历 $y$ 的子树时每次都将$x$ 所在树的根的 $size$ 加一即可。</p><h4 id="Code-merge"><a href="#Code-merge" class="headerlink" title="Code-merge:"></a>Code-merge:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*rt:x所在树的根，u:当前需要重构的节点,刚进入函数的时候为y*/</span></span><br><span class="line">    <span class="comment">/*f:当前需要重构的节点的父节点，刚进入函数的时候为x*/</span></span><br><span class="line">    fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>;<span class="comment">//更新深度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">/*更新倍增数组*/</span></span><br><span class="line">    size[rt]++,<span class="comment">//更新size</span></span><br><span class="line">    sta[u]=f,<span class="comment">//记录父亲(不是倍增数组,这是用来查询所在树的根的)</span></span><br><span class="line">    vis[u]=<span class="literal">true</span>;<span class="comment">//记录一下</span></span><br><span class="line">    update(root[u],root[f],<span class="number">1</span>,tmp,S(a[u]));<span class="comment">//重建</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) </span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=f) merge(rt,G[i].to,u);<span class="comment">//遍历子树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后差不多了，至于 $sta$ 的话，因为要查询所在树的根，为了提高效率我们可以将其作为并查集的形式。</p><p>还有一点，对于 $vis$ 数组，实际上我们建树的时候就直接用 $merge$ 好了，$vis$ 只是用来判重而已，因为是森林，有很多树。所以说我们可以不用 $dfs$ 就将初始形态的树建好。</p><h4 id="Code-pre"><a href="#Code-pre" class="headerlink" title="Code-pre:"></a>Code-pre:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="keyword">if</span>(!vis[i]) &#123;merge(i,i,<span class="number">0</span>);sta[i]=i;&#125;</span><br></pre></td></tr></table></figure><p>最后需要注意的就是主席树的空间要开很大，差不多是 $nlog^2n$ ，因为有很多结点。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">8e4</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">22</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> testcase,lastans,n,m,T,a[N],b[N],tmp,head[N],cnt;</span><br><span class="line"><span class="keyword">int</span> size[N],sta[N],vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nxt,to;&#125;G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">S</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+tmp,x)-b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    G[++cnt]=&#123;head[u],v&#125;,head[u]=cnt;</span><br><span class="line">    G[++cnt]=&#123;head[v],u&#125;,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> root[N],tot;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tree</span> &#123;</span><span class="keyword">int</span> l,r,v;&#125;t[N*<span class="number">601</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp;now,<span class="keyword">int</span> last,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        now=++tot,t[now]=t[last],t[now].v++;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid) update(t[now].l,t[last].l,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> update(t[now].r,t[last].r,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> r1,<span class="keyword">int</span> r2,<span class="keyword">int</span> r3,<span class="keyword">int</span> r4,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> th=t[t[r1].l].v+t[t[r2].l].v-t[t[r3].l].v-t[t[r4].l].v;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=th) <span class="keyword">return</span> query(t[r1].l,t[r2].l,t[r3].l,t[r4].l,l,mid,k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(t[r1].r,t[r2].r,t[r3].r,t[r4].r,mid+<span class="number">1</span>,r,k-th);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> mid</span></span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N][LogN+<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;dep[y]) swap(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i];</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];</span><br><span class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    size[rt]++,</span><br><span class="line">    sta[u]=f,</span><br><span class="line">    vis[u]=<span class="literal">true</span>;</span><br><span class="line">    update(root[u],root[f],<span class="number">1</span>,tmp,S(a[u]));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) </span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=f) merge(rt,G[i].to,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="keyword">return</span> u==sta[u]?u:sta[u]=find(sta[u]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(testcase);</span><br><span class="line">    IN(n),IN(m),IN(T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        IN(a[i]),b[i]=a[i],sta[i]=i;</span><br><span class="line">    sort(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(b[i]!=b[i<span class="number">-1</span>])b[++tmp]=b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);add(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) &#123;merge(i,i,<span class="number">0</span>);sta[i]=i;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">2</span>];<span class="keyword">int</span> x,y,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);IN(x),IN(y);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'L'</span>) &#123;</span><br><span class="line">            x^=lastans,y^=lastans;</span><br><span class="line">            add(x,y);</span><br><span class="line">            <span class="keyword">int</span> a=find(x),b=find(y);</span><br><span class="line">            <span class="keyword">if</span>(size[a]&lt;size[b])swap(x,y),swap(a,b);</span><br><span class="line">            merge(a,y,x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            IN(k);</span><br><span class="line">            x^=lastans,y^=lastans,k^=lastans;</span><br><span class="line">            <span class="keyword">int</span> lca_xy=lca(x,y);</span><br><span class="line">            lastans=b[query(root[x],root[y],</span><br><span class="line">                            root[lca_xy],root[fa[lca_xy][<span class="number">0</span>]],<span class="number">1</span>,tmp,k)];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2008]Sandy的卡片  后缀数组.SA  luoguP2463</title>
      <link href="/2019/03/28/%5B%E9%A2%98%E8%A7%A3%5DluoguP2463/"/>
      <url>/2019/03/28/%5B%E9%A2%98%E8%A7%A3%5DluoguP2463/</url>
      
        <content type="html"><![CDATA[<p>后缀数组，我们可以先将所有的卡片连成一个串，每一个卡片数列之间用一个极大数分开保证不出锅。然后的话，对于相同的定义有些鬼，使得我们不能直接做 $SA$ ，这个时候我们将所有的卡片数列的值都转换为当前位置减去上个位置的值即可。</p><a id="more"></a><p>然后就是统计答案，我们二分这个最长公共子序列的长度，每一次去判断是否合法。怎么判断呢？首先对于 $height$ 数组，如果要满足要求的话选取的这一段的 $height$ 数组的值都不能小于当前的 $mid$ ，这是显然的。</p><p>怎么确保我们将所有的卡片数列都选了呢？直接开一个 $vis​$ 数组即可，然后在碰到不合法的地方(也就是 $height[i]​$ 小于了 $mid​$ )全部清空即可。</p><p>最后如何判断当前的 $mid$ 是否合法呢？很显然，只有在所有的卡片数列都成功选择的情况下就合法了。我们用一个栈维护 $vis$ ，清空方便，然后当栈顶为卡片序列数的时候，也就是所有的卡片序列都选择的时候，$mid$ 就合法了。</p><p>然后有个悲催的事情，窝打二分的时候……打成了这样： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid)) ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">    r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，$r$ 前面应该要有 $else$ ，但是窝看了一晚上都没看出来…….</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5e2</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> G=<span class="number">5e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SA &#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,S[N],sa[N],height[N],x[N],y[N],hep[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre_sa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) x[i]=S[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) hep[x[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) hep[i]+=hep[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) sa[hep[x[i]]--]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;m=p,p&lt;n;w&lt;&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">            p=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;++i) y[++p]=n-w+i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(sa[i]&gt;w) y[++p]=sa[i]-w;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i) hep[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) hep[x[i]]++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) hep[i]+=hep[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) sa[hep[x[y[i]]]--]=y[i];</span><br><span class="line">            swap(x,y);</span><br><span class="line">            x[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">                x[sa[i]]=(y[sa[i]]==y[sa[i<span class="number">-1</span>]]&amp;&amp;y[sa[i]+w]==y[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre_height</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)x[sa[i]]=i;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            k-=k&gt;<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> j=sa[x[i]<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">while</span>(j+k&lt;=n&amp;&amp;i+k&lt;=n&amp;&amp;S[j+k]==S[i+k])++k;</span><br><span class="line">            height[x[i]]=k;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> SA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[G],<span class="built_in">stack</span>[G],top;</span><br><span class="line"><span class="keyword">int</span> num,len[G],id[N],a[G][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top) vis[<span class="built_in">stack</span>[top--]]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(height[i]&lt;x) &#123;</span><br><span class="line">            <span class="keyword">while</span>(top) vis[<span class="built_in">stack</span>[top--]]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!vis[id[sa[i]]]) &#123;</span><br><span class="line">            <span class="built_in">stack</span>[++top]=id[sa[i]],vis[id[sa[i]]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(top==num) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(num);</span><br><span class="line">    <span class="keyword">int</span> mx=-inf,mi=inf,l=<span class="number">0</span>,r=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i) &#123;</span><br><span class="line">        IN(len[i]),r=min(r,len[i]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len[i];++j) &#123;</span><br><span class="line">            IN(a[i][j]);</span><br><span class="line">            <span class="keyword">if</span>(j!=<span class="number">1</span>)mx=max(mx,a[i][j]-a[i][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=len[i];++j)</span><br><span class="line">            S[++n]=a[i][j]-a[i][j<span class="number">-1</span>],id[n]=i,mi=min(mi,S[n]);</span><br><span class="line">        S[++n]=++mx;</span><br><span class="line">    &#125;</span><br><span class="line">    m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        S[i]=S[i]-mi+<span class="number">1</span>,m=max(m,S[i]);</span><br><span class="line">    pre_sa(),pre_height();</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后缀数组.SA </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【考试总结】  Test-2019.3.28  HNOI2019模拟</title>
      <link href="/2019/03/28/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190328/"/>
      <url>/2019/03/28/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190328/</url>
      
        <content type="html"><![CDATA[<p>今天的题目貌似暴力分好拿写欸，然而……窝只有 $70$ ？不过排名比昨天上升了什么鬼。</p><p>$QwQ$ 题目的确很难懂，所以窝听了讲解后也没听懂多少，不过还是改出了第一题(第一题是人就改的出好吧o(≧口≦)o)。</p><a id="more"></a><p><a href="https://github.com/monlights/image/blob/master/problem20190328.zip?raw=true" target="_blank" rel="noopener">题目压缩包戳我!!!<code>~\(≧▽≦)/~</code>(有时链接可能会崩，如果崩了的话请稍后尝试QwQ)</a></p><hr><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><blockquote><p>期望得分：30分<br>实际得分：30分<br>正解：找规律??<br>窝的解法：暴力模拟题意</p></blockquote><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>第一眼看到题目，欸，如果按照题面模拟就有 $30$ 分！出题人良心啊。然后看数据范围，$100\%$ 的数据的 $n\leq 3\times10^7$ ，这应该是 $O(n)$ 算法才行啊，于是想，或许是线性 $DP$ ，然后推式子，推出这么一个鬼玩意：</p><script type="math/tex; mode=display">f[i]=f[i-1]+sum(a[i])</script><p>$sum(a[i])$ 就是在 $1$ 到 $i-1$ 中大于 $a[i]$ 的数的个数，然后 $f[i]$ 表示将前 $i$ 个元素进行冒泡需要的交换次数。</p><p>很显然这是错的。</p><p>然后我就想到了 $NOI$ 往年的冒泡排序(貌似是 $NOI$ 的?)，其实两道题没什么联系。</p><p>哎好吧发现过不去直接上暴力吧，题目说什么就做什么，于是把我用来对拍的暴力程序提交了上去，$30$ 分。</p><p>接下来讲讲正解。</p><p>很显然，对于一个元素 $a_i$ ，它所在的位置为 $i$ ，然而最后排好序后 $ta$ 应该回到的位置为 $a_i$ 。观察冒泡过程，发现对于一个元素，每次冒泡排序都最多会将 $ta$ 向自己的目标位置移动一格。</p><p>然后就是，比如说当前序列的最小元素，假设最小元素的起点位置为 $s$ ,我们发现每次冒泡总会将 $ta$ 向前移一格，然后在第 $s-1$ 次冒泡排序的时候 $1$ 归位了。然后发现 $1$ 的移动对 $2$ 的移动次数并没有产生影响，这个时候将 $1$ 删去，发现 $2$ 归位的移动次数变成了 $2$ 的初始位置 $-$ $1$ ，放在原序列中就是 $2$ 的初始位置 $-$ $2$ 。</p><p>这至少说明，对于任意一个元素 $i$ ，其所需要的移动次数为 $i-a_i$ 。</p><p>那么，如果要使序列有序，所需要的排序次数就是 $max\{ i-a_i \}$ 。直接计算答案即可。</p><p>(实际上窝也不是很明白…..貌似是这样的吧 $QwQ$ )</p><h2 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,S,B,C,D,A[<span class="number">10006</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"magician.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"magician.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;n,&amp;S,&amp;B,&amp;C,&amp;D);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        A[i]=i;</span><br><span class="line">        S=(S*B+C)%D;</span><br><span class="line">        swap(A[i],A[(S%i)+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> counter=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)counter=max(counter,i-A[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,counter);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><blockquote><p>期望得分：30分<br>实际得分：0分<br>正解：容斥+搜索+剪枝<br>窝的解法：暴搜</p></blockquote><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>不会………….然后暴搜打挂了没得分。</p><p>所以这不能说是题解，留个坑吧。</p><hr><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><blockquote><p>期望得分：40分<br>实际得分：40分<br>正解：将所有颜色维护成链，然后分块加速<br>窝的解法：直接维护成链</p></blockquote><p>对于一个 $i$ ，如果 $a_i=k$ ，并且 $a_j=k$ ，而且 $i$ 和 $j$ 是离得最近的，则将它们向前向星那样连起来，最后对询问的区间直接暴力跳即可。</p><h2 id="Code：-1"><a href="#Code：-1" class="headerlink" title="Code："></a>Code：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">27</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seq;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hashs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q,a[N],head[N],nxt[N],f[LogN+<span class="number">7</span>][N],logs[N],ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre_st</span><span class="params">()</span></span>&#123;</span><br><span class="line">    logs[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)logs[i]=logs[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)f[<span class="number">0</span>][i]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;LogN;++t)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;t)<span class="number">-1</span>&lt;=n)</span><br><span class="line">                f[t][i]=max(f[t<span class="number">-1</span>][i],f[t<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(t<span class="number">-1</span>))]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=logs[y-x+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> max(f[t][x],f[t][y-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> now=x,last=nxt[x];last&gt;=lim;last=nxt[last]) &#123;</span><br><span class="line">        <span class="keyword">while</span>(now&gt;last&amp;&amp;query(last,now)&gt;a[last]) now=nxt[now];</span><br><span class="line">        ans=max(ans,now-last+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make_hashs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">sort(seq.begin(),seq.end());</span><br><span class="line">    seq.erase(unique(seq.begin(),seq.end()),seq.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;seq.size();++i) hashs[seq[i]]=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=hashs[a[i]];</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"spiral.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"spiral.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    IN(n),IN(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(a[i]),seq.push_back(a[i]);</span><br><span class="line">    make_hashs();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        nxt[i]=head[a[i]],head[a[i]]=i;</span><br><span class="line">    pre_st();</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=y;i&gt;=x;--i) solve(i,x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正解不费………………………………….</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【考试总结】  Test-2019.3.27  HNOI2019模拟</title>
      <link href="/2019/03/27/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190327/"/>
      <url>/2019/03/27/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190327/</url>
      
        <content type="html"><![CDATA[<p>今天全是原题，然而窝几乎都没做过，于是挂了……</p><p>丢人的是考场上组合数的式子 $C[i][j]$=$C[i$-$1][j]$+$C[i$-$1][j$-$1]$ 写成了 $C[i][j]$=$C[i][j$-$1]$+$C[i$-$1][j$-$1]$ ，然后第一题光荣爆 $0​$ ……TAT。</p><p>吸取教训！</p><a id="more"></a><p><a href="https://github.com/monlights/image/blob/master/problem20190327.zip?raw=true" target="_blank" rel="noopener">题目压缩包戳我!!!<code>~\(≧▽≦)/~</code>(有时链接可能会崩，如果崩了的话请稍后尝试QwQ)</a></p><hr><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><blockquote><p>期望得分：100分<br>实际得分：0分<br>正解：Purfer+DP+组合数学<br>窝的解法：Purfer+DP+组合数学</p></blockquote><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><del>十年OI一场空，组合数打错见祖宗。</del></p><p>上面的正解有误，听说 $DP$ 不是正解，不过，$DP$ 复杂度高达 $O(n^4)$  ，本应该 $T$ 的，却仗着小常数不仅 $AC$ ，还爆踩标程？<del>这究竟是道德的沦丧还是人性的扭曲？</del></p><p>不了不了，正经一点。众所周知，有个东西叫 $Purfer$ 序列，对于每一个不同的树，都有不同的 $Purfer$ 序列。所以每个树都可以用其 $Purfer$ 序列来表示，这个树中的每个结点在 $Purfer$ 序列中的出现次数为<strong>其度数减一</strong>。至于$Purfer​$ 序列具体是什么就不赘述了。</p><p>那么 $DP​$ 方程怎么设？</p><p>我们设 $f[i][j][k]$ 表示 <strong>从前 $i$ 个结点中选出 $j$ 个结点，并且这 $j$ 个结点共在原树的 $Purfer$ 序列出现了 $k$ 次的合法 $Purfer$ 序列的数量</strong> 。</p><p>那么转移呢？很显然分为两种情况：</p><ul><li>没选第 $i​$ 个点。</li><li>选了第 $i​$ 个点。</li></ul><p>然后分别进行转移，这就很简单了：</p><ul><li>没选：$f[i][j][k]+=f[i-1][j][k]​$ </li><li>选了：$f[i][j][k]+=f[i-1][j-1][k-d]\times C[k][d]​$</li></ul><p>其中 $d​$ 为我们正在枚举的第 $i​$ 个点的出现次数 $(0​$ ~ $du[i]-1)​$ ，然后就是下面的组合数，就是代表着<strong>在 $k-d​$ 长度的序列中插入 $d​$ 个 $i​$ 的方案数</strong> 。<br>当然也可以这么写：</p><script type="math/tex; mode=display">f[i][j+1][d+k]+=C[d+k][d]\times f[i-1][j][k]​</script><p> 我们知道一棵 $n​$ 个结点的树的 $Purfer​$ 序列的长度是 $n-2​$ 的，所以我们的答案应该就是 $f[n][i][i-2]​$ 。</p><p> 最后，记得随时<del>膜</del>模！</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">57</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> du[N],n,T;</span><br><span class="line">ll C[N][N],f[N][N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">50</span>;++i)&#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%MOD;<span class="comment">//就是这儿!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;du[i]);</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n<span class="number">-2</span>;++k) &#123;</span><br><span class="line">                    f[i][j][k]=(f[i][j][k]+f[i<span class="number">-1</span>][j][k])%MOD;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;du[i]&amp;&amp;d+k&lt;=n<span class="number">-2</span>;++d)</span><br><span class="line">                        f[i][j+<span class="number">1</span>][d+k]=(f[i][j+<span class="number">1</span>][d+k]+C[d+k][d]*f[i<span class="number">-1</span>][j][k]%MOD)%MOD;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,f[n][i][i<span class="number">-2</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><blockquote><p>期望得分：5分<br>实际得分：30分<br>正解：???没发sol……<br>窝的解法：手玩小数据+瞎搞</p></blockquote><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>一看就是懵逼题……但是看到 $30$ 分的数据很小，并且还有菊花图，所以我们来瞎搞吧！刚开始的时候以为前六个点都是菊花图，然后都手玩，到后面才看清，只能说数据太弱了啊。</p><p>正解表示不明白……贴一发考场上的代码：</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"b.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"b.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> x,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(x!=<span class="number">0</span>)flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) &#123;<span class="comment">//菊花图输出瞎搞手玩？</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;k&gt;=<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>&amp;&amp;k&gt;=<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">3</span>&amp;&amp;k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">3</span>&amp;&amp;k&gt;=<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"3\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">4</span>&amp;&amp;k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">4</span>&amp;&amp;k==<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"7\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">4</span>&amp;&amp;k&gt;=<span class="number">2</span>)&#123;<span class="built_in">printf</span>(<span class="string">"10\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">5</span>&amp;&amp;k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">5</span>&amp;&amp;k==<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"13\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//其他情况输出样例？？</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">4</span>)&#123;<span class="built_in">printf</span>(<span class="string">"8\n"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">6</span>)&#123;<span class="built_in">printf</span>(<span class="string">"28\n"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上玩到 $n​$=$5\&amp;\&amp;k​$=$2​$ 的时候我就崩了，玩不下去了。</p><hr><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><blockquote><p>期望得分：0分<br>实际得分：0分<br>正解：最小割<br>窝的解法：没做….</p></blockquote><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>真的看不出来是最小割啊 $QwQ$ ，以为是数论题，还看到质因子了感觉就更不像最小割了……但是在想题目的时候最小割的确出现在了我的脑海中，但是一闪就过了……</p><p>一个有趣的事情：考试期间高二机房神仙一度怀疑此题为数论题，这个时候 $chl$神仙 和另一位 $Dalao$ 走了出去，站在门外讨论此题中的”物理”，说什么重心和”物理”有关因此此题不可做，然后树王神仙表示不懂”物理”中的”重心”准备弃疗，然而最终树王神仙还是选择了网络流……</p><p>好吧不扯淡了，我们来讨论一下这题的粗略解法。</p><p>可以发现题目给出了一个限制：$N$ 最多有两个质因子。这个限制有什么用呢？</p><p>对于一个有 $N$ 个扇叶的风扇，我们考虑平衡的并且独立扇叶只有一个的风扇：</p><p><img src="/2019/03/27/[考试总结]test20190327/A.png" alt=""></p><p>左边的就是有 $(N=8)$ 个扇叶的风扇，右边的呢就是在 $8$ 个扇叶中有 $2$ 个扇叶的风扇 ($(A_1,D_1,F_1),$$(A_1,H_1,B_1)$)，可以知道这个 $2$ 个扇叶的风扇是一定平衡的，因为 $2$ 是 $8$ 的因子。</p><p>可以知道，对于 $8$ 的其他因子(例如 $4$ )是可以被质因子 $2$ 组成的，因此也是平衡的风扇。</p><p>那么对于两个不同的质因子，可以组成两个不同样式的且平衡的 $N$ 个扇叶的风扇的子风扇。</p><p>当然还有位置不同，对于上图中 $2$ 个扇叶的子风扇根据不同的位置有很多个：</p><p><img src="/2019/03/27/[考试总结]test20190327/B.png" alt=""></p><p>这个时候我们的问题就可以转化如下了：</p><blockquote><p>有两种类型的风扇 $p,q$ ，风扇类型等于 $2$ 的样子如上图，现在我们需要用这两种风扇<strong>无重叠</strong>的覆盖尽可能多的剩下的残缺扇叶。</p></blockquote><p>这个时候考虑建图，我们从 $S$ 向所有不同位置的 $p$ 类风扇连一条边，边权为 $p$ ，表示选择了这个风扇可以多覆盖一共 $p$ 个扇叶。所有不同位置的 $q$ 类风扇向 $T$ 连边，边权为 $q$ ，和上面同理。</p><p>然后这个时候的最小割是什么呢？对于一个起点为 $x$ 的 $p$ 类风扇，我们将 $S$ 连向Ta的边切断，表示不使用起点为 $x$ 的 $p$ 类风扇，$q$ 类风扇同理。当然是不使用的风扇越少越好，剩下的可用的风扇当然是越多越好，所以成了最小割。</p><p>那么怎么表示<strong>无重叠</strong>呢？</p><p>可以知道同类风扇是不可能重叠的，我们考虑异类风扇。我们对于一个 $p$ 类风扇和一个 $q$ 类风扇，如果其重叠了，那么只能选择其中一个，于是我们在这两个风扇间连一条边，边权为 $inf$ ，这个时候跑最大流的时候必定有流经过此地，也就是说这两个风扇必然要割掉一个才行。</p><p>所以什么事情都解决了，就差代码了。</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">2e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic &#123;<span class="comment">//Dinic板子封装</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Que;</span><br><span class="line">    <span class="keyword">int</span> s,t,sum,head[N&lt;&lt;<span class="number">1</span>],cnt=<span class="number">1</span>,dep[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        G[++cnt]=&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">        G[++cnt]=&#123;head[v],u,<span class="number">0</span>&#125;,head[v]=cnt;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s]=<span class="number">1</span>,Que.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!Que.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u=Que.front(),v;Que.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">                <span class="keyword">if</span>(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                    dep[v]=dep[u]+<span class="number">1</span>,Que.push(v);</span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flow||u==t) <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow,v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(dep[v=G[i].to]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!used) dep[u]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(bfs()) sum-=dfs(s,inf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"><span class="keyword">int</span> n,m,p,q,point,bock[N],vis[N],fan[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/p;++i) <span class="keyword">if</span>(!bock[i]) &#123;<span class="comment">//起点扇叶没有损坏</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/p) <span class="keyword">if</span>(bock[j]) <span class="keyword">goto</span> end1;</span><br><span class="line">        <span class="comment">//枚举每个扇叶，如果损坏的那么该风扇就不合法</span></span><br><span class="line">        ++point,add(s,point,p),sum+=p;<span class="comment">//连边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/p) fan[j]=point;<span class="comment">//标记</span></span><br><span class="line">        end1:;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/q;++i) <span class="keyword">if</span>(!bock[i]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/q) <span class="keyword">if</span>(bock[j]) <span class="keyword">goto</span> end2;</span><br><span class="line">        ++point,add(point,t,q),sum+=q;<span class="comment">//连边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/q) vis[fan[j]]=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//清理标记，防止有风扇被连两次边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/q)</span><br><span class="line">            <span class="keyword">if</span>(fan[j]&amp;&amp;!vis[fan[j]]) </span><br><span class="line">                vis[fan[j]]=<span class="literal">true</span>,add(fan[j],point,inf);<span class="comment">//连边</span></span><br><span class="line">        end2:;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(m);s=<span class="number">0</span>,t=N<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;<span class="keyword">int</span> x;IN(x),bock[x]=<span class="literal">true</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> copy=n,sqr=<span class="built_in">sqrt</span>(n),first=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sqr;++i) &#123;<span class="comment">/*寻找两个质因子p和q*/</span></span><br><span class="line">        <span class="keyword">if</span>(!(n%i)&amp;&amp;!first) &#123;</span><br><span class="line">            first=<span class="literal">true</span>,p=i;</span><br><span class="line">            <span class="keyword">while</span>(!(n%p))n/=p;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!(n%i)) &#123;</span><br><span class="line">            q=i;</span><br><span class="line">            <span class="keyword">while</span>(!(n%q))n/=q;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>)q=n;n=copy;</span><br><span class="line">    pre(),dinic();</span><br><span class="line">    <span class="keyword">if</span>(!sum)<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-m-sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 「网络流24题」最长不下降子序列问题  网络流  luoguP2766</title>
      <link href="/2019/03/26/%5B%E9%A2%98%E8%A7%A3%5DluoguP2766/"/>
      <url>/2019/03/26/%5B%E9%A2%98%E8%A7%A3%5DluoguP2766/</url>
      
        <content type="html"><![CDATA[<p>第一问显然是一个很简单的 $DP$ ，但是第二问和第三问就要用最大流来求了，怎么求呢？</p><p>首先我们 $DP$ 出来的 $f$ 数组，$f[i]$ 表示<strong>以i结尾的最长不下降子序列的长度</strong> ，然后就是网络流的连边了。首先因为一个点只能经过两次，我们需要将其拆为入点和出点，中间连的边的边权自然是 $1$ ，然后对于一个 $i$ ，如果 $f[i]$ 等于最长长度($s$)，那么很显然这个 $i$ 就可以给答案做出一个贡献，这个时候 $i$ 的出点向 $t$ 连一条边权为 $1$ 边。</p><a id="more"></a><p>如果 $i$ 等于 $1$ ，那么自然 $1$ 是可以作为一个起点的，那么 $s$ 向 $i$ 的入点连一条边权为 $1$ 的边即可。</p><p>然后就是剩下的情况了，可以想到让 $i$ 向 $i$ 能够最优转移的位置连边，也就是说，如果有一个 $j$ ，使得 $f[j]=f[i]+1$ 并且 $a[i]&lt;=a[j]$ ，这个时候如果是在最优方案中 $i$ 是可以转移到 $j$ 的，这个时候从 $i$ 的出点向 $j$ 的入点连一条边，边权依旧是 $1$ 。</p><p>然后我们这个时候跑最大流，就是第二问的答案。</p><p>那么第三问呢？</p><p>很显然，对于 $1$ ，如果它是连向 $s$ 的，则将其连向 $s$ 的边的边权改为 $inf$ ，并将入点连出点的边权改为 $inf$ ，表示可以取无限次。然后 $n$ 如果连向了 $t$ ，也将边权改为 $inf$ ，并将入点连出点的边权改为 $inf$ ，和上面同理。这个时候再跑一次最大流即可，这就是第三问的答案了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5e2</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic &#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">int</span> s,t,head[N],cnt=<span class="number">1</span>,dep[N];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        G[++cnt]=&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">        G[++cnt]=&#123;head[v],u,<span class="number">0</span>&#125;,head[v]=cnt;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s]=<span class="number">1</span>,q.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front(),v;q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">                <span class="keyword">if</span>(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                    dep[v]=dep[u]+<span class="number">1</span>,q.push(v);</span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flow||u==t) <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow,v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(dep[v=G[i].to]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!used) dep[u]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs()) maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"><span class="keyword">int</span> n,l,ans,a[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> type,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type*n+x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n);s=<span class="number">0</span>,t=<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        IN(a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;=a[i]) f[i]=max(f[i],f[j]+<span class="number">1</span>);</span><br><span class="line">        l=max(l,f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);<span class="comment">/*Q1*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        add(id(<span class="number">0</span>,i),id(<span class="number">1</span>,i),<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(f[i]==<span class="number">1</span>) add(s,id(<span class="number">0</span>,i),<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(f[i]==l) add(id(<span class="number">1</span>,i),t,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j) </span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;=a[i]&amp;&amp;f[i]==f[j]+<span class="number">1</span>)add(id(<span class="number">1</span>,j),id(<span class="number">0</span>,i),<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">/*Q2*/</span></span><br><span class="line">    <span class="keyword">if</span>(f[<span class="number">1</span>]==<span class="number">1</span>)add(s,id(<span class="number">0</span>,<span class="number">1</span>),inf),add(id(<span class="number">0</span>,<span class="number">1</span>),id(<span class="number">1</span>,<span class="number">1</span>),inf);</span><br><span class="line">    <span class="keyword">if</span>(f[n]==l)add(id(<span class="number">1</span>,n),t,inf),add(id(<span class="number">0</span>,n),id(<span class="number">1</span>,n),inf);</span><br><span class="line">    ans+=dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">/*Q3*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈K-D Tree&amp;学习笔记</title>
      <link href="/2019/03/26/%5B%E7%AE%97%E6%B3%95%5DKD-Tree/"/>
      <url>/2019/03/26/%5B%E7%AE%97%E6%B3%95%5DKD-Tree/</url>
      
        <content type="html"><![CDATA[<p>又是一个神奇的数据结构……</p><p>$K$-$D \ Tree$ 中 $D$ 是维度($Dimension$)的缩写，所以 $K$-$D \ Tree$ 的实际意思就是 $K$ 维树。当然 $K$-$D \ Tree $ 一般用于维护二维平面上的信息，所以我们平常用的 $K$-$D\ Tree$  又叫 $2$-$D \ Tree$ 。</p><a id="more"></a><p>假设我们现在有一个二维平面，二维平面上有若干个点 ，现在怎么用 $2​$-$D \ Tree​$ 维护这些点呢？很简单，我们将这些点建成一颗树，最好是一颗二叉搜索树，但是怎么建树呢？我们就来分割这个平面，横着一刀，竖着一刀，每次选取最优的结点当根即可。</p><p>可能很抽象，我们以下图为例，假设我们需要将下图的 $7$ 个点建成二叉搜索树：</p><p><img src="/2019/03/26/[算法]KD-Tree/A.png" alt=""></p><p>首先我们准备竖着切，这个竖着切切哪里呢？我们会发现 $D$ 是最中间的结点，于是我们对着 $D$ 就是一刀，现在的矩阵分割成了两半，那么自然的 $A,B,C$ 就是 $D$ 的左子树中的结点，$E,F,G$ 就是 $D$ 的右子树中的结点。</p><p>然后我们先建 $D$ 的左子树，由于上一次是竖着切的，这一次我们需要横着切。我们递归下去，发现 $A,B,C$ 这一块 $B$ 是最中间的(以横着的视角，因为需要横着切嘛)，那么很显然 $D$ 的左儿子就是 $B$ 了，$A,C$ 分别是 $B$ 的两孩子，由于 $A,C$ 已经在 $B$ 的左右了并且只有一个点了，那么理所当然 $C$ 就是 $B$ 的左孩子，$A$ 就是 $B$ 的右儿子(横着看就好了)。</p><p><img src="/2019/03/26/[算法]KD-Tree/B.png" alt=""></p><p>同样的，我们发现 $G$ 是 $D$ 左边横着切时最合适的结点(因为在横着的视角中 $G$ 是最中间的 )，于是我们将 $D$ 的右儿子定为 $G$ ，同样的，$F,E$ 为 $G$ 的两孩子。</p><p>那么这样子我们的树就建好了。</p><h4 id="Code-build-kdt"><a href="#Code-build-kdt" class="headerlink" title="Code-build-kdt:"></a>Code-build-kdt:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> wd)</span> </span>&#123;<span class="comment">//lr:当前对应的结点区间,wd:当前需要切的方向</span></span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x=new_node(),mid=(l+r)&gt;&gt;<span class="number">1</span>;<span class="comment">//新建结点</span></span><br><span class="line">    WD=wd,nth_element(p+l,p+mid,p+r+<span class="number">1</span>),<span class="comment">//重载了运算符，按照当前切的方向排序</span></span><br><span class="line">    tr[x].tp=p[mid];<span class="comment">//找到最合适切割的最中间的结点</span></span><br><span class="line">    tr[x].l=build(l,mid<span class="number">-1</span>,wd^<span class="number">1</span>);<span class="comment">//建立左子树</span></span><br><span class="line">    tr[x].r=build(mid+<span class="number">1</span>,r,wd^<span class="number">1</span>);<span class="comment">//建立右子树</span></span><br><span class="line">    <span class="keyword">return</span> pushup(x),x;<span class="comment">//上传信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是怎么查询呢？实际上查询跟普通的二叉搜索树差不多，按照方位坐标查找即可。</p><p>对于一个结点的信息是这样的：</p><h4 id="Code-node-kdt"><a href="#Code-node-kdt" class="headerlink" title="Code-node-kdt"></a>Code-node-kdt</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mi[<span class="number">2</span>],mx[<span class="number">2</span>],l,r,sz;</span><br><span class="line">    point tp;</span><br><span class="line">&#125;tr[N];</span><br></pre></td></tr></table></figure><p><code>l,r,sz</code> 就是左右儿子以及子树大小，<code>point</code> 显然是该结点代表的二维平面上的点，但是 $mi,mx$ 是干什么的呢？我们用 $mi,mx$ 记录的就是当前结点已经它的子树中的所有节点中，最大/最小的 $x$ 坐标以及最大/最小的 $y$ 坐标。</p><p>这样记录有什么用呢？假设我们将这个看成一个矩形，那么对于一个我们需要搜索的坐标，如果这个需要搜索坐标 已经不属于 $mi,mx$ 围城的矩阵中，那么这个需要搜索的坐标就跟当前子树没关系了，这也就相当于一个剪枝。</p><p>我们的 $pushup$ 上传时就是对 $mi,mx$ 进行更新，所以 $pushup$ 应该这样写：</p><h4 id="Code-pushup-kdt"><a href="#Code-pushup-kdt" class="headerlink" title="Code-pushup-kdt"></a>Code-pushup-kdt</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=tr[x].l,r=tr[x].r;<span class="comment">//简写左右儿子</span></span><br><span class="line">    tr[x].sz=tr[l].sz+tr[r].sz+<span class="number">1</span>;<span class="comment">//更新size</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;++i) &#123;<span class="comment">//枚举方向，节省码量</span></span><br><span class="line">        <span class="comment">/*---------更新mi[x],mx[x]---------*/</span></span><br><span class="line">        tr[x].mi[i]=tr[x].mx[i]=tr[x].tp.x[i];</span><br><span class="line">        <span class="keyword">if</span>(l) &#123;</span><br><span class="line">            tr[x].mi[i]=min(tr[x].mi[i],tr[l].mi[i]);</span><br><span class="line">            tr[x].mx[i]=max(tr[x].mx[i],tr[l].mx[i]);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(r) &#123;</span><br><span class="line">            tr[x].mi[i]=min(tr[x].mi[i],tr[r].mi[i]);</span><br><span class="line">            tr[x].mx[i]=max(tr[x].mx[i],tr[r].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*---------更新mi[x],mx[x]---------*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢，这里不待修改的，那么如果说要兹磁插入节点怎么办？</p><p>需要兹磁插入节点的题目：<a href="https://www.luogu.org/problemnew/show/P4169" target="_blank" rel="noopener">[Violet]天使玩偶/SJY摆棋子</a> </p><p>这道题因为允许离线，我们可以使用 $CDQ​$ ，但是如果强制在线的话就只能用 $K​$-$D \ Tree​$ 了。我们来讨论 $K​$-$D \ Tree​$ 的做法。</p><p>实际上 $K​$-$D \ Tree​$ 插入节点非常简单，就像普通的二叉搜索树那样找个位置插就好了。</p><h4 id="Code-Insert-kdt"><a href="#Code-Insert-kdt" class="headerlink" title="Code-Insert-kdt"></a>Code-Insert-kdt</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(point tmp,<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> wd)</span> </span>&#123;<span class="comment">//tmp:当前需要插入的点,x:当前树中结点,wd:当前切割方向</span></span><br><span class="line">    <span class="keyword">if</span>(!x) &#123;<span class="comment">//找到要插入的位置了</span></span><br><span class="line">        x=new_node();<span class="comment">//新建结点</span></span><br><span class="line">        tr[x].tp=tmp,tr[x].l=tr[x].r=<span class="number">0</span>;</span><br><span class="line">        pushup(x);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].tp.x[wd]&lt;tmp.x[wd]) Insert(tmp,tr[x].r,wd^<span class="number">1</span>);<span class="comment">//应该往右插</span></span><br><span class="line">    <span class="keyword">else</span> Insert(tmp,tr[x].l,wd^<span class="number">1</span>); <span class="comment">//否则往左插</span></span><br><span class="line">    pushup(x);<span class="comment">//更新结点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是呢，你会发现就像一般的二叉搜索树一样，这个插入很容易被卡，卡成一条链，这就很不舒服了。于是我们需要一些平衡树的思想，使得 $K$-$D \ Tree$ 保持平衡。</p><p><strong>“我会 $Splay$ ！我会 无旋$Treap$ ！”</strong></p><p>呸呸呸，今天我们讲的是替罪羊树，跟你俩没关系。</p><p>没错，就是用替罪羊树的思想，将 $K​$-$D \ Tree​$ 拍扁重建。差不多就是 $insert​$ 的时候，在 $insert​$ 的最后 $check​$ 一下子树是否平衡，如果当前结点的子树已经”不平衡”了，那么拍扁该结点以及该结点子树，重建。</p><p>这里的 $\alpha$ 的值一般定为 $0.75$ 左右，但是也不能确定，如果实在要掐得准的话就得看看询问多还是插入多了。不过一般用 $0.75$ 是没问题的。</p><h4 id="Code-check-amp-pia-kdt"><a href="#Code-check-amp-pia-kdt" class="headerlink" title="Code-check&amp;pia-kdt:"></a>Code-check&amp;pia-kdt:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pia</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span> </span>&#123;<span class="comment">//就是拍扁的意思,sto litble orz</span></span><br><span class="line">    <span class="keyword">if</span>(tr[x].l) pia(tr[x].l,num);<span class="comment">//先拍左子树</span></span><br><span class="line">    p[num+tr[tr[x].l].sz+<span class="number">1</span>]=tr[x].tp,trh[++top]=x;<span class="comment">//再拍自己</span></span><br><span class="line">    <span class="keyword">if</span>(tr[x].r) pia(tr[x].r,num+tr[tr[x].l].sz+<span class="number">1</span>);<span class="comment">//然后拍右子树</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> wd)</span> </span>&#123;<span class="comment">//判断x的子树是否满足"平衡",wd记录当前切割方向,建树的时候有用</span></span><br><span class="line">    <span class="keyword">if</span>(alph*tr[x].sz&lt;tr[tr[x].l].sz||alph*tr[x].sz&lt;tr[tr[x].r].sz)<span class="comment">//判断</span></span><br><span class="line">        pia(x,<span class="number">0</span>),x=build(<span class="number">1</span>,tr[x].sz,wd);<span class="comment">//拍扁 and 重新build建树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是应用了，值得注意的是，如果维护的不是点而是矩形，那么有些地方(例如边界，$mi,mx​$ 都要注意)。</p><p>就像这道题：<a href="https://www.luogu.org/problemnew/show/P4631" target="_blank" rel="noopener">[APIO2018] Circle selection 选圆圈</a>，注意一下细节就好。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> K-D Tree </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SCOI2010]股票交易  单调队列优化DP  luoguP2569</title>
      <link href="/2019/03/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP2569/"/>
      <url>/2019/03/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP2569/</url>
      
        <content type="html"><![CDATA[<p>我们一起来推一推。</p><p>设 $f[i][j]$ 表示：<strong>现在是第 $i$ 天，手上拥有的股票数为 $j$ 时赚到的最多的钱 </strong></p><p>我们考虑转移几个方向：空手买，不买不卖，之前买过了现在继续买，买过后需要卖</p><a id="more"></a><h4 id="空手买"><a href="#空手买" class="headerlink" title="空手买"></a>空手买</h4><p>空手买就是第一次买，显然不要考虑 “间隔 $w$ 天” 的限制，直接买就好。</p><p>那么很容易得到转移式：</p><script type="math/tex; mode=display">f[i][j]= - AP_i\times j</script><p>因为是买入，所以是负数。</p><h4 id="不买不卖"><a href="#不买不卖" class="headerlink" title="不买不卖"></a>不买不卖</h4><p>很显然可以直接从 $f[i-1][j]$ 转移过来。</p><p>转移式：</p><script type="math/tex; mode=display">f[i][j]=f[i-1][j]</script><h4 id="之前买过了现在继续买"><a href="#之前买过了现在继续买" class="headerlink" title="之前买过了现在继续买"></a>之前买过了现在继续买</h4><p>很显然这次我们需要考虑 $w$ 的限制了，不过我们可以直接从 $i-w-1$ 天转移。</p><p>假设我们是从 $f[i-w-1][k]$ 转移过来的，那么这次转移我们多买了 $j-k$ 张股票，容易得到转移式：</p><script type="math/tex; mode=display">f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}</script><p>当然因为规定了一天最多买入 $AS_i$ 股，上面的式子必须满足 $j-AS_i\leq k \leq j$</p><h4 id="买过之后需要卖"><a href="#买过之后需要卖" class="headerlink" title="买过之后需要卖"></a>买过之后需要卖</h4><p>同样的有 $w$ 的限制，但是跟上面的第三种情况没什么两样，转移式：</p><script type="math/tex; mode=display">f[i][j]=max\{ f[i-w-1][k] + (k-j)\times BP_i\}</script><p>因为 $BS_i$ 的限制条件，上面的式子必须满足 $j\leq k \leq j+BS_i$</p><h4 id="时间复杂度？"><a href="#时间复杂度？" class="headerlink" title="时间复杂度？"></a>时间复杂度？</h4><p>枚举 $i,j$ 状态就需要 $n^2$ 的复杂度，在这个基础上转移的复杂度为：</p><ul><li><strong>空手买</strong> ： $O(1)$ </li><li><strong>不买不卖</strong> ： $O(1)$</li><li><strong>之前买过了现在继续买</strong> ：$O(n)$ </li><li><strong>买过之后需要卖</strong> ：$O(n)$</li></ul><p>会发现如果加上枚举状态的复杂度，后面两个转移的总复杂度为 $O(n^3)$ ！</p><p>于是考虑优化。</p><p> 我们观察第三个转移式：</p><script type="math/tex; mode=display">f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}</script><p>对于当前的 $i,j$ ，假设有 $a,b$ 作为 $k$ 的两个选项对 $f[i][j]$ 进行转移，我们算一算 $a$ 比 $b$ 优的条件是什么：</p><script type="math/tex; mode=display">f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}</script><script type="math/tex; mode=display">=max\{f[i-w-1][k]+k\times AP_i-j\times AP_i\}</script><p>这里我们会发现 $j\times AP_i$ 跟里面的式子没有任何关系，提出来不会产生仍和影响</p><script type="math/tex; mode=display">=max\{f[i-w-1][k]+k\times AP_i\}-j\times AP_i​</script><p>于是我们发现我们只需要得到最大的 $f[i-w-1][k]+k\times AP_i$ 就好了，这里我们可以用到<strong>单调队列优化DP</strong> 。</p><p>具体代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=MaxP;++j) &#123;<span class="comment">/*枚举所有的合法的j*/</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l]&lt;j-AS) ++l;<span class="comment">/*淘汰掉过期的队头*/</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r&amp;&amp;f[i-W<span class="number">-1</span>][q[r]]+q[r]*AP&lt;=f[i-W<span class="number">-1</span>][j]+j*AP) --r;<span class="comment">/*淘汰掉不如当前决策优的队尾*/</span></span><br><span class="line">    q[++r]=j;<span class="comment">/*当前决策进队*/</span></span><br><span class="line">    <span class="keyword">if</span>(l&lt;=r) f[i][j]=max(f[i][j],f[i-W<span class="number">-1</span>][q[l]]+q[l]*AP-j*AP);<span class="comment">/*转移*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为每一个状态都只进队/出队了一次，所以可以证明时间复杂度现在变为 $O(n^2)$ 了。</p><p>第四个操作一样可以这样优化，可以尝试一下，不贴解释了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e3</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,MaxP,W,AP,BP,AS,BS,l,r;</span><br><span class="line"><span class="keyword">int</span> q[N],f[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">128</span>,<span class="keyword">sizeof</span>(f));<span class="comment">/*赋极小值*/</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;T,&amp;MaxP,&amp;W);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;AP,&amp;BP,&amp;AS,&amp;BS);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=AS;++j) f[i][j]=-AP*j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=MaxP;++j) f[i][j]=max(f[i][j],f[i<span class="number">-1</span>][j]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=W)<span class="keyword">continue</span>;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=MaxP;++j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l]&lt;j-AS) ++l;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;f[i-W<span class="number">-1</span>][q[r]]+q[r]*AP&lt;=f[i-W<span class="number">-1</span>][j]+j*AP) --r;</span><br><span class="line">            q[++r]=j;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;=r) f[i][j]=max(f[i][j],f[i-W<span class="number">-1</span>][q[l]]+q[l]*AP-j*AP);</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=MaxP;j&gt;=<span class="number">0</span>;--j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l]&gt;j+BS) ++l;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;f[i-W<span class="number">-1</span>][q[r]]+q[r]*BP&lt;=f[i-W<span class="number">-1</span>][j]+j*BP) --r;</span><br><span class="line">            q[++r]=j;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;=r) f[i][j]=max(f[i][j],f[i-W<span class="number">-1</span>][q[l]]+q[l]*BP-j*BP);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MaxP;++i)ans=max(ans,f[T][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> DP </tag>
            
            <tag> 单调队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2009]植物大战僵尸  网络流  luoguP2805</title>
      <link href="/2019/03/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP2805/"/>
      <url>/2019/03/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP2805/</url>
      
        <content type="html"><![CDATA[<h4 id="前置芝士：网络流-最大权闭合子图"><a href="#前置芝士：网络流-最大权闭合子图" class="headerlink" title="前置芝士：网络流-最大权闭合子图"></a>前置芝士：网络流-最大权闭合子图</h4><p>定义：对于一个图的子图，当且仅当这个子图中的任意一点都不会与该子图外的点联通时，称这个子图为该图的闭合子图。在该图所有的闭合子图中，点权和最大的那个我们称作<strong>最大权闭合子图</strong>。</p><a id="more"></a><p>那么最大权闭合子图怎么求呢？</p><blockquote><p>对于给出的图，如果要求将 $u,v$ 连一条边，那么从 $u$ 向 $v$ 连一条边权为 $inf$ 的边。</p><p>然后对于每个点如果该点的点权为正，那么从 $s$ 向该点连一条边权为该点点权的边，否则从该点向 $t$ 连一条边权为$-1\times$该点权的边。</p><p>跑最小割，这个时候最大权闭合子图的”最大权”为正点点权和-最小割。</p></blockquote><hr><p>最大权闭合子图跟这一题有什么关系呢？</p><p>可以发现，对于一个植物，僵尸必须先吃掉它右边的植物和保护它的植物才能吃它，那么这个植物就像它右边的植物与保护它的植物连边，这个连好边的图的最大权闭合子图就是答案！</p><p>但是值得注意的一点是，可能存在互相保护的关系，比如说样例中的 $(2,0)$ 保护 $(2,1)$ ，但是 $(2,1)$ 又作为 $(2,0)$ 右边的植物保护 $(2,0)$ ，然后这对关系怎么都是攻不破的，<strong>这是一个环！</strong></p><p>于是我们可以先建好图后拓扑一边，然后再在访问过的点之间连边(该点访问过意味着该点不在环内)，最后再跑最小割即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Score[N],n,m,s,t;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(x,y) (((x)-1)*m+(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic &#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">int</span> head[N],dep[N],cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[v],u,<span class="number">0</span>&#125;,head[v]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s]=<span class="number">1</span>;q.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front(),v;q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">                <span class="keyword">if</span>(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                    dep[v]=dep[u]+<span class="number">1</span>,q.push(v);</span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flow||u==t) <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used)dep[u]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs()) maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Topology &#123;</span><br><span class="line">    <span class="keyword">int</span> vis[N],in[N];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; out[N];</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">topology</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">                <span class="keyword">if</span>(!in[id(i,j)]) </span><br><span class="line">                    q.push(id(i,j)),vis[id(i,j)]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;out[u].size();++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> v=out[u][i];--in[v];</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]&amp;&amp;!in[v]) &#123;vis[v]=<span class="literal">true</span>;q.push(v);&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Topology;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("test.in","r",stdin);</span></span><br><span class="line">    IN(n),IN(m);s=<span class="number">0</span>,t=n*m+<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> tot,x,y;</span><br><span class="line">            IN(Score[id(i,j)]),IN(tot);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=tot;++k) &#123;</span><br><span class="line">                IN(x),IN(y);++x,++y;</span><br><span class="line">                out[id(i,j)].push_back(id(x,y));</span><br><span class="line">                ++in[id(x,y)];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;m) &#123;</span><br><span class="line">                out[id(i,j+<span class="number">1</span>)].push_back(id(i,j));</span><br><span class="line">                ++in[id(i,j)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    topology();</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">            <span class="keyword">if</span>(vis[id(i,j)])&#123;</span><br><span class="line">                <span class="keyword">int</span> u=id(i,j);</span><br><span class="line">                <span class="keyword">if</span>(Score[u]&lt;<span class="number">0</span>) &#123;add(u,t,-Score[u]);&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;add(s,u,Score[u]);sum+=Score[u];&#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;out[u].size();++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v=out[u][k];</span><br><span class="line">                    <span class="keyword">if</span>(vis[v])add(v,u,inf);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(sum-dinic(),<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [AH2017/HNOI2017]大佬  搜索+DP  luoguP3724/bzoj4828</title>
      <link href="/2019/03/21/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4828/"/>
      <url>/2019/03/21/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4828/</url>
      
        <content type="html"><![CDATA[<p>首先可以发现，刷水题跟打伤害是可以分开处理的。</p><p>我们先用 $DP$ 预处理出能打伤害的最大天数，其余的天数都只能用刷水题的方式恢复。</p><p>于是设 $dp[i][j]$ 表示前 $i$ 天，信心值还剩 $j$ 的能够打伤害的最大天数。</p><a id="more"></a><p>可以知道一天只有两种情况，我们枚举 $i,j​$ 然后进行转移：</p><ul><li>如果可以坚持到下一天：<code>dp[i+1][j-a[i+1]]=max(dp[i+1][j-a[i+1]],dp[i][j]+1)</code></li><li>如果是要刷水题：<code>dp[i+1][j-a[i+1]+w[i+1]]=max(dp[i+1][j-a[i+1]+w[i+1]],dp[i][j])</code></li></ul><p>当然，如果要做第一个转移的话得先判断一下 <code>j-a[i+1]</code> 是否超了界，超界了的话当然就不能转移了。第二个转移也要注意，<code>j-a[i+1]+w[i+1]</code> 先要跟信心上界($mc$) 取 $min$ 。</p><p>最后在所有的状态中取一个最大值即可。</p><h3 id="Code-DP"><a href="#Code-DP" class="headerlink" title="Code-DP"></a>Code-DP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DP_maxday</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));<span class="comment">//初始化</span></span><br><span class="line">    dp[<span class="number">0</span>][mc]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mc;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j]&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> t1=j-a[i+<span class="number">1</span>];<span class="keyword">if</span>(t1&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            dp[i+<span class="number">1</span>][t1]=max(dp[i+<span class="number">1</span>][t1],dp[i][j]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> t2=min(t1+w[i+<span class="number">1</span>],mc);</span><br><span class="line">            dp[i+<span class="number">1</span>][t2]=max(dp[i+<span class="number">1</span>][t2],dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mc;++j)</span><br><span class="line">            d=max(d,dp[i][j]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 $d$ 就是我们能够打伤害的最大天数。</p><p>然后我们需要预处理出打出伤害的所有状态，这里我用广搜。</p><p>队列的结构体 $Node$ 由三个元素组成：$F,L,D$ ，表示在第 $D$ 天，你的 $F$ 的值为 $F$ ，$L$ 的值为 $L$ 。</p><p>然后就是转移，这里也是两种情况：</p><ul><li>使讽刺能力乘上等级：<code>F,L,D -&gt; F*L,L,D+1 (L&gt;0)</code></li><li>使等级加一：<code>F,L,D -&gt; F,L+1,D+1</code></li></ul><p>直接这样转移就好了，注意我们需要开个数组将这些打出伤害的方案记下来，当然，记录的时候不用记 $L$ ，因为后面打伤害的时候 $L$ 是没太多用的。</p><p>还有就是每次需要判断一下当前的天数，如果当前状态的天数已经大于了 $d$ 那么当前状态显然是不合法的。</p><p>最后就是需要用 $map$ 判个重，不然的话会爆炸，当然判重的时候也不要判 $L$ 。</p><h3 id="Code-Bfs"><a href="#Code-Bfs" class="headerlink" title="Code-Bfs"></a>Code-Bfs</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; vis;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BFS_maxhurt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    q.push((Node)&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;);<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">if</span>(x.D&gt;d)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x.D==d)&#123;T[++cnt]=(Data)&#123;x.F,x.D&#125;;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> T[++cnt]=(Data)&#123;x.F,x.D&#125;;</span><br><span class="line">        <span class="comment">/*第一种转移*/</span></span><br><span class="line">        <span class="keyword">if</span>(x.L&amp;&amp;(ll)x.F*x.L&lt;=<span class="number">1e8</span>&amp;&amp;!vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F*x.L,x.L)])&#123;</span><br><span class="line">            q.push((Node)&#123;x.F*x.L,x.L,x.D+<span class="number">1</span>&#125;);</span><br><span class="line">            vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F*x.L,x.L)]=x.D;<span class="comment">//标记</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*第二种转移*/</span></span><br><span class="line">        <span class="keyword">if</span>(!vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F,x.L+<span class="number">1</span>)])&#123;</span><br><span class="line">            q.push((Node)&#123;x.F,x.L+<span class="number">1</span>,x.D+<span class="number">1</span>&#125;);</span><br><span class="line">            vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F,x.L+<span class="number">1</span>)]=x.D;<span class="comment">//标记</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>抱歉我的英语真的不好</del></p><p>然后我们已经将所有可行的打伤害的方案记录到 $T​$ 数组里面了，接下来就是看看怎么用这些方案打大佬了。</p><p>首先还嘴是可以直接算的，这个是不用考虑的。我们唯一要处理的就是怼大佬，我们可以选择怼一次还是两次。可以发现怼一次的话直接枚举 $T​$ 数组中的方案即可，算上天数，剩下的天数当然是每天还嘴，看看这样可不可以干掉大佬：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)<span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>( $C$ 为当前大佬的信心值)</p><p>首先，<code>T[i].F&lt;=C</code> 是为了保证你不被虐飞，然后 <code>T[i].D&lt;=d</code> 当然就是你有足够的天数来实现这个方案，最后的 <code>C-T[i].F&lt;=d-T[i].D</code> 就是看看打完这个方案后剩下的天数能否通过仅剩的还嘴来干掉大佬。</p><p>那么如果是怼两次大佬呢？</p><p>可以发现其实跟上面差不多，设两次中一次是第 $i$ 套方案，一次是第 $j$ 套方案。那么首先这两套方案的 $F$ 的和不能超过 $C$ ，然后就是要保证剩下的天数中可以通过还嘴干掉大佬，于是我们可以列出式子：</p><script type="math/tex; mode=display">T[i].F+T[j].F \leq C \ , \ T[i].F+T[j].F+(d-T[i].D-T[j].D) \geq C​</script><p>然后前式很容易满足，我们来看看后式：</p><script type="math/tex; mode=display">T[i].F+T[j].F+d-T[i].D-T[j].D \geq C</script><script type="math/tex; mode=display">T[i].F-T[i].D+T[j].F-T[j].D+d \geq C</script><p>我们枚举一个 $i$ ，寻找 $j$ 。既然 $i$ 已经确定，最优的 $j$ 一定满足 $T[j].F-T[j].D$ 最大，取 $max$ 就好。</p><p>至于代码的问题，我们先将 $T[i]$ 按照 $F$ 排序，然后按顺序寻找 $j$ ，代码实现就不是很难了。</p><h3 id="Code-Solve"><a href="#Code-Solve" class="headerlink" title="Code-Solve:"></a>Code-Solve:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(C&lt;=d)<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//可以全程顶嘴干掉大佬，直接retrun</span></span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,mx=-inf;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">        <span class="comment">/*用第i方案怼一次可以干掉大佬，return*/</span></span><br><span class="line">        <span class="keyword">if</span>(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">/*按顺序扫描满足要求的 j*/</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;cnt&amp;&amp;T[i].F+T[l+<span class="number">1</span>].F&lt;=C)</span><br><span class="line">            l++,mx=max(mx,T[l].F-T[l].D);<span class="comment">//取max</span></span><br><span class="line">        <span class="comment">/*可以怼两次干掉大佬，return*/</span></span><br><span class="line">        <span class="keyword">if</span>(T[i].F-T[i].D+mx+d&gt;=C)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//干不掉大佬了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这个时间复杂度很玄学，大概是 $O($状态数$)$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1.5e2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,mc,a[N],w[N];</span><br><span class="line"><span class="keyword">int</span> d,dp[N][N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> F,L,D;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> F,D;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data&amp;x)<span class="keyword">const</span>&#123;<span class="keyword">return</span> F&lt;x.F;&#125;</span><br><span class="line">&#125;T[S];</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; vis;</span><br><span class="line"><span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DP_maxday</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][mc]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mc;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j]&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> t1=j-a[i+<span class="number">1</span>];<span class="keyword">if</span>(t1&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            dp[i+<span class="number">1</span>][t1]=max(dp[i+<span class="number">1</span>][t1],dp[i][j]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> t2=min(t1+w[i+<span class="number">1</span>],mc);</span><br><span class="line">            dp[i+<span class="number">1</span>][t2]=max(dp[i+<span class="number">1</span>][t2],dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mc;++j)</span><br><span class="line">            d=max(d,dp[i][j]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BFS_maxhurt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    q.push((Node)&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">if</span>(x.D&gt;d)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x.D==d)&#123;T[++cnt]=(Data)&#123;x.F,x.D&#125;;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> T[++cnt]=(Data)&#123;x.F,x.D&#125;;</span><br><span class="line">        <span class="keyword">if</span>(x.L&amp;&amp;(ll)x.F*x.L&lt;=<span class="number">1e8</span>&amp;&amp;!vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F*x.L,x.L)])&#123;</span><br><span class="line">            q.push((Node)&#123;x.F*x.L,x.L,x.D+<span class="number">1</span>&#125;);</span><br><span class="line">            vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F*x.L,x.L)]=x.D;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F,x.L+<span class="number">1</span>)])&#123;</span><br><span class="line">            q.push((Node)&#123;x.F,x.L+<span class="number">1</span>,x.D+<span class="number">1</span>&#125;);</span><br><span class="line">            vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F,x.L+<span class="number">1</span>)]=x.D;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(C&lt;=d)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,mx=-inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;cnt&amp;&amp;T[i].F+T[l+<span class="number">1</span>].F&lt;=C)</span><br><span class="line">            l++,mx=max(mx,T[l].F-T[l].D);</span><br><span class="line">        <span class="keyword">if</span>(T[i].F-T[i].D+mx+d&gt;=C)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(mc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(w[i]);</span><br><span class="line">    DP_maxday();</span><br><span class="line">    BFS_maxhurt();</span><br><span class="line">    sort(T+<span class="number">1</span>,T+cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> C;IN(C);</span><br><span class="line">        <span class="keyword">if</span>(solve(C))<span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [Violet]天使玩偶/SJY摆棋子  K-D Tree  luoguP4169/bzoj2648</title>
      <link href="/2019/03/21/%5B%E9%A2%98%E8%A7%A3%5DluoguP4169/"/>
      <url>/2019/03/21/%5B%E9%A2%98%E8%A7%A3%5DluoguP4169/</url>
      
        <content type="html"><![CDATA[<p>$KDT$ 大法好！</p><p>直接建 $KDT$ 维护一下所有的可能存在玩偶的结点，该插入的时候插入，查询的时候只需要沿着 $KDT$ 往下走，然后随时对 $ans$ 取 $min$ 即可。</p><a id="more"></a><p>注意这题有插入，这意味着 $KDT$ 到后面或许会不平衡，这个时候我们就需要用替罪羊树的思想——拍扁重建即可。注意这里判断是否平衡的 $check$ 函数需要放在 $insert$ 的最后，也就是还要在 $pushup$ 以后再 $check$ 即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> alph (0.75)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> root,ans,WD,trh[N],top,cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span><span class="keyword">int</span> x[<span class="number">2</span>];&#125;p[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mi[<span class="number">2</span>],mx[<span class="number">2</span>],l,r,sz;</span><br><span class="line">    point tp;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span> &lt; (point a,point b) &#123;<span class="keyword">return</span> a.x[WD]&lt;b.x[WD];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">new_node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top) <span class="keyword">return</span> trh[top--];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=tr[x].l,r=tr[x].r;</span><br><span class="line">    tr[x].sz=tr[l].sz+tr[r].sz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;++i) &#123;</span><br><span class="line">        tr[x].mi[i]=tr[x].mx[i]=tr[x].tp.x[i];</span><br><span class="line">        <span class="keyword">if</span>(l) &#123;</span><br><span class="line">            tr[x].mi[i]=min(tr[x].mi[i],tr[l].mi[i]);</span><br><span class="line">            tr[x].mx[i]=max(tr[x].mx[i],tr[l].mx[i]);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(r) &#123;</span><br><span class="line">            tr[x].mi[i]=min(tr[x].mi[i],tr[r].mi[i]);</span><br><span class="line">            tr[x].mx[i]=max(tr[x].mx[i],tr[r].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> wd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x=new_node(),mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    WD=wd,nth_element(p+l,p+mid,p+r+<span class="number">1</span>),tr[x].tp=p[mid];</span><br><span class="line">    tr[x].l=build(l,mid<span class="number">-1</span>,wd^<span class="number">1</span>);</span><br><span class="line">    tr[x].r=build(mid+<span class="number">1</span>,r,wd^<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> pushup(x),x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pia</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].l) pia(tr[x].l,num);</span><br><span class="line">    p[num+tr[tr[x].l].sz+<span class="number">1</span>]=tr[x].tp,trh[++top]=x;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].r) pia(tr[x].r,num+tr[tr[x].l].sz+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> wd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(alph*tr[x].sz&lt;tr[tr[x].l].sz||alph*tr[x].sz&lt;tr[tr[x].r].sz)</span><br><span class="line">        pia(x,<span class="number">0</span>),x=build(<span class="number">1</span>,tr[x].sz,wd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(point tmp,<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> wd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) &#123;</span><br><span class="line">        x=new_node();</span><br><span class="line">        tr[x].tp=tmp,tr[x].l=tr[x].r=<span class="number">0</span>;</span><br><span class="line">        pushup(x);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].tp.x[wd]&lt;tmp.x[wd]) Insert(tmp,tr[x].r,wd^<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> Insert(tmp,tr[x].l,wd^<span class="number">1</span>);</span><br><span class="line">    pushup(x);check(x,wd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getdist</span><span class="params">(point tmp,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;++i)   </span><br><span class="line">        res+=max(<span class="number">0</span>,tmp.x[i]-tr[x].mx[i])+max(<span class="number">0</span>,tr[x].mi[i]-tmp.x[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(point a,point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.x[<span class="number">0</span>]-b.x[<span class="number">0</span>])+<span class="built_in">abs</span>(a.x[<span class="number">1</span>]-b.x[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(point tmp,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ans=min(ans,dist(tmp,tr[x].tp));</span><br><span class="line">    <span class="keyword">int</span> disl=inf,disr=inf;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].l) disl=getdist(tmp,tr[x].l);</span><br><span class="line">    <span class="keyword">if</span>(tr[x].r) disr=getdist(tmp,tr[x].r);</span><br><span class="line">    <span class="keyword">if</span>(disl&lt;disr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(disl&lt;ans) query(tmp,tr[x].l);</span><br><span class="line">        <span class="keyword">if</span>(disr&lt;ans) query(tmp,tr[x].r);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(disr&lt;ans) query(tmp,tr[x].r);</span><br><span class="line">        <span class="keyword">if</span>(disl&lt;ans) query(tmp,tr[x].l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,op;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(p[i].x[<span class="number">0</span>]),IN(p[i].x[<span class="number">1</span>]);</span><br><span class="line">    root=build(<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        point tmp;</span><br><span class="line">        IN(op),IN(tmp.x[<span class="number">0</span>]),IN(tmp.x[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) Insert(tmp,root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ans=inf;query(tmp,root);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K-D Tree </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 历史研究  回滚莫队  luoguAT1219</title>
      <link href="/2019/03/20/%5B%E9%A2%98%E8%A7%A3%5DluoguAT1219/"/>
      <url>/2019/03/20/%5B%E9%A2%98%E8%A7%A3%5DluoguAT1219/</url>
      
        <content type="html"><![CDATA[<p>回滚莫队板子题，在此不再赘述。</p><p>关于回滚莫队的文章戳这 $QwQ$ :<a href="https://monlights.github.io/2019/03/08/[算法]莫队&amp;树上莫队/">[算法]浅谈4种莫队及例题</a></p><a id="more"></a><p>可以算作一个回滚莫队的板子来参考。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,block,a[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MO&#123;</span><br><span class="line">    ll ans,Ans[N];</span><br><span class="line">    <span class="keyword">int</span> v[N],b[N],blo[N],cnt[N],hep[N];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span><span class="keyword">int</span> l,r,id;&#125;q[N];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query x,Query y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blo[x.l]==blo[y.l]?x.r&lt;y.r:blo[x.l]&lt;blo[y.l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">roll</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;--cnt[b[pos]];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        ++cnt[b[pos]];</span><br><span class="line">        ans=max(ans,<span class="number">1l</span>l*a[pos]*cnt[b[pos]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)hep[b[i]]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">            ++hep[b[i]];</span><br><span class="line">            res=max(res,<span class="number">1l</span>l*a[i]*hep[b[i]]);</span><br><span class="line">        &#125;<span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> bloid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L=min(block*bloid,n);</span><br><span class="line">        <span class="keyword">int</span> i=num,l=L+<span class="number">1</span>,r=l<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;++k)cnt[k]=<span class="number">0</span>;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;blo[q[i].l]==bloid;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(blo[q[i].l]==blo[q[i].r])&#123;</span><br><span class="line">                Ans[q[i].id]=query(q[i].l,q[i].r);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(r&lt;q[i].r)add(++r);</span><br><span class="line">            ll tmp=ans;</span><br><span class="line">            <span class="keyword">while</span>(l&gt;q[i].l)add(--l);</span><br><span class="line">            Ans[q[i].id]=ans;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;L+<span class="number">1</span>)roll(l++);</span><br><span class="line">            ans=tmp;</span><br><span class="line">        &#125;<span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sort(v+<span class="number">1</span>,v+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">int</span> tot=unique(v+<span class="number">1</span>,v+<span class="number">1</span>+n)-(v+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            b[i]=lower_bound(v+<span class="number">1</span>,v+<span class="number">1</span>+tot,a[i])-v;</span><br><span class="line">        sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m,cmp);</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=blo[n];++i)num=solve(num,i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Ans[i]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> MO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);block=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]),v[i]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)blo[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        IN(q[i].l),IN(q[i].r);</span><br><span class="line">        q[i].id=i;</span><br><span class="line">    &#125;<span class="keyword">return</span> Main(),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI/AHOI2018]转盘  线段树  luoguP4425</title>
      <link href="/2019/03/20/%5B%E9%A2%98%E8%A7%A3%5DluoguP4425/"/>
      <url>/2019/03/20/%5B%E9%A2%98%E8%A7%A3%5DluoguP4425/</url>
      
        <content type="html"><![CDATA[<p>首先再来讲明一下题意：</p><p>给定一个长度为 $n$ 的环，环上的每个点有一个权值 $T_i$ ，要求你从环上选中任意一个点为起点开始，每个时间可以顺时钟到下一个点，或者停留不动。对于一个点，如果到这个点的时间大于等于了 $T_i$ ，那么这个点将被标记，问最少什么时候可以让所有物品都被标记。</p><p>可以发现，这个问题的答案跟以下问题的答案是等价的：</p><a id="more"></a><p>给定一个长度为 $n​$ 的环，环上的每个点有一个权值 $T_i​$  ，要求你从环上选中任意一个点为起点开始，，开始的时间为 $t​$ ，每个时间可以逆时针到下一个点，或者停留不动。对于一个点，它将在 $T_i​$ 时间损坏 ，求一个最小的 $t​$ 使得我们能够在没有点损坏的情况下遍历所有点。</p><p>我们算一下每一个点离起点的距离，那么这个时候我们就可以在起点等，等一段时间后再出发，这样子我们转一圈就够了，这个方案显然是最优的。</p><p>我们断环为链，枚举起点 $s$ ，对于一个点 $i$ ，$s$ 到达 $i$ 的耗时显然是 $(i-s)$ ，那么我们如果想要等一段时间出发后正好标记该点，这一段等待的时间当然就是 $T_i-(i-s)$ 。我们对所有的点 $i$ 的 $T_i-(i-s)$ 取 $max$ ，最后的结果就是我们应该在 $s$ 等的时间。</p><p>那么很显然我们的答案为：</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,s+n-1]}[T_i-(i-s)] \}+n-1</script><p>$min_{s \in [1,n]}\{  max_{i \in [s,s+n-1]}[T_i-(i-s)] \}​$ 这显然是在选择一个最优的起点使得等待时间最小，$n-1​$ 就是等待完后转一圈的时间。</p><p>这个时候暴力枚举就可以得到 $30$ 分。</p><p>不过我们继续：</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,s+n-1]}[T_i-i+s] \}+n-1</script><p>我们设 $A_i$ 为 $T_i-i$  。</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,s+n-1]}[A_i+s] \}+n-1</script><p>假设现在有一对 $A_i,A_{i+n}$ ，我们可以发现 $A_{i+1}$ 是必然比 $A_i$ 小的，也就是说 $A_{s+n}$ 到 $A_{2n}$ 这一段数就算算进来也造不成影响。</p><p>也就是说原式跟这个式子是等价的：</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,2n]}[A_i+s] \}+n-1</script><p>发现 $max$ 里面 $s$ 并没有什么卵用，直接提出来。</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,2n]}A_i +s\}+n-1​</script><p>这个的话……因为 $A_i$ 的值跟 $s$ 没有关系……所以……所以我们可以预处理一个 $ST$ 表……嗯……然后枚举 $s$ ……结果我们是 $O(n)$ 搞定？？？</p><p>哦哦哦作者脑抽了，这题是待修改的。</p><p>不过没关系，我们还有出路。</p><p>现在考虑用线段树来维护，假设结点 $x$ 代表的区间为 $l,r$ ，维护一个 $val[x]$ 表示区间 $[l,r]$ 中 $A_i$ 的最大值，这个是线段树基本操作不再赘述，然后再维护一个 $ans[x]$ 表示区间 $min_{s \in [l,mid]}\{  max_{i \in [s,r]} \}$ 。$1$ 号结点的区间为 $1,2n$ ，我们的答案就是 $ans[1]$ 。</p><p>那么怎么上传 $ans$ 呢。</p><p>我们对于 $[mid,r]$ 区间的最大值 $A_x$ ，这个 $A_x$ 显然可以 $O(1)$ 求出，然后再找到一个 $A_y$ ，表示当 $s$ 为 $y$ 的时候，整个 $[s,r]$ 的 $A_i$ 的最大值为 $A_x$ 。在寻找 $y$ 的时候顺便更新一下 $s\in [l,y-1]$ 的区间的答案就好。</p><p>当 $s\in [y,r]​$ 的时候答案明显为 $A_x+s​$ ，要满足最小嘛。</p><p>有关这一部分的代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Ax)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[k],Ax);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Ax)<span class="keyword">return</span> min(calc(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Ax),ans[k&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> min(calc(k&lt;&lt;<span class="number">1</span>,l,mid,Ax),(mid+<span class="number">1</span>)+Ax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来剖析一下代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Ax)</span></span>&#123;</span><br></pre></td></tr></table></figure><p>这一句表示当前的结点为 $k$ ，$k$ 代表的区间为 $l,r$ ，$Ax$ 为上文中的 $A_x$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[k],Ax);</span><br></pre></td></tr></table></figure><p>这个显然就是找到了 $y$ ，这个时候答案为 $A_x+s$ ，上文也讲了，这里的 $s$ 就是 $y$ 的位置，$A_x$ 已经在函数中了直接调用就好。但是为什么要取 $max$ 呢？<strong>因为怕 $A_y$ 是大于 $A_x$ 的!</strong> ，所以加个 $max$ 就好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(val[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Ax)<span class="keyword">return</span> min(calc(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Ax),ans[k&lt;&lt;<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>这个就是当前结点的右区间有比 $A_x$ 大的数，那么这个时候 $y$ 就不可能到左区间去了，不然的话 $[y,r]$ 中 $max\{A_i\}$ 就不是 $A_x$ 了，所以我们往右子树走。这个时候可以发现 $s$ 属于左区间的时候的答案为 $ans[k&lt;&lt;1]$ ，顺带更新一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> min(calc(k&lt;&lt;<span class="number">1</span>,l,mid,Ax),(mid+<span class="number">1</span>)+Ax);</span><br></pre></td></tr></table></figure><p>这个时候 $y$ 就是在左区间了，那么我们往左区间走，右区间的答案呢？右区间为 $[mid,r]$ ，显然这一段的最大值肯定都为 $A_x$ ——包括 $mid+1$ ，所以不要跟 $mid+1$ 取一下 $max$ 了——尽管第一句是与 $A_y$ 取了 $max$ 的。</p><p>这个时候因为要 $s$ 尽量的小，所以就是右区间的左端点——$mid+1$ 了。</p><p>这个时候 $pushup$ 就应该这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    val[x]=max(val[x&lt;&lt;<span class="number">1</span>],val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ans[x]=calc(x&lt;&lt;<span class="number">1</span>,l,mid,val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p,lastans,a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg_Tree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> ans[N&lt;&lt;<span class="number">2</span>],val[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Mx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[x],Mx);</span><br><span class="line">        <span class="keyword">if</span>(val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Mx)<span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Mx),ans[x]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>,l,mid,Mx),mid+<span class="number">1</span>+Mx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        val[x]=max(val[x&lt;&lt;<span class="number">1</span>],val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">        ans[x]=calc(x&lt;&lt;<span class="number">1</span>,l,mid,val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;<span class="keyword">return</span>;&#125;</span><br><span class="line">        build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(x,l,r);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)updata(x&lt;&lt;<span class="number">1</span>,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid)updata(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">        pushup(x,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]),a[i+n]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>);++i)a[i]-=i;</span><br><span class="line">    T.build(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    lastans=T.ans[<span class="number">1</span>]+n<span class="number">-1</span>,<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="keyword">if</span>(p)x^=lastans,y^=lastans;</span><br><span class="line">        a[x]=y-x,a[x+n]=y-x-n;</span><br><span class="line">        T.updata(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>),x),T.updata(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>),x+n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans=T.ans[<span class="number">1</span>]+n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这份代码是 <strong>TLE</strong> 的。</p><p>这玩意坑了我好久，你知道为什么 <strong>TLE</strong> 吗？</p><p><strong>就是这个鬼东西！：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br></pre></td></tr></table></figure><p>这里的 $x$ 和 $y$ 是调用了两次的，然后我们发现 $calc$ 函数……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Mx)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[x],Mx);</span><br><span class="line">    <span class="keyword">if</span>(val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Mx)<span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Mx),ans[x]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>,l,mid,Mx),mid+<span class="number">1</span>+Mx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$min$ 里面有 $calc$ 函数………..然后 $calc$ 函数调用了两次……….然后………..爆炸！</p><p><del>所以 $Qiuly$ 提醒您：代码千万条，时间第一条，$define$ 不规范，$OIer$ 两行泪 。</del></p><p><del>还是跟着 $std$ 走好嘿嘿嘿，$using\ namespace\ std$ 万岁！</del></p><p>最终 $AC$ 的代码。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p,lastans,a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg_Tree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> ans[N&lt;&lt;<span class="number">2</span>],val[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Mx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[x],Mx);</span><br><span class="line">        <span class="keyword">if</span>(val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Mx)<span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Mx),ans[x]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>,l,mid,Mx),mid+<span class="number">1</span>+Mx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        val[x]=max(val[x&lt;&lt;<span class="number">1</span>],val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">        ans[x]=calc(x&lt;&lt;<span class="number">1</span>,l,mid,val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;<span class="keyword">return</span>;&#125;</span><br><span class="line">        build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(x,l,r);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)updata(x&lt;&lt;<span class="number">1</span>,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid)updata(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">        pushup(x,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]),a[i+n]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>);++i)a[i]-=i;</span><br><span class="line">    T.build(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    lastans=T.ans[<span class="number">1</span>]+n<span class="number">-1</span>,<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="keyword">if</span>(p)x^=lastans,y^=lastans;</span><br><span class="line">        a[x]=y-x,a[x+n]=y-x-n;</span><br><span class="line">        T.updata(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>),x),T.updata(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>),x+n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans=T.ans[<span class="number">1</span>]+n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [AH2017/HNOI2017]影魔  线段树  luoguP3722/bzoj4826</title>
      <link href="/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4826/"/>
      <url>/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4826/</url>
      
        <content type="html"><![CDATA[<p>真心巧妙，不看题解准做不出<del>(之前题解都看不懂QwQ)</del></p><p>这道题貌似有许多的做法，都不费，主席树的话不知道怎么搞，于是建了 $3$ 棵线段树，实测是不会炸的。</p><a id="more"></a><h3 id="30分做法："><a href="#30分做法：" class="headerlink" title="30分做法："></a>30分做法：</h3><hr><p>小学生都能轻易想出来的解法，对于一个询问的区间，暴力枚举其子区间，然后按照题面的要求算贡献，区间最大值可以用 $ST$ 表预处理，复杂度爆炸，但是仍然可以拿到 $30$ 暴力分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">23</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[N],n,m,p1,p2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ST</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> logs[N],f[N][LogN+<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logs[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            f[i][<span class="number">0</span>]=v[i],logs[i]=logs[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=LogN;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">                f[i][j]=max(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=logs[y-x+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> max(f[x][ans],f[y-(<span class="number">1</span>&lt;&lt;ans)+<span class="number">1</span>][ans]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(p1),IN(p2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(v[i]);</span><br><span class="line">    T.make();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r,ans=<span class="number">0</span>;</span><br><span class="line">        IN(l),IN(r);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a=l;a&lt;=r;++a)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> b=a+<span class="number">2</span>;b&lt;=r;++b)&#123;</span><br><span class="line">                <span class="keyword">int</span> sum=T.query(a+<span class="number">1</span>,b<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">if</span>(v[a]&gt;=sum&amp;&amp;v[b]&gt;=sum)ans+=p1;</span><br><span class="line">                <span class="keyword">if</span>((v[a]&lt;sum&amp;&amp;sum&lt;v[b])||(v[b]&lt;sum&amp;&amp;sum&lt;v[a]))ans+=p2;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+(r-l)*p1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="100分做法"><a href="#100分做法" class="headerlink" title="100分做法"></a>100分做法</h3><hr><p>对于一个点 $i$ ，我们设 $lmax[i]$ 为 <strong>$i$ 向左走遇到的第一个大于自己的数</strong>(没有的话为 $0$) ，同样的，设 $rmax[i]$ 为 <strong>$i$ 向右走遇到的第一个大于自己的数</strong>(没有的话为 $n+1$) 。这两个数组比较容易求出，搞个单调栈求就好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top=<span class="number">0</span>,<span class="built_in">stack</span>[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">    <span class="keyword">while</span>(top&amp;&amp;k[<span class="built_in">stack</span>[top]]&lt;k[i])--top;</span><br><span class="line">    lmax[i]=<span class="built_in">stack</span>[top],<span class="built_in">stack</span>[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line">top=<span class="number">0</span>,<span class="built_in">stack</span>[<span class="number">0</span>]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">    <span class="keyword">while</span>(top&amp;&amp;k[<span class="built_in">stack</span>[top]]&lt;k[i])--top;</span><br><span class="line">    rmax[i]=<span class="built_in">stack</span>[top],<span class="built_in">stack</span>[++top]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后可以发现，如果枚举点 $i$ 的话，有了上面的两个数组后有关 $i$ 的贡献就好求些了，首先我们可以知道 $i$ 是区间 $[lmax[i]+1,rmax[i]-1]$ 的最大值，那么对于每种贡献：</p><ul><li>如果 $lmax[i]$ 和 $rmax[i]$ 都在当前询问区间内，那么就可以做出 $p_1$ 的贡献。</li><li>如果 $lmax[i]$ 在当前询问区间中，那么显然 $lmax[i]$ 为区间 $[lmax[i],rmax[i]-1]$ 的最大值，这个时候右端点如果在 $[i+1,rmax[i]-1]$ 区间中，那么可以保证右端点不是 $[lmax[i],rmax[i]-1]$ 的次大值，这个时候可以产生多个 $p_2$ 的贡献。</li><li>如果 $rmax[i]$ 在当前询问区间中，那么显然当左端点为 $[lmax[i]+1,i-1]$ 的时候该子区间均能产生 $p_2$ 的贡献，原因跟上面一样的。</li></ul><p>但是这样的话复杂度依旧是 $O(n^2)$ 的，所以还要优化。</p><p>考虑用线段树维护，我们离线处理询问，把每个询问按左端点排个序，然后反着扫一遍，如果遇到了一个点 $x$ ，它是 某个点/某些点 的 $lmax$ ，假设 $x$ 是 $i$ 的 $lmax$ ，那么我们依次在第一颗线段树中实现区间加：将 $[i+1,rmax[i]-1]$ 区间正题加上 $p_2$ ，因为当前的左端点为 $x$ ，这个时候我们将要计算的是所有的左端点为 $x$ 的区间对答案的贡献，因为对于 $i$ 来说右端点的范围就是  $[i+1,rmax[i]-1]$，这些区间均可以做出贡献，于是都在线段树中加上。当然在做贡献的之前不要忘记判断 $i+1&lt;rmax[i]$ ，如果不满足的话就没有右端点了……</p><p>那么接下来讨论怎么计算 $p_1$ 的贡献，对于询问区间来说，现在我们确定了左端点为 $x$ ，这个时候当右端点落在 $[rmax[i],n+1]$ 的时候询问区间都可以算上 $[lmax[i],rmax[i]]$ 区间的贡献，也就是 $p_1$ 的贡献，于是我们可以在另一个线段树中将 $[rmax[i],n+1]$ 全都加上 $p_1$ 即可。</p><p>按照上面的方法，再正着扫一遍计算 $rmax$ 的情况就好，当然反着扫的时候就不要算 $p_1$ 的贡献了，不然就会重复了，想想就可以明白。最后就是一定要开 $longlong$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg_Tree</span>&#123;</span><span class="comment">//线段树板子</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    ll v[N&lt;&lt;<span class="number">2</span>];<span class="keyword">int</span> tag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tag[x])&#123;</span><br><span class="line">            tag[x&lt;&lt;<span class="number">1</span>]+=tag[x],tag[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=tag[x];</span><br><span class="line">            v[x&lt;&lt;<span class="number">1</span>]+=tag[x]*(mid-l+<span class="number">1</span>),v[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=tag[x]*(r-mid);</span><br><span class="line">        &#125;tag[x]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;v[x]+=r-l+<span class="number">1</span>,++tag[x];<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)updata(x&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)updata(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">        v[x]=v[x&lt;&lt;<span class="number">1</span>]+v[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class="keyword">return</span> v[x];</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)ans+=query(x&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)ans+=query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;st1,st2,st3;<span class="comment">//三棵线段树[滑稽]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k[N];ll p1,p2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span><span class="keyword">int</span> l,r;ll ans;&#125;q[N];</span><br><span class="line"><span class="keyword">int</span> lmax[N],rmax[N],<span class="built_in">stack</span>[N],top;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; li[N],ri[N],lq[N],rq[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Pre_lmax_rmax()&#123;</span><br><span class="line">    top=<span class="number">0</span>,<span class="built_in">stack</span>[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;k[<span class="built_in">stack</span>[top]]&lt;k[i])--top;</span><br><span class="line">        lmax[i]=<span class="built_in">stack</span>[top],li[<span class="built_in">stack</span>[top]].push_back(i);<span class="comment">//统计上文中的x</span></span><br><span class="line">        <span class="built_in">stack</span>[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    top=<span class="number">0</span>,<span class="built_in">stack</span>[<span class="number">0</span>]=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;k[<span class="built_in">stack</span>[top]]&lt;k[i])--top;</span><br><span class="line">        rmax[i]=<span class="built_in">stack</span>[top],ri[<span class="built_in">stack</span>[top]].push_back(i);</span><br><span class="line">        <span class="built_in">stack</span>[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("code.in","r",stdin);</span></span><br><span class="line">    IN(n),IN(m),IN(p1),IN(p2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(k[i]);</span><br><span class="line">    _Pre_lmax_rmax();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        IN(q[i].l),lq[q[i].l].push_back(i);</span><br><span class="line">        IN(q[i].r),rq[q[i].r].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;li[i].size();++j)&#123;<span class="comment">//计算左端点在i的区间的贡献</span></span><br><span class="line">            <span class="keyword">if</span>(li[i][j]+<span class="number">1</span>&lt;rmax[li[i][j]])</span><br><span class="line">                st1.updata(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,li[i][j]+<span class="number">1</span>,rmax[li[i][j]]<span class="number">-1</span>);</span><br><span class="line">            st3.updata(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,rmax[li[i][j]],n+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lq[i].size();++j)&#123;<span class="comment">//统计左端点在i的询问区间的答案</span></span><br><span class="line">            q[lq[i][j]].ans+=st1.query(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,i,q[lq[i][j]].r)*p2;</span><br><span class="line">            q[lq[i][j]].ans+=st3.query(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,q[lq[i][j]].r,q[lq[i][j]].r)*p1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ri[i].size();++j)</span><br><span class="line">            <span class="keyword">if</span>(ri[i][j]<span class="number">-1</span>&gt;lmax[ri[i][j]])</span><br><span class="line">                st2.updata(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,lmax[ri[i][j]]+<span class="number">1</span>,ri[i][j]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;rq[i].size();++j)</span><br><span class="line">            q[rq[i][j]].ans+=st2.query(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,q[rq[i][j]].l,i)*p2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)<span class="comment">//输出答案，不要忘了漏统计的长度为2的区间</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,q[i].ans+<span class="number">1l</span>l*(q[i].r-q[i].l)*p1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [AH2017/HNOI2017]单旋  线段树  luoguP3721/bzoj4825</title>
      <link href="/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4825/"/>
      <url>/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4825/</url>
      
        <content type="html"><![CDATA[<p>$Spaly​$ 是不会用的，这辈子也不会用的。</p><p>这道题当然可以用 $Splay​$ 做，然而不会。</p><p>于是考虑怎么来做这道题，我们先来观察一下所有的操作：</p><a id="more"></a><h5 id="1-插入操作：很普通的插入操作……"><a href="#1-插入操作：很普通的插入操作……" class="headerlink" title="1.插入操作：很普通的插入操作……"></a>1.插入操作：很普通的插入操作……</h5><h5 id="2-单旋最小值："><a href="#2-单旋最小值：" class="headerlink" title="2.单旋最小值："></a>2.单旋最小值：</h5><p><img src="/2019/03/15/[题解]bzoj4825/A.png" alt=""></p><p>结点的深度的变化如下：</p><ul><li>需要旋转的结点 $(4)$ ：变为 $root$ ，深度变为 $1$ 。</li><li>需要旋转的结点的子树 $(7)$ ：深度不变。</li><li>其他结点 $(1,2,3,5,6)$ ：深度加 $1$ 。</li></ul><h5 id="3-单旋最大值："><a href="#3-单旋最大值：" class="headerlink" title="3.单旋最大值："></a>3.单旋最大值：</h5><p>变化和上面的 “单旋最小值” 一样。</p><h5 id="4-5-删除最大-最小值"><a href="#4-5-删除最大-最小值" class="headerlink" title="4.5 删除最大/最小值"></a>4.5 删除最大/最小值</h5><p>先将需要删除的 最大/最小值 转到树根，这个时候我们将树根删掉，可以发现整棵树的深度全部都减了 $1$ ，一起计算上旋转造成的深度的影响会得到：</p><ul><li>删掉的结点的子树 $(7)$ ：深度减 $1$</li><li>其他节点 $(1,2,3,5,6)$ ：深度不变</li></ul><p>发现深度的变化也不是很大，于是我们考虑用线段树维护每一个节点的深度。<br>线段树不易寻找最大/最小值，这个地方我们用 $set$ 来辅助即可，操作的时候更新一下 $set$ 中树的形态就好。</p><p>线段树的要求很低，一个很普通的兹磁区间修改的线段树即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> dep[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[x])&#123;</span><br><span class="line">            dep[x&lt;&lt;<span class="number">1</span>]+=dep[x],dep[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=dep[x],dep[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;dep[x]+=res;<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)add(x&lt;&lt;<span class="number">1</span>,l,mid,L,R,res);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)add(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;dep[x]=res;<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)change(x&lt;&lt;<span class="number">1</span>,l,mid,pos,res);</span><br><span class="line">        <span class="keyword">else</span> change(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> dep[x];</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)<span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br></pre></td></tr></table></figure><h5 id="1-插入操作的实现："><a href="#1-插入操作的实现：" class="headerlink" title="1.插入操作的实现："></a>1.插入操作的实现：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; Spaly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=Spaly.insert(x).first;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;<span class="comment">//还没有树根</span></span><br><span class="line">        T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);<span class="comment">//修改x的深度</span></span><br><span class="line">        root=x;<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//深度为1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(it!=Spaly.begin())&#123;<span class="comment">//不是最小值，所以可能成为其他结点的右儿子</span></span><br><span class="line">        <span class="keyword">if</span>(!ch[*--it][<span class="number">1</span>])ch[fa[x]=*it][<span class="number">1</span>]=x;<span class="comment">//成为右儿子</span></span><br><span class="line">        *it++;<span class="comment">//维持it不变</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fa[x])ch[fa[x]=*++it][<span class="number">0</span>]=x;<span class="comment">//成为右儿子失败，于是成为左儿子</span></span><br><span class="line">    <span class="keyword">int</span> dep_x=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,fa[x])+<span class="number">1</span>;<span class="comment">//x的深度就是它父节点的深度加1</span></span><br><span class="line">    T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,dep_x);<span class="comment">//在线段树中修改x的深度</span></span><br><span class="line">    <span class="keyword">return</span> dep_x;<span class="comment">//题目要求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-单旋最小-最大值的实现："><a href="#2-单旋最小-最大值的实现：" class="headerlink" title="2.单旋最小/最大值的实现："></a>2.单旋最小/最大值的实现：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rotate_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=*Spaly.begin(),ans=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,x);<span class="comment">//获取当前的最小值和需要返回的答案</span></span><br><span class="line">    <span class="keyword">if</span>(x==root)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//是根就直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(x+<span class="number">1</span>&lt;fa[x])T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,x+<span class="number">1</span>,fa[x]<span class="number">-1</span>,<span class="number">-1</span>);<span class="comment">//x有子树，先给x的子树的深度整体减1</span></span><br><span class="line">    T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">1</span>);<span class="comment">//整棵树深度加1，这个时候x的子树深度不变了</span></span><br><span class="line">    ch[fa[x]][<span class="number">0</span>]=ch[x][<span class="number">1</span>],fa[ch[x][<span class="number">1</span>]]=fa[x];<span class="comment">//将x的子树接到x的父亲上</span></span><br><span class="line">    ch[x][<span class="number">1</span>]=root,fa[root]=x,root=x;<span class="comment">//更新root</span></span><br><span class="line">    T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);<span class="comment">//修改x的深度，变为1</span></span><br><span class="line">    <span class="keyword">return</span> ans;<span class="comment">//题目要求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rotate_max</span><span class="params">()</span></span>&#123;<span class="comment">//与上面的Rotate_min操作同理</span></span><br><span class="line">    <span class="keyword">int</span> x=*Spaly.rbegin(),ans=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,x);</span><br><span class="line">    <span class="keyword">if</span>(x==root)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x<span class="number">-1</span>&gt;fa[x])T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,fa[x]+<span class="number">1</span>,x<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">    T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">1</span>);</span><br><span class="line">    ch[fa[x]][<span class="number">1</span>]=ch[x][<span class="number">0</span>],fa[ch[x][<span class="number">0</span>]]=fa[x];</span><br><span class="line">    ch[x][<span class="number">0</span>]=root,fa[root]=x,root=x;</span><br><span class="line">    T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-删除最小-最大值的实现："><a href="#3-删除最小-最大值的实现：" class="headerlink" title="3.删除最小/最大值的实现："></a>3.删除最小/最大值的实现：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rotate_min());<span class="comment">//先旋上来，按照题目要求输出</span></span><br><span class="line">    T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">-1</span>);<span class="comment">//整棵树的深度发生变化</span></span><br><span class="line">    Spaly.erase(root),root=ch[root][<span class="number">1</span>],fa[root]=<span class="number">0</span>;<span class="comment">//更新root</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete_max</span><span class="params">()</span></span>&#123;<span class="comment">//与上面的Delete_min操作同理</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rotate_max());</span><br><span class="line">    T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">-1</span>);</span><br><span class="line">    Spaly.erase(root),root=ch[root][<span class="number">0</span>],fa[root]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,tmp,v[N],a[N],op[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> dep[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[x])&#123;</span><br><span class="line">            dep[x&lt;&lt;<span class="number">1</span>]+=dep[x],dep[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=dep[x],dep[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;dep[x]+=res;<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)add(x&lt;&lt;<span class="number">1</span>,l,mid,L,R,res);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)add(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;dep[x]=res;<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)change(x&lt;&lt;<span class="number">1</span>,l,mid,pos,res);</span><br><span class="line">        <span class="keyword">else</span> change(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> dep[x];</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)<span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Spaly_Tree</span>&#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; Spaly;</span><br><span class="line">    <span class="keyword">int</span> root,fa[N],ch[N][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=Spaly.insert(x).first;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);</span><br><span class="line">            root=x;<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(it!=Spaly.begin())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[*--it][<span class="number">1</span>])ch[fa[x]=*it][<span class="number">1</span>]=x;</span><br><span class="line">            *it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!fa[x])ch[fa[x]=*++it][<span class="number">0</span>]=x;</span><br><span class="line">        <span class="keyword">int</span> dep_x=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,fa[x])+<span class="number">1</span>;</span><br><span class="line">        T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,dep_x);</span><br><span class="line">        <span class="keyword">return</span> dep_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rotate_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=*Spaly.begin(),ans=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,x);</span><br><span class="line">        <span class="keyword">if</span>(x==root)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x+<span class="number">1</span>&lt;fa[x])T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,x+<span class="number">1</span>,fa[x]<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">        T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">1</span>);</span><br><span class="line">        ch[fa[x]][<span class="number">0</span>]=ch[x][<span class="number">1</span>],fa[ch[x][<span class="number">1</span>]]=fa[x];</span><br><span class="line">        ch[x][<span class="number">1</span>]=root,fa[root]=x,root=x;</span><br><span class="line">        T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rotate_max</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=*Spaly.rbegin(),ans=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,x);</span><br><span class="line">        <span class="keyword">if</span>(x==root)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x<span class="number">-1</span>&gt;fa[x])T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,fa[x]+<span class="number">1</span>,x<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">        T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">1</span>);</span><br><span class="line">        ch[fa[x]][<span class="number">1</span>]=ch[x][<span class="number">0</span>],fa[ch[x][<span class="number">0</span>]]=fa[x];</span><br><span class="line">        ch[x][<span class="number">0</span>]=root,fa[root]=x,root=x;</span><br><span class="line">        T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rotate_min());</span><br><span class="line">        T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">-1</span>);</span><br><span class="line">        Spaly.erase(root),root=ch[root][<span class="number">1</span>],fa[root]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete_max</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rotate_max());</span><br><span class="line">        T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">-1</span>);</span><br><span class="line">        Spaly.erase(root),root=ch[root][<span class="number">0</span>],fa[root]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=m;++i)&#123;</span><br><span class="line">        IN(op[i]);</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">1</span>)IN(x),v[++tmp]=a[i]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(v+<span class="number">1</span>,v+<span class="number">1</span>+tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">1</span>)a[i]=<span class="built_in">std</span>::lower_bound(v+<span class="number">1</span>,v+<span class="number">1</span>+tmp,a[i])-v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,S.Insert(a[i]));</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,S.Rotate_min());</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,S.Rotate_max());</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">4</span>)S.Delete_min();</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">5</span>)S.Delete_max();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [AH2017/HNOI2017]礼物  FFT  luoguP3723/bzoj4827</title>
      <link href="/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4827/"/>
      <url>/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4827/</url>
      
        <content type="html"><![CDATA[<p><del>题目背景有些……………</del><br>通过题目我们可以知道最终我们要求的式子就是：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}(a_i+c-b_i)^2</script><p>于是我们将式子拆开：</p><script type="math/tex; mode=display">(a_i+c-b_i)^2=a_i^2+b_i^2+c^2+2a_ic-2b_ic-2a_ib_i</script><a id="more"></a><script type="math/tex; mode=display">\sum_{i=1}^{n}(a_i+c-b_i)^2=\sum_{i=1}^{n}a_i^2+\sum_{i=1}^{n}b_i^2+nc^2+2c(\sum_{i=1}^{n}a_i-\sum_{i=1}^{n}b_i)-2\sum_{i=1}^{n}a_ib_i​</script><p>前面的这些都很容易求出，但是最后的 $\sum_{i=1}^{n}a_ib_i​$ 无法很快算出，我们算答案的时候枚举 $c​$ 以及手环旋转了多少，这个时候如果在里面直接大力计算 $\sum_{i=1}^{n}a_ib_i​$ 可以拿到 $30​$ 分。如果将这个式子在之前拿出来预处理一下，将会拿到 $70​$ 分。</p><p>这个时候将 $a_i$ 反向，式子变为：$\sum_{i=1}^{n}a_{n-i+1}b_i$ ，可以发现这是一个卷积，是可以用 $FFT$ 跑的，众所周知 $FFT$ 的复杂度是 $O(nlogn)$ ，是能跑过的。</p><p>具体实现的时候我们需要将 $a​$ 拉成两倍长，或者说是断环为链？至于为什么的话，是因为题目要求了这个数列是可以旋转的。然后按照上式将 $b​$ 反向就好了。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,limit=<span class="number">1</span>,a[N],b[N],filp[N];</span><br><span class="line">ll a1=<span class="number">0</span>,a2=<span class="number">0</span>,b1=<span class="number">0</span>,b2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">complex</span> A[N],B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;filp[i])&#123;<span class="keyword">complex</span> tmp=f[i];f[i]=f[filp[i]];f[filp[i]]=tmp;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>;p&lt;=limit;p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> len=p/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;limit;k+=p)&#123;</span><br><span class="line">            <span class="keyword">complex</span> buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l=k;l&lt;k+len;++l)&#123;</span><br><span class="line">                <span class="keyword">complex</span> t=buf*f[len+l];</span><br><span class="line">                f[len+l]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(a[i]),a1+=a[i]*a[i],a2+=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(b[i]),b1+=b[i]*b[i],b2+=b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        A[i].x=A[i+n].x=a[i],B[i]=b[n-i+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(limit&lt;=(<span class="number">3</span>*n))limit&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?limit&gt;&gt;<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    FFT(A,<span class="number">1</span>),FFT(B,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=limit;++i)A[i]=A[i]*B[i];</span><br><span class="line">    FFT(A,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=limit;++i)A[i].x=(ll)(A[i].x/limit+<span class="number">0.5</span>);</span><br><span class="line">    ll ans=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=-m;j&lt;=m;++j)</span><br><span class="line">            ans=min(ans,a1+b1+<span class="number">1l</span>l*j*j*n+<span class="number">2l</span>l*j*(a2-b2)<span class="number">-2l</span>l*(ll)A[i+n].x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI2016]序列  莫队+ST表  luoguP3246</title>
      <link href="/2019/03/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP3246/"/>
      <url>/2019/03/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP3246/</url>
      
        <content type="html"><![CDATA[<p>一道莫队……….</p><p>最主要的就是怎么从当前区间推到相邻区间。</p><p>假设当前区间为 $[l,r]$ ，目标区间为 $[l,r+1]$ 。那么很显然这样子就会增加：</p><script type="math/tex; mode=display">[l,r+1],[l+1,r+1],[l+2,r+1]\cdots \cdots</script><p>这些区间，现在我们要做的就是尽快的算出这些区间的答案。</p><a id="more"></a><p>假设 $p$ 为区间 $[l,r+1]$ 的最小值的位置，那么在上面的区间中，$[l,r+1] \cdots [p,r+1]$ 这些区间显然都包含了 $p$ ，也就是说这些区间的最小值都为 $p$ ，那么这一段区间的贡献显然为 $a[p]\cdot (p-l+1)$ ，其中 $a[p]$ 为 $p$ 位置上的权值。</p><p>很显然我们可以预处理一个 $ST$ 表，通过 $ST$ 表上面的 $p$ 就可以 $O(1)$ 求出。</p><p>然后接下来考虑剩下的 $[p+1,r+1]\cdots [r+1,r+1]$ 这些区间。</p><p>我们设 $f[i][j]$ 表示右端点为 $j$ ，左端点的位置在 $[i,j]$ 范围内的所有区间所造成的贡献。</p><p>我们可以用单调栈预处理出位置 $i$ 的 $lmin$ 和 $rmin$ ，$lmin[i]$ 表示 $i$ 往左走遇到的第一个比 $i$ 小的数的位置，$rmin$ 同理。</p><p>那么我们很轻易的可以得到：</p><script type="math/tex; mode=display">f[i][j]=f[i][lmin_j-1]+a[lmin_j]\cdot (j-lmin_j)</script><p>发现 $i$ 是没有影响的，于是我们将 $i$ 丢掉。</p><script type="math/tex; mode=display">f[j]=f[lmin_j-1]+a[lmin_j]\cdot (j-lmin_j)</script><p>这个式子 $DP$ 与处理一下就好了。</p><p>那么最后我们从 $[l,r]$ 移向 $[l,r+1]$ 产生的贡献为：</p><script type="math/tex; mode=display">a[p]\cdot (p-l+1) + f[r+1]-f[p]</script><p>至于为什么要减去 $f[p]$ ，差不多是容斥的道理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,block,a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MO</span>&#123;</span><span class="keyword">int</span> l,r,id;&#125;q[N];</span><br><span class="line"><span class="keyword">int</span> top,<span class="built_in">stack</span>[N],lmin[N],rmin[N];</span><br><span class="line">ll res,Ans[N],fl[N],fr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(MO a,MO b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.l/block==b.l/block?a.l/block&amp;<span class="number">1</span>?a.r&lt;b.r:a.r&gt;b.r:a.l/block&lt;b.l/block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ST&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">23</span>;</span><br><span class="line">    <span class="keyword">int</span> logs[N],f[N][LogN+<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logs[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            f[i][<span class="number">0</span>]=i,logs[i]=logs[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=logs[n];++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">                f[i][j]=a[f[i][j<span class="number">-1</span>]]&lt;a[f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]]?f[i][j<span class="number">-1</span>]:f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=logs[y-x+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[f[x][ans]]&lt;a[f[y-(<span class="number">1</span>&lt;&lt;ans)+<span class="number">1</span>][ans]]?f[x][ans]:f[y-(<span class="number">1</span>&lt;&lt;ans)+<span class="number">1</span>][ans];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __Pre_lmin_rmin()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;a[<span class="built_in">stack</span>[top]]&gt;a[i])</span><br><span class="line">            rmin[<span class="built_in">stack</span>[top--]]=i;</span><br><span class="line">        lmin[i]=<span class="built_in">stack</span>[top],<span class="built_in">stack</span>[++top]=i;</span><br><span class="line">    &#125;<span class="keyword">while</span>(top)lmin[<span class="built_in">stack</span>[top]]=<span class="built_in">stack</span>[top<span class="number">-1</span>],rmin[<span class="built_in">stack</span>[top--]]=n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">left</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=ST::query(l<span class="number">-1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> (ll)a[p]*(r-p+<span class="number">1</span>)+fl[l<span class="number">-1</span>]-fl[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">right</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=ST::query(l,r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (ll)a[p]*(p-l+<span class="number">1</span>)+fr[r+<span class="number">1</span>]-fr[p];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);block=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    a[<span class="number">0</span>]=a[n+<span class="number">1</span>]=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]);</span><br><span class="line">    __Pre_lmin_rmin();</span><br><span class="line">    ST::Make();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)fr[i]=(ll)a[i]*(i-lmin[i])+fr[lmin[i]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)fl[i]=(ll)a[i]*(rmin[i]-i)+fl[rmin[i]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        IN(q[i].l),IN(q[i].r),q[i].id=i;</span><br><span class="line">    <span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">int</span> L=q[<span class="number">1</span>].l,R=L<span class="number">-1</span>;res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q[i].l,y=q[i].r;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;x)res+=left(L,R),L--;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;y)res+=right(L,R),R++;</span><br><span class="line">        <span class="keyword">while</span>(L&lt;x)res-=left(L+<span class="number">1</span>,R),++L;</span><br><span class="line">        <span class="keyword">while</span>(R&gt;y)res-=right(L,R<span class="number">-1</span>),--R;</span><br><span class="line">        Ans[q[i].id]=res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫队 </tag>
            
            <tag> ST表 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 货车运输  最大生成树+倍增Lca  luoguP1967</title>
      <link href="/2019/03/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP1967/"/>
      <url>/2019/03/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP1967/</url>
      
        <content type="html"><![CDATA[<p>题目大意就是，有多组询问，每组询问包含两个整数 $x,y​$ ，求出 $x​$ 到 $y​$ 的一条路径，满足这条路径在所有的 $x​$ 到 $y​$ 的路径中，边权最小的边权值最大。</p><p>这个很显然我们可以先求出图的最大生成树，那么 $x$ 到 $y$ 的目标路径肯定在最大生成树上，也只能在最大生成树上。</p><a id="more"></a><p>那么我们需要在最大生成树上找到这条路径，最大生成树是一棵树，很显然的我们可以想到在这棵树上做 $Lca$ ，那么这样就超级简单了。</p><p>我们在求 $lca$ 的时候顺带维护一下 $sum$ 数组，$sum[x][i]$ 表示在最大生成树 $x$ 到 $fa[x][i]$ 这条路径上的所有边的边权最小值。转移的方法也很简单：$sum[x][i]=min(sum[x][i-1],sum[fa[x][i-1]][i-1])$ 。</p><p>对于不能到达的情况特判一下就好了。</p><p>于是这题就做完了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">log</span>=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,cnt,f[N];</span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N][<span class="built_in">log</span>+<span class="number">2</span>],sum[N][<span class="built_in">log</span>+<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> from,to,val;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; E[N],V[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;<span class="keyword">return</span> a.val&gt;b.val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> f[x]==x?x:f[x]=find(f[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f,<span class="keyword">int</span> dis)</span></span>&#123;</span><br><span class="line">    dep[u]=dep[f]+<span class="number">1</span>,</span><br><span class="line">    fa[u][<span class="number">0</span>]=f,sum[u][<span class="number">0</span>]=dis;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">log</span>;++i)</span><br><span class="line">        fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>],</span><br><span class="line">        sum[u][i]=min(sum[u][i<span class="number">-1</span>],sum[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">int</span> size=E[u].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=E[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v!=f)dfs(v,u,V[u][i]);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=inf;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(dep[fa[x][i]]&gt;=dep[y])</span><br><span class="line">            ans=min(ans,sum[x][i]),x=fa[x][i];</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(fa[x][i]!=fa[y][i])&#123;</span><br><span class="line">            ans=min(ans,min(sum[x][i],sum[y][i]));</span><br><span class="line">            x=fa[x][i],y=fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    ans=min(ans,min(sum[x][<span class="number">0</span>],sum[y][<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">if</span>(fa[x][<span class="number">0</span>]==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)f[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        IN(G[i].from),IN(G[i].to),IN(G[i].val);</span><br><span class="line">    <span class="built_in">std</span>::sort(G+<span class="number">1</span>,G+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> fx=find(G[i].from),fy=find(G[i].to);</span><br><span class="line">        <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">            f[fy]=fx;++cnt;</span><br><span class="line">            E[G[i].from].push_back(G[i].to),V[G[i].from].push_back(G[i].val);</span><br><span class="line">            E[G[i].to].push_back(G[i].from),V[G[i].to].push_back(G[i].val);</span><br><span class="line">            <span class="keyword">if</span>(cnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(!dep[i])dfs(i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    IN(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,solve(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> lca </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [CQOI2015]网络吞吐量  网络流  luoguP3171</title>
      <link href="/2019/03/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP3171/"/>
      <url>/2019/03/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP3171/</url>
      
        <content type="html"><![CDATA[<p>题目要求你做什么就做什么呗。</p><p>我们先跑最短路，然后按照最短路的边连网络流的边就好了。</p><p>这里我选择跑堆优 $Dij$ ，然后我们枚举每一条边，判断着一条边是否为最短路的边，判断的方式很显然，就是看这条边的起点的 $dis$ 加上边权是否等于终点的 $dis$ 就好。</p><a id="more"></a><p>网络流要拆点，除了拆了的点之间连一条该点的权值的边之外，其余的边全部都是 $inf$ ，当然第一个点和第 $n$ 个点拆点后连边也是 $inf$ 而非点权。连完边之后跑最大流即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e18</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to;ll val;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    int cnt(1),dep[N],head[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;</span><br><span class="line">        G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">        G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">        q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">                <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">                <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,ll flow)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">        ll used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">                used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ll maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dijstra&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> P std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line">    <span class="built_in">std</span>::priority_queue&lt;P,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;P&gt;,<span class="built_in">std</span>::greater&lt;P&gt; &gt; q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> vis[N],head[N],cnt;</span><br><span class="line">    ll dis[N];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to;ll w;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;</span><br><span class="line">        G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].w=w,head[u]=cnt;</span><br><span class="line">        G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].w=w,head[v]=cnt; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)dis[i]=inf;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        dis[s]=<span class="number">0</span>;</span><br><span class="line">        q.push(<span class="built_in">std</span>::make_pair(dis[s],s));</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.top().second;</span><br><span class="line">            q.pop();<span class="keyword">if</span>(vis[x])<span class="keyword">continue</span>;vis[x]=<span class="literal">true</span>; </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)</span><br><span class="line">              <span class="keyword">if</span>(dis[G[i].to]&gt;dis[x]+G[i].w)&#123;</span><br><span class="line">               dis[G[i].to]=dis[x]+G[i].w;</span><br><span class="line">                 <span class="keyword">if</span>(!vis[G[i].to])q.push(<span class="built_in">std</span>::make_pair(dis[G[i].to],G[i].to));</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;++x)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)</span><br><span class="line">                <span class="keyword">if</span>(dis[x]+G[i].w==dis[G[i].to])</span><br><span class="line">                    Dinic::add(x+n,G[i].to,inf);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),s=<span class="number">1</span>,t=n&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,w;IN(u),IN(v),IN(w);</span><br><span class="line">    Dijstra::add(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijstra::dijstra(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i)</span><br><span class="line">        IN(x),Dinic::add(i,i+n,(i!=<span class="number">1</span>&amp;&amp;i!=n)?x:inf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Dinic::dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [ZJOI2009]狼和羊的故事  网络流  luoguP2598</title>
      <link href="/2019/03/11/%5B%E9%A2%98%E8%A7%A3%5DluoguP2598/"/>
      <url>/2019/03/11/%5B%E9%A2%98%E8%A7%A3%5DluoguP2598/</url>
      
        <content type="html"><![CDATA[<p>这题真的是裸的网络流……连我这种制杖都可以立刻想到正解。</p><p>如果不考虑领地问题的话，这显然是一道很裸的最小割———割断最少的边使 $S$ 和 $T​$ 不连通。</p><p>但是现在有了领地的问题……就是说限制了有些格子是一起的，不能被割开。</p><p>既然不能被割开，就连一条 $inf$ 的边啊，这样就割不开了啊。</p><a id="more"></a><p>于是我们可以让 $S$ 向所有的狼的领地连一条边权为 $inf$ 的边，然后所有的羊的领地向 $T$ 连一条边权为 $inf$ 的边。然后就是网格边连边了……</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(x,y) (((x)-1)*m+(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    int cnt(1),dep[N],head[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">        G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">        q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">                <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">                <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">                used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);s=n*m+<span class="number">1</span>,t=n*m+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">    <span class="keyword">int</span> a;IN(a);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1</span>)Dinic::add(s,id(i,j),inf);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">2</span>)Dinic::add(id(i,j),t,inf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;++k)&#123;</span><br><span class="line">    <span class="keyword">int</span> tx=i+dx[k],ty=j+dy[k];</span><br><span class="line">    <span class="keyword">if</span>(tx&lt;<span class="number">1</span>||tx&gt;n||ty&lt;<span class="number">1</span>||ty&gt;m)<span class="keyword">continue</span>;</span><br><span class="line">    Dinic::add(id(i,j),id(tx,ty),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Dinic::dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 Willem, Chtholly and Seniorious  珂朵莉树  luoguCF896C</title>
      <link href="/2019/03/11/%5B%E9%A2%98%E8%A7%A3%5DluoguCF896C/"/>
      <url>/2019/03/11/%5B%E9%A2%98%E8%A7%A3%5DluoguCF896C/</url>
      
        <content type="html"><![CDATA[<p>神奇的珂朵莉树，优雅的暴力。</p><p>珂朵莉树的主要思想就是对于一段连续的值相同的区间，将其缩为一个结点，然后丢到 $set$ 里面，主要的操作有拆分区间操作…….这货很强大，码量不短但极好写，而且一般不会出什么问题，调试也很方便。</p><a id="more"></a><p>但是珂朵莉树的思想很暴力，比如说区间第 $K$ 大，珂朵莉树的做法就是直接将区间拿出来排一波序！当然，这样暴力的东西只能在随机数据的情况下食用，或者数据水的情况下，不然分分钟给你 $T$ 飞！</p><p>好吧来看看这道题的操作该怎么办：</p><p>第一个操作的话属于傻逼操作，珂朵莉树，先 $split$ 提取 $l,r$ 区间，然后直接暴力访问，加上 $x$ 即可。</p><p>第二个操作完全就是珂朵莉树的基本操作，跟上面一样，暴力访问然后直接将权值改为 $x$ 即可，更简单的方法就是删除 $l,r$ 区间，然后把权值统一为 $x$ 后再插入 $l,r$ 。</p><p>第三个操作第 $K$ 大，上面说了，直接拿出来排个序就好了，炒鸡暴力。</p><p>第四个操作……仍然是暴力，可以参考第一二个操作，注意 $longlong$ 的问题，不要爆 $long long$ 了。</p><p>对于初始的序列，我们先用题目要求的随机化函数得到序列中每一个位置的值，然后插入到 $set$ 中，这个时候第 $i$ 个元素区间是 $i,i$ 。</p><p>还有一个需要注意的地方，就是在插入完整个序列后还要在最后面插入一个边界的哨兵结点，当然哨兵结点的权值为 $0$ 。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll seed,vmax;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rnd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll ret=seed;</span><br><span class="line">    seed=(seed*<span class="number">7</span>+<span class="number">13</span>)%<span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ODT</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="keyword">mutable</span>ll v;</span><br><span class="line">        Node(<span class="keyword">int</span> L,<span class="keyword">int</span> R=<span class="number">-1</span>,ll V=<span class="number">0</span>):l(L),r(R),v(V) &#123;&#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node&amp;x) <span class="keyword">const</span> &#123;<span class="keyword">return</span> l&lt;x.l;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">set</span>&lt;Node&gt; s;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> IT std::set<span class="meta-string">&lt;Node&gt;::iterator</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> IT <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        IT it=s.lower_bound(Node(pos));</span><br><span class="line">        <span class="keyword">if</span>(it!=s.end()&amp;&amp;it-&gt;l==pos)<span class="keyword">return</span> it;</span><br><span class="line">        <span class="keyword">else</span> --it;</span><br><span class="line">        <span class="keyword">int</span> L=it-&gt;l,R=it-&gt;r;ll V=it-&gt;v;</span><br><span class="line">        s.erase(it);</span><br><span class="line">        <span class="keyword">return</span> s.insert(Node(L,pos<span class="number">-1</span>,V)),s.insert(Node(pos,R,V)).first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll val)</span></span>&#123;</span><br><span class="line">        IT itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">        s.erase(itl,itr);</span><br><span class="line">        s.insert(Node(l,r,val));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll val)</span></span>&#123;</span><br><span class="line">        IT itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">        <span class="keyword">for</span>(;itl!=itr;++itl)itl-&gt;v+=val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">rank</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;ll,<span class="keyword">int</span>&gt; &gt; hep;</span><br><span class="line">        IT itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">        <span class="keyword">for</span>(;itl!=itr;++itl)</span><br><span class="line">            hep.push_back(<span class="built_in">std</span>::make_pair(itl-&gt;v,itl-&gt;r-itl-&gt;l+<span class="number">1</span>));</span><br><span class="line">        <span class="built_in">std</span>::sort(hep.begin(),hep.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;ll,<span class="keyword">int</span>&gt; &gt;::iterator it=hep.begin();it!=hep.end();++it)&#123;</span><br><span class="line">            k-=it-&gt;second;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;=<span class="number">0</span>)<span class="keyword">return</span> it-&gt;first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">pow</span><span class="params">(ll x,ll y,ll mod)</span></span>&#123;</span><br><span class="line">        ll res=<span class="number">1l</span>l;x%=mod;</span><br><span class="line">        <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)res=res*x%mod;</span><br><span class="line">        <span class="keyword">return</span> res%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ex,<span class="keyword">int</span> mod)</span></span>&#123;</span><br><span class="line">        IT itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;itl!=itr;++itl)</span><br><span class="line">            res=(res+(ll)(itl-&gt;r-itl-&gt;l+<span class="number">1</span>)*<span class="built_in">pow</span>(itl-&gt;v,ll(ex),ll(mod)))%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            a=(rnd()%vmax)+<span class="number">1</span>,s.insert(Node(i,i,a));</span><br><span class="line">        s.insert(Node(n+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%lld%lld"</span>,&amp;n,&amp;m,&amp;seed,&amp;vmax);</span><br><span class="line">    T.pre(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> op=(rnd()%<span class="number">4</span>)+<span class="number">1</span>,l=(rnd()%n)+<span class="number">1</span>,r=(rnd()%n)+<span class="number">1</span>,x,y;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)<span class="built_in">std</span>::swap(l,r);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)x=(rnd()%(r-l+<span class="number">1</span>))+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> x=(rnd()%vmax)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>)y=(rnd()%vmax)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)T.add(l,r,ll(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)T.assign(l,r,ll(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.rank(l,r,x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.sum(l,r,x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 珂朵莉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [国家集训队]聪聪可可  树形DP  luoguP2634</title>
      <link href="/2019/03/10/%5B%E9%A2%98%E8%A7%A3%5DluoguP2634/"/>
      <url>/2019/03/10/%5B%E9%A2%98%E8%A7%A3%5DluoguP2634/</url>
      
        <content type="html"><![CDATA[<p>别人都说，什么淀粉质啊之类的轻松水过，然而我有码量恐惧症，不适合如此数据结构(主要也是太弱了QvQ)</p><a id="more"></a><h4 id="那就上树形DP吧！"><a href="#那就上树形DP吧！" class="headerlink" title="那就上树形DP吧！"></a>那就上树形DP吧！</h4><h4 id="f-i-j-表示点i为根的子树中到i路径权值和-3-j的点数"><a href="#f-i-j-表示点i为根的子树中到i路径权值和-3-j的点数" class="headerlink" title="$f[i][j]$表示点i为根的子树中到i路径权值和%3=j的点数."></a>$f[i][j]$表示点<strong>i</strong>为根的子树中到<strong>i</strong>路径权值和<strong>%3=j</strong>的点数.</h4><p>状态转移：Dfs，直接从子树转移即可，具体看代码。</p><p>真是炒鸡简单的啦~~</p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE:"></a>CODE:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> y?gcd(y,x%y):x;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt,head[N];ll f[N][<span class="number">3</span>],ans;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt;</span><br><span class="line">G[++cnt].nxt=head[y],G[cnt].to=x,G[cnt].val=v,head[y]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">f[x][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line"><span class="keyword">int</span> y=G[i].to;<span class="keyword">if</span>(y==fa)<span class="keyword">continue</span>;Dfs(y,x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;++j)ans+=(ll)(f[y][j]*f[x][(((<span class="number">3</span>-j-G[i].val)%<span class="number">3</span>)+<span class="number">3</span>)%<span class="number">3</span>]*<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//从子树转移过来，注意取模，看不懂的同学画图秒懂</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;++j)f[x][(G[i].val+j)%<span class="number">3</span>]+=f[y][j];</span><br><span class="line">        <span class="comment">//跟新 f[x]</span></span><br><span class="line">&#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n);ll s=(ll)n*n,g;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> x,y,v,i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">       IN(x),IN(y),IN(v),add(x,y,v);</span><br><span class="line">    Dfs(<span class="number">1</span>,<span class="number">0</span>);ans+=n,g=gcd(ans,s);<span class="comment">//一定要是最简分数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>,ans/g,s/g);<span class="comment">//输出答案</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 「网络流24题」餐巾计划问题 网络流 luoguP1251</title>
      <link href="/2019/03/09/%5B%E9%A2%98%E8%A7%A3%5DluoguP1251/"/>
      <url>/2019/03/09/%5B%E9%A2%98%E8%A7%A3%5DluoguP1251/</url>
      
        <content type="html"><![CDATA[<p>实际上这道题可以用贪心解的……但是码量惊人 $QwQ$ 。</p><p>于是上网络流吧……这题显然是费用流。</p><p>对于每一天，我们将其拆成两个点，一个表示这天的早晨，一个表示这天的晚上。</p><a id="more"></a><p>我们从源点向每一天的晚上连一条边权为 $x$ 费用为 $0​$ 的边，表示这一天我们需要处理的餐巾数，就是白天用掉的餐巾。</p><p>每一天的早晨，这些餐巾来自题目给出的地方，并且最终连向汇点，边权为 $x$ 费用为 $0$ 。</p><p>然后考虑每天早上餐巾的来源，现在题目给了四个操作：</p><ul><li>买新的</li><li>丢到快洗店</li><li>丢到慢洗店</li><li><del>弃疗</del></li></ul><p>对于买新的，我们只需要从源点连一条边权为 $inf$ 费用为 $p$ 的边到这一天的白天，我们餐巾的获取都来自源点。</p><p>丢到快洗店，也就是说第 $i$ 天晚上这些没有处理的毛巾丢到快洗店，那么第 $i+m$ 天将洗完，这个时候可以在早晨收到餐巾，于是从 $i$ 的晚上连一条边权为 $inf$ 费用为 $f$ 的边连向 $i+m$ 的白天。</p><p>丢到慢洗店，这个跟快洗店是一个道理。</p><p>关于弃疗，就是说放着不管了，可以理解为第 $i$ 天晚上的餐巾留到了第 $i+1$ 天，并且这些餐巾是不能用的，那么不会连向 $i+1$ 的早晨，于是从 $i$ 的晚上连一条边权为 $inf$ 费用为 $f$ 的边连向 $i+1$ 的晚上。</p><p>然后跑一边费用流板子就好了，注意要开 $long long$ 。</p><p>至于上面四个选项为什么边的容量都设为 $inf$ ，我们就拿买新的来说吧，题目又没有限制你最多买多少，所以就是允许你可以一直买，买无限条，就当成 $inf$ 啦。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(type,x) ((type)*n+x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y)) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s,t,r[N],tot(<span class="number">1</span>),head[N],vis[N],dist[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val,cot;&#125;G[N&lt;&lt;<span class="number">8</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pre</span>&#123;</span><span class="keyword">int</span> last,edge;&#125;pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> val,<span class="keyword">int</span> cot)</span></span>&#123;</span><br><span class="line">    G[++tot].nxt=head[u],G[tot].to=v,G[tot].val=val,G[tot].cot=cot,head[u]=tot;</span><br><span class="line">    G[++tot].nxt=head[v],G[tot].to=u,G[tot].val=<span class="number">0</span>,G[tot].cot=-cot,head[v]=tot;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span>(pre));</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s),vis[s]=<span class="number">1</span>,dist[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">    <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(G[i].val&gt;<span class="number">0</span>&amp;&amp;dist[v]&gt;dist[u]+G[i].cot)&#123;</span><br><span class="line">            dist[v]=dist[u]+G[i].cot;</span><br><span class="line">                pre[v].last=u,pre[v].edge=i;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])&#123;q.push(v),vis[v]=<span class="number">1</span>;&#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;vis[u]=<span class="number">0</span>; </span><br><span class="line">    &#125;<span class="keyword">return</span> dist[t]!=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">EK</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll maxflow=<span class="number">0</span>;</span><br><span class="line">    ll cost=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> min_flow;</span><br><span class="line">    <span class="keyword">while</span>(Spfa())&#123;</span><br><span class="line">        min_flow=inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pre[i].last)</span><br><span class="line">           min_flow=min(min_flow,G[pre[i].edge].val);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pre[i].last)&#123;</span><br><span class="line">            G[pre[i].edge].val-=min_flow;</span><br><span class="line">            G[pre[i].edge^<span class="number">1</span>].val+=min_flow; </span><br><span class="line">        &#125;</span><br><span class="line">        maxflow+=min_flow;</span><br><span class="line">        cost+=min_flow*dist[t];</span><br><span class="line">    &#125;<span class="keyword">return</span> cost; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,_n,_p,_m,_f,_s;</span><br><span class="line">    IN(n);s=<span class="number">0</span>,t=n*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;IN(x);</span><br><span class="line">        add(s,id(<span class="number">1</span>,i),x,<span class="number">0</span>),add(id(<span class="number">0</span>,i),t,x,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    IN(_p),IN(_m),IN(_f),IN(_n),IN(_s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n)add(id(<span class="number">1</span>,i),id(<span class="number">1</span>,i+<span class="number">1</span>),inf,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(i+_m&lt;=n)add(id(<span class="number">1</span>,i),id(<span class="number">0</span>,i+_m),inf,_f);</span><br><span class="line">        <span class="keyword">if</span>(i+_n&lt;=n)add(id(<span class="number">1</span>,i),id(<span class="number">0</span>,i+_n),inf,_s);</span><br><span class="line">        add(s,id(<span class="number">0</span>,i),inf,_p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,EK());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [WC2013]糖果公园  树上带修改莫队  luoguP4074/Uoj58</title>
      <link href="/2019/03/08/%5B%E9%A2%98%E8%A7%A3%5DluoguP4074/"/>
      <url>/2019/03/08/%5B%E9%A2%98%E8%A7%A3%5DluoguP4074/</url>
      
        <content type="html"><![CDATA[<p>毒瘤题目，树上带修改莫队板子题。</p><p>关于树上莫队和带修改莫队的文章戳这 $QwQ​$ :<a href="https://monlights.github.io/2019/03/08/[算法]莫队&amp;树上莫队/">[算法]莫队&amp;树上莫队</a></p><p>然后就是将其结合在一起了，结合的话炒鸡简单，就是码量增大…</p><a id="more"></a><p>可以算作一个树上莫队/树上带修改莫队的板子来看。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">24</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">IN</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> flag?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,v[N],w[N],c[N];<span class="comment">/*test*/</span></span><br><span class="line"><span class="keyword">int</span> id[N&lt;&lt;<span class="number">1</span>],in[N],out[N],dep[N],f[N][LogN],sequencelong;<span class="comment">/*dfs&amp;lca*/</span></span><br><span class="line"><span class="keyword">int</span> head[N],cnt;<span class="comment">/*Tree Edge*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to;&#125;G[N&lt;&lt;<span class="number">1</span>];<span class="comment">/*Tree Edge*/</span></span><br><span class="line"><span class="keyword">int</span> c0,c1,block,tot[N],cl[N],cr[N],vis[N],modify[N];<span class="comment">/*MO*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MO</span>&#123;</span><span class="keyword">int</span> l,r,lbe,rbe,time,id,lca,ans;&#125;Q[N];<span class="comment">/*MO*/</span></span><br><span class="line">ll now,Ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(MO a,MO b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.lbe^b.lbe)<span class="keyword">return</span> a.lbe&lt;b.lbe;</span><br><span class="line">    <span class="keyword">if</span>(a.rbe^b.rbe)<span class="keyword">return</span> a.rbe&lt;b.rbe;</span><br><span class="line">    <span class="keyword">if</span>(a.time^b.time)<span class="keyword">return</span> a.time&lt;b.time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_Lca_and_sequence</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    dep[u]=dep[fa]+<span class="number">1</span>,f[u][<span class="number">0</span>]=fa;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;++i)f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    id[in[u]=++sequencelong]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=fa)Get_Lca_and_sequence(G[i].to,u);</span><br><span class="line">    id[out[u]=++sequencelong]=u;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])swap(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;~i;--i)</span><br><span class="line">        <span class="keyword">if</span>(dep[u]-(<span class="number">1</span>&lt;&lt;i)&gt;=dep[v])u=f[u][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;~i;--i)</span><br><span class="line">        <span class="keyword">if</span>(f[u][i]!=f[v][i])u=f[u][i],v=f[v][i];</span><br><span class="line">    <span class="keyword">return</span> u==v?u:f[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Main_input()&#123;</span><br><span class="line">    n=IN(),m=IN(),q=IN();<span class="comment">/*line 1*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)v[i]=IN();<span class="comment">/*line 2*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)w[i]=IN();<span class="comment">/*line 3*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)add(IN(),IN());<span class="comment">/*line 4 to n+2*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)c[i]=IN();<span class="comment">/*line n+3*/</span></span><br><span class="line">    Get_Lca_and_sequence(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    block=<span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="built_in">std</span>::<span class="built_in">pow</span>(sequencelong,<span class="number">0.66666</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;<span class="comment">/*line n+4 to n+4+q*/</span></span><br><span class="line">        <span class="keyword">int</span> Type=IN(),x=IN(),y=IN();</span><br><span class="line">        <span class="keyword">if</span>(Type==<span class="number">1</span>)&#123;</span><br><span class="line">            Q[++c1].id=c1,Q[c1].time=c0;</span><br><span class="line">            <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">                Q[c1].lbe=(Q[c1].l=in[x])/block;</span><br><span class="line">                Q[c1].rbe=(Q[c1].r=in[x])/block;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(in[x]&lt;in[y]&amp;&amp;out[y]&lt;out[x])&#123;</span><br><span class="line">                    Q[c1].lbe=(Q[c1].l=in[x])/block;</span><br><span class="line">                    Q[c1].rbe=(Q[c1].r=in[y])/block;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(in[y]&lt;in[x]&amp;&amp;out[x]&lt;out[y])&#123;</span><br><span class="line">                    Q[c1].lbe=(Q[c1].l=in[y])/block;</span><br><span class="line">                    Q[c1].rbe=(Q[c1].r=in[x])/block;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(out[x]&lt;in[y])&#123;</span><br><span class="line">                        Q[c1].lbe=(Q[c1].l=out[x])/block;</span><br><span class="line">                        Q[c1].rbe=(Q[c1].r=in[y])/block;</span><br><span class="line">                        Q[c1].lca=Lca(x,y);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(out[y]&lt;in[x])&#123;</span><br><span class="line">                        Q[c1].lbe=(Q[c1].l=out[y])/block;</span><br><span class="line">                        Q[c1].rbe=(Q[c1].r=in[x])/block;</span><br><span class="line">                        Q[c1].lca=Lca(x,y);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> modify[++c0]=x,cl[c0]=c[x],cr[c0]=y,c[x]=y;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[x])now-=<span class="number">1l</span>l*v[c[x]]*w[tot[c[x]]--];</span><br><span class="line">    <span class="keyword">else</span> now+=<span class="number">1l</span>l*v[c[x]]*w[++tot[c[x]]];</span><br><span class="line">    vis[x]^=<span class="number">1</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[modify[x]])&#123;work(modify[x]);c[modify[x]]=cr[x];work(modify[x]);&#125;</span><br><span class="line">    <span class="keyword">else</span> c[modify[x]]=cr[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[modify[x]])&#123;work(modify[x]);c[modify[x]]=cl[x];work(modify[x]);&#125;</span><br><span class="line">    <span class="keyword">else</span> c[modify[x]]=cl[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Main_Mo_Solve()&#123;</span><br><span class="line">    <span class="built_in">std</span>::sort(Q+<span class="number">1</span>,Q+c1+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>,nowtime=c0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c1;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(nowtime&gt;Q[i].time)del(nowtime--);</span><br><span class="line">        <span class="keyword">while</span>(nowtime&lt;Q[i].time)add(++nowtime);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;Q[i].l)work(id[l++]);</span><br><span class="line">        <span class="keyword">while</span>(l&gt;Q[i].l)work(id[--l]);</span><br><span class="line">        <span class="keyword">while</span>(r&lt;Q[i].r)work(id[++r]);</span><br><span class="line">        <span class="keyword">while</span>(r&gt;Q[i].r)work(id[r--]);</span><br><span class="line">        <span class="keyword">if</span>(Q[i].lca)work(Q[i].lca);</span><br><span class="line">        Ans[Q[i].id]=now;</span><br><span class="line">        <span class="keyword">if</span>(Q[i].lca)work(Q[i].lca);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Main_output()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c1;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _Main_input();</span><br><span class="line">    _Main_Mo_Solve();</span><br><span class="line">    _Main_output();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，尽管再毒瘤，这个也只是入门的树上带修改莫队的题目。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈4种莫队及例题</title>
      <link href="/2019/03/08/%5B%E7%AE%97%E6%B3%95%5D%E8%8E%AB%E9%98%9F&amp;%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F/"/>
      <url>/2019/03/08/%5B%E7%AE%97%E6%B3%95%5D%E8%8E%AB%E9%98%9F&amp;%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<p>关于莫队，实际上是去年就接触的，大概是 $1$2 月份，当时感觉莫队是个很高大上的东西，不过的确也很高大上。当时评判知识点的标准就是这个知识点的题目一般难度是多少。看大米饼的博客，第一道例题就是洛谷上的紫题，于是跟着题解，将题目切掉了。</p><p>$AC$ 第一道例题的那一天是 $2018.12.08$ ，那题是一个普通莫队的例题。恰好在今天，$2019.3.8$ ，我切掉了糖果公园，这题是一个树上待修莫队的例题。从普通莫队到树上待修莫队已经时隔 $4$ 月………..不得不说时间过得真快，终于在这个时候我有资格浅谈莫队了，但也仅仅是浅谈而已。</p><a id="more"></a><hr><h1 id="0XFF-前言"><a href="#0XFF-前言" class="headerlink" title="0XFF  前言"></a>0XFF  前言</h1><hr><blockquote><p>老规矩，有问题的话直接联系就好，$QQ$ 号：$2641450959$</p><p>由于本人的水平问题，文章或许会有些纰漏，还请大佬们指教</p></blockquote><hr><h1 id="0X1F-莫队是什么"><a href="#0X1F-莫队是什么" class="headerlink" title="0X1F  莫队是什么"></a>0X1F  莫队是什么</h1><hr><blockquote><p>莫队，用于解决一些奇怪的区间问题，例如询问区间内有多少个不相同的数，这个时候平衡树和线段树都显得有些不好维护，但是莫队却可以以优秀的 $O(\sqrt{n})$ 的复杂度快速得到答案，并且莫队短小精悍，如果单纯的就是询问区间内有多少个不相同的数的话，莫队的核心代码仅有 $4$ 行。</p><p>莫队的思想，就是有两个指针 $l,r$ ，然后根据这两个指针的移动来计算答案。</p><p>莫队是离线算法，并且不支持区间修改操作，单点修改操作勉强可以支持。</p><p>莫队是一种很强大的算法，在面对不强制在线的区间问题时可以考虑莫队。</p></blockquote><hr><h1 id="0X2F-几种莫队"><a href="#0X2F-几种莫队" class="headerlink" title="0X2F  几种莫队"></a>0X2F  几种莫队</h1><hr><h2 id="0X2F—1-普通莫队"><a href="#0X2F—1-普通莫队" class="headerlink" title="0X2F—1  普通莫队"></a>0X2F—1  普通莫队</h2><p>我们先来具体探讨一下上面的那个 “区间不相同数的个数” 的问题。</p><p>假设我们的整个区间是这样的：</p><p><img src="/2019/03/08/[算法]莫队&树上莫队/A.png" alt=""></p><p>很显然，我们当前区间有四种不同的颜色，我们设绿为 $1$ ，黄为 $2$ ，蓝为 $3$ ，红为 $4$ 。这个时候我们开一个 $cnt$ 数组，$cnt[x]$ 表示 $x$ 颜色在当前区间的出现次数。然后我们记录一个 $ans$ ，表示当前区间的答案。</p><p>假设现在我们要将 $l,r$ 移动至下一个询问。对，就是裸的移动，就是 $l,r$ 一个一个格子的移动，因为移动一次(即移动一下 $l$ 或 $r$ )后的区间就是原区间的相邻区间，一般 $O(1)$ 就可以退出来相邻区间的贡献，那么这一个一个的小贡献叠加起来，最终就是目标区间的贡献。</p><p>我们还是来模拟一下，假设我们下一个询问的区间如下：</p><p><img src="/2019/03/08/[算法]莫队&树上莫队/B.png" alt=""></p><p>我们先来考虑 $r$ 的移动所产生的贡献。</p><p>首先，$r$ 是往右移的，因此我们可以确定 $r$ 的移动是会增加贡献而非减少贡献。然后看看 $r$ 的移动带来了什么贡献呢？<strong>一个蓝色方块！</strong>，蓝色的编号为 $3$ ，那么很显然，我们的 $cnt[3]$ 就要加 $1$ 。</p><p>这个移动的代码我们也可以快速写出： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(r&lt;q[i].r)add(++r);</span><br></pre></td></tr></table></figure><p>其中 $r$ 为当前的 $r$ 指针，$q[i].r$ 为当前询问区间的 $r$ 。</p><p>为什么是 ++$r$ 而不是 $r$++ 呢？很显然，++$r$ 是先移开再算贡献，$r$++ 是算完贡献再移开，我们黄色格子的贡献已经计算完了，所以是 ++$r$ 。</p><p>那么怎么更新 $ans$ 呢？</p><p>我们来考虑，如果这个新加入的格子不是现在区间内已经有的蓝色，而是另一种没出现过的颜色怎么办呢？显然 $ans$ 要 +$1$ ，不过如果是蓝色就不要加了，这个时候我们判断一下就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tot[c[x]])++ans;</span><br><span class="line">    <span class="comment">/*之前没有这个颜色，现在加进来，不同颜色数又多了1，故ans++*/</span></span><br><span class="line">    ++tot[c[x]];<span class="comment">/*这个颜色的出现次数+1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 $c[x]$ 表示位置 $x$ 上的颜色，$tot[x]$ 表示颜色 $x$ 的出现次数。(实际上上面的代码可以压成一行的)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(!tot[c[x]]++)++ans;&#125;</span><br></pre></td></tr></table></figure><p>那么现在来考虑 $l$ ，这个时候 $l$ 往右移，但是这次不是增加贡献了，是减少了！</p><p>但是减少的代码跟增加的没什么区别：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;q[i].l)del(l++);<span class="comment">/*当前l所在的格子也要del掉，所以是l++*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tot[c[x]]==<span class="number">1</span>)--ans;</span><br><span class="line">    <span class="comment">/*颜色只剩下一个了，这次del掉，这个颜色就没有了，故ans--*/</span></span><br><span class="line">    --tot[c[x]];<span class="comment">/*颜色数少1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压行后：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(!--tot[c[x]])--ans;&#125;</span><br></pre></td></tr></table></figure><p>如果还有些没明白可以画一下，然后顺便理解一下 $l$ 往左移的时候是什么样，$r$ 往左移的时候是什么样。</p><p>然后这就是普通队列的基本的移动了，这个是可以在线完成，但是你会发现……….</p><p><strong>询问的 $l,r$ 的毒瘤顺序或许会让指针到处乱跳！复杂度将爆炸！</strong></p><p>所以我们要离线操作，将所有的询问排个序。但是具体怎么排序呢？当然不能瞎排，不然的话复杂度依旧爆炸。</p><p>所以，这个时候我们借助<strong>分块</strong>来排序。</p><p>块的大小一般是 $\sqrt{n}​$ ，对于第 $x​$ 个询问，我们计算一下 $q[x].l​$ 在哪个块中，$q[x].r​$ 又在哪个块中，排序的时候以 $l​$ 为第一关键字，$r​$ 为第二关键字排序。假定我们要给两个询问 $a,b​$ 排序。那么我们首先判断 $q[a].l​$ 所在的块是否跟 $q[b].l​$ 所在的块一样，一样的话就直接按照 $r​$ 排序，不一样的话排序 $l​$ 。</p><p>$cmp$  代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(MO a,MO b)</span></span>&#123;<span class="keyword">return</span> Be[a.l]==Be[b.l]?a.r&lt;b.r:a.l&lt;b.l;&#125;</span><br></pre></td></tr></table></figure><p>其中 $Be[x]$ 为 $x$ 所在的块的编号。</p><p>当然，块的大小以及排序方法确定了莫队算法的复杂度。值得一提的是，在一次考试中，有一道莫队的题，别人用 $\sqrt{n}$ 的块大小，就是按照上面的方法排序，每个点的时间均大于 $0.97ms$ ，但是我用的另外一种方法，使得平均速度不超过 $0.52ms$ 。</p><p>我的块大小是 $\frac{n}{\sqrt{\frac{m\cdot 2}{3}}}​$ ，其余的都差不多。</p><p>但是建议大家还是用 $\sqrt{n}$ 的块大小吧，跑得也不慢。</p><hr><h2 id="0X2F—2-带修改莫队"><a href="#0X2F—2-带修改莫队" class="headerlink" title="0X2F—2  带修改莫队"></a>0X2F—2  带修改莫队</h2><p>上面的莫队是两个关键字排序，那么这个时候又了修改，也就是说序列在不同的时间或许状态就会不一样了，这个时候直接移动区间是会得到错误的答案的。</p><p>假设现在的 $l,r$ 所在的区间是第四次修改后的询问，下一个将要移动到的区间是第一次修改后的询问，怎么移动？</p><p>这个时候就有一种想法，我们可以建立时间戳，然后一上面的为例子，既然时间不同，我们就暴力修改时间！具体怎么搞呢？我们几下每次修改点的位置，原来权值及修改后的权值。然后暴力还原，以上面的询问为例，我们暴力还原的就是中间差了的这三个修改，那么我们将这三个修改点的权值都变为 “原来权值” ，变的时候需要注意，假设当前变了的点在 $l,r$ 区间内，我们需要维护一下 $ans$ ，就像上面那样维护。</p><hr><h2 id="0X2F—3-树上莫队"><a href="#0X2F—3-树上莫队" class="headerlink" title="0X2F—3  树上莫队"></a>0X2F—3  树上莫队</h2><p>听说过 $dfs$ 序列吗？</p><p>假设我们现在有一颗树，如下：</p><p><img src="/2019/03/08/[算法]莫队&树上莫队/C.png" alt=""></p><p>那么它的 $dfs$ 序列为：</p><script type="math/tex; mode=display">1\ 2\ 4\ 7\ 7\ 4\ 5\ 5\ 2\ 3\ 6\ 6\ 3\ 1​</script><p>怎么获取它的 $dfs$ 序列呢？一个简单的 $dfs$ 就可以完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    id[++tot]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=fa)Dfs(G[i].to,u);<span class="comment">/*去往儿子*/</span></span><br><span class="line">    id[++tot]=u;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们记 $in[x]$ 为 $x$ 第一次出现的位置，也就是 $dfs$ 进入 $x$ 的时候，$out[x]$ 为 $x$ 第二次出现的位置，也就是 $dfs$ 退出 $x$ 结点的时候。  </p><p>所谓树上莫队，就是在这棵树的 $dfs$ 序列上做莫队。</p><p>这个时候分以下几种种情况：</p><h3 id="1-询问的两个点-x-y-为同一个点"><a href="#1-询问的两个点-x-y-为同一个点" class="headerlink" title="1.询问的两个点 $x,y$ 为同一个点"></a>1.询问的两个点 $x,y$ 为同一个点</h3><p>很好解决，即：$q[i].l=in[x],q[i].r=in[x]$</p><hr><h3 id="2-询问的两个点-x-y-的-lca-为-x-或-y"><a href="#2-询问的两个点-x-y-的-lca-为-x-或-y" class="headerlink" title="2.询问的两个点 $x,y$ 的 $lca$ 为 $x$ 或 $y$"></a>2.询问的两个点 $x,y$ 的 $lca$ 为 $x$ 或 $y$</h3><p>这个时候我们来观察 $dfs​$ 序列，就以上图的 $x=7,y=2​$ 为例：</p><script type="math/tex; mode=display">1\ 2\ 4\ 7\ 7\ 4\ 5\ 5\ 2\ 3\ 6\ 6\ 3\ 1​</script><p>在原树中 $7,2​$ 之间有一个 $4​$ ，可以发现在序列中 $in[2]​$ 和 $in[7]​$ 之间也有一个 $4​$ 。</p><p>不难发现，这种情况下的询问区间中的点就在 $in[x]-in[y]$ 或 $in[y]-in[x]$ 之间！</p><hr><h3 id="3-询问的两个点-x-y-不存在父子关系"><a href="#3-询问的两个点-x-y-不存在父子关系" class="headerlink" title="3.询问的两个点 $x,y$ 不存在父子关系"></a>3.询问的两个点 $x,y$ 不存在父子关系</h3><p>我们以上图的 $x=2,y=3$ 为例。</p><p>观察 $dfs​$ 序列：</p><script type="math/tex; mode=display">1\ 2\ 4\ 7\ 7\ 4\ 5\ 5\ 2\ 3\ 6\ 6\ 3\ 1</script><p>欸，中间不是有一个 $1​$ 吗？怎么没算进来呢？</p><p>因为 $dfs$ 序列的构造方式使得 $in[1]$ 永远在它们前面，$out[1]$ 永远在它们后面，所以这个是不会算进来的。</p><p>当然我们会发现，中间的节点在 $out[2]-in[3]$ 之间，我们的询问区间就是 $out[2],in[3]$ 。</p><p>只是我们要多加上一个 $1$ 的贡献，也就是 $lca(2,3)$ 的贡献，$lca$ 计算就好。</p><hr><p>但是对于编号来讲，$dfs$ 序列中一个节点的编号出现了两次啊，这怎么办呢？我们记一个 $vis[x]$ 表示 $x$ 的出现情况，然后计算贡献就好办了。假设现在莫队移动的时候遇到了 $x$ ，那么如果这个时候 $vis[x]$ 为 $true$ ，也就是说 $x$ 之前计算过，我们就减去这个贡献，否则加上，然后反转 $vis[x]$ 的值。</p><p>为什么要这样做？</p><p>我们假设：</p><p>$l\leq q[i].l\leq in[x]\leq r \leq out[x]\leq q[i].r$</p><p>如图：</p><p><img src="/2019/03/08/[算法]莫队&树上莫队/D.png" alt=""></p><p>这个时候 $vis[x]$=$1$ ，那么 $r$ 经过 $out[x]$ 到达 $q[i].r$ 的时候会将 $x$ 的贡献丢掉，也就是说 $x$ 没有产生任何贡献。</p><p>为什么这样做？可以肯定询问区间不包含 $x$ ，所以这样是对的。</p><p>我们举个例子，对于上面的那棵树，假设我们的询问区间为 $4,3$ ，$dfs$ 序列：</p><script type="math/tex; mode=display">1\ 2\ 4\ 7\ 7\ 4\ 5\ 5\ 2\ 3\ 6\ 6\ 3\ 1</script><p>$4,3$ 显然属于上面的第三种情况，但是我们发现 $out[4]$ 和 $in[3]$ 之间有 $5$ ……….显然我们的询问的区间中没有 $5$ ，但是发现了吗？$5$ 是出现了两次的，也就是说最终我们没有计算 $5$ 的贡献，而 $2$ 出现了一次，我们记上了 $2$ 的贡献，很显然 $2$ 在询问范围内。</p><p>对于其他的情况也是类似，总的来说就是，当一个询问区间内出现了两遍或零遍 $x$ ，那么根据 $dfs$ 序列的性质可以知道 $x$ 肯定不在当前询问的区间中。如果是出现了一次，那么肯定就在询问区间当中，我们便记上 $x$ 所产生的贡献即可。</p><h2 id="0X2F—4-回滚莫队"><a href="#0X2F—4-回滚莫队" class="headerlink" title="0X2F—4  回滚莫队"></a>0X2F—4  回滚莫队</h2><p>———$update - 2019.3.20$———</p><p>回滚莫队，也是一个很神奇的东西。</p><p>现在问题来了，让你找一个区间 $l,r$ 的 <strong>元素的值 $\times$ 元素在 $l,r$ 中的出现次数</strong> 的最大值。</p><p>这个时候我们发现莫队可以 $add$ ，但是 $del$ 就不好办了……………………………..</p><p><strong>于是回滚莫队出现了。</strong></p><p>回滚莫队是按照一个一个块来处理的，每处理一个块，就会解决所有<strong>左端点 $l$ 在当前块中</strong>的询问，我们要保证这些左端点属于一个同块的询问的<strong>右端点是要升序排好的</strong>。 这个对询问排序的时候就可以解决。</p><p>于是现在可以得到一下框架：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//当前要从第几个询问开始处理&amp;当前的块</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cnt[i]=<span class="number">0</span>;<span class="comment">//清空cnt数组</span></span><br><span class="line">    \*......*\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    \*......*\</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">1</span>;<span class="comment">//要处理第几个询问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=blo[n];++i)<span class="comment">//枚举所有的块</span></span><br><span class="line">        num=solve(num,i);<span class="comment">//下一个块的询问要从num开始。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在右端点都是升序的我们不用担心了。</p><p>但是左端点怎么办？现在有一种办法，我们设 $L$ 为<strong>当前块的最后一个</strong>对于每一个询问，我们先移动右端点，并将左端点设为 $L+1$ ，右端点移动到位后，这个时候 $ans$ 记录的区间为 $L+1,q[i].r$ ，这个时候记录一下 $ans$ ，然后将左端点移动至 $q[i].l$ 。</p><p>移动完成之后，我们得到了这个询问的 $Ans$ ，现在直接更新答案数组： $Ans[q[i].id]=ans$</p><p>接下来，我们要将位于 $q[i].l$ 的左端点”滚回去”，”滚回”到 $L+1$ 。</p><p>这很简单了，我们移过来的时候改变了 $cnt$ 数组，”滚回去” 的时候再改回来就好了。至于 $ans$ 怎么更新的话，直接变为之前记录的值就好了。</p><p>跟普通莫队差不太多，或许常数大些。</p><p>值得注意的是，如果 $q[i].l$ 和 $q[i].r$ 处于同一个块的话，直接暴力处理就好了。</p><hr><h1 id="0X3F-一些题目"><a href="#0X3F-一些题目" class="headerlink" title="0X3F  一些题目"></a>0X3F  一些题目</h1><p>水表水表，欢迎来刷水题，这里的都是我做过的，只是有些没有写题解而已。</p><p><a href="https://www.luogu.org/problemnew/show/P1494" target="_blank" rel="noopener">洛谷—-P1494 [国家集训队]小Z的袜子</a> (普通莫队入门题)</p><p><a href="https://www.luogu.org/problemnew/show/P2709" target="_blank" rel="noopener">洛谷—-P2709 小B的询问</a> (普通莫队入门题)</p><p><a href="https://www.luogu.org/problemnew/show/P1972" target="_blank" rel="noopener">洛谷—-P1972 [SDOI2009]HH的项链</a> (本文普通莫队例题)</p><p><a href="https://www.luogu.org/problemnew/show/CF86D" target="_blank" rel="noopener">洛谷—-CF86D Powerful array</a> (普通莫队练手题)</p><p><a href="https://www.luogu.org/problemnew/show/P3674" target="_blank" rel="noopener">洛谷—-P3674 小清新人渣的本愿</a> (普通莫队技巧题) {<a href="https://monlights.github.io/2019/02/13/[%E9%A2%98%E8%A7%A3]luoguP3674/">题解</a>}</p><p><a href="https://www.luogu.org/problemnew/show/P1903" target="_blank" rel="noopener">洛谷—-P1903 [国家集训队]数颜色/维护队列</a> (带修改莫队板子题,有些毒瘤)</p><p><a href="https://www.luogu.org/problemnew/show/P4074" target="_blank" rel="noopener">洛谷—-P4074 [WC2013]糖果公园</a> (树上带修改莫队板子题,超级毒瘤) {<a href="https://monlights.github.io/2019/03/08/[题解]luoguP4074/">题解</a>}</p><p><a href="https://www.luogu.org/problemnew/show/P4074" target="_blank" rel="noopener">洛谷—-AT1219 歴史の研究</a> (回滚莫队板子题) <a href="https://monlights.github.io/2019/03/20/[题解]luoguAT1219/">题解</a></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SCOI2007]蜥蜴 网络流 luogu2472</title>
      <link href="/2019/03/06/%5B%E9%A2%98%E8%A7%A3%5DluoguP2472/"/>
      <url>/2019/03/06/%5B%E9%A2%98%E8%A7%A3%5DluoguP2472/</url>
      
        <content type="html"><![CDATA[<p>网络流……..题目要求我们求出能逃离的蜥蜴数量的最大值，不就是最大流吗？</p><p>然后考虑怎么建模。</p><p>首先来看看蜥蜴，我们将这些蜥蜴的点跟 $s$ 连边，边权是多少呢？想一想，由于一个位置只有一只蜥蜴，那么边权就当然是 $1$ 了。</p><a id="more"></a><p>然后考虑逃离的这些柱子，题目说什么石柱都不稳定，每次当蜥蜴跳跃时，所离开的石柱高度减 $1$ ，看似很不好办，但是这恰恰就是网络流。对于柱子间的一条边，从 $s$ 经过蜥蜴的点的时候，流量就只有 $1$ 了，这个 $1$ 的流量流过柱子中的边的时候就会让这条边的边权减 $1$ ，减到 $0$ 当然就不能流了。</p><p>那么柱子之间怎么连边呢？</p><p>对于一个柱子，我们将它拆成两个点，一个入点，一个出点。其中入点向出点连一条边，边权为这个柱子的高度。如果一个柱子，判断一下，发现从它这里可以跳出去，那么就将这个柱子的出点向 $t$ 连一条边，这条边仅仅是代表找到了答案，对答案没有影响，边权为 $inf$ 。</p><p>然后我们再看一下，这个柱子能到达的柱子有哪些，这里直接算曼哈顿距离就好了。然后由这条柱子的出点向能到达的柱子的入点连一条边，边权呢？还是为 $inf$ 。因为我们对一个柱子的影响就是入点到出点的那一条边，那一条边的边权已经限制了这个柱子的使用量，所以中间的边权为 $inf$ 。</p><p>注意数组大小，要开大一点。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">---[SCOI2007]蜥蜴.网络流-最大流   毒瘤题目</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID(ty,x,y) ((ty)*r*c+id[(x)][(y)])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">55</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; lizard;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; Pillar;</span><br><span class="line"><span class="keyword">int</span> r,c,d,s,t;</span><br><span class="line"><span class="keyword">int</span> dep[S],head[S],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> val[N][N],id[N][N],tot=<span class="number">0</span>,total=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> str;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N*N*<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">    dep[s]=<span class="number">1</span>;q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(!dep[v]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>,q.push(v);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _pre_in()&#123;</span><br><span class="line">    IN(r),IN(c),IN(d);</span><br><span class="line">    s=<span class="number">0</span>,t=r*c*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    Pillar.clear();<span class="comment">//柱子</span></span><br><span class="line">    lizard.clear();<span class="comment">//蜥蜴</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;++j)&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">            id[i][j]=++tot,val[i][j]=str-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(val[i][j]&gt;<span class="number">0</span>)Pillar.push_back(<span class="built_in">std</span>::make_pair(i,j));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;++j)&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">            <span class="keyword">if</span>(str==<span class="string">'L'</span>)++total,lizard.push_back(<span class="built_in">std</span>::make_pair(i,j));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _pre_add_line()&#123;<span class="comment">//连边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Pillar.size();++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=Pillar[i].first,y=Pillar[i].second;</span><br><span class="line">        add(ID(<span class="number">0</span>,x,y),ID(<span class="number">1</span>,x,y),val[x][y]);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=d||y&lt;=d||x+d&gt;r||y+d&gt;c)add(ID(<span class="number">1</span>,x,y),t,inf);<span class="comment">//可以逃出去</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Pillar.size();++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Pillar.size();++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> xi=Pillar[i].first,yi=Pillar[i].second;</span><br><span class="line">            <span class="keyword">int</span> xj=Pillar[j].first,yj=Pillar[j].second;</span><br><span class="line">            <span class="keyword">if</span>((xi-xj)*(xi-xj)+(yi-yj)*(yi-yj)&lt;=d*d)</span><br><span class="line">                add(ID(<span class="number">1</span>,xi,yi),ID(<span class="number">0</span>,xj,yj),inf);<span class="comment">//柱子之间可以互相到达</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lizard.size();++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=lizard[i].first,y=lizard[i].second;</span><br><span class="line">        add(s,ID(<span class="number">0</span>,x,y),<span class="number">1</span>);<span class="comment">//源点向蜥蜴连边</span></span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _pre_in();</span><br><span class="line">    _pre_add_line();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,total-dinic());</span><br><span class="line">    <span class="comment">/*注意最终要算的是最少的未逃离的数，不是逃离的最大数*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI2013]切糕 网络流 bzoj3144</title>
      <link href="/2019/03/04/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3144/"/>
      <url>/2019/03/04/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3144/</url>
      
        <content type="html"><![CDATA[<p><del>话说切糕有很多细菌，并且高价，现在不让买了，也不让卖了……..</del></p><p>好吧我们来解决一下这题吧。</p><p>额……感觉题意有点不可读，实际上题目就是说给你一个立方体，然后立方体中的每一个点都有一个权值，表示如果要切这个点的话所花费的代价，那么这时需要让你横着切，将这个立方体切成两半，求最小代价。</p><a id="more"></a><p>这就是很明显的最小割了，切成两半使得 $s$ 和 $t$不连通嘛。</p><p>于是我们可以考虑这样建边：对于这个立方体，我们建一个虚拟层—第 $0$ 层，对于第 $0$ 层的每一个点，我们用 $s$ 与其相连，这个连接的边是不能被割掉的，所以边权为 $inf$ 。然后对于第 $R$ 层的所有点，我们都将其与 $t$ 相连，同样的道理，边权为 $inf$ 。然后中间的点的话，考虑一个点 $(x,y,z)$ ，我们连一条 $(x−1,y,z)$ 到 $(x,y,z)$  的边，权值为 $v(x,y,z)$ (即点 $(x,y,z)$ 的权值) 。</p><p>这个就是基本的了，如果没有第二个光滑性的限制，直接跑 $Dinic$ 就好了。</p><p>但是现在有了这个限制，怎么办呢？</p><p>对于一个竖轴，假设这个竖轴的横竖坐标为 $(x,y)$ ，现在在这个竖轴上有一个高度为 $z$ 的点，这个点的坐标显然为 $(x,y,z)$ ，那么现在的情况就是，如果选了 $z$ ，那么相邻竖轴上的 $z−d,z+d$ 都必须选。</p><p>于是我们考虑，从 $(x,y,z)$ 向相邻数轴的 $z−d,z+d$ 连一条 $inf$ 的边，这样就可以保证正确性了。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">8e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> P,Q,R,D,s,t,pointval[<span class="number">42</span>][<span class="number">42</span>][<span class="number">42</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">point</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;<span class="keyword">return</span> x*P*Q+y*Q+z;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    int cnt(1),dep[N],head[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">        G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">        q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">                <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">                <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">                used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(P),IN(Q),IN(R),IN(D);s=<span class="number">0</span>,t=N<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)</span><br><span class="line">                IN(pointval[i][j][k]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)</span><br><span class="line">            Dinic::add(s,point(<span class="number">0</span>,j,k),inf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;++i)  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)</span><br><span class="line">                Dinic::add(point(i<span class="number">-1</span>,j,k),point(i,j,k),pointval[i][j][k]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)   </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)   </span><br><span class="line">            Dinic::add(point(R,j,k),t,inf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=D;i&lt;=R;++i)  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)  </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;<span class="number">5</span>;++l)&#123;</span><br><span class="line">                    <span class="keyword">int</span> tx=dx[l]+j,ty=dy[l]+k;</span><br><span class="line">                    <span class="keyword">if</span>(tx&lt;<span class="number">1</span>||tx&gt;P||ty&lt;<span class="number">1</span>||ty&gt;Q)<span class="keyword">continue</span>;</span><br><span class="line">                    Dinic::add(point(i,j,k),point(i-D,tx,ty),inf);</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Dinic::dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 士兵占领 网络流 luogu4311</title>
      <link href="/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP4311/"/>
      <url>/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP4311/</url>
      
        <content type="html"><![CDATA[<p>讨厌死权限题了，然而这题又是 $bzoj$ 的权限题。</p><p>$QwQ$ 只好去洛谷上做了，幸好洛谷收的题目比较多。</p><p>这题就是网络流，我们先假设棋盘上摆满了士兵，这个时候需要拿走一些士兵，使得棋盘仍然是合法的，求拿走的最多数。</p><a id="more"></a><p>额……最多数让我想起了最大流，不过现在还是先来考虑怎么建图。</p><p>我们建两排点，第一排表示行，一共 $M$ 个点，第二排表示列，一共 $N$ 个点。对于一个点 $(x,y)$ ，就像从第一排的第 $x$ 号点向第二排的第 $y$ 号点连一条边权为 $1$ 的边。</p><p>这个显然是没有问题的。</p><p>然后就是限制，对于第 $k$ 行，至少要有 $L_k$ 个士兵，于是我们从 $s$ 连一条边权为 $L_k$  的边，连向第一排的第 $k$ 号点。同样的道理，对于第二排的点，我们也像这样连边，连向 </p><p>$t$ 。</p><p>然后就是跑 $dinic$ 了，别忘了跑出来的不是答案，而是最多拿走的士兵数，这个时候用整个棋盘的空位置的个数减去跑出来的 $maxflow$ 才是答案。</p><p>需要注意几个点：</p><ul><li><p>当我们在看到了一个行/列的时候，需要判断一下。假设这个是行，那么这行的位置显然有 $n$ 个，如果 $n$ 减去这行障碍的个数，再减去最少要放的士兵数后为负数，那么显然就怎么也不可能有合法的方案，于是直接输出 “JIONG” 就好了。</p></li><li><p>注意整个棋盘的空位置不是 $N\cdot M$ ，而是 $N\cdot M-K$!</p></li><li>数组大小的话只需要开到 $2n$ ，并不需要开到 $n^2$ ，因为只有两排点。但是边的数组大小需要开到 $n^2$ ，因为我们对于棋盘上的一个点就要连一条边表示它！</li></ul><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N*N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,s,t,cnt(<span class="number">1</span>),dep[N],head[N];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[N][N],Li[N],Ci[N],Lm[N],Cm[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">    q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">            used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(m),IN(n),IN(k);</span><br><span class="line">    s=<span class="number">1</span>,t=n+m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> atot=n*m-k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)IN(Li[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(Ci[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="built_in">map</span>[x][y]=<span class="number">1</span>,Lm[x]++,Cm[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">map</span>[i][j])add(i,j+m,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> flow=n-Li[i]-Lm[i];</span><br><span class="line">        <span class="keyword">if</span>(flow&lt;<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"JIONG!"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">else</span> add(s,i,flow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> flow=m-Ci[i]-Cm[i];</span><br><span class="line">        <span class="keyword">if</span>(flow&lt;<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"JIONG!"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">else</span> add(i+m,t,flow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atot-dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2015]约数个数和  莫比乌斯反演  luoguP3327</title>
      <link href="/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP3327/"/>
      <url>/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP3327/</url>
      
        <content type="html"><![CDATA[<p>又是一道神奇的题目。</p><p>一句话题意：给定 $n,m$ 求 $\sum_{i=1}^{n}\sum_{j=1}^{m}d(ij)$</p><p>于是开始推式子：</p><a id="more"></a><p>有这么一条公式：</p><script type="math/tex; mode=display">d(ij)=\sum_{x|i}\sum_{y|j}[gcd(x,y)=1]</script><p>这个非常重要，至于证明的话，本人太弱，留个坑，到时候再填，请大家谅解 $QwQ$ 。</p><p>然后呢？发现题目求的式子后面正好是 $d(ij)$ ，于是美滋滋的套进去。</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{x|i}\sum_{y|j}[gcd(i,j)=1]</script><p>$x$ 和 $y$ 我们扔到前面去枚举，后面来计算它们对它们的倍数做出的贡献。</p><p>可以知道前面的 $x$ 在 $n$ 以内的倍数有 $\lfloor\frac{n}{x}\rfloor$ 个，$y$ 在 $m$ 以内的倍数有 $\lfloor\frac{m}{y}\rfloor$，于是：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{x|i}\sum_{y|j}[gcd(i,j)=1]</script><script type="math/tex; mode=display">=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[gcd(i,j)=1]</script><p>按照套路，我们设：</p><script type="math/tex; mode=display">f(x)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[gcd(i,j)=k]</script><script type="math/tex; mode=display">g(k)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[k|gcd(i,j)]</script><p>那么显然有：</p><script type="math/tex; mode=display">g(k)=\sum_{k|d} f(d)</script><p>这个式子很有熟悉的味道，显然是反演常见的第二种形式。</p><p>所以就有：</p><script type="math/tex; mode=display">f(k)=\sum_{k|d}\mu(\frac{d}{k})g(d)</script><p>我们的答案是$f(1)$，那么就是：</p><script type="math/tex; mode=display">f(1)=\sum_{d=1}^{n}\mu(d)g(d)</script><p>现在来考虑怎么计算 $g$ 。</p><script type="math/tex; mode=display">g(k)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[k|gcd(i,j)]</script><p>后面的 $k$ 很碍眼，消掉他。</p><script type="math/tex; mode=display">g(k)=\sum_{x=1}^{\lfloor\frac{n}{k}\rfloor}\sum_{y=1}^{\lfloor\frac{m}{k}\rfloor}\lfloor\frac{n}{xk}\rfloor\lfloor\frac{m}{yk}\rfloor</script><p>于是我们预处理一个函数 $s$ ：</p><script type="math/tex; mode=display">s(k)=\sum_{i=1}^{k}\lfloor\frac{k}{i}\rfloor</script><p>那么 $g(k)$ 就很好算了：</p><script type="math/tex; mode=display">g(k)=s(n/k) \cdot s(m/k)</script><p>复杂度的话还好，预处理 $s$ 时可以整出分块，$O(\sqrt{n})$ 爽歪歪。然后的话，发现统计答案的时候 $g$ 函数也可以整出分块，$O(\sqrt{n})$ 。最后总时间复杂度 $O(T\sqrt{n})$ (???)反正过了就行，我也不会算 $QwQ$ 。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,m,cnt;</span><br><span class="line"><span class="keyword">int</span> mui[N],vis[N],prime[N];</span><br><span class="line">ll s[N]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _pre_mui()&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;<span class="number">5e4</span>)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)mui[i]+=mui[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=N;++x)&#123;<span class="comment">//实际上这里是O(n sqrt(n))，不过影响不大。</span></span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=x;l=r+<span class="number">1</span>)</span><br><span class="line">            r=(x/(x/l)),res+=<span class="number">1l</span>l*(r-l+<span class="number">1</span>)*(x/l);</span><br><span class="line">        s[x]=res;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m)n^=m^=n^=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        ans+=<span class="number">1l</span>l*(mui[r]-mui[l<span class="number">-1</span>])*s[n/l]*s[m/l];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _pre_mui();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,solve(n,m));</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij</script>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [国家集训队]Crash的数字表格  莫比乌斯反演  luoguP1829</title>
      <link href="/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP1829/"/>
      <url>/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP1829/</url>
      
        <content type="html"><![CDATA[<p>吐槽一下Typora这个编辑器：码了一上午的题解，居然突然卡机，并且自动关掉了，然后重新打开，发现保存的也没了。然后弹出一个“Typora意外关闭”的窗口，真想一拳上去。 只好重新自己码了……。(以上是吐槽，请不要在意)</p><p>算了算了，重新写吧。所以你看到的这是第二份稿子。</p><p>仍然上莫比乌斯反演。</p><a id="more"></a><p>众所周知：</p><script type="math/tex; mode=display">lcm(i,j)=\frac{ij}{gcd(i,j)}​</script><p>那么我们将这个带进原式：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}lcm(i,j) = \sum_{i=1}^{n}\sum_{j=1}^{m}\frac{ij}{gcd(i,j)}​</script><p>我们枚举 $gcd(i,j)$ 的值：</p><script type="math/tex; mode=display">\sum_{d=1}^{n}\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)=d]\frac{ij}{d}</script><script type="math/tex; mode=display">=\sum_{d=1}^{n}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ijd</script><script type="math/tex; mode=display">=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij</script><p>设：</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=x]ij</script><script type="math/tex; mode=display">g(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[x|gcd(i,j)]ij</script><p>可得：</p><script type="math/tex; mode=display">g(x)=\sum_{x|d}f(d)</script><p>考虑怎么计算 $g(x)$ ：</p><script type="math/tex; mode=display">g(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[x|gcd(i,j)]ij</script><script type="math/tex; mode=display">g(x)=\sum_{i=1}^{\lfloor\frac{n}{dx}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{dx}\rfloor}ij \cdot x^2</script><script type="math/tex; mode=display">g(x)=x^2\sum_{i=1}^{\lfloor\frac{n}{dx}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{dx}\rfloor}ij</script><p>这个显然是可以 $O(1)$ 算出的。</p><p>继续：</p><script type="math/tex; mode=display">ans=\sum_{d=1}^{n}d\cdot f(1)</script><script type="math/tex; mode=display">f(1)=\sum_{d=1}^{\lfloor\frac{n}{}\rfloor}\mu(d)g(d)</script><p>这个时候的复杂度只是 $O(n^2)$ ，继续优化。</p><p>将 $ans$ 写出：</p><script type="math/tex; mode=display">ans=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij</script><p>发现后面可以整除分块！</p><p>继续，将 $f(1)$ 写出：</p><script type="math/tex; mode=display">f(1)=\sum_{i=1}^{n}\mu(i)g(i)</script><script type="math/tex; mode=display">f(1)=\sum_{i=1}^{n}\mu(i)i^2\sum_{a=1}^{\lfloor\frac{n}{di}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{di}\rfloor}ab</script><p>将 $g$ 拆开后，我们可以发现后面又可以整除分块！</p><p>那么现在就是 $O(n)$ 了，可以过。</p><h4 id="Code-O-n"><a href="#Code-O-n" class="headerlink" title="Code-$O(n)$"></a>Code-$O(n)$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 20101009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mui[N],sum[N];</span><br><span class="line"><span class="keyword">int</span> vis[N],prime[N],cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _pre_mui(<span class="keyword">int</span> n)&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            mui[id*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1l</span>l*(<span class="number">1l</span>l*(n/l)*(n/l+<span class="number">1</span>)/<span class="number">2</span>%MOD)*(<span class="number">1l</span>l*(m/l)*(m/l+<span class="number">1</span>)/<span class="number">2</span>%MOD)%MOD;</span><br><span class="line">        ans+=<span class="number">1l</span>l*(sum[r]-sum[l<span class="number">-1</span>])%MOD*res%MOD;</span><br><span class="line">        ans%=MOD;</span><br><span class="line">    &#125;<span class="keyword">return</span> (ans+MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m)n^=m^=n^=m;</span><br><span class="line">    _pre_mui(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        sum[i]=(sum[i<span class="number">-1</span>]+<span class="number">1l</span>l*i*i%MOD*mui[i]%MOD+MOD)%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1l</span>l*(l+r)*(r-l+<span class="number">1</span>)/<span class="number">2</span>%MOD;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*solve(n/l,m/l)*res%MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>毒瘤出题人不会放过我们，这个毒瘤更改了数据： $n,m \leq 10^{10}$ 。</p><p><del>“哇咔咔咔卡掉你们的 O(n) !”</del></p><p><del>真想一拳上去这个智障。</del></p><p> $O(\sqrt{n})$ 是过的了的，故考虑向着这个方向前进。</p><p>继续推式子：</p><script type="math/tex; mode=display">ans=\sum_{d=1}^{n}d\sum_{i=1}^{n}\mu(i)i^2\sum_{a=1}^{\lfloor\frac{n}{di}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{di}\rfloor}ab</script><p>看见这个 $di$ 了吗？我们令 $T=di$ ，然后将 $T$ 扔到前面去枚举一下。</p><p>然后就是后面的两个 $\sum$ ，这玩意跟 $i,d$ 没关系，一起扔到前面去。</p><p>于是就变成了：</p><script type="math/tex; mode=display">ans=\sum_{T=1}^{n}\sum_{a=1}^{\lfloor\frac{n}{T}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{T}\rfloor}ab\sum_{i|T}i^2\frac{T}{i}\mu(i)</script><p>？？？？？？？</p><p>首先前面的这段是没有问题的对吧，那么后面的呢？</p><p>后面的原来是不是：</p><script type="math/tex; mode=display">\sum_{d=1}^{n}d\sum_{i=1}^{n}\mu(i)i^2</script><p>那么……现在我们枚举的 $T$ 是 $i \cdot d$ ，我们枚举了一下可能的 $i$ ，成为 $i$ 的必备条件肯定是能被 $T$ 整除对吧？那么这个时候的 $d$ 呢？很显然是 $\frac{T}{i}$ 对吧？</p><p>所以啊……就是这么写了。</p><p>但是这样写有什么用啊 $QwQ$</p><p>首先，我们来看，$i^2$ 是个什么鬼？我们设一个函数 $Q(i)=i^2$ ，于是我们可以发现，这个东西是个完全积性函数，然后看 $\frac{T}{i}$ ，显然是 $id(\frac{T}{i})$ ，也是完全积性函数。于是两个完全积性函数用狄利克雷卷积卷起来，它们的狄利克雷卷积是一定可以筛出来的。后面的 $\mu$ 是积性函数，然后呢？后面的那一坨都可以筛出来！</p><p>于是美滋滋。</p><p>我们设 $sum[k]$ 表示当 $T$ 为 $k$ 的时候后面那一坨的值。</p><p>那么现在分三种情况：</p><ul><li><p>$k$ 是质数，这下子后面的 $i$ 只能是 $1$ 和 $k$ ，$1$ 的时候的值就是 $k$ ，$k$ 的时候的值是 $k^2\cdot \frac{k}{k}\cdot \mu(k)$ ，很显然这个时候的 $\mu(k)$ 的值是 $-1$ ，于是这个时候的值是 $-k^2$ ，那么这个时候 $sum[k]$ 的值是 $k-k^2$ 。</p></li><li><p>$\mu(k)$ 为 $0$ ，这下子的话就肯定有一个 $j$ ，使得 $k$ 可以整除 $j^2$ ，这个时候假设就只能整除 $j^2$ ，也就是说 $\mu(k/j)$ 的值非 $0$ 。那么我们看看，在 $sum$ 所计算的式子中，只有 $T$ 的因子对 $T$ 产生贡献。考虑 $k/j$ 到 $k$ 多了什么因子。这个时候多的因子有两类，一类是包含了 $j^2$ 的，一类是只包含了 $j$ 的。第二类的可以先不管，因为之前 $k/j$ 中有了一个 $j$ ，这类因子的贡献已经算过了。那么对于第一类因子，因为包含了 $j^2$ ，所以 $\mu$ 值为 $0$ ，对答案没有任何贡献。</p><p>那么这个时候对答案有贡献的还是 $k/j$ 的因子，乘上一个 $j$ 后没有更多的对答案造成贡献的因子。</p><p>但是我们发现上限 $T$ 变了，增大了 $j$ 倍，对于原来的每份贡献的值也增大了 $j$ 倍。由于没有其他的贡献，$k$ 的所有的贡献都来自 $k/j$ ，那么直接转移就好。</p><p>所以是$sum[k]=sum[k/j]\cdot j$</p></li><li><p>对于剩下的情况，我们发现，这个可以直接转移了。当我们枚举 $k$ 的时候，考虑怎么用 $k$ 来转移 $k\cdot j$ ，这个时候 $j$ 是质数，并且 $k$ 中不包含 $j$ ，也就是说 $k$ 与 $j$ 互质。于是根据积性函数的性质，$sum[k]=sum[k/j]\cdot sum[j]$ 就好。</p></li></ul><p>于是这个时候前面再整出分块一下，复杂度 $O(\sqrt{n})$ 。</p><p><del>听说有人被卡住 $O(n)$ 后没有推式子了，直接上了个杜教筛，这人一看就是杜教士了，并且也说明不珂学的上杜教筛是布星的</del></p><h4 id="Code-O-sqrt-n"><a href="#Code-O-sqrt-n" class="headerlink" title="Code-$O(\sqrt{n})$"></a>Code-$O(\sqrt{n})$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 20101009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum[N],vis[N],prime[N],cnt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _pre_mui_sum()&#123;</span><br><span class="line">    vis[<span class="number">1</span>]=sum[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,sum[i]=(i<span class="number">-1l</span>l*i*i%MOD+MOD)%MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;=N)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;sum[i*prime[j]]=<span class="number">1l</span>l*sum[i]*prime[j]%MOD;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> sum[i*prime[j]]=<span class="number">1l</span>l*sum[i]*sum[prime[j]]%MOD;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        sum[i]=(sum[i<span class="number">-1</span>]+sum[i])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    _pre_mui_sum();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m)<span class="built_in">std</span>::swap(n,m);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        <span class="keyword">int</span> res=(<span class="number">1l</span>l*(<span class="number">1</span>+n/l)*(n/l)/<span class="number">2</span>%MOD)*(<span class="number">1l</span>l*(<span class="number">1</span>+m/l)*(m/l)/<span class="number">2</span>%MOD)%MOD;</span><br><span class="line">        ans+=<span class="number">1l</span>l*(sum[r]-sum[l<span class="number">-1</span>]+MOD)%MOD*res%MOD;</span><br><span class="line">        ans%=MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ans+MOD)%MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 YY的GCD 莫比乌斯反演 luogu2257</title>
      <link href="/2019/02/28/%5B%E9%A2%98%E8%A7%A3%5DluoguP2257/"/>
      <url>/2019/02/28/%5B%E9%A2%98%E8%A7%A3%5DluoguP2257/</url>
      
        <content type="html"><![CDATA[<p>又是一道反演题，显然，题目要求我们求出下式：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)\in prime]​</script><p>这个不好求，我们来推式子。</p><p>设 $n \leq m$</p><a id="more"></a><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)\in prime]</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)=k] \cdot[k \in prime]​</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[gcd(i,j)=1]\cdot[k \in prime]</script><p>我们知道 $\mu$ 函数的一个性质：</p><script type="math/tex; mode=display">[n=1]=\sum_{d|n} \mu(d)</script><p>将 $n$ 换为 $gcd(i,j)$ ，然后扔回原式。</p><script type="math/tex; mode=display">[n=1]=\sum_{d|n} \mu(d) \  \Rightarrow \ [gcd(i,j)=1]=\sum_{d|gcd(i,j)} \mu(d)</script><script type="math/tex; mode=display">\sum_{k=1}^{n}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}\sum_{d|gcd(i,j)}\mu(d) \ \ \ (k \in prime)​</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[d|gcd(i,j)]\cdot \mu(d) \ \ \ (k \in prime)</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}[1|gcd(i,j)]\cdot \mu(d) \ \ \ (k \in prime)</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}\mu(d) \ \ \ (k \in prime)</script><p>我们知道，这里的 $\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}​$ 可以变成 $\lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor​$ 的，这是等价的。于是：</p><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\mu(d)\cdot \lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor \ \ \ (k \in prime)​</script><p>这个式子依旧不可做，因为会超时，考虑如何再一步优化。</p><p>设 $T=kd$ ，那么我们枚举 $T$ ：</p><script type="math/tex; mode=display">=\sum_{T=1}^{n}\sum_{k|T,k\in prime}\mu(\frac{T}{k})\cdot \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor</script><p>$QvQ​$ 我们将 $\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor​$ 扔到前面去。</p><script type="math/tex; mode=display">=\sum_{T=1}^{n}\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor\sum_{k|T,k\in prime}\mu(\frac{T}{k}) ​</script><p>显然后面的可以预处理，预处理好了后，我们所需要计算的就是这一块：</p><script type="math/tex; mode=display">\sum_{T=1}^{n}\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T}\rfloor</script><p>这个特别好处理，整除分块优化一波，复杂度 $O(\sqrt(n))$ 。</p><p>开始居然感觉这题不可做，然后想要不要用毒教筛来筛 $\mu$ 的前缀和，不过显然我是不会这种黑科技的 $QwQ$</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[N],sum[N],mui[N],f[N],prime[N],cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _pre_mui()&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;N)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;prime[i]*j&lt;=N;++j)</span><br><span class="line">            f[j*prime[i]]+=mui[j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)sum[i]=sum[i<span class="number">-1</span>]+f[i];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        ans+=(ll)(sum[r]-sum[l<span class="number">-1</span>])*(ll)(n/l)*(ll)(m/l);</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _pre_mui();</span><br><span class="line">    <span class="keyword">int</span> n,m,T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n&gt;m)<span class="built_in">std</span>::swap(n,m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,solve(n,m));</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】从狄利克雷卷积到莫比乌斯反演</title>
      <link href="/2019/02/27/%5B%E6%95%B0%E8%AE%BA%5DDirichley%E5%88%B0Mobius/"/>
      <url>/2019/02/27/%5B%E6%95%B0%E8%AE%BA%5DDirichley%E5%88%B0Mobius/</url>
      
        <content type="html"><![CDATA[<p>前面一直搞不懂，于是找到了一些不错的文章，跟着文章推一推式子，居然豁然开朗了。</p><p>现在还在尝试着看毒教筛，毒教筛的总结后面再说吧。</p><a id="more"></a><blockquote><p>由于本人的水平问题，文章或许会有些纰漏，还请大佬们指教</p><p>$Qiuly$ 的 $QQ$ 号：$2641450959$($Qiuly=monlights$ 一个人 )</p><p>本文不用十六进制标题，换了种形式</p><p>因为公式量较大，所以加载速度较慢，需要等待几秒方可食用</p></blockquote><h2 id="前置技能：积性函数"><a href="#前置技能：积性函数" class="headerlink" title="前置技能：积性函数"></a>前置技能：积性函数</h2><h3 id="积性函数的定义："><a href="#积性函数的定义：" class="headerlink" title="积性函数的定义："></a>积性函数的定义：</h3><p>$1.$ 若 $f(n)$ 的定义域为正整数域，值域为复数，则称 $f(n)$ 为<strong>数论函数</strong>。</p><p>$2.​$ 若 $f(n)​$ 是一个<strong>数论函数</strong>，且 $f(1)=1​$ ，并且对于一对互质的数 $p,q​$ ，有 $f(p)  \cdot f(q)=f(p \cdot q)​$，那么称 $f​$ 为<strong>积性函数</strong>。</p><p>$3.$ 若 $f(n)$ 是一个<strong>积性函数</strong>，并且对于任意的整数 $p,q$ ，都有 $f(p)  \cdot f(q)=f(p \cdot q)$，那么称 $f$ 为<strong>完全积性函数</strong>。</p><h3 id="常见的积性函数："><a href="#常见的积性函数：" class="headerlink" title="常见的积性函数："></a>常见的积性函数：</h3><p>$1.​$ 约数和函数 $\sigma​$ ，$\sigma(n)=\sum_{d|n} d​$ ，为 $n​$ 的所有约数之和，积性函数。</p><p>$2.​$ 欧拉函数 $\varphi​$ ，$\varphi(n)=\sum_{i=1}^{n} [gcd(n,i)=1] \cdot1​$，表示不大于 $n​$ 且与 $n​$ 互质的数的个数，积性函数。</p><p>$3.​$ 莫比乌斯函数 $\mu​$ ，$\mu(1)=1​$，对于一个 $n=\prod_{i=1}^{s} p_i​$，$\mu(n)=(-1)^s​$，其余情况 $\mu(n)=0​$，积性函数。</p><p>$4.$ 元函数 $e$ ，$e(n)=[n=1]$ ，完全积性函数，狄利克雷卷积单位元函数。</p><p>$5.$ 恒等函数 $I$，$I(n)$ =1，完全积性函数。</p><p>$6.$ 单位函数 $id$ ，$id(n)=n​$，完全积性函数。</p><h3 id="关于一些积性函数的基本性质："><a href="#关于一些积性函数的基本性质：" class="headerlink" title="关于一些积性函数的基本性质："></a>关于一些积性函数的基本性质：</h3><p>$1.​$ $[n=1]=\sum_{d|n} \mu(d)​$</p><p>$2.​$ $\sum_{i=1}^{n} [gcd(n,i)=1] \cdot i=\frac{n \cdot \varphi(n)+[n=1]}{2}​$</p><p>$3.​$ $n=\sum_{d|n} \varphi(d)​$</p><h2 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>现有<strong>数论函数</strong> $f$ 和 $g$，其<strong>狄利克雷卷积</strong>为 $(f<em>g)(n)=\sum_{d|n} f(d) \cdot g(\frac{n}{d})$ 。狄利克雷卷积对于乘法满足<strong>交换律、结合律、分配律</strong>，对于单位元函数 $e(n)=[n=1]$ ，有 $f</em>e=f=e<em>f$ 。若 $f,g$ 为积性函数，那么 $(f</em>g)$ 也为积性函数。</p><h3 id="公式-："><a href="#公式-：" class="headerlink" title="公式 ："></a>公式 ：</h3><p>当 $f​$ 为积性函数的时候，设 $n=\prod_{i=1}^{s} p_i^{k_i}​$ ，$g(n)=\sum_{d|n}f(d)​$ ，则有 $g(n)=\prod_{i=1}^{s} \sum_{j=0}^{k_i}f(p_i^j)​$ 。</p><p>举个例子，假设 $n=6$ 。</p><script type="math/tex; mode=display">p1=2,p2=3,k1=1,k2=1,s=2​</script><script type="math/tex; mode=display">g(n)=\sum_{d|n}f(d) :\\= g(6)=\sum_{d|n} f(d)=f(1)+f(2)+f(3)+f(6)</script><p>那么可以得知，按照 $g(n)=\sum_{d|n}f(d)​$ 来计算，$g(6)​$ 的值为 $f(1)+f(2)+f(3)+f(4)​$</p><script type="math/tex; mode=display">g(n)=\prod_{i=1}^{s} \sum_{j=0}^{k_i}f(p_i^j):\\=g(6)=\prod_{i=1}^{s} \sum_{j=0}^{k} f(p_i^j)</script><script type="math/tex; mode=display">=g(6)=\prod_{i=1}^{s} (f(1)+f(p_i))</script><script type="math/tex; mode=display">=g(6)=(f(1)+f(2)) \times (f(1)+f(3))</script><script type="math/tex; mode=display">=g(6)=f(1)f(1)+f(1)f(3)+f(2)f(1)+f(2)f(3)</script><p>因为 $f​$ 是积性函数，所以：</p><p>因为 $1$ 与 $1$ 互质，所以 $f(1) \cdot f(1)=f(1 \cdot1)=f(1)$</p><p>因为 $1​$ 与 $3​$ 互质，所以 $f(1)\cdot f(3)=f(1 \cdot 3)=f(3)​$</p><p>因为 $2$ 与 $1$ 互质，所以 $f(2) \cdot f(1)=f(2\cdot1)=f(2)$</p><p>因为 $2​$ 与 $3​$ 互质，所以 $f(2) \cdot f(3) = f(2 \cdot 3)=f(6)​$</p><script type="math/tex; mode=display">g(6)=f(1)+f(3)+f(2)+f(6)</script><p>上下两式相同，因此式子的正确性可以保证。</p><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><p>莫比乌斯反演的基本形式一般如下：</p><script type="math/tex; mode=display">g(n)=\sum_{d|n} f(d)​</script><p>式子中不要求 $f$ 是积性函数。</p><p>那么莫比乌斯反演解决的问题一般先是给定 $g$ 函数或是可以很简单的算出 $g$ 函数的情况下，要求推出 $f$ 函数，这个时候 $n$ 的范围一般为 $10^7$ 甚至更高，我们不可能直接从上式暴力推 $f$ 函数，这个时候就需要用到 $\mu$ 函数了。</p><p>可以发现，$I$ 函数总是有着奇特的性质，可以使得 $g=f*I$ 。</p><p>怎么证明呢？推式子。</p><p>$f$ 和 $I$ 的狄利克雷卷积：</p><script type="math/tex; mode=display">(f*I)(n)=\sum_{d|n} f(d) \cdot I(\frac{n}{d})​</script><p>由于 $I(n)=1$ ，那么后面的 $I(\frac{n}{d})$ 的值为 $1$ ，可以将其无视，则：</p><script type="math/tex; mode=display">(f*I)(n)=\sum_{d|n} f(d)=g(n)</script><p>但是这还不能满足，于是我们又发现，$\mu$ 函数有奇效，可以使得 $I*\mu=e$</p><p>怎么证明呢？任然推式子。</p><p>$I$ 和 $\mu$ 的狄利克雷卷积：</p><p>$(I*\mu)(n)=\sum_{d|n}I(d)\cdot \mu(\frac{n}{d})$</p><p>显然 $I(d)=1$ ，可以将其无视，那么就有：</p><p>$(I*\mu)(n)=\sum_{d|n} \mu(\frac{n}{d})=\sum_{d|n}\mu(d)=e(n)​$</p><p>可以看到，当且仅当 $n=1​$ 的时候 $\sum_{d|n}\mu(\frac{n}{d})​$ 才是有值的，否则所在所有计算的 $\mu​$ 中， $-1​$ 和 $1​$ 的出现次数一定是一样的。</p><p>继续推式子。</p><script type="math/tex; mode=display">f*I=g</script><script type="math/tex; mode=display">=f*I*\mu=g*\mu</script><script type="math/tex; mode=display">=f*(I*\mu)=f*e=g*\mu</script><p>于是计算 $f*e​$ ：</p><script type="math/tex; mode=display">(f*e)(n)=\sum_{d|n} f(d) \cdot e(\frac{n}{d})</script><p>由于 $e(n)=[n=1]​$ ，只有 $n=1​$ 的时候函数才有值。那么显然 $n\neq d​$ 的时候 $e(\frac{n}{d})​$ 为 $0​$ ，这对答案完全没有贡献。只有在 $n=d​$ 的时候才对答案有贡献。这个时候我们所加上的就是 $f(n)​$ ，这也证明了上面写的 “$f<em>e=f=e</em>f​$”。</p><p>于是：</p><script type="math/tex; mode=display">f*e=f=g*\mu</script><script type="math/tex; mode=display">f(n)=(g*\mu)(n)</script><p>然后计算 $(g*\mu)(n)$ 的狄利克雷卷积。</p><script type="math/tex; mode=display">(g*\mu)(n)=\sum_{d|n} g(d) \cdot \mu(\frac{n}{d})</script><p>那么最后可以得到式子：</p><p>$f(n)=\sum_{d|n} g(d) \cdot \mu(\frac{n}{d})​$</p><p>这只是常见形式的一种，一共有两种常见的形式(包括此形式)：</p><script type="math/tex; mode=display">g(n)=\sum_{d|n}f(d) \ \Rightarrow \ f(n)=\sum_{d|n} g(d) \cdot \mu(\frac{n}{d})​</script><script type="math/tex; mode=display">g(n)=\sum_{n|d} f(n) \ \Rightarrow \ f(n)=\sum_{n|d}g(n) \cdot \mu(\frac{d}{n})​</script><h3 id="莫比乌斯函数与欧拉函数的关系"><a href="#莫比乌斯函数与欧拉函数的关系" class="headerlink" title="莫比乌斯函数与欧拉函数的关系"></a>莫比乌斯函数与欧拉函数的关系</h3><p>实际上莫比乌斯函数与欧拉函数是有关系的，接下来我们来推出这种关系。</p><p>从上面的章节中可以知道，$n=\sum_{d|n} \varphi(d)​$。</p><script type="math/tex; mode=display">n=\sum_{d|n} \varphi(d) \ \Rightarrow \ id(n)=\sum_{d|n} \varphi(d)​</script><script type="math/tex; mode=display">\sum_{d|n} \varphi(d) = \sum_{d|n} \varphi(\frac{n}{d})​</script><p>从上面我们将 $\mu​$ 与 $I​$ 用狄利克雷卷积卷起来的时候会发现答案为 $\sum_{d|n}\mu(d)​$，也就是说对于一个积性函数 $f​$ ，将 $f​$ 和 $I​$ 用狄利克雷卷积卷起来时，可以得到：</p><script type="math/tex; mode=display">(f*I)(n)=\sum_{d|n} f(d)​</script><p>很显然，$\varphi$ 也是积性函数，如果我们将上式的 $f$ 函数改为 $\varphi$ 函数，形式是不变的，那么式子就会变成：</p><script type="math/tex; mode=display">(\varphi*I)(n)=\sum_{d|n} \varphi(d)​</script><p>居然跟上面的式子对上了，于是我们将上面的式子中的 $\sum_{d|n} \varphi(d)​$ 替换为 $(\varphi*I)(n)​$，版上面的式子就变成这样：</p><script type="math/tex; mode=display">(\varphi*I)(n)=id(n) \ \Rightarrow \ \varphi*I=id</script><script type="math/tex; mode=display">=\varphi*I*\mu=id*\mu​</script><script type="math/tex; mode=display">= \varphi*e=id*\mu</script><p>我们在上面也知道，积性函数 $f​$ 卷上 $e​$ 后的结果任然是 $f​$ ，$\varphi​$ 为积性函数，那么：</p><script type="math/tex; mode=display">\varphi=id*\mu</script><p>我们来计算 $id*\mu$ ：</p><script type="math/tex; mode=display">(id*\mu)(n)=\sum_{d|n} id(d)\cdot \mu(\frac{n}{d})​</script><script type="math/tex; mode=display">\sum_{d|n} id(d)\cdot \mu(\frac{n}{d})=\sum_{d|n} id(\frac{n}{d})\cdot \mu(d)=\sum_{d|n} \mu(d)\cdot \frac{n}{d}​</script><p>最终：</p><script type="math/tex; mode=display">\varphi(n)=\sum_{d|n} \mu(d)\cdot \frac{n}{d}​</script><script type="math/tex; mode=display">=\frac{\varphi(n)}{n}=\sum_{d|n} \frac{\mu(d)}{d}​</script><p>至此，我们得到了莫比乌斯函数与欧拉函数的关系。</p><h3 id="莫比乌斯函数预处理代码"><a href="#莫比乌斯函数预处理代码" class="headerlink" title="莫比乌斯函数预处理代码"></a>莫比乌斯函数预处理代码</h3><p>直接用线性筛就好，如果数据范围大的话也可以用杜教筛。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _Pre_mui()&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;=N)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)sum[i]=sum[i<span class="number">-1</span>]+mui[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="莫比乌斯反演题目选讲"><a href="#莫比乌斯反演题目选讲" class="headerlink" title="莫比乌斯反演题目选讲"></a>莫比乌斯反演题目选讲</h2><h3 id="1-POI2007-ZAP-Queries"><a href="#1-POI2007-ZAP-Queries" class="headerlink" title="1. [POI2007] ZAP-Queries"></a>1. [POI2007] ZAP-Queries</h3><h4 id="传送门：luogu"><a href="#传送门：luogu" class="headerlink" title="传送门：luogu"></a>传送门：<a href="https://www.luogu.org/problemnew/show/P3455" target="_blank" rel="noopener">luogu</a></h4><h4 id="题解：Qiuly’s-blog"><a href="#题解：Qiuly’s-blog" class="headerlink" title="题解：Qiuly’s blog"></a>题解：<a href="https://monlights.github.io/2019/02/27/[题解]luoguP3455">Qiuly’s blog</a></h4><h3 id="2-YY的GCD"><a href="#2-YY的GCD" class="headerlink" title="2. YY的GCD"></a>2. YY的GCD</h3><h4 id="传送门：luogu-1"><a href="#传送门：luogu-1" class="headerlink" title="传送门：luogu"></a>传送门：<a href="https://www.luogu.org/problemnew/show/P2257" target="_blank" rel="noopener">luogu</a></h4><h4 id="题解：Qiuly’s-blog-1"><a href="#题解：Qiuly’s-blog-1" class="headerlink" title="题解：Qiuly’s blog"></a>题解：<a href="https://monlights.github.io/2019/02/28/[题解]luoguP2257/">Qiuly’s blog</a></h4><p>更多详情见 $9012.x.xx$ 完成的杜教筛小结，预计 $x$ 将会是 $4$     $QAQ$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 狄利克雷卷积 </tag>
            
            <tag> 莫比乌斯函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [POI2007]ZAP-Queries 莫比乌斯反演 luogu3455</title>
      <link href="/2019/02/27/%5B%E9%A2%98%E8%A7%A3%5DluoguP3455/"/>
      <url>/2019/02/27/%5B%E9%A2%98%E8%A7%A3%5DluoguP3455/</url>
      
        <content type="html"><![CDATA[<p>很显然是让我们求出下式：</p><script type="math/tex; mode=display">ans=\sum_{i=1}^{A}\sum_{j=1}^{B}[gcd(i,j)=K]</script><p>根据性质可以得到：</p><a id="more"></a><script type="math/tex; mode=display">ans=\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[gcd(i,j)=1]</script><p>我们设两个函数：</p><ul><li>函数 $f$，$f(x)$ 表示 $\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[gcd(i,j)=x]$</li><li>函数 $g$ ，$g(x)$ 表示 $\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[x|gcd(i,j)]$</li></ul><p>我们可以得到：</p><script type="math/tex; mode=display">g(x)=\sum_{x|d} f(x)</script><p>这是莫比乌斯反演的第二个形式：</p><script type="math/tex; mode=display">g(n)=\sum_{n|d} f(n) \ \Rightarrow \ f(n)=\sum_{n|d}g(d) \cdot \mu(\frac{d}{n})</script><p>于是：</p><script type="math/tex; mode=display">g(x)=\sum_{x|d} f(x) \ \Rightarrow \ f(x)=\sum_{x|d}g(x) \cdot \mu(\frac{d}{x})</script><script type="math/tex; mode=display">=g(x)=\sum_{x|d} f(x) \ \Rightarrow \ f(x)=\sum_{x|d}g(\frac{d}{x}) \cdot \mu(x)</script><p>设 $n=\lfloor\frac{A}{K}\rfloor\ ,\ m=\lfloor\frac{B}{K}\rfloor$</p><p>那么：</p><script type="math/tex; mode=display">g(x)=\sum_{i=1}^{n}\sum_{i=1}^{m} [x|gcd(i,j)]=\sum_{i=1}^{\lfloor\frac{n}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{K}\rfloor}[1|gcd(i,j)]</script><script type="math/tex; mode=display">=\sum_{i=1}^{\lfloor\frac{n}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{K}\rfloor}[1|gcd(i,j)]=\lfloor\frac{A}{K}\rfloor \times\lfloor\frac{B}{K}\rfloor</script><script type="math/tex; mode=display">ans=f(1)</script><script type="math/tex; mode=display">f(1)=\sum_{i=1}^{n}\mu(i)*g(i)=\sum_{i=1}^{n}\mu(i)*\lfloor\frac{A}{K}\rfloor *\lfloor\frac{B}{K}\rfloor</script><p>这个式子是 $O(n)$ 的。</p><p>发现 $\lfloor\frac{A}{K}\rfloor \times\lfloor\frac{B}{K}\rfloor$ 可以整除分块，于是我们便可以做到 $O(\sqrt{x})$</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,cnt;</span><br><span class="line"><span class="keyword">int</span> prime[N],mui[N],vis[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _Pre_mui()&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;=N)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)sum[i]=sum[i<span class="number">-1</span>]+mui[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    n/=k,m/=k;</span><br><span class="line">    <span class="keyword">int</span> lim=min(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lim;)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> j=min(n/(n/i),m/(m/i));</span><br><span class="line">        ans+=<span class="number">1l</span>l*(sum[j]-sum[i<span class="number">-1</span>])*(n/i)*(m/i);</span><br><span class="line">        i=j+<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _Pre_mui();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        solve(n,m,k);</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以就没了。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  tower  网络流  bzoj4657</title>
      <link href="/2019/02/26/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4657/"/>
      <url>/2019/02/26/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4657/</url>
      
        <content type="html"><![CDATA[<p>考试的时候正好考了这道题，全场仅有 $lys$ 大佬 $AC$ 。</p><p>都 $GG$ 了（当然我最惨，暴力分居然被卡了，只有 $10$ 分 $QwQ$）。</p><a id="more"></a><p>我们来看一下题目：</p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226154041.png" alt=""></p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226154156.png" alt=""></p><p>题目的阶梯数据真良心！</p><hr><h4 id="20分做法"><a href="#20分做法" class="headerlink" title="20分做法"></a>20分做法</h4><p>很显然，$n,m \le 5$ ，分明是摆着让我们爆搜，那么直接暴力枚举打那个，处理一下路线的交叉问题就好了。</p><p>然而我菜爆了，这个居然打挂了，然后就只剩下 $10$ 分了 $QvQ$。</p><h4 id="40分做法"><a href="#40分做法" class="headerlink" title="40分做法"></a>40分做法</h4><p>可以加一个剪枝，怎么剪呢？</p><p>对于一个炮塔，假设我们之前在其打击范围内已经找到了一个点，该点跟该炮塔的曼哈顿距离是 $x$ ，其权值为 $a$ ,然后现在我们继续 $dfs$ ，发现又找到了一个点也在打击范围内，该点的与该炮的曼哈顿距离是 $y$ ，其权值是 $b$ 。</p><p>那么现在我们假设 $x<y$ 且="" $a="">b$ ，那么显然，对于最优的方案，该炮塔肯定不会打 $b$ 权值的点。也就是说，$b$ 权值的点没有 $a$ 权值的点优，因为权值少了，收益没那么大，并且风险(距离)(指容易被打断的风险)增加了。这时我们便可以放弃 $b$ 点，这就是一个小小的剪枝优化。</y$></p><h4 id="100分做法"><a href="#100分做法" class="headerlink" title="100分做法"></a>100分做法</h4><p>考虑最小割。</p><p>对于每一个炮塔，我们将其能打出去的范围的所有点连成一条链，这条链的两端分别连着 $s$ 和 $t$ 。</p><p>这个时候的 “割” 就是说你这个炮打到哪里结束。</p><p>如下图：</p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226161927.png" alt=""></p><p>那么网络流的图中，这条链中 $3-4$ 的这条边被切断了。</p><p>所以我们每一个炮有一个打到的地方(当然可以不打)，这个时候每一条链都断了，所以图就断了。</p><p>但是关系并没有那么简单，假设现在又有一个炮塔，其轨迹跟现在的炮相交了，如果相交的点的编号 $&lt;3$，显然这个红炮是不可以打到小蓝点( $3$ 号点)的，我们该如何表示这种关系呢？</p><p>现在所表示的状况：</p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226162746.png" alt=""></p><p>现在的状况就是，相交点上面的点都打不到了(红炮)，相交点右边的点都打不到了(蓝炮)。</p><p>但是我们一定要保证 $S$ 到 $T$ 的联通。</p><p>那么就可以确定，如果红炮所在的点连接 $S$ ，那么蓝炮就连 $T$，这样才可以使 $S$ 和 $T$ 连通。</p><p>然后来解决怎么处理相交点的连边问题。</p><p>但是，如果按照上面的 “红炮连 $S$ ，蓝炮连 $T$” 的话，直接这样连不就好了吗？</p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226163615.png" alt=""></p><p>仔细想一想，这其实是布星的，因为我们要保证这个相交点的关系不会被割掉，那么就因该将边值设为 $inf$，但是设哪条边呢？这里所有的边的值都是这个点的权值，我们不可能直接改点的权值吧？</p><p>那么很显然，我们将相交点拆成两个点，这两个点中间连有一条边权为 $inf$ 的边，这时无论如何都割不掉这个点了。</p><p>最后就是，既然要求最小割，对于如果炮不启动的话边权是 $0$ ，那么就达成了 “最小” 的效果，这是错的。所以我们设一个常量 $T$ ，将每条边的边权都设为 $T-v_i$ 就好。</p><p>然后就是板子 $Dinic$。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(i,j,type) type*n*m+(i-1)*m+j</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e1</span>+<span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[N][N],ans,n,m,s,t;</span><br><span class="line">int cnt(1),head[N*N*2],dep[N*N*2];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N*N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">    q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(!dep[v]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>,q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">    s=<span class="number">0</span>,t=n*m*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> direction=-<span class="built_in">map</span>[i][j]<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> x=i,y=j,Mx_val=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    x+=dx[direction],y+=dy[direction];</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;n||y&lt;<span class="number">1</span>||y&gt;m)<span class="keyword">break</span>;</span><br><span class="line">                    Mx_val=max(Mx_val,<span class="built_in">map</span>[x][y]);</span><br><span class="line">                &#125;ans+=Mx_val;</span><br><span class="line">                <span class="keyword">if</span>(direction&lt;<span class="number">2</span>)add(s,id(i,j,<span class="number">0</span>),inf);</span><br><span class="line">                <span class="keyword">else</span> add(id(i,j,<span class="number">1</span>),t,inf);</span><br><span class="line">                x=i,y=j;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> tx=x,ty=y;</span><br><span class="line">                    x+=dx[direction],y+=dy[direction];</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;n||y&lt;<span class="number">1</span>||y&gt;m)<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span>(direction&lt;<span class="number">2</span>)add(id(tx,ty,<span class="number">0</span>),id(x,y,<span class="number">0</span>),Mx_val-max(<span class="number">0</span>,<span class="built_in">map</span>[tx][ty]));</span><br><span class="line">                    <span class="keyword">else</span> add(id(x,y,<span class="number">1</span>),id(tx,ty,<span class="number">1</span>),Mx_val-max(<span class="number">0</span>,<span class="built_in">map</span>[tx][ty]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> add(id(i,j,<span class="number">0</span>),id(i,j,<span class="number">1</span>),inf);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans-Dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>为什么之前没想出来呢？</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2009]诗人小G 四边形不等式/决策单调性优化DP luoguP1912</title>
      <link href="/2019/02/25/%5B%E9%A2%98%E8%A7%A3%5DluoguP1912/"/>
      <url>/2019/02/25/%5B%E9%A2%98%E8%A7%A3%5DluoguP1912/</url>
      
        <content type="html"><![CDATA[<p>神奇的题目 $QvQ$ ，卡了我好久。</p><p>哎，主要是细节要处理到位，否则就会 <strong>WA</strong> 声满片。</p><a id="more"></a><p>记录一下我壮观的提交记录：</p><p><img src="/2019/02/25/[题解]luoguP1912/5c738cec782df.png" alt=""></p><p>太杯具了 $QvQ$</p><p><del>(扯谈扯不下去了…….)</del></p><p>进入正题吧。</p><blockquote><p><del>路人甲：$bzoj$ 上居然没有这道题？</del><br><del>导演：赶紧走开，不管你的事</del></p></blockquote><p>这题明显是 $DP$，我们可以很简单的得到 $DP$ 方程：</p><p>设 $f[i]$ 表示对前 $i$ 句诗排版后的最小不协调度，那么很显然，对于一个现在我们需要转移的 $i$，我们会找到一个最优的 $j$ ，使得第 $j+1$ 句到第 $i$ 句组成一个新的行。那么之前的行的总共的最小不协调度显然是 $f[j]$，现在我们就来计算一下 $f[i]$ 的最小不协调度。</p><p>显然，是下式(其中 $sum$ 是句子长度的前缀和)：</p><script type="math/tex; mode=display">f[i]=f[j]+{|sum[i]-sum[j]-L-1|}^P</script><p>这就是状态转移方程，的确很好理解。但是……这样子做是 $O(N^2)$ 的复杂度，只能拿 $30$ 分。</p><p>而按照题目的数据范围，正解的复杂度因该是 $O(n log n)$ 左右。接下来考虑怎么优化。</p><p>经<del>打表</del>观察发现，如果我们将每次用作转移 $i$ 的最优的 $j$ 存起来，输出时会发现，$j$ 是单调递增的。</p><p>证明的话的确不好证，可以看看 $lyd$ 的书。但是按照实际理解一下是可以的，我们将 $j$ 后面的一直到 $i$ 的句子组成了新的一行，那么如果 $j$ 不单调上升的话，新的一句将会变的很长很长很长，那么这时这句造成的不协调度将会以几何数的形式疯狂增长，那么唯一的方法就是将这句长句断句，这样子 $j$ 就会变大，可以感性理解一下 $QvQ$。</p><p>但是我们知道了 $j$ 是单调上升的这条性质有什么用呢？</p><p>很显然，每一次转移的时候不必往前找了，直接往后找。</p><p>我们维护一个队列，队列里的每一个元素有三个变量：$l,r,c$ ，其中 $l$ 和 $r$ 表示 $c$ 这个决策的适用范围，并且在这个范围中 $c$ 是最优的 $j$。</p><p>那么现在有了一个新的 $i$，考虑怎么维护这个队列。</p><p>我们可以先找到 $i$ 所在的范围的最优的 $j$，那么这时我们检查队头，如果队头的范围已经不包括 $i$ 了，那么直接弹出，因为既然队头的范围不包括 $i$ 了，那么这个队头对 $i+1$ 及后面的元素都不能产生贡献，故直接弹出。</p><p>弹出无用的队头后，转移的话就是 $O(1)$ 了：直接取队头转移不就好了吗？</p><p>那么现在考虑怎么将 $i$ 加入这个队列，或许这个 $i$ 也会对后面的元素产生贡献。</p><p>我们检查当前的队尾，怎么判断这个队尾是否比 $i$ 更优呢？现在队尾的范围是 $l,r$ ，如果 $i$ 更新 $l$ 比 $c$ 更新 $l$ 更优，显然 $i$ 会比当前 $l,r$ 范围类的所有的 $c$ 更优，故弹出队尾。</p><p>那么，假设现在我们碰到了一个队尾，其中 $i$ 更新 $r$ 更优， $c$ 更新 $l$ 更优，怎么办呢？也就是说这个元素的范围中分成两半，前一半 $c$ 更新更优，后一半 $i$ 更新更优，显然要拆成两个队列元素。那么我们怎么知道这个位置呢？二分！</p><p>那么这个时候我们可以得到答案了，只是输出怎么办呢？</p><p>很简单，每次转移的时候记录一下<strong>转移自哪里</strong>，这就是分行，然后输出即可。</p><p>最后就是精度问题。</p><p>题目要求，如果 $f[n]$ (即所有句子排版后的最小不协调度) 还是大于了 $1e18$ ，那么输出 “$Too \ hard\ to\ arrange$”，但是如果在 $DP$ 的过程中就炸了 $long \ long$，那就 $GG$ 了。所以我们使用 $long \ double$ ，精度更高，(不会 $int$ 的，这辈子也不会用 $int$ 的)。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NS=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,N,L,P;</span><br><span class="line"><span class="keyword">int</span> head,tail;</span><br><span class="line"><span class="keyword">int</span> last[NS],ans[NS],Next[NS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> c,l,r;&#125;q[NS];</span><br><span class="line"><span class="keyword">char</span> s[NS][<span class="number">35</span>];</span><br><span class="line">ld sum[NS],f[NS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="built_in">memset</span>(q,<span class="number">0</span>,<span class="keyword">sizeof</span>(q));</span><br><span class="line">    <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ld <span class="title">pows</span><span class="params">(ld x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//快速幂</span></span><br><span class="line">    ld ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x*=x)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans*=x;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ld <span class="title">val</span><span class="params">(<span class="keyword">int</span> j,<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//转移函数</span></span><br><span class="line">    <span class="keyword">return</span> f[j]+pows(<span class="built_in">abs</span>(sum[i]-sum[j]-L<span class="number">-1</span>),P);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">half</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//二分过程</span></span><br><span class="line">    <span class="keyword">int</span> now=q[tail].c,ls=q[tail].l,rs=q[tail].r;<span class="comment">//当前队尾范围</span></span><br><span class="line">    <span class="keyword">int</span> ret=q[tail].r+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ls&lt;=rs)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(ls+rs)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(val(i,mid)&lt;=val(now,mid))rs=mid<span class="number">-1</span>,ret=mid;<span class="comment">//i更优</span></span><br><span class="line">        <span class="keyword">else</span> ls=mid+<span class="number">1</span>;<span class="comment">//c更优</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret!=q[tail].l)q[tail].r=ret<span class="number">-1</span>;<span class="comment">//分成了两半</span></span><br><span class="line">    <span class="keyword">else</span> --tail;<span class="comment">//整个元素都比不过i</span></span><br><span class="line">    <span class="keyword">if</span>(ret&lt;=N)q[++tail]=(Node)&#123;i,ret,N&#125;;<span class="comment">//i分了一个区间时，加入新元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;<span class="comment">//值得拥有的鬼畜输出</span></span><br><span class="line">    <span class="keyword">if</span>(f[N]&gt;<span class="number">1e18</span>)<span class="built_in">puts</span>(<span class="string">"Too hard to arrange"</span>);<span class="comment">//无解，放心判1e18</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ll)(f[N]+<span class="number">0.5</span>));<span class="comment">//注意精度问题</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i;i=last[i])Next[last[i]]=i;<span class="comment">//输出</span></span><br><span class="line">        <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">            now=Next[now];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;now;++j)<span class="built_in">printf</span>(<span class="string">"%s "</span>,s[j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s[now]);</span><br><span class="line">            i=now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"--------------------"</span>);<span class="comment">//注意</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        clear();</span><br><span class="line">        IN(N),IN(L),IN(P);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]);</span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>]+<span class="built_in">strlen</span>(s[i])+<span class="number">1</span>;<span class="comment">//做前缀和</span></span><br><span class="line">            <span class="comment">/*因为输出是有空格的，所以加上一个1*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        q[head=tail=<span class="number">1</span>]=(Node)&#123;<span class="number">0</span>,<span class="number">1</span>,N&#125;;<span class="comment">//初始元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;q[head].r&lt;i)++head;<span class="comment">//淘汰无用队头</span></span><br><span class="line">            ++q[head].l;</span><br><span class="line">            f[i]=val(q[head].c,i);<span class="comment">//O(1) 转移</span></span><br><span class="line">            last[i]=q[head].c;<span class="comment">//记录“转移自哪里”</span></span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;val(i,q[tail].l)&lt;=val(q[tail].c,q[tail].l))tail--;<span class="comment">//弹出劣质队尾</span></span><br><span class="line">            half(i);<span class="comment">//二分</span></span><br><span class="line">        &#125;</span><br><span class="line">        output();<span class="comment">//鬼畜输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//终于结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我有个问题。</p><p>这是写的什么文章啊 $QvQ$ ，让我们来猜测一下。</p><p><img src="/2019/02/25/[题解]luoguP1912/5c738c9bc658e.png" alt=""><br>白日依山尽，黄河入海流，欲穷千里目，更上一层楼。</p><p>这是 小 $G$  写的？作者明明不是小 $G$ 好不好。</p><p>$QvQ$ 有毒啊……</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> DP </tag>
            
            <tag> 四边形不等式 </tag>
            
            <tag> 决策单调性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  [USACO4.4]Pollutant Control  网络流  luoguP1344</title>
      <link href="/2019/02/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP1344/"/>
      <url>/2019/02/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP1344/</url>
      
        <content type="html"><![CDATA[<p>有必要么……直接打个电话给零售商：”我的牛奶不对，不要收牛奶！”不久可以了吗……</p><p><del>(好了好了这是扯淡)</del></p><a id="more"></a><p>显然这个运输图的 $1$ 号点就是公司发送牛奶的地方，$n$ 号点就是零售商，然后每一条边就是这个货车的出发点与到达点，边权即为拦截这个货车的代价。</p><p>然后呢？</p><p>最小的损失……使 $1$ 到不了 $n$ ，这显然就是最小割啊 $QwQ$</p><p>那么这样损失数就很容易得到了，那么最少要停的卡车数怎么求呢？很显然，我们任然跑最小割，那么这个图我们将所有边都设为 $1$ ，显然现在的最小割就是最少要停的卡车数。</p><p>很显然，时间爆炸，满屏惊喜！</p><p>这里有一种方法！我们设一个常数 $T$ ，假设当前边的边权是 $w$ ，那么我们实际连一条边权为 $w \times T+1$ 的边，其中最小损失数显然为 $maxflow/T$ ，那么最少要停的卡车数呢？显然就是 $maxflow\ \%\ T$。</p><p>这里的 $T$ 要足够大，否则如果每条边后面的 $+1$ 乘上割的边数大于了 $T$ ，然后 $\%$ 一下，恭喜你！你 $GG$ 了。实际上 “足够大” 只要大于边数就好了，显然这样子建边是要开 $long long$ 的，否则会炸。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll T=<span class="number">2019</span>;<span class="comment">//2019新年快乐(尽管现在不是时候了)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span>ll nxt,to,val;&#125;G[N];</span><br><span class="line">ll n,m,s,t,cnt(<span class="number">1</span>),dep[N],head[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll u,ll v,ll w)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">    q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        ll x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(ll i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            ll y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dfs</span><span class="params">(ll x,ll flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    ll used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(ll i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">        ll y=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">            used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);s=<span class="number">1</span>,t=n;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        ll u,v,w;IN(u),IN(v),IN(w);</span><br><span class="line">        add(u,v,w*T+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ll maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,maxflow/T,maxflow%T);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 陌上花开 CDQ分治 bzoj3262</title>
      <link href="/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3262/"/>
      <url>/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3262/</url>
      
        <content type="html"><![CDATA[<blockquote><p>陌上花开，可缓缓归矣                        ——吴越王</p></blockquote><p>每日一学语文[滑稽]。</p><p>当然这题 $KDT​$ 是可以做的，但是不费，所以用 $CDQ​$ 算了吧。</p><p>很显然这道题是 $CDQ$ 三维偏序的板子题(luogu上它本来就是板子题)</p><a id="more"></a><p> $CDQ$ 分治的三维偏序怎么做？</p><p>对于其中的第一维，$CDQ$之前直接 $sort$ 排好序，那么这就可以保证对于一个 $i&lt;j$ ，位置 $j$ 的元素一定是对位置 $i$ 的元素做不出贡献的，因为 $x_i &lt;x_j$ 。</p><p>然后第二维，进入 $CDQ$ ，很显然当前的区间 $l - r$ 是会分成两个子区间分别做 $CDQ$ 的，那么当两个子区间合并的时候，左子区间是可能会对右子区间做出贡献的，但是右子区间对左子区间做不出任何贡献，原因是我们在之前已经按 $x$ 排好了序，那么显然左子区间的元素的 $x$ 始终小于右子区间的元素的 $x$。</p><p>外面排好了第一维，那么我们就在 $CDQ$ 中排第二维，由于我们是分成了两个子区间递归处理，往上面合并的时候，正好可以归并排序。第三位只需要在树状数组中记录一下，然后统计答案的时候调用树状数组的查询，看看比当前元素小的有多少个即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    CDQ(l,mid);CDQ(mid+<span class="number">1</span>,r);<span class="comment">/*分成两个子区间*/</span></span><br><span class="line">    <span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>,cnt=l;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;<span class="comment">/*归并+统计答案*/</span></span><br><span class="line">        <span class="keyword">if</span>(v[i].b&lt;=v[j].b)add(v[i].c,size[v[i].id]),hep[cnt++]=v[i++];</span><br><span class="line">        <span class="comment">/*左子区间的当前元素可能会有贡献，记录一下*/</span></span><br><span class="line">        <span class="keyword">else</span> ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++];</span><br><span class="line">        <span class="comment">/*接下来的左子区间的b是比当前的j.b要大的了，没有贡献了*/</span></span><br><span class="line">        <span class="comment">/*因为在子区间中使用了归并，所以两个子区间中b肯定是升序的*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++];</span><br><span class="line">    <span class="comment">/*将剩下的归并排序完*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=l;h&lt;i;++h)add(v[h].c,-size[v[h].id]);</span><br><span class="line">    <span class="comment">/*清除树状数组留下的痕迹*/</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)hep[cnt++]=v[i++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)v[i]=hep[i];</span><br><span class="line">    <span class="comment">/*更新原数组*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$QvQ$ 就这样了，只是这题需要离散化一下，$Code$ 中的 $size$ 就是元素出现的个数。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> a,b,c,id;&#125;v[N],hep[N];</span><br><span class="line"><span class="keyword">int</span> tre[K],ans[N],num[N],size[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=k;x+=(x&amp;-x))tre[x]+=v;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;ll res=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=(x&amp;-x))res+=tre[x];<span class="keyword">return</span> res;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x,Node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.a!=y.a)<span class="keyword">return</span> x.a&lt;y.a;</span><br><span class="line">    <span class="keyword">if</span>(x.b!=y.b)<span class="keyword">return</span> x.b&lt;y.b;</span><br><span class="line">    <span class="keyword">return</span> x.c&lt;y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    CDQ(l,mid);CDQ(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>,cnt=l;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i].b&lt;=v[j].b)add(v[i].c,size[v[i].id]),hep[cnt++]=v[i++];</span><br><span class="line">        <span class="keyword">else</span> ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=l;h&lt;i;++h)add(v[h].c,-size[v[h].id]);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)hep[cnt++]=v[i++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)v[i]=hep[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v[i].a,&amp;v[i].b,&amp;v[i].c);</span><br><span class="line">    <span class="built_in">std</span>::sort(v+<span class="number">1</span>,v+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[i].a!=v[i<span class="number">-1</span>].a||v[i].b!=v[i<span class="number">-1</span>].b||v[i].c!=v[i<span class="number">-1</span>].c)hep[++tot]=v[i];</span><br><span class="line">    ++size[tot];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)v[i]=hep[i],v[i].id=i;</span><br><span class="line">    CDQ(<span class="number">1</span>,tot);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">       num[ans[v[i].id]+size[v[i].id]<span class="number">-1</span>]+=size[v[i].id];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [BOI2007]Mokia CDQ分治 luogu4390</title>
      <link href="/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP4390/"/>
      <url>/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP4390/</url>
      
        <content type="html"><![CDATA[<p><del>BBQ烤翅，CDQ分治。</del></p><p>一道很裸的三位偏序，允许离线的话，就上CDQ分治，当然想当码农可以敲树套树。</p><a id="more"></a><p>很显然，三维就是 $x$ 轴，$y$ 轴，和时间。</p><p>然后将一个矩阵的询问拆成四个询问，按照容斥的方式搞，这显然是可以且简单的，但是询问数将会爆炸 $QvQ$ (但是没有炸，不舒服)</p><p>$long long$ 也要开，不然会炸。</p><p>然后就这样了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">2e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll s,w,tot,c[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ll x,y,ans,pos,type;</span><br><span class="line">&#125;q[N],hep[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node&amp;x,<span class="keyword">const</span> Node&amp;y)</span></span>&#123;<span class="keyword">return</span> x.pos&lt;y.pos;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll v)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=w;x+=(x&amp;-x))c[x]+=v;&#125;;</span><br><span class="line">    <span class="function">ll <span class="title">sum</span><span class="params">(ll x)</span></span>&#123;ll res=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=(x&amp;-x))res+=c[x];<span class="keyword">return</span> res;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=w;x+=(x&amp;-x))c[x]=<span class="number">0</span>;&#125;;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    CDQ(l,mid);CDQ(mid+<span class="number">1</span>,r);</span><br><span class="line">    ll i=l,j=mid+<span class="number">1</span>,cnt=l;</span><br><span class="line">    <span class="comment">/*CDQ的主要流程*/</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].x&lt;=q[j].x)&#123;</span><br><span class="line">        <span class="comment">/*注意这一题询问和修改是不一样的，不像陌上花开那题，每个元素即使修改对答案做贡献，也是询问*/</span></span><br><span class="line">            <span class="keyword">if</span>(!q[i].type)T.add(q[i].y,q[i].ans);<span class="comment">/*这是修改，树状数组标记一下*/</span></span><br><span class="line">            hep[cnt++]=q[i++];<span class="comment">/*归并排序*/</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[j].type)q[j].ans+=T.sum(q[j].y);<span class="comment">/*询问，更新答案*/</span></span><br><span class="line">            hep[cnt++]=q[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*将剩下的元素排序好，更新好答案*/</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!q[i].type)T.add(q[i].y,q[i].ans);</span><br><span class="line">        hep[cnt++]=q[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[j].type)q[j].ans+=T.sum(q[j].y);</span><br><span class="line">        hep[cnt++]=q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll o=l;o&lt;=mid;++o)<span class="comment">/*清除本次操作在树状数组上留下的痕迹*/</span></span><br><span class="line">       <span class="keyword">if</span>(!q[o].type)T.clr(q[o].y);</span><br><span class="line">    <span class="keyword">for</span>(ll o=l;o&lt;=r;++o)q[o]=hep[o];<span class="comment">/*更新原数组*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll op;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;s,&amp;w);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;op),op^<span class="number">3</span>)&#123;</span><br><span class="line">        ll x,y,z,x1,x2,y1,y2;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            q[++tot]=(Node)&#123;x,y,z,tot,<span class="number">0</span>&#125;;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            <span class="comment">/*四个询问*/</span></span><br><span class="line">            q[++tot]=(Node)&#123;x2,y2,<span class="number">0</span>,tot,<span class="number">1</span>&#125;;</span><br><span class="line">            q[++tot]=(Node)&#123;x1<span class="number">-1</span>,y2,<span class="number">0</span>,tot,<span class="number">1</span>&#125;;</span><br><span class="line">            q[++tot]=(Node)&#123;x2,y1<span class="number">-1</span>,<span class="number">0</span>,tot,<span class="number">1</span>&#125;;</span><br><span class="line">            q[++tot]=(Node)&#123;x1<span class="number">-1</span>,y1<span class="number">-1</span>,<span class="number">0</span>,tot,<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CDQ(<span class="number">1</span>,tot);</span><br><span class="line">    <span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+tot+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;++i) </span><br><span class="line">        <span class="keyword">if</span>(q[i].type)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,q[i].ans-q[i+<span class="number">1</span>].ans-q[i+<span class="number">2</span>].ans+q[i+<span class="number">3</span>].ans+s*(q[i].y-q[i+<span class="number">3</span>].y)*(q[i].x-q[i+<span class="number">3</span>].x));</span><br><span class="line">            i+=<span class="number">3</span>;</span><br><span class="line">            <span class="comment">//printf("%lld\n",q[i].ans);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而我还是太弱了，调半个小时的原因既然是</p><h4 id="树状数组打错了"><a href="#树状数组打错了" class="headerlink" title="树状数组打错了"></a>树状数组打错了</h4><p>$QvQ$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2001]食物链 并查集 luoguP2024</title>
      <link href="/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP2024/"/>
      <url>/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP2024/</url>
      
        <content type="html"><![CDATA[<p>并不是很难。</p><p>首先，我们将一个点 $x$ 拆分成三个点：$x_{eat},x_{sim},x_{emy}$， $x_{eat}$ 表示 $x$ 的食物，$x_{sim}$ 表示 $x$ 的同类，$x_{emy}$ 表示 $x$ 的天敌。</p><a id="more"></a><p>然后，对于一句真话：</p><ul><li>如果是表示 $x​$ 是 $y​$ 的同类，那么很显然，$x​$ 的食物就是 $y​$ 的食物， $x​$ 的天敌就是 $y​$ 的天敌，于是讲 $x_{sim}​$ 和 $y_{sim}​$ 所在的并查集合并，将 $x_{eat}​$ 和 $y_{eat}​$ 所在的并查集合并，最后将 $x_{emy}​$ 和 $y_{emy}​$ 所在的并查集合并即可。</li></ul><ul><li>如果这句表示 $x$ 吃 $y$ ，那么很显然，$x$ 的食物就是 $y$ 的同类，$x$ 的天敌就是 $y$ 的食物(因为是环形)，$x$ 的同类都是 $y$ 的天敌，故将这些关系的并查集一次合并即可。</li></ul><p>怎么判断一句话的真假呢？</p><p>显然，如果 $x&gt;n||y&gt;n$ 就是假话，对于两个操作：</p><ul><li>如果表示 $x​$ 是 $y​$ 的同类，那么 $x_{eat}​$ 不能和 $y_{sim}​$ 在同一个并查集中，$x_{sim}​$ 不能和 $y_{eat}​$ 在同一个并查集中，否则就与前面的话冲突了。</li></ul><ul><li>如果表示 $x$ 吃 $y$ ，首先 $x$ 和 $y$ 不能是同类(即 $x_{sim}$ 不能和 $y_{sim}$ 在一个并查集中)，然后 $y_{eat}$ 不能和 $x_{sim}$ 在一个并查集中，显然违反了以上的就是假话。</li></ul><p>然后码量极小：</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[N*<span class="number">3</span>],ans,n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sim</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">eat</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x+n;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">emy</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x+n+n;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">3</span>;++i)fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(x&gt;n||y&gt;n)&#123;++ans;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(find(eat(x))==find(sim(y))||find(sim(x))==find(eat(y)))&#123;++ans;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fa[find(sim(x))]=find(sim(y));</span><br><span class="line">                fa[find(eat(x))]=find(eat(y));</span><br><span class="line">                fa[find(emy(x))]=find(emy(y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(find(sim(x))==find(sim(y))||find(sim(x))==find(eat(y)))&#123;++ans;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fa[find(eat(x))]=find(sim(y));</span><br><span class="line">                fa[find(emy(x))]=find(eat(y));</span><br><span class="line">                fa[find(sim(x))]=find(emy(y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>我绝对不会告诉你们，我有一处地方 $sim$ 写成了 $sin$ 而调了半个小时</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】 乘法逆元</title>
      <link href="/2019/02/20/%5B%E6%95%B0%E8%AE%BA%5D%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/"/>
      <url>/2019/02/20/%5B%E6%95%B0%E8%AE%BA%5D%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/</url>
      
        <content type="html"><![CDATA[<p>真的我也不知道标题怎么起 $QvQ……$</p><p>本文将介绍两种求乘法逆元的方式。</p><a id="more"></a><h3 id="0XFF-乘法逆元是什么？"><a href="#0XFF-乘法逆元是什么？" class="headerlink" title="0XFF 乘法逆元是什么？"></a>0XFF 乘法逆元是什么？</h3><blockquote><p>乘法逆元，一般用于求</p><script type="math/tex; mode=display">\frac{a}{b} \ \ (mod \ p)</script><p>的值 ($p$ 通常为质数) 。</p><p>对于加、减、乘法的取模直接取就好了，但是对于除法(上面的分数形式)取模的话，显然直接取模是错的，那么这个时候就需要用到乘法逆元。</p><p>如果 $a \times x \equiv 1 \ \ (mod \ p) $，且 $a$ 与 $p$ 互质，那么就可以定义 $p$ 为 $x$ 的逆元，记为 $a^{-1}$，所以我们也可以称 $x$ 为 $a$ 在 $mod \ p$ 意义下的倒数。</p><p>对于 $\frac{a}{b} \ \ (mod \ p)​$，这个分数的值就是 $(b^{-1} \times a) \ mod \ p​$，即 $b​$ 在 $mod \ p​$ 意义下的逆元乘上 $a​$ ，最后对 $p​$ 取模。</p></blockquote><h3 id="0X1F-求乘法逆元的两种方法"><a href="#0X1F-求乘法逆元的两种方法" class="headerlink" title="0X1F 求乘法逆元的两种方法"></a>0X1F 求乘法逆元的两种方法</h3><p>(我只会这两种)……</p><h4 id="0X1F-1-费马小定理求乘法逆元"><a href="#0X1F-1-费马小定理求乘法逆元" class="headerlink" title="0X1F-1 费马小定理求乘法逆元"></a>0X1F-1 费马小定理求乘法逆元</h4><p><strong>费马小定理：</strong></p><blockquote><p>若 $p​$ 为质数，$a​$ 为正整数，且 $a​$ 与 $p​$ 互质。</p><p>那么 $a^{p-1} \equiv  1 \ \ (mod \ p)$。</p></blockquote><p>我们将 $a^{p-1} \equiv  1 \ \ (mod \ p)$ 代入原式：</p><script type="math/tex; mode=display">a \times x \equiv 1 \ \ (mod \ p)</script><script type="math/tex; mode=display">a \times x\equiv  a^{p-1}  \ \ (mod \ p)</script><script type="math/tex; mode=display">x\equiv  a^{p-2}  \ \ (mod \ p)</script><p>那么直接跑一遍快速幂即可。</p><h5 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll x,ll y,ll p)</span> </span>&#123;</span><br><span class="line">x%=p;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)</span><br><span class="line"><span class="keyword">if</span>(power&amp;<span class="number">1</span>)ans=ans*x%mod;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="built_in">pow</span>(a,p<span class="number">-2</span>,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0X1F-2-线性求乘法逆元"><a href="#0X1F-2-线性求乘法逆元" class="headerlink" title="0X1F-2 线性求乘法逆元"></a>0X1F-2 线性求乘法逆元</h4><p>这个算法的时间复杂度是线性的：$O(n)$</p><p>设 $p=s \times i + r$ ，$(1&lt;r&lt;i&lt;p)$.</p><p>将此式套入 $(mod \ p)​$  意义下的式子就可以得到：</p><script type="math/tex; mode=display">s \times i +r \equiv 0 \ \ (mod \ p)​</script><p>两边同时乘上 $i^{-1}$：</p><script type="math/tex; mode=display">s + r \times i^{-1} \equiv 0 \ \ (mod \ p)​</script><p>然后再同时乘上 $r^{-1}​$：</p><script type="math/tex; mode=display">s \times r^{-1} + i^{-1} \equiv 0 \ \ (mod \ p)​</script><p>移项得到：</p><script type="math/tex; mode=display">i^{-1} \equiv -s \times r^{-1} \ \ (mod \ p)</script><p>很显然 $s$ 等于 $[\frac{p}{i}]$，$r$ 等于 $p \ mod \  i$，那么 $r^{-1}$ 就等于 $inv[p \ mod  \ i]$ ($inv[i]$ 表示 $i$ 在 $mod \ p$ 意义下的乘法逆元)</p><p>然后代入公式：</p><script type="math/tex; mode=display">inv[i] \equiv - [\frac{p}{i}] \times inv[p \ mod \ i] \ \ (mod \ p)</script><p>于是代码就很短了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inv[<span class="number">0</span>]=<span class="number">0</span>,inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">inv[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)(p-p/i)*inv[p%i]%p;</span><br></pre></td></tr></table></figure><hr><p>一般来说线性的或许会优秀些，建议使用线性的算法，而且代码也比较短，容易写，处理组乘法逆元的时候，第一种的复杂度为 $O(nlogn)$，第二种只需 $O(n)$。但是在处理单组乘法逆元的时候，第一种复杂度为 $O(logn)$，但是第二种因为要讲 $p \ mod \ i$  求出来，复杂度…..或许还是 $O(n)$。(实际上我也不会证 $QvQ…$)</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 乘法逆元 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [国家集训队]Tree LCT luogu1501/bzoj2631</title>
      <link href="/2019/02/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP1501/"/>
      <url>/2019/02/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP1501/</url>
      
        <content type="html"><![CDATA[<p><strong>Link-Cut-Tree 的懒标记下传正确食用方法。</strong></p><a id="more"></a><hr><h5 id="1：-u-v-c：将-u-到-v-的路径上的点的权值都加上自然数-c"><a href="#1：-u-v-c：将-u-到-v-的路径上的点的权值都加上自然数-c" class="headerlink" title="1：+ u v c：将$u$到$v$的路径上的点的权值都加上自然数$c$;"></a>1：<code>+ u v c</code>：将$u$到$v$的路径上的点的权值都加上自然数$c$;</h5><ul><li><p>解决方法：</p></li><li><p>很显然，我们可以$split(u,v)$来提取<code>u,v</code>这一段区间,提取完了将$Splay(v)$,然后直接在<code>v</code>上打加法标记$add$即可。</p></li><li>代码：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushadd</span><span class="params">(ll x,ll val)</span></span>&#123;<span class="comment">//打标记</span></span><br><span class="line">s[x]+=sz[x]*val,v[x]+=val,add[x]+=val;</span><br><span class="line">s[x]%=MOD,v[x]%=MOD,add[x]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="comment">//LCT基本操作split,不再赘述</span></span><br><span class="line">    makeroot(x);Access(y);Splay(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(main函数中)：</span></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'+'</span>)&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;v);<span class="comment">//输入信息</span></span><br><span class="line"> split(x,y);pushadd(y,v);<span class="comment">//提取链条&amp;打标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="2：-u1-v1-u2-v2：将树中原有的边-u1-v1-删除，加入一条新边-u2-v2-，保证操作完之后仍然是一棵树；"><a href="#2：-u1-v1-u2-v2：将树中原有的边-u1-v1-删除，加入一条新边-u2-v2-，保证操作完之后仍然是一棵树；" class="headerlink" title="2：- u1 v1 u2 v2：将树中原有的边$(u1,v1)$删除，加入一条新边$(u2,v2)$，保证操作完之后仍然是一棵树；"></a>2：<code>- u1 v1 u2 v2</code>：将树中原有的边$(u1,v1)$删除，加入一条新边$(u2,v2)$，保证操作完之后仍然是一棵树；</h5><ul><li>解决方法：</li><li><p>删除边即$cut$操作，加边即$link$操作。</p></li><li><p>代码：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">makeroot(x);<span class="keyword">if</span>(findroot(x)!=y)f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">makeroot(x);split(x,y);</span><br><span class="line"><span class="keyword">if</span>(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][<span class="number">1</span>])</span><br><span class="line">   f[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//LCT基本操作link&amp;cut，不再赘述</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(main函数中)：</span></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);cut(x,y);<span class="comment">//删边</span></span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);link(x,y);<span class="comment">//加边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="3：-u-v-c：将-u-到-v-的路径上的点的权值都乘上自然数-c-；"><a href="#3：-u-v-c：将-u-到-v-的路径上的点的权值都乘上自然数-c-；" class="headerlink" title="3：* u v c：将$u$到$v$的路径上的点的权值都乘上自然数$c$；"></a>3：<code>* u v c</code>：将$u$到$v$的路径上的点的权值都乘上自然数$c$；</h5><ul><li>解决方法：</li><li><p>很显然，我们可以$split(u,v)$来提取<code>u,v</code>这一段区间,提取完了将$Splay(v)$,然后直接在<code>v</code>上打乘法标记$mul$即可。(跟第一个操作基本同理)</p></li><li><p>代码：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushmul</span><span class="params">(ll x,ll val)</span></span>&#123;<span class="comment">//打标记</span></span><br><span class="line"> s[x]*=val,v[x]*=val,mul[x]*=val,add[x]*=val;</span><br><span class="line"> s[x]%=MOD,v[x]%=MOD,mul[x]%=MOD,add[x]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(main函数中)：</span></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'*'</span>)&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line"> split(x,y);pushmul(y,v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="4：-u-v：询问-u-到-v-的路径上的点的权值和，求出答案对于51061的余数。"><a href="#4：-u-v：询问-u-到-v-的路径上的点的权值和，求出答案对于51061的余数。" class="headerlink" title="4：/ u v：询问$u$到$v$的路径上的点的权值和，求出答案对于51061的余数。"></a>4：<code>/ u v</code>：询问$u$到$v$的路径上的点的权值和，求出答案对于<code>51061</code>的余数。</h5><ul><li>解决方法：</li><li><p>$Splay(v)$时已经将所有节点更新过了(懒标记下传过了)，所以最后只需输出$s[v]$即可。</p></li><li><p>代码：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(main函数中)：</span></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'/'</span>)&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);</span><br><span class="line"> split(x,y);<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,s[y]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register ll</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">" "</span>) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 51061</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp; dig)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">bool</span> flag=<span class="number">0</span>;dig=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(c=getchar(),!<span class="built_in">isdigit</span>(c))<span class="keyword">if</span>(c==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))dig=dig*<span class="number">10</span>+c-<span class="string">'0'</span>,c=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)dig=-dig;</span><br><span class="line">&#125;ll f[N],s[N],v[N],sz[N],rev[N],mul[N],add[N],hep[N],ch[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">0</span>]==x||ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">chk</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushfilp</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);rev[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">s[x]=(s[ch[x][<span class="number">0</span>]]+s[ch[x][<span class="number">1</span>]]+v[x])%MOD;</span><br><span class="line">sz[x]=sz[ch[x][<span class="number">0</span>]]+sz[ch[x][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushmul</span><span class="params">(ll x,ll val)</span></span>&#123;</span><br><span class="line">s[x]*=val,v[x]*=val,mul[x]*=val,add[x]*=val;</span><br><span class="line">s[x]%=MOD,v[x]%=MOD,mul[x]%=MOD,add[x]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushadd</span><span class="params">(ll x,ll val)</span></span>&#123;</span><br><span class="line">s[x]+=sz[x]*val,v[x]+=val,add[x]+=val;</span><br><span class="line">s[x]%=MOD,v[x]%=MOD,add[x]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mul[x]!=<span class="number">1</span>)pushmul(ch[x][<span class="number">0</span>],mul[x]),pushmul(ch[x][<span class="number">1</span>],mul[x]);</span><br><span class="line"><span class="keyword">if</span>(add[x])pushadd(ch[x][<span class="number">0</span>],add[x]),pushadd(ch[x][<span class="number">1</span>],add[x]); </span><br><span class="line"><span class="keyword">if</span>(rev[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">0</span>])pushfilp(ch[x][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">1</span>])pushfilp(ch[x][<span class="number">1</span>]);</span><br><span class="line">&#125;rev[x]=<span class="number">0</span>,add[x]=<span class="number">0</span>,mul[x]=<span class="number">1</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">ll y=f[x],z=f[y],k=chk(x),v=ch[x][!k];</span><br><span class="line"><span class="keyword">if</span>(get(y))ch[z][chk(y)]=x;ch[x][!k]=y,ch[y][k]=v;</span><br><span class="line"><span class="keyword">if</span>(v)f[v]=y;f[y]=x,f[x]=z;pushup(y),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">ll y=x,top=<span class="number">0</span>;hep[++top]=y;</span><br><span class="line"><span class="keyword">while</span>(get(y))hep[++top]=y=f[y];</span><br><span class="line"><span class="keyword">while</span>(top)pushdown(hep[top--]);</span><br><span class="line"><span class="keyword">while</span>(get(x))&#123;</span><br><span class="line">y=f[x],top=f[y];</span><br><span class="line"><span class="keyword">if</span>(get(y))rotate((ch[y][<span class="number">0</span>]==x)^(ch[top][<span class="number">0</span>]==y)?y:x);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;pushup(x);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> ll y=<span class="number">0</span>;x;x=f[y=x])</span><br><span class="line">  Splay(x),ch[x][<span class="number">1</span>]=y,pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">findroot</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">Access(x);Splay(x);</span><br><span class="line"><span class="keyword">while</span>(ch[x][<span class="number">0</span>])pushdown(x),x=ch[x][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    Access(x);Splay(x);pushfilp(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">    makeroot(x);Access(y);Splay(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">makeroot(x);<span class="keyword">if</span>(findroot(x)!=y)f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">makeroot(x);split(x,y);</span><br><span class="line"><span class="keyword">if</span>(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][<span class="number">1</span>])</span><br><span class="line">   f[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll n,m,x,y;<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">   mul[i]=sz[i]=v[i]=<span class="number">1</span>;ll v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y),link(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'+'</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line">split(x,y);pushadd(y,v);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);cut(x,y);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);link(x,y);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'*'</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line">split(x,y);pushmul(y,v);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'/'</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);</span><br><span class="line">split(x,y);<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,s[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为$51061 * 51061$是会越过$int$界限的，所以我开的$longlong$(当然也可以开无符号$int$)<br>所以就没了。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈后缀自动机(SAM)&amp;学习笔记</title>
      <link href="/2019/02/16/%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BASAM/"/>
      <url>/2019/02/16/%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BASAM/</url>
      
        <content type="html"><![CDATA[<p>教练前几天对我说，让我好好的搞一下什么 $ACM$($AC$自动机) 和 $SAM$(后缀自动机)，可以的话还要稍微梳理一下后缀数组，感觉鸭梨山大 $QvQ$。到网上找了 $AC$自动机 的文章，感觉都看不怎么懂。于是就来看看后缀自动机的文章，发现有些感觉。于是敲了几道板子题后匆匆的来写总结了<del>（完成任务就好了）</del>(逃</p><p>我们进入正题。</p><a id="more"></a><h2 id="0XFF-前言"><a href="#0XFF-前言" class="headerlink" title="0XFF 前言"></a>0XFF 前言</h2><blockquote><p><strong>*如果本文有地方表达错误，可以通过QQ联系我，一定尽量改正！</strong></p><p>*文中的”子串”,”前缀”,”后缀”没有特殊说明时均指母串的”子串”,”前缀”,”后缀”.</p></blockquote><hr><h2 id="0X1F-后缀自动机是什么？"><a href="#0X1F-后缀自动机是什么？" class="headerlink" title="0X1F 后缀自动机是什么？"></a>0X1F 后缀自动机是什么？</h2><p>后缀自动机($SAM$) 是一种 有限状态自动机($FSM$) ，它可以接受一个字符串的所有后缀。后缀自动机包含了两部分，一个是 有向无环单词图$DAWG$，一个是前缀树($prefix     tree$)，后缀自动机的每一个节点都同时存在于这两个结构中。</p><p>对于一个字符串 $S$ ，我们对它进行构建 $SAM$。对于构建出来的 $SAM$ ，称 $S$ 是该 $SAM$ 的母串。</p><hr><h3 id="0X1F-1-DAWG"><a href="#0X1F-1-DAWG" class="headerlink" title="0X1F-1 DAWG"></a>0X1F-1 DAWG</h3><p>$DAWG$ 是有向无环图。在 $DAWG$ 上面，除了起始节点以外，其余的节点都表示了一个或多个子串。点与点之间有转移边相连接，每条转移边也代表一个字符。</p><p>从起始节点沿着转移边走若干步，可以得到一个长度为步数子串。</p><p>对于 $DAWG​$ 上的从起始节点开始的任意一条路径，设这条路径的终点为 $x​$，如果这条路径得到的子串是母串的后缀，那么节点 $x​$ 就是<strong>可接受节点</strong>。</p><h4 id="0X1F-1-1-DAWG上的节点"><a href="#0X1F-1-1-DAWG上的节点" class="headerlink" title="0X1F-1-1 DAWG上的节点"></a>0X1F-1-1 DAWG上的节点</h4><blockquote><p><strong>定义：</strong>对于一个 $DAWG$ 上的任意一个节点 $x$，$x$ 所表示的所有字符串都是母串的某个前缀的后缀，且 $x$ 所表示的所有的字符串的长度是连续的。</p></blockquote><p><strong>举例：</strong>假设现在的母串为 $leyxojdhqes​$，显然字符串 $leyxojd​$ 是母串的一个前缀，那么 $x​$ 里面存的字符串可能为：$xojd,ojd,jd,d​$。注意长度必须是连续的，如果 $x​$ 存的字符串为：$xojd,jd,d​$ ，显然长度没有连续，那么就错误了。</p><blockquote><p><strong>定义：</strong>对于一个节点 $x​$ ，$max(x)​$ 和 $min(x)​$ 分别表示 $x​$ 里面存的所有子串中最长的/最短的</p></blockquote><p><strong>举例：</strong>假设现在的母串为 $leyxojdhqes$，字符串 $leyxojd$ 是母串的一个前缀，有一个节点 $x$ 里面存的字符串为：$xojd,ojd,jd$，那么 $max(x)=xojd$ ，$min(x)=jd$。</p><blockquote><p><strong>定义：</strong>对于一个节点 $x$，$end-pos(x)$ 表示 $max(x)$ 在母串中出现的结束位置集合。</p><p><strong>性质</strong>：任意两个节点的 $end-pos$集合不相同。</p></blockquote><p><strong>举例：</strong>假设现在的母串为 $acskdleaseccskdew​$，有一个节点 $x​$ 里面存的字符串为：$csk,sk​$，$max(x)=csk​$，显然字符串 $csk​$ 的结束位置有：{$4,14​$}，那么 $end-pos(x)=​${$4,14​$}。</p><p>如果有两个节点的 $end-pos$ 相同，那么它们是可以合并的。而 $SAM$ 正是要求最简化。</p><h4 id="0X1F-1-1-DAWG上的转移边"><a href="#0X1F-1-1-DAWG上的转移边" class="headerlink" title="0X1F-1-1 DAWG上的转移边"></a>0X1F-1-1 DAWG上的转移边</h4><p>设节点 $u​$ 到 $v​$ 有一条转移边，转移边上的字符为 $c​$，那么 $u​$ 里面的所有字符串后面加上 $c​$ 后都可以由 $v​$ 表示，<strong>但是 $v​$ 的所有子串不一定都来自 $u​$!</strong></p><hr><h3 id="0X1F-2-前缀树"><a href="#0X1F-2-前缀树" class="headerlink" title="0X1F-2 前缀树"></a>0X1F-2 前缀树</h3><blockquote><p><strong>定义：</strong>$u$ 的<strong>后缀链接</strong>指向 $v$，当且仅当 $min(u)=max(v)+1$， 并且 $v$ 中的所有字符串串均为 $u$ 中的字符串的后缀，记为：$next(u)=v$</p></blockquote><p><strong>举例：</strong>假设现在的母串为 $leyxojdhqes$，字符串 $leyxojd$ 是母串的一个前缀，节点 $v$ 中的字符串为：$xojd,ojd,jd$，节点 $u$ 中的字符串为：$eyxojd,yxojd$，那么 $next(u)=v$。</p><p>以后缀链接为边，所组成的结构是一棵树，叫<strong>前缀树</strong>。</p><blockquote><p><strong>性质</strong>：前缀树中，对于任意一个节点 $x​$，都有 $end-pos(x) \subseteq end-pos(next(x))​$</p></blockquote><p><strong>证明：</strong> $end-pos(x)$ 跟 $max(x)$ 有关，根据上面的定义，我们可以知道，$max(x)$ 出现的位置 $max(next(x))$ 一定也出现了，所以 $end-pos(x) \subseteq end-pos(next(x))$，但是 $end-pos(x) \neq end-pos(next(x))$ ，因为如果 $end-pos(x) = end-pos(next(x))$，那么 $x$ 和 $next(x)$ 就将合并为一个点，这个上面也讲了，所以 $end-pos(x) \subseteq end-pos(next(x))$。</p><p>显然，$end-pos(x)$ 等于所有 $end-pos(next(x))$ 的交集。</p><hr><h2 id="0X2F-后缀自动机的构造过程"><a href="#0X2F-后缀自动机的构造过程" class="headerlink" title="0X2F 后缀自动机的构造过程"></a>0X2F 后缀自动机的构造过程</h2><p>我们将插入一个长度为 $N$ 的字符串 $S$ ，后缀自动机将一个一个的插入字符，现在我们就来模拟一下插入 $V_7$ 的过程。</p><p>现在我们的后缀自动机的状态如下(黑色为前缀树上的后缀链接的边，灰色为$DAWG$上的转移边)：</p><p><img src="/2019/02/16/[算法]后缀自动机SAM/5c6cc1703aecb.png" alt=""></p><p>现在我们将要插入 $V_7$，字符为 $c$ ，我们假设 $V_4$ 及之前的节点，在其后面插入一个字符后，该节点的字符串任然存在于母串中，假设 $V_5,V_6$ 后面插入一个字符就会有字符串不存在于母串中。</p><p>那么我们插入，很显然，现在 $V_5,V_6$ 后面插入了 $c$ 还是存在于新的母串之中，并且为新的母串的后缀。我们设现在插入 $c$ 后产生的原来没有的新字符串被 $V_7$ 表示，我们可以得到：$max(V_7)=max(V_6)+1,min(V_7)=min(V_5)+1$。</p><p><img src="/2019/02/16/[算法]后缀自动机SAM/5c6cc1704e797.png" alt=""></p><p>对于现在插入 $V_7​$ 后所产生的新的后缀，长的均可以被 $V_7​$ 表示，而短一点的，则可以被 $V_4​$ 及之前的节点表示了。这也说明 $V_4​$ 有 $c​$ 这个儿子，这也是为什么插入 $c​$ 的时候不用在往 $V_4​$ 及它前面的节点插入了，因为已经有 $V_4​$ 了。</p><p>这个时候，显然我们满足了 $DAWG$ 的性质，来考虑怎么满足前缀树的性质。</p><p>对于节点 $P$，如果 $max(P)=max(V_4)+c$ ，也就是说 $P$ 中最长的字符串由 $V_4$ 中最长的字符串后面加上一个字符 $c$ 转移而来，我们又知道 $|min(V_7)| = |min(V_5)| + 1$，根据前缀树的性质，又知道 $|max(V_4)| = |min(V_5)| - 1$，于是我们可以得到：$|max(d)| = (|min(V_2)| - 1) + 1 = |min(V_7)| - 1$，那么显然，$next(V_7)=d$，这个链接是满足条件的。</p><p>*注：所有的灰色边都是转移边，只有$V7-&gt;P$的那一条不是，颜色有误.</p><p><img src="/2019/02/16/[算法]后缀自动机SAM/5c6cc17075ad5.png" alt=""></p><p>不过，如果 $max(P) \neq max(V_4)+c$ 的话，那么必然 $|max(P)| &gt; |max(V_4)|+1$。因为 $max(V_4)+c$ 一定存在于 $P$ 节点中，并且还有一个节点 $a$，满足 $next(a)=V_4$ 并且 $a$ 于 $P$ 连有一条转移边。</p><p><img src="/2019/02/16/[算法]后缀自动机SAM/5c6cc170788b6.png" alt=""></p><p>因为此时 $P​$ 中的字符串不全是 $V_7​$ ，所以我们不能将 $V_7​$ 的后缀链接连向 $P​$，不然就不合法了。我们来借助图片解释：</p><p><img src="/2019/02/16/[算法]后缀自动机SAM/5c6cc1707b75a.png" alt=""></p><p>这里的每一个节点都是合法的，可以仔细的看一下。</p><p>我们发现，$P​$中的 “$iwhkshxzns​$” 是 $V_7​$ 的后缀，是可以链接的，但是 $P​$ 中的 “$kaiwhkshxzns​$” 不是 $V_7​$ 的后缀，所以 $V_7​$ 的后缀链接不能连向 $P​$。</p><p>那怎么办？<strong>将 $P$ 拆开!</strong></p><p>我们将 $P​$ 拆成两个点：$P_1,P_2​$ 。其中 $P_1​$ 里面存的是长度小于等于 $|max(V_4)| + 1​$ 的子串，也就是 $iwhkshxzns​$，而 $P_2​$ 存的就是剩下的字符串，也就是例子中的 $kaiwhkshxzns​$，这个时候，我们将 $V_7​$ 的后缀链接连向 $P_1​$ ，可以证明这是对的。</p><p>对于 $V_3​$ 和 $V_4​$ ，我们将他们的转移边依然指向 $P_1​$，然后，我们将 $a​$ 的转移边连向 $P_2​$ ，然后在从 $P_2​$ 向 $P_1​$ 连一条转移边，最后不要忘记，要将 $V_7​$ 的后缀链接连向 $P_1​$，整个过程就大功告成了。</p><p><img src="/2019/02/16/[算法]后缀自动机SAM/5c6cc1707dab8.png" alt=""></p><p>这张图显然同时满足了 $DAWG$ 和 前缀树 的性质。</p><hr><h2 id="0X3F-后缀自动机的代码实现"><a href="#0X3F-后缀自动机的代码实现" class="headerlink" title="0X3F 后缀自动机的代码实现"></a>0X3F 后缀自动机的代码实现</h2><p>有一个注意的地方：我们在开结构体记录每一个节点的时候，只需要记录其 $Max​$，不需要记录 $Min​$ ，因为即使不记录 $Min​$ 我们也可以用 $O(1)​$ 的时间算出 $Min​$，按照前缀树的性质，可以知道 $min(x)=max(next(x))+1​$。</p><p>还有就是，对于拆点的时候，需要先把原来的点的信息复制过来再进行操作。对于上图中的 $P_1​$ 就是新建的点，$P_2​$ 是原来的点，显然我们在拆点的时候只需要将 $P_2​$ 的信息复制到 $P_1​$，然后将 $P_1​$ 的 $Max​$ 改为 $|max(V_4)| + 1​$ ，最后将所有转移边原来指向 $P_2​$ 的点改为指向 $P_1​$ ，例如 $V_3,V_4​$。</p><p>将图贴在这里，可以借着图来意会意会。</p><p><img src="/2019/02/16/[算法]后缀自动机SAM/5c6cc1707dab8.png" alt=""></p><h3 id="Code-SAM"><a href="#Code-SAM" class="headerlink" title="Code-SAM:"></a>Code-SAM:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> last,cnt;</span><br><span class="line">    <span class="comment">/*上一次插入的节点(上面的V6)，当前节点个数*/</span></span><br><span class="line">    <span class="keyword">int</span> ch[N][<span class="number">26</span>],fa[N],len[N];</span><br><span class="line">    <span class="comment">/*ch表示转移边，fa表示后缀链接，len(x)表示max(x)*/</span></span><br><span class="line">    SAM()&#123;cnt=last=<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">/*初始化，根节点编号为1，我们插入的节点编号从2开始*/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;<span class="comment">/*插入c*/</span></span><br><span class="line">        <span class="keyword">int</span> p=last,np=++cnt;</span><br><span class="line">        <span class="comment">/*p为图中的V6,np为V7(新节点)*/</span></span><br><span class="line">        last=np,len[np]=len[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*按照性质给V7的len复制*/</span></span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;!ch[p][c])ch[p][c]=np,p=fa[p];</span><br><span class="line">        <span class="comment">/*给V5,V6安好一个新儿子，!ch[p][c]在V4时不满足，这时就停下来了*/</span></span><br><span class="line">        <span class="keyword">if</span>(!p)fa[np]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*到根节点了，之间将后缀链接连向根节点*/</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> q=ch[p][c];</span><br><span class="line">            <span class="comment">//这个“ch[p][c]”就是上图的P</span></span><br><span class="line">            <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>)fa[np]=q;</span><br><span class="line">            <span class="comment">/*显然是合法的，那么直接连边，可以参考上图*/</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">/*需要拆点*/</span></span><br><span class="line">                <span class="keyword">int</span> nq=++cnt;len[nq]=len[p]+<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//建好P1，然后给P1的len附值</span></span><br><span class="line">                <span class="built_in">memcpy</span>(ch[nq],ch[q],<span class="keyword">sizeof</span>(ch[q]));</span><br><span class="line">                <span class="comment">//复制儿子</span></span><br><span class="line">                fa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class="line">                <span class="comment">//连后缀链接</span></span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;ch[p][c]==q)ch[p][c]=nq,p=fa[p];</span><br><span class="line">                <span class="comment">//改转移边</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main函数中：</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,S);</span><br><span class="line"><span class="keyword">int</span> slen=<span class="built_in">strlen</span>(S);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;slen;++i)</span><br><span class="line">    sam.ins(s[i]-<span class="string">'a'</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="0X4F-后缀自动机的实际运用"><a href="#0X4F-后缀自动机的实际运用" class="headerlink" title="0X4F 后缀自动机的实际运用"></a>0X4F 后缀自动机的实际运用</h2><h3 id="求一个字符串的所有子串中本质不同的子串个数？"><a href="#求一个字符串的所有子串中本质不同的子串个数？" class="headerlink" title="求一个字符串的所有子串中本质不同的子串个数？"></a>求一个字符串的所有子串中本质不同的子串个数？</h3><p>后缀自动机存储了所有的子串，我们只需要统计所有节点上的子串的个数的总和即可，这个就是答案。怎么统计呢？可以知道一个节点上面的所有字符串的长度一定是连续的，那么这个节点上面的子串个数就是 $|max(x)| - |min(x)| + 1$ (设该节点为 $x$)，也就是 $|max(x)| - |max(next(x))|$。</p><h3 id="求两个字符串的最长公共子串？"><a href="#求两个字符串的最长公共子串？" class="headerlink" title="求两个字符串的最长公共子串？"></a>求两个字符串的最长公共子串？</h3><p>我们将第一个字符串建成后缀自动机，然后依次枚举第二个字符串的每一个字符 $c$，枚举的时候要记一个当前匹配长度($len$)，当前的最长公共字串的长度($ans$)，当前匹配到的节点($p$)</p><p>对于这个 $c$，有两种情况：</p><ul><li>$p$  有字符 $c$ 的转移出边：直接转移即可，即 $p=ch[p][c]$，然后 ++$len$。</li><li>$p$ 没有字符 $c$ 的转移出边：那么开始循环，每一次 $p$ 跳到 $next(p)$，然后判断当前的 $p$ 有没有 $c$ 的出边，有的话直接 $len=max(p)+1$，$p=ch[p][c]$。没有的话继续跳，如果跳到了根节点那么 $len=0，p=1$ ，然后再继续匹配。</li><li>可以证明这种做法是对的，因为当前匹配不上了，所以调到 $next(p)$ ，舍弃最少的前缀，然后再尝试往下匹配。</li></ul><hr><h2 id="0X5F-后缀自动机的一些例题"><a href="#0X5F-后缀自动机的一些例题" class="headerlink" title="0X5F 后缀自动机的一些例题"></a>0X5F 后缀自动机的一些例题</h2><h3 id="题目：bzoj4516-luoguP4070-SDOI2016-生成魔咒"><a href="#题目：bzoj4516-luoguP4070-SDOI2016-生成魔咒" class="headerlink" title="题目：bzoj4516/luoguP4070 [SDOI2016]生成魔咒"></a>题目：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4516" target="_blank" rel="noopener">bzoj4516</a>/<a href="https://www.luogu.org/problemnew/show/P4070" target="_blank" rel="noopener">luoguP4070</a> [SDOI2016]生成魔咒</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>魔咒串由许多魔咒字符组成，魔咒字符可以用数字表示。例如可以将魔咒字符 $1,2$ 拼凑起来形成一个魔咒串 $[1,2]$。</p><p>一个魔咒串 $S​$ 的非空字串被称为魔咒串 $S​$ 的生成魔咒。</p><p>例如 $S=[1,2,1]$ 时，它的生成魔咒有 $[1]$、$[2]$、$[1,2]$、$[2,1]$、$[1,2,1]$ 五种。$S=[1,1,1]$ 时，它的生成魔咒有 $[1]$、$[1,1]$、$[1,1,1]$ 三种。最初 $S$ 为空串。共进行 $n$ 次操作，每次操作是在 $S$ 的结尾加入一个魔咒字符。每次操作后都需要求出，当前的魔咒串 $S$ 共有多少种生成魔咒。</p><h4 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><p><strong>输入格式：</strong></p><p>第一行一个整数 $n​$。</p><p>第二行 $n$ 个数，第 $i$ 个数表示第 $i$ 次操作加入的魔咒字符。</p><p><strong>输出格式：</strong></p><p>输出 $n$ 行，每行一个数。第 $i$ 行的数表示第 $i$ 次操作后 $S$ 的生成魔咒数量</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例:"></a>输入输出样例:</h4><p><strong>输入样例#1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1 2 3 3 3 1 2</span><br></pre></td></tr></table></figure><p><strong>输出样例#1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">9</span><br><span class="line">12</span><br><span class="line">17</span><br><span class="line">22</span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>对于%$10$的数据，$1 \le n \le 10$</p><p>对于%$30$的数据，$1 \le n \le 100$</p><p>对于%$60$的数据，$1 \le n \le 100$</p><p>对于%$100$的数据，$1 \le n \le 100000$</p><p>用来表示魔咒字符的数字 $x$ 满足 $1 \le n \le 10^9$</p><h3 id="题解-bzoj4516-luoguP4070-SDOI2016-生成魔咒"><a href="#题解-bzoj4516-luoguP4070-SDOI2016-生成魔咒" class="headerlink" title="题解 bzoj4516/luoguP4070 [SDOI2016]生成魔咒"></a>题解 <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4516" target="_blank" rel="noopener">bzoj4516</a>/<a href="https://www.luogu.org/problemnew/show/P4070" target="_blank" rel="noopener">luoguP4070</a> [SDOI2016]生成魔咒</h3><p>很显然是让我们求本质不同的子串个数。</p><p>后缀自动机裸题。</p><h3 id="Code-bzoj4516-luoguP4070-SDOI2016-生成魔咒"><a href="#Code-bzoj4516-luoguP4070-SDOI2016-生成魔咒" class="headerlink" title="Code bzoj4516/luoguP4070 [SDOI2016]生成魔咒"></a>Code <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4516" target="_blank" rel="noopener">bzoj4516</a>/<a href="https://www.luogu.org/problemnew/show/P4070" target="_blank" rel="noopener">luoguP4070</a> [SDOI2016]生成魔咒</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ch[N];</span><br><span class="line">    <span class="keyword">int</span> last,cnt,len[N],fa[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=last,now=last=++cnt;</span><br><span class="line">        len[now]=len[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;!ch[p][c])ch[p][c]=now,p=fa[p];</span><br><span class="line">        <span class="keyword">if</span>(!p)fa[now]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> q=ch[p][c];</span><br><span class="line">            <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>)fa[now]=q;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> copy=++cnt;</span><br><span class="line">                len[copy]=len[p]+<span class="number">1</span>,ch[copy]=ch[q];</span><br><span class="line">                fa[copy]=fa[q],fa[q]=fa[now]=copy;</span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;ch[p][c]==q)ch[p][c]=copy,p=fa[p];</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        ans+=len[now]-len[fa[now]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;IN(n);</span><br><span class="line">    sam.last=sam.cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> c;IN(c);</span><br><span class="line">        sam.Insert(c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sam.ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题目-luoguSP1811-LCS-Longest-Common-Substring"><a href="#题目-luoguSP1811-LCS-Longest-Common-Substring" class="headerlink" title="题目 luoguSP1811 LCS - Longest Common Substring"></a>题目 <a href="https://www.luogu.org/problemnew/show/SP1811" target="_blank" rel="noopener">luoguSP1811</a> LCS - Longest Common Substring</h3><h4 id="题意翻译"><a href="#题意翻译" class="headerlink" title="题意翻译"></a>题意翻译</h4><p>输入 $2$ 个长度不大于 $250000$ 的字符串，输出这 $2$ 个字符串的最长公共子串。如果没有公共子串则输出 $0$ 。</p><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>A string is finite sequence of characters over a non-empty finite set $\sum$.</p><p>In this problem, $\sum$ is the set of lowercase letters.</p><p>Substring, also called factor, is a consecutive sequence of characters occurrences at least once in a string.</p><p>Now your task is simple, for two given strings, find the length of the longest common substring of them.</p><p>Here common substring means a substring of two or more strings.</p><h4 id="输入输出格式-1"><a href="#输入输出格式-1" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><p><strong>输入格式：</strong></p><p>The input contains exactly two lines, each line consists of no more than 250000 lowercase letters, representing a string.</p><p><strong>输出格式：</strong></p><p>The length of the longest common substring. If such string doesn’t exist, print “0” instead.</p><h4 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p><strong>输入样例#1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alsdfkjfjkdsal</span><br><span class="line">fdjskalajfkdsla</span><br></pre></td></tr></table></figure><p><strong>输出样例#1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="题解-luoguSP1811-LCS-Longest-Common-Substring"><a href="#题解-luoguSP1811-LCS-Longest-Common-Substring" class="headerlink" title="题解 luoguSP1811 LCS - Longest Common Substring"></a>题解 <a href="https://www.luogu.org/problemnew/show/SP1811" target="_blank" rel="noopener">luoguSP1811</a> LCS - Longest Common Substring</h3><p>依然是裸题，直接用后缀自动机求最长公共子串就好。</p><h3 id="Code-luoguSP1811-LCS-Longest-Common-Substring"><a href="#Code-luoguSP1811-LCS-Longest-Common-Substring" class="headerlink" title="Code luoguSP1811 LCS - Longest Common Substring"></a>Code <a href="https://www.luogu.org/problemnew/show/SP1811" target="_blank" rel="noopener">luoguSP1811</a> LCS - Longest Common Substring</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s1[N],s2[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> last,cnt,ans; </span><br><span class="line">    <span class="keyword">int</span> ch[N][<span class="number">26</span>],fa[N],len[N];</span><br><span class="line">    SAM()&#123;cnt=last=<span class="number">1</span>,ans=<span class="number">0</span>;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=last,np=++cnt;last=np,len[np]=len[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;!ch[p][c])ch[p][c]=np,p=fa[p];</span><br><span class="line">        <span class="keyword">if</span>(!p)fa[np]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> q=ch[p][c];</span><br><span class="line">            <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>)fa[np]=q;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> nq=++cnt;len[nq]=len[p]+<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(ch[nq],ch[q],<span class="keyword">sizeof</span>(ch[q]));</span><br><span class="line">                fa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;ch[p][c]==q)ch[p][c]=nq,p=fa[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">1</span>,slen=<span class="number">0</span>,nlen=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nlen;++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> c=s[i]-<span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(ch[p][c])slen++,p=ch[p][c];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;!ch[p][c])p=fa[p]; </span><br><span class="line">                <span class="keyword">if</span>(p)slen=len[p]+<span class="number">1</span>,p=ch[p][c];</span><br><span class="line">                <span class="keyword">else</span> slen=<span class="number">0</span>,p=<span class="number">1</span>;</span><br><span class="line">            &#125;ans=max(ans,slen);</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2);</span><br><span class="line">    <span class="keyword">int</span> nlen=<span class="built_in">strlen</span>(s1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nlen;++i)</span><br><span class="line">       sam.ins(s1[i]-<span class="string">'a'</span>);</span><br><span class="line">    sam.solve(s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sam.ans); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的不会什么了，蒟蒻到时候再来填坑吧。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 后缀自动机.SAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈后缀数组(SA)&amp;学习笔记</title>
      <link href="/2019/02/16/%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84SA/"/>
      <url>/2019/02/16/%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84SA/</url>
      
        <content type="html"><![CDATA[<p>好吧写完了后缀自动机就写后缀数组吧 $QvQ$。</p><p>感觉这个东西比后缀自动机简单些欸 $QvQ$。</p><p><del>(够了不要 $QvQ$了</del></p><p>我们进入正题。</p><a id="more"></a><h2 id="0XFF-前言"><a href="#0XFF-前言" class="headerlink" title="0XFF 前言"></a>0XFF 前言</h2><blockquote><p><strong>*如果本文有地方表达错误，可以通过QQ联系我，一定尽量改正！</strong></p></blockquote><hr><h2 id="0X1F-后缀数组是什么？"><a href="#0X1F-后缀数组是什么？" class="headerlink" title="0X1F 后缀数组是什么？"></a>0X1F 后缀数组是什么？</h2><blockquote><p>在字符串处理当中，后缀树和后缀数组都是非常有力的工具。其实后缀数组是后缀树的一个非常精巧的替代品，它比后缀树容易编程实现，能够实现后缀树的很多功能而时间复杂度也不太逊色，并且，它比后缀树所占用的空间小很多。可以说，在信息学竞赛中后缀数组比后缀树要更为实用。        ————百度百科</p></blockquote><p>后缀数组主要由两个算法实现，一个是倍增算法($25$行码量左右)(炒鸡难)，另一个是$DC3$算法($40$行码量左右)(更加炒鸡难)，其中，倍增算法的时间复杂度为$O(nlogn)$，$DC3$算法的时间复杂度为 $O(n)$。今天我们就来稍微讨论一下倍增算法。</p><hr><h2 id="0X2F-倍增算法的实现过程"><a href="#0X2F-倍增算法的实现过程" class="headerlink" title="0X2F 倍增算法的实现过程"></a>0X2F 倍增算法的实现过程</h2><h3 id="0X2F-1-后缀是什么？"><a href="#0X2F-1-后缀是什么？" class="headerlink" title="0X2F-1 后缀是什么？"></a>0X2F-1 后缀是什么？</h3><blockquote><p><strong>定义：</strong>一个字符串 $S$，定义 $Suffix(x)$ 表示从 $S$ 的第 $x$ 个字符到最后一个字符所组成的字符串。</p></blockquote><p><strong>举例：</strong>假设现在字符串 $S$ 为 $abcdefg$，那么 $Suffix(3)$ 就是 $cdefg$，$Suffix(6)$ 就是 $fg$。</p><p>现在我们规定三个数组：</p><ul><li>$SA$ 数组：$SA[i]$ 表示第 $i$ 小的后缀的开始位置在母串的第几个位置。</li><li>$Rank​$ 数组：$Rank[i]​$ 表示 $Suffix(i)​$ 在所有后缀中的排名。</li><li>$Height$ 数组：$Height[i]$ 表示 $Suffix(sa[i])$ 和 $Suffix(sa[i-1])$ 的最长公共前缀的长度，特别的，$Height[0]=0$。</li></ul><hr><h3 id="0X2F-2-倍增算法的思想"><a href="#0X2F-2-倍增算法的思想" class="headerlink" title="0X2F-2 倍增算法的思想"></a>0X2F-2 倍增算法的思想</h3><p>前置芝士：</p><ul><li>倍增思想</li><li>基数排序</li></ul><p>我们将用一个字符串 $S$ 来举例/图解用：</p><p><img src="/2019/02/16/[算法]后缀数组SA/5c6cc1c7c2c44.png" alt=""></p><p>我们倍增一个 $P$，从 $0$ 开始，每次乘 $2$ ，表示当前处理的长度。</p><p>假设当前的 $P$ 是 $4$，我们将比较所有串的前四位，进行基数排序。怎么个鸡排法呢？我们以第三个串为例，来加以解释。</p><p><img src="/2019/02/16/[算法]后缀数组SA/5c6cc1c7a6c8f.png" alt=""></p><p>很显然我们上一次 $P=2​$ 的时候就处理好了每一个串前两位的排名，我们将排名列出来：</p><p><img src="/2019/02/16/[算法]后缀数组SA/5c6cc1c7bbc32.png" alt=""></p><p>这是对 $1-8$ 所有串，按照前两位排序排出来的结果，对于 $s$ 后面的 <code>$</code>，是一个极小的东西，因为 $s$ 后面没有东西了，所以这样子写(实际上并不要表示出来)。我们令 $mo=5/nl=6……ts=9$</p><p>那么很显然，$nlig=63$，其中 $6$ 是十位，是第一关键字，$3$ 是个位，是第二关键字。那么现在所有的串的前四位表示的二位数如下：</p><p><img src="/2019/02/16/[算法]后缀数组SA/5c6cc1c7dadc8.png" alt=""></p><p>于是我们开始基数排序。基数排序的过程就不再赘述了。</p><p>然后呢？还有吗？<strong>没了！</strong></p><hr><h2 id="0X3F-倍增算法的代码实现"><a href="#0X3F-倍增算法的代码实现" class="headerlink" title="0X3F 倍增算法的代码实现"></a>0X3F 倍增算法的代码实现</h2><h3 id="Code-SA"><a href="#Code-SA" class="headerlink" title="Code-SA:"></a>Code-SA:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[NS];<span class="comment">/*字符串S*/</span></span><br><span class="line"><span class="keyword">int</span> n,m,x[NS],y[NS],sa[NS],hep[NS];</span><br><span class="line"><span class="comment">/*SA不解释，hep：堆，x:第一关键字，基数排序中的十位，y:第二关键字，基数排序中的个位*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;<span class="comment">/*倍增算法*/</span></span><br><span class="line">    m=<span class="number">75</span>;<span class="comment">/*当前堆的最大值(意会一下)*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)x[i]=s[i]-<span class="string">'0'</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*现在对长度为1的第一关键字进行排序，获取第一关键字*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)hep[i]=<span class="number">0</span>;<span class="comment">/*清空堆*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)++hep[x[i]];<span class="comment">/*基数排序*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)hep[i]+=hep[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)sa[hep[x[i]]--]=i;<span class="comment">/*获取SA数组*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;m=p,p&lt;n;w&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        p=<span class="number">0</span>;<span class="comment">//计数器</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;++i)y[++p]=n-w+i；</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(sa[i]&gt;w)y[++p]=sa[i]-w;</span><br><span class="line">        <span class="comment">/*获取当前第二关键字的排名，结合图片理解效果更佳*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)hep[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)++hep[x[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)hep[i]+=hep[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)sa[hep[x[y[i]]]--]=y[i];</span><br><span class="line">        <span class="comment">/*基数排序过程*/</span></span><br><span class="line">        <span class="built_in">std</span>::swap(x,y);</span><br><span class="line">        x[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">           x[sa[i]]=(y[sa[i<span class="number">-1</span>]]==y[sa[i]]&amp;&amp;y[sa[i<span class="number">-1</span>]+w]==y[sa[i]+w])?p:++p;<span class="comment">/*计算当前的Rank数组*/</span></span><br><span class="line">        <span class="comment">/*显然如果每个后缀都有唯一的排名时就退出循环了*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%d "</span>,sa[i]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//main函数中</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>留个坑，到时候再补吧。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 后缀数组.SA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 跳楼机 同余最短路 luogu3403</title>
      <link href="/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP3403/"/>
      <url>/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP3403/</url>
      
        <content type="html"><![CDATA[<p>对于 $x,y,z$ 三个操作，我们先考虑 $y,z$ 两个操作的情况。</p><p>$f[i]$ 表示通过 $y,z$ 两个操作可以到达的 $mod   x=i$ 最小的楼层。</p><p>可以得知：$f[i+y]=f[i]+y,f[i+z]=f[i]+z.$</p><p>对于最短路，我们可以用一下形式建边：</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(i,(i+y)%x,y); add(i,(i+z)%x,z);</span><br></pre></td></tr></table></figure><p>没问题吧？<code>%x</code>是必须要做的操作，上文讲了。</p><p>那如何统计答案呢？</p><p>首先，如果这个 “最小的楼层” 超出了 $H$ ，那么显然是不用统计的。否则，我们将这样统计：<code>ans+=(H-f[i])/x+1;</code></p><p>为什么要这样写呢？想想，现在我们知道了这个最小楼层，我们可以到达这个最小楼层，对吧？如果现在以这个最小楼层为起点，我们可以选择在往上跳 $x$ 层，或者是 $2x$ 层….知道 $nx$ 层，$(n+1)x$就会超出  $H$，这时上面的式子就好理解多了。</p><h3 id="Code-可以不用-堆优-Dijstra-，没必要，用-Spfa-就行了"><a href="#Code-可以不用-堆优-Dijstra-，没必要，用-Spfa-就行了" class="headerlink" title="Code:(可以不用 堆优$Dijstra$，没必要，用 $Spfa$ 就行了)"></a>Code:(可以不用 堆优$Dijstra$，没必要，用 $Spfa$ 就行了)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line">ll H,x,y,z,ans,f[N];</span><br><span class="line"><span class="keyword">int</span> vis[N],head[N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">1</span>]; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">127</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;f[<span class="number">1</span>]=<span class="number">1</span>,vis[<span class="number">1</span>]=<span class="number">1</span>,q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();vis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(RI i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[G[i].to]&gt;f[x]+G[i].val)&#123;</span><br><span class="line">        f[G[i].to]=f[x]+G[i].val;</span><br><span class="line"><span class="keyword">if</span>(!vis[G[i].to])q.push(G[i].to),vis[G[i].to]=<span class="number">1</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;H,&amp;x,&amp;y,&amp;z);</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>||y==<span class="number">1</span>||z==<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,H);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;++i)&#123;add(i,(i+y)%x,y);add(i,(i+z)%x,z);&#125; </span><br><span class="line">    spfa();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;++i)</span><br><span class="line">   <span class="keyword">if</span>(f[i]&lt;=H)ans+=(H-f[i])/x+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 同余最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2010]地精部落 线性DP luogu2467</title>
      <link href="/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP2467/"/>
      <url>/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP2467/</url>
      
        <content type="html"><![CDATA[<p>好巧的一道思维题啊！</p><p>思维量极大但是码量极小，真的好巧妙啊！(好了不废话进入主题)</p><a id="more"></a><p>在下文，因为为了方便代码的理解同步，所以应用了百度翻译：</p><blockquote><p>summit: 顶点</p><p>valley: 流域;  山谷，溪谷，峡谷，谷地，深谷;</p></blockquote><hr><p>这显然是道 $DP$ 题(又是废话)</p><p>可以知道题目要求的合法山脉其实是一个波动数列。</p><p>很容易的可以想到，设 $summit[i][j]$ 表示长度为 $j$ 的波动数列，此波动数列的第一个数为 $i$，且在题目中，$i$ 为山峰，这样状态下的方案总数。</p><p>同样的，我们同时设 $valley[i][j]$ 表示长度为 $j$ 的波动数列，此波动数列的第一个数为 $i$，且在题目中，$i$ 为山谷，这样状态下的方案总数。</p><p>那么答案是多少呢？由于数列中的每一个元素都可以做第一个元素，且都有可能做”山峰”或者是”山脉”，所以我们的答案应该是：</p><h3 id="sum-i-1-n-summit-i-n-valley-i-n"><a href="#sum-i-1-n-summit-i-n-valley-i-n" class="headerlink" title="$\sum_{i=1}^{n} summit[i][n]+valley[i][n]$"></a>$\sum_{i=1}^{n} summit[i][n]+valley[i][n]$</h3><p>现在来考虑怎么转移。</p><p>以 $summit$ 的转移为例子，假设现在需要转移 $summit[i][n]$.</p><p>那么这个波动数列的第二项肯定严格小于 $i$ ，而第三项又严格大于第二项，所以如果不看第一项的话，这个数列就变成了由第二项起头，并且第二项是”山谷”，设第二项的数为 $j$ ，那么其方案数可以用 $valley[j][n-1]$ 来表示。</p><p>由于第二项可以是数列中严格小于 $i$ 的任何数，因此我们可以列出转移式：</p><h3 id="summit-i-n-sum-k-1-i-1-valley-k-n-1"><a href="#summit-i-n-sum-k-1-i-1-valley-k-n-1" class="headerlink" title="$summit[i][n] = \sum_{k=1}^{i-1} valley[k][n-1]$"></a>$summit[i][n] = \sum_{k=1}^{i-1} valley[k][n-1]$</h3><p>因为题目说了是<strong>严格小于</strong>，所以可以这样子统计，<del>亲，放心哦！这样子不会出锅！</del></p><p>同样的，$valley[i][j]$ 也是这样转移：</p><h3 id="valley-i-n-sum-k-i-n-1-summit-k-n-1"><a href="#valley-i-n-sum-k-i-n-1-summit-k-n-1" class="headerlink" title="$valley[i][n] = \sum_{k=i}^{n-1} summit[k][n-1]$"></a>$valley[i][n] = \sum_{k=i}^{n-1} summit[k][n-1]$</h3><p>我们现在可以很轻易的打出正解了，但是想象一下，我们有那么大的空间吗？$2<em>4200</em>4200$？貌似很紧诶(虽然我是踩线没有 $MLE$)</p><h4 id="那就使用滚动数组！"><a href="#那就使用滚动数组！" class="headerlink" title="那就使用滚动数组！"></a>那就使用滚动数组！</h4><p>还有，这样子统计，复杂度将会是 $O(n^3)$ ！怎么优化呢？</p><h4 id="前缀和就好了呀！"><a href="#前缀和就好了呀！" class="headerlink" title="前缀和就好了呀！"></a>前缀和就好了呀！</h4><p>然后……然后就没有然后了……</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4205</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> summit[N][<span class="number">2</span>],valley[N][<span class="number">2</span>],ans,sum,p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sum,&amp;p);</span><br><span class="line">    summit[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>,valley[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>,valley[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">3</span>;n&lt;=sum;++n)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">           <span class="keyword">int</span> sum_val,sum_sum;</span><br><span class="line">           sum_val=(summit[n<span class="number">-1</span>][(n<span class="number">-1</span>)&amp;<span class="number">1</span>]-summit[i<span class="number">-1</span>][(n<span class="number">-1</span>)&amp;<span class="number">1</span>]+p)%p;</span><br><span class="line">           valley[i][n&amp;<span class="number">1</span>]=(valley[i<span class="number">-1</span>][n&amp;<span class="number">1</span>]+sum_val)%p;</span><br><span class="line">           sum_sum=valley[i<span class="number">-1</span>][(n<span class="number">-1</span>)&amp;<span class="number">1</span>]%p;</span><br><span class="line">           summit[i][n&amp;<span class="number">1</span>]=(summit[i<span class="number">-1</span>][n&amp;<span class="number">1</span>]+sum_sum)%p;</span><br><span class="line">       &#125;</span><br><span class="line">    ans=(valley[sum][sum&amp;<span class="number">1</span>]+summit[sum][sum&amp;<span class="number">1</span>])%p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意取模，不然会出锅!</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线性DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈FFT&amp;学习笔记</title>
      <link href="/2019/02/15/%5B%E7%AE%97%E6%B3%95%5DFFT/"/>
      <url>/2019/02/15/%5B%E7%AE%97%E6%B3%95%5DFFT/</url>
      
        <content type="html"><![CDATA[<p>$QvQ​$ 之前就对这个东西感兴趣，然后被一堆公式踩爆，这样高逼格的名字简直让人无法靠近。终于在 $1​$ 月的时候，教练扯着我搞这个，没想到一天左右就会了。</p><p>我们进入正题。</p><a id="more"></a><h3 id="0XFF—-FFT是啥"><a href="#0XFF—-FFT是啥" class="headerlink" title="0XFF—-FFT是啥?"></a>0XFF—-FFT是啥?</h3><blockquote><p>FFT是一种DFT的高效算法，称为快速傅立叶变换（fast Fourier transform），它根据离散傅氏变换的奇、偶、虚、实等                 特性，对离散傅立叶变换的算法进行改进获得的。                                                                                                —-百度百科</p></blockquote><p>对于两个多项式 $F(x)$ 和 $G(x)$ ，要求你将他们乘起来。</p><p>那还不简单？直接暴力相乘啊：</p><p>设 $F(x)$ 的系数数列为 $C$。</p><p>$F(x) \times G(x) = C_nx^nG(x) + C_{n-1}x^{n-1}G(x) + C_{n-2}x^{n-2}G(x) \cdots C_2x^2G(x) + C_1x^1G(x) + C_0G(x)$</p><p>这样下来需要做做 $n$ 次<strong>单项式乘多项式</strong>，每次的时间复杂度 $O(n)$ ，则总复杂度高达 $O(n^2)$</p><p>基本上 $n$ 上了$4000$ 就会被卡吧……那怎么提速呢？</p><p>这就需要我们伟大而又神奇的神器：<strong>$FFT$ (快速博立叶变换)</strong></p><p>复杂度就只有 $O(nlogn)$ 了。</p><hr><h3 id="0X1F—-FFT的前置知识"><a href="#0X1F—-FFT的前置知识" class="headerlink" title="0X1F—-FFT的前置知识."></a>0X1F—-FFT的前置知识.</h3><hr><h4 id="1-复数是什么"><a href="#1-复数是什么" class="headerlink" title="1.复数是什么?"></a>1.复数是什么?</h4><blockquote><p>我们把形如 $z=a+bi$（ $a,b$ 均为实数）的数称为复数，其中 $a$ 称为实部， $b$ 称为虚部， $i$ 称为虚数单位。当虚部等于零时，这个复数可以视为实数；当z的虚部不等于零时，实部等于零时，常称z为纯虚数。复数域是实数域的代数闭包，即任何复系数多项式在复数域中总有根。 复数是由意大利米兰学者卡当在十六世纪首次引入，经过达朗贝尔、棣莫弗、欧拉、高斯等人  的工作，此概念逐渐为数学家所接受。                                                                                 —-百度百科</p></blockquote><p>想必大家都知道实数是啥(不知道重读幼儿园吧……)，实数位于数轴上，就像下图这样：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118145137.png" alt=""></p><p>我们稍微观察一下，$1$ 是怎么变到 $-1$ 的呢？</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118145938.png" alt=""></p><p>在数轴上转了 <em>180°</em>。</p><p>如果，是 <em>90°</em> 的话，会发生什么呢？</p><p>这个时候，会转到 $0$ 上面的位置，但是那里，好像没有数啊!</p><p>不对，其实是有的，只不过这个数不在实数轴上，而是在<strong>虚数轴</strong>上！</p><p>虚数轴的单位是 $i$ ，我们可以这么表示：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118150643.png" alt=""></p><p>嗯，对。这显然是一个平面坐标系。现在我们的数仅限于数轴上，如果是这个平面坐标系上的一个点怎么表达呢？</p><p>对于下面的红色点：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118151010.png" alt=""></p><p>这个点的坐标很容易的可以得到：<strong>$(2,i)$</strong> ，也可以表示成 $2+i$ .</p><p>你没猜错！这个就叫<strong>复数</strong>！</p><p>一个很重要的结论：<strong>复数相乘时，模长相乘，幅角相加！</strong></p><hr><h4 id="2-点值表示法是什么"><a href="#2-点值表示法是什么" class="headerlink" title="2.点值表示法是什么?"></a>2.点值表示法是什么?</h4><p>我们用一个二维平面坐标系，在上面画 $N+1$ 个点，最终可以解出一个 $n$ 元的函数。证明略。</p><p>同样，我们可以用 $N-1$ 个点来表达一个多项式。</p><p>因为点值相乘的复杂度只有 $O(n)$ 显然优秀许多。</p><hr><h4 id="3-单位根是什么"><a href="#3-单位根是什么" class="headerlink" title="3.单位根是什么?"></a>3.单位根是什么?</h4><p><strong>*n次单位根(n为正整数)是n次幂为1的复数!</strong><br><strong>*n次单位根(n为正整数)是n次幂为1的复数!</strong><br><strong>*n次单位根(n为正整数)是n次幂为1的复数!</strong></p><p>我们先在复平面上画个点，就像这样：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118152755.png" alt=""></p><p>Ta叫做<strong>单位圆</strong>。</p><p>圆边上的任意一点的模长都是 $1$.</p><p><strong>只有单位圆上的点表示的复数才有可能成为$n$次单位根!</strong></p><p>单位根的基本符号：$ω$</p><p>一个单位圆，我们将它切成 $n$ 份，从 $(1,0)$ 开始旋转，每次旋转 $\frac{1}{n} \times 360$ 度，每次旋转后的点都记为 $ω_{n}^{k}$，特别的，$ω_{n}^{0}$ 和 $ω_{n}^{n}$ 都是 $(1,0)$ 点。</p><p>还有，当 $k&gt;=n$ 或者 $k&lt;0$ 时，$ω_{n}^{k}$ 也是合法的。</p><h4 id="单位根的性质："><a href="#单位根的性质：" class="headerlink" title="单位根的性质："></a>单位根的性质：</h4><p>$1.$ 对于任意的 $n$ ,  $ω_{n}^{0}$ 都为 $(1,0)$ 点。<br>$2.$ $ω_{n}^{a} \times ω_{n}^{b} = ω_{n}^{a+b} $<br>$3.$ $ω_{an}^{ak} = ω_{n}^{k} $<br>$4.$ $(ω_{n}^{x})^y = (ω_{n}^{y})^x $<br>$5.$ $ω_{n}^{k+n/2} = -ω_{n}^{k} $    if(n%2==0)</p><hr><h3 id="0X2F—-FFT的求解过程"><a href="#0X2F—-FFT的求解过程" class="headerlink" title="0X2F—-FFT的求解过程."></a>0X2F—-FFT的求解过程.</h3><ul><li>分治思想很重要！</li></ul><p>我们将多项式 $F(x)$ 按位置分成两块。</p><p>那么变成了(保证n是2的正整数次幂)：</p><p>$F(x) = (C_0+C_2x^2+C_4x^4+ \cdots +C_{n-2}x^{n-2}) + (C_1x+C_3x^3+C_5x^5+ \cdots +C_{n-1}x^{n-1})$</p><p>设两个多项式 $F1(x),F2(x)$。</p><p>$F1(x) = C_0+C_2x+C_4x^2+ \cdots +C_{n-2}x^{n/2-1}$<br>$F2(x) = C_1x+C_3x+C_5x^2+ \cdots +C_{n-1}x^{n/2-1}$</p><p>则我们可以得出：</p><p>$F(x) = F1(x^2) + F2(x^2) \times x$</p><p>设 $k&lt;n/2$ ， 将 $ω_{n}^{k}$ 带入多项式 $F(x)$.</p><p>$F(ω_{n}^{k}) = F1((ω_{n}^{k})2) + F2((ω_{n}^{k})^2) \times ω_{n}^{k}$</p><p>简化得： $F(ω_{n}^{k}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</p><p>再假设 $k&lt;n/2$ ，将 $ω_{n}^{k+n/2}$ 带入多项式 $F(x)$.</p><p>$F(ω_{n}^{k+n/2}) = F1((ω_{n}^{k+n/2})2) + F2((ω_{n}^{k+n/2})^2) \times ω_{n}^{k}$<br>$F(ω_{n}^{k+n/2}) = F1(ω_{n}^{2k+n}) + F2(ω_{n}^{2k+n}) \times ω_{n}^{k+n/2}$<br>$F(ω_{n}^{k+n/2}) = F1(ω_{n}^{2k}) + F2(ω_{n}^{2k}) \times ω_{n}^{k+n/2}$<br>$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k+n/2}$<br>$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) - F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</p><p>比较一下两个式子：</p><ul><li>$F(ω_{n}^{k}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</li><li>$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) - F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</li></ul><p>等式右边只有一个<strong>负号</strong>的差别!</p><p>这两个式子很关键！</p><hr><h3 id="0X3F—-FFT的代码实现"><a href="#0X3F—-FFT的代码实现" class="headerlink" title="0X3F—-FFT的代码实现."></a>0X3F—-FFT的代码实现.</h3><h4 id="对于复数的使用"><a href="#对于复数的使用" class="headerlink" title="对于复数的使用"></a>对于复数的使用</h4><p>虽然 $C++ STL$ 里面有复数 $(complex)$ 但是太慢不建议大家使用。</p><p>你可以自己手打 $complex$</p><ul><li>手打的 $complex$ :</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;</span><br></pre></td></tr></table></figure><ul><li>FFT:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">int</span> len,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!len)<span class="keyword">return</span>;<span class="keyword">complex</span> f1[len+<span class="number">1</span>],f2[len+<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;len;++k)f1[k]=f[k&lt;&lt;<span class="number">1</span>],f2[k]=f[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];<span class="comment">//按位置分</span></span><br><span class="line">    FFT(f1,len&gt;&gt;<span class="number">1</span>,inv);FFT(f2,len&gt;&gt;<span class="number">1</span>,inv);<span class="comment">//递归处理子问题</span></span><br><span class="line"><span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len)),buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*tmp:做一次平方后坐标的变换*/</span> <span class="comment">/*buf:初始位置*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;len;++k)&#123;</span><br><span class="line">    <span class="keyword">complex</span> t=buf*f2[k];</span><br><span class="line">    f[k]=f1[k]+t,f[k+len]=f1[k]-t;buf=buf*tmp;<span class="comment">//按照公式还原</span></span><br><span class="line">&#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意，inv的作用是判断是 "系数转点值" 还是 "点值转系数"</span></span><br></pre></td></tr></table></figure><p>$Code$ 中提到的公式是这两项：</p><ul><li>$F(ω_{n}^{k}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</li><li>$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) - F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</li></ul><h4 id="对于文中的”坐标的变换”："><a href="#对于文中的”坐标的变换”：" class="headerlink" title="对于文中的”坐标的变换”："></a>对于文中的”坐标的变换”：</h4><p>我们依旧来看单位圆：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118162030.png" alt=""></p><p>实际上，这个坐标的变换，直接用园中的三角形，运用三角函数就可以得出解了。</p><p>过程略.</p><p>最后我们得到的结果是：$ω_{n}^{1} = (cos(\frac{2π}{n}),sin(\frac{2π}{n}))$</p><p>求出 $ω_{n}^{1}$ 后将它乘 $n$ 次，可以得到：$ {ω_{n}^{0},ω_{n}^{1},ω_{n}^{2},ω_{n}^{3},ω_{n}^{4},ω_{n}^{5} \cdots ω_{n}^{n-1}} $</p><h4 id="贴出最终的代码："><a href="#贴出最终的代码：" class="headerlink" title="贴出最终的代码："></a>贴出最终的代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">6e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">max</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">min</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x:y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;</span><br><span class="line"><span class="keyword">complex</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">int</span> len,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!len)<span class="keyword">return</span>;<span class="keyword">complex</span> f1[len+<span class="number">1</span>],f2[len+<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;len;++k)f1[k]=f[k&lt;&lt;<span class="number">1</span>],f2[k]=f[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    FFT(f1,len&gt;&gt;<span class="number">1</span>,inv);FFT(f2,len&gt;&gt;<span class="number">1</span>,inv);</span><br><span class="line"><span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len)),buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>); </span><br><span class="line"><span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;len;++k)&#123;</span><br><span class="line">    <span class="keyword">complex</span> t=buf*f2[k];</span><br><span class="line">    f[k]=f1[k]+t,f[k+len]=f1[k]-t;buf=buf*tmp;</span><br><span class="line">&#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a[i].x);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=m;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;b[i].x);</span><br><span class="line">    <span class="keyword">for</span>(m+=n,n=<span class="number">1</span>;n&lt;=m;n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    FFT(a,n&gt;&gt;<span class="number">1</span>,<span class="number">1</span>);FFT(b,n&gt;&gt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)a[i]=a[i]*b[i];</span><br><span class="line">    FFT(a,n&gt;&gt;<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%.0f "</span>,<span class="built_in">fabs</span>(a[i].x)/n);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>听说可以优化，那啥的我还不会，就到这吧.</p><p>过了一会儿……</p><p>“原来FFT小优化这么简单啊!”</p><hr><h3 id="0X4F—-FFT的一些小优化"><a href="#0X4F—-FFT的一些小优化" class="headerlink" title="0X4F—-FFT的一些小优化."></a>0X4F—-FFT的一些小优化.</h3><hr><h4 id="不用递归："><a href="#不用递归：" class="headerlink" title="不用递归："></a>不用递归：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">递归版(数组下标，先偶后奇，从<span class="number">0</span>开始)：</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  --第<span class="number">1</span>层</span><br><span class="line"><span class="number">0</span>  <span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span> |<span class="number">1</span>  <span class="number">3</span>  <span class="number">5</span>  <span class="number">7</span>  --第<span class="number">2</span>层</span><br><span class="line"><span class="number">0</span>  <span class="number">4</span> |<span class="number">2</span>  <span class="number">6</span> |<span class="number">1</span>  <span class="number">5</span> |<span class="number">3</span>  <span class="number">7</span>  --第<span class="number">3</span>层</span><br><span class="line"><span class="number">0</span> |<span class="number">4</span> |<span class="number">2</span> |<span class="number">6</span> |<span class="number">1</span> |<span class="number">5</span> |<span class="number">3</span>| <span class="number">7</span>  --第<span class="number">4</span>层</span><br></pre></td></tr></table></figure><p>发现了什么吗？</p><p><strong>最后的序列是原序列的二进制反转</strong>!</p><p>比如： $6 = (110)_2$ 反过来变成了 $(011)_2 = 3$ ！</p><p>如何得到二进制翻转后的数列？递推即可!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?n&gt;&gt;<span class="number">1</span>:<span class="number">0</span>); </span><br><span class="line"><span class="comment">//filp[i] 即为 i 的二进制位翻转</span></span><br></pre></td></tr></table></figure><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,filp[N]; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">max</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">min</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x:y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;</span><br><span class="line"><span class="keyword">complex</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)<span class="keyword">if</span>(i&lt;filp[i])&#123;<span class="keyword">complex</span> tmp=f[i];f[i]=f[filp[i]];f[filp[i]]=tmp;&#125;</span><br><span class="line">    <span class="comment">/*换位置*/</span></span><br><span class="line">    <span class="keyword">for</span>(RI p=<span class="number">2</span>;p&lt;=n;p&lt;&lt;=<span class="number">1</span>)&#123;<span class="comment">//每局区间长度</span></span><br><span class="line">        RI len=p/<span class="number">2</span>;<span class="comment">//合并子区间的长度(所以是p/2)</span></span><br><span class="line">        <span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len));</span><br><span class="line">        <span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;n;k+=p)&#123;<span class="comment">//每局左端点</span></span><br><span class="line">            <span class="keyword">complex</span> buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(RI l=k;l&lt;k+len;++l)&#123;<span class="comment">//遍历区间</span></span><br><span class="line">                <span class="keyword">complex</span> t=buf*f[len+l];</span><br><span class="line">f[len+l]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp;<span class="comment">//赋值有微小的变化，注意顺序！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主程序不变*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a[i].x);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=m;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;b[i].x);</span><br><span class="line">    <span class="keyword">for</span>(m+=n,n=<span class="number">1</span>;n&lt;=m;n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?n&gt;&gt;<span class="number">1</span>:<span class="number">0</span>); </span><br><span class="line">    FFT(a,<span class="number">1</span>);FFT(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)a[i]=a[i]*b[i];</span><br><span class="line">    FFT(a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%.0f "</span>,<span class="built_in">fabs</span>(a[i].x)/n);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>luogu上的题，递归的总是<strong>T</strong>最后一个点，改成非递归版的就<strong>A</strong>了？<br>emmmmmmmmmmmmmm</p><hr><h4 id="所有优化全开："><a href="#所有优化全开：" class="headerlink" title="所有优化全开："></a>所有优化全开：</h4><p>很作死，建议不要轻易尝试[滑稽]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br></pre></td></tr></table></figure><h4 id="滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽"><a href="#滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽" class="headerlink" title="[滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽]"></a>[滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽]</h4><hr><h2 id="NNT———学习笔记———关于FFT兄弟的那些事"><a href="#NNT———学习笔记———关于FFT兄弟的那些事" class="headerlink" title="NNT———学习笔记———关于FFT兄弟的那些事"></a>NNT———学习笔记———关于FFT兄弟的那些事</h2><hr><h3 id="0X5F—-NTT是啥"><a href="#0X5F—-NTT是啥" class="headerlink" title="0X5F—-NTT是啥?"></a>0X5F—-NTT是啥?</h3><blockquote><p>NTT(快速数论变换)<br>一种快速数论变换算法，这种算法是以数论为基础，对样本点为的数论变换，按时间抽取的方法，得到一组等价的迭代方程，有效高速简化了方程中的计算公式·与直接计算相比，大大减少了运算次数。（见快速傅里叶变换）。<br>在计算机实现多项式乘法中，我们所熟知的快速傅里叶变换(FFT)是基于n次单位根$ω_{n}$ $(omega)$ 的优秀性质实现的，而由于其计算时会使用正弦函数和余弦函数，在不断运算时无法避免地会产生精度误差。而多项式乘法有些时候会建立在模域中，在对一些特殊的大质数取模时，便可以考虑用原根g来代替$ω_{n}$，而这些特殊的大质数的原根恰好满足$ω_{n}$的某些性质，这使得多项式乘法在模域中也可以快速的分治合并。 ———百度百科</p></blockquote><p>实际上，$NTT$ 跟 $FFT$ 没啥差别，优缺点各有。优点，就是省掉了大精度的操作，常数较小。</p><p>贴出我在luogu的<a href="https://www.luogu.org/problemnew/show/P3803" target="_blank" rel="noopener">P3803</a>测评记录：</p><h4 id="O2—-FFT"><a href="#O2—-FFT" class="headerlink" title="O2—-FFT:"></a>O2—-FFT:</h4><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190119163840.png" alt=""></p><h4 id="无优化—NTT"><a href="#无优化—NTT" class="headerlink" title="无优化—NTT:"></a>无优化—NTT:</h4><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190119163941.png" alt=""></p><p>(速度不在一个服务器……)</p><p>当然，什么东西都是有缺点的，$NTT$ 的缺点就是<strong>多项式的系数只能是整数</strong> ，而且普通的 $NTT$ 并不能做到任意模数，比较有限制(但是像XZY这样的奆佬随手可以水过任意模数NTT)，不过对于一般的像<strong>998244353</strong>这样的模数可以跑。</p><h2 id="实现的基础———原根"><a href="#实现的基础———原根" class="headerlink" title="实现的基础———原根"></a>实现的基础———原根</h2><blockquote><p>原根是一种数学符号，设 $m$ 是正整数，$a$ 是整数，若 $a$ 模 $m$ 的阶等于 $φ(m)$ ，则称 $a$ 为模 $m$ 的一个原根。（其中 $φ(m)$ 表示 $m$ 的欧拉函数）———百度百科</p></blockquote><p>为什么 $FFT$ 可以如此优秀？那是因为单位根有着神奇的性质。原根也是如此！</p><p>合并的时候，$p=2len$ .</p><p>单位根：$cos\frac{2π}{P}+i sin\frac{2π}{P} = cos\frac{π}{len} + i sin\frac{π}{len}$</p><p>原根：$g^{\frac{MOD-1}{P}} = g^{\frac{MOD-1}{2len}}$</p><p>$NTT$ 的学习是建立在 $FFT$ 上的，建议大家先理解 $FFT$ 再来看 $NTT$</p><p>多说无益，贴板子吧……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 3</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;ll z=<span class="number">1l</span>l*x,ans=<span class="number">1l</span>l;<span class="keyword">for</span>(;y;y/=<span class="number">2</span>,z=z*z%MOD)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans=ans*z%MOD;<span class="keyword">return</span> (<span class="keyword">int</span>)ans%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;<span class="comment">//NTT板子</span></span><br><span class="line">    <span class="keyword">int</span> bit=<span class="number">0</span>;<span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;bit)&lt;n)bit++;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">    filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>)); </span><br><span class="line">    <span class="keyword">if</span>(i&lt;filp[i])swap(f[i],f[filp[i]]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(RI len=<span class="number">1</span>;len&lt;n;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        RI tmp=<span class="built_in">pow</span>(G,(MOD<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(inv==<span class="number">-1</span>)tmp=<span class="built_in">pow</span>(tmp,MOD<span class="number">-2</span>);<span class="comment">//是逆运算的话就套逆元</span></span><br><span class="line">        <span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;n;k+=len*<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> buf=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(RI l=<span class="number">0</span>;l&lt;len;++l,buf=<span class="number">1l</span>l*buf*tmp%MOD)&#123;</span><br><span class="line">                <span class="keyword">int</span> t=f[l+k],d=<span class="number">1l</span>l*buf*f[l+k+len]%MOD;</span><br><span class="line">                f[l+k]=t+d,f[l+k+len]=t-d,<span class="comment">//注意差别</span></span><br><span class="line">f[l+k]=(f[l+k]%MOD+MOD)%MOD,f[l+k+len]=(f[l+k+len]%MOD+MOD)%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那一题的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 3</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">1</span>,len1,len2,filp[N],a[N],b[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">max</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">min</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x:y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;ll z=<span class="number">1l</span>l*x,ans=<span class="number">1l</span>l;<span class="keyword">for</span>(;y;y/=<span class="number">2</span>,z=z*z%MOD)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans=ans*z%MOD;<span class="keyword">return</span> (<span class="keyword">int</span>)ans%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit=<span class="number">0</span>;<span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;bit)&lt;n)bit++;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">    filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>)); </span><br><span class="line">    <span class="keyword">if</span>(i&lt;filp[i])swap(f[i],f[filp[i]]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(RI len=<span class="number">1</span>;len&lt;n;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        RI tmp=<span class="built_in">pow</span>(G,(MOD<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(inv==<span class="number">-1</span>)tmp=<span class="built_in">pow</span>(tmp,MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;n;k+=len*<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> buf=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(RI l=<span class="number">0</span>;l&lt;len;++l,buf=<span class="number">1l</span>l*buf*tmp%MOD)&#123;</span><br><span class="line">                <span class="keyword">int</span> t=f[l+k],d=<span class="number">1l</span>l*buf*f[l+k+len]%MOD;</span><br><span class="line">                f[l+k]=t+d,f[l+k+len]=t-d,</span><br><span class="line">f[l+k]=(f[l+k]%MOD+MOD)%MOD,f[l+k+len]=(f[l+k+len]%MOD+MOD)%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(len1),IN(len2);len1++,len2++;</span><br><span class="line">    <span class="keyword">while</span>(n&lt;len1+len2)n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=len1<span class="number">-1</span>;++i)IN(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=len2<span class="number">-1</span>;++i)IN(b[i]);</span><br><span class="line">    NTT(a,<span class="number">1</span>);NTT(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)a[i]=<span class="number">1l</span>l*a[i]*b[i]%MOD;</span><br><span class="line">    NTT(a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=len1+len2<span class="number">-2</span>;++i)<span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="number">1l</span>l*a[i]*<span class="built_in">pow</span>(n,MOD<span class="number">-2</span>)%MOD);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="0X3f3f3f3f-附记"><a href="#0X3f3f3f3f-附记" class="headerlink" title="0X3f3f3f3f 附记"></a>0X3f3f3f3f 附记</h2><p>来一张表吧：</p><div class="table-container"><table><thead><tr><th style="text-align:left">模数</th><th style="text-align:right">G的值</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:right">2</td></tr><tr><td style="text-align:left">5</td><td style="text-align:right">2</td></tr><tr><td style="text-align:left">17</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">97</td><td style="text-align:right">5</td></tr><tr><td style="text-align:left">193</td><td style="text-align:right">5</td></tr><tr><td style="text-align:left">257</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">7681</td><td style="text-align:right">17</td></tr><tr><td style="text-align:left">12289</td><td style="text-align:right">11</td></tr><tr><td style="text-align:left">40961</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">65537</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">786433</td><td style="text-align:right">10</td></tr><tr><td style="text-align:left">5767169</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">7340033</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">23068673</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">104857601</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">167772161</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">469762049</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">998244353</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">1004535809</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">2013265921</td><td style="text-align:right">31</td></tr><tr><td style="text-align:left">2281701377</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">3221225473</td><td style="text-align:right">5</td></tr><tr><td style="text-align:left">75161927681</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">77309411329</td><td style="text-align:right">7</td></tr></tbody></table></div><p>最后，因为本人实在太弱了，太蒟了，所以实在写不出啥了。</p><hr><p>$by Qiuly$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 Qtree3 LCT luoguP4116</title>
      <link href="/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP4116/"/>
      <url>/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP4116/</url>
      
        <content type="html"><![CDATA[<p>第一个操作显然是不要考虑的……</p><p>考虑第二个操作怎么办(实际上是超级easy的)</p><p>每个节点维护一个值<code>sum</code>，表示 $Splay$ 中它子树的和，每个点的权值为<strong>1(黑)0(白)</strong>。</p><a id="more"></a><p>对于这个操作，我们可以先 $split(1,x)$ ，现在<code>x</code>是这个 $Splay$ 的根。我们将要找的就是这颗 $Splay$ 中<strong>深度最小且为黑点的节点</strong>。</p><p>找Answer之前先特判一下<code>s[x]</code>是否大于<code>0</code>，如果为<code>0</code>，直接跳过即可。</p><p>不然进入循环，分三种情况：</p><ul><li>1.如果<code>s[ch[x][0]]</code>大于<code>0</code>，说明有更优的答案(左子树深度小于<code>x</code>)，<code>x=ch[x][0]</code>。</li><li>2.否则，如果<code>x</code>本身就是黑点，那么<code>x</code>就是答案了，直接<code>break</code>。</li><li>3.不然，如果<code>x</code>到<code>1</code>的节点都是白色，那就只能去x的右子树找了，<code>x=ch[x][1]</code>。</li></ul><p>退出循环时x即为答案，输出即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>) </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,f[N],s[N],v[N],r[N],ch[N][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">0</span>]==x||ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;s[x]=s[ch[x][<span class="number">0</span>]]+s[ch[x][<span class="number">1</span>]]+v[x];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!r[x])<span class="keyword">return</span>;r[x]=<span class="number">0</span>;</span><br><span class="line">    r[ch[x][<span class="number">0</span>]]^=<span class="number">1</span>,r[ch[x][<span class="number">1</span>]]^=<span class="number">1</span>,swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_push</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">if</span>(isroot(x))Splay_push(f[x]);pushdown(x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=f[x],z=f[y],k=chk(x),v=ch[x][!k];</span><br><span class="line">    <span class="keyword">if</span>(isroot(y))ch[z][chk(y)]=x;ch[x][!k]=y,ch[y][k]=v;</span><br><span class="line">    <span class="keyword">if</span>(v)f[v]=y;f[y]=x,f[x]=z;pushup(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=x;Splay_push(x);</span><br><span class="line">    <span class="keyword">while</span>(isroot(x))&#123;</span><br><span class="line">        <span class="keyword">if</span>(isroot(y=f[x]))</span><br><span class="line">           rotate((ch[y][<span class="number">0</span>]==x)^(ch[f[y]][<span class="number">0</span>]==y)?x:y);</span><br><span class="line">        rotate(x); </span><br><span class="line">    &#125;pushup(x);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> y=<span class="number">0</span>;x;x=f[y=x])</span><br><span class="line">       Splay(x),ch[x][<span class="number">1</span>]=y,pushup(x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Access(x);Splay(x);</span><br><span class="line">    <span class="keyword">while</span>(ch[x][<span class="number">0</span>])pushdown(x),x=ch[x][<span class="number">0</span>];</span><br><span class="line">    Splay(x);<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;Access(x);Splay(x);r[x]^=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);Access(y);Splay(y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);<span class="keyword">if</span>(findroot(x)!=findroot(y))f[x]=y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;split(x,y);<span class="keyword">if</span>(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][<span class="number">1</span>])f[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">    &#123;IN(x),IN(y);link(x,y);&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> op,x,i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        IN(op),IN(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">0</span>)&#123;</span><br><span class="line">            makeroot(x);v[x]^=<span class="number">1</span>;pushup(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            split(<span class="number">1</span>,x);</span><br><span class="line">            <span class="keyword">if</span>(!s[x])&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">while</span>(s[x])&#123;</span><br><span class="line">                pushdown(x);</span><br><span class="line">                <span class="keyword">if</span>(s[ch[x][<span class="number">0</span>]])x=ch[x][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(v[x])<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> x=ch[x][<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 「网络流24题」骑士共存问题 网络流 luoguP3355</title>
      <link href="/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP3355/"/>
      <url>/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP3355/</url>
      
        <content type="html"><![CDATA[<p>最大流于最小割的转换。</p><p>假设现在棋盘上非障碍的位置全部摆满了骑士，我们拿走 $x$ 个的骑士可以使棋盘上的所有骑士互不冲突，求最小的 $x$.</p><p>可以跑匈牙利，也可以跑最大流算法，我选择跑 $Dinic$。</p><a id="more"></a><p>所有编号为奇数的点向源点 $s$ 连边，所有编号为偶数的点向汇点 $t$ ，连边，边权为 $1$.可以知道，同奇偶编号的点是无法互相攻击的，我们将在奇数和偶数之间<strong>可以攻击到彼此</strong>的点连一条边权无限大的边。</p><p>然后跑一遍 $Dinic$ 。</p><p>然后就没了。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID(i,j) ((i-1)*n+j)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">short</span> dx[<span class="number">8</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">short</span> dy[<span class="number">8</span>]=&#123;<span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,sum,cnt,dep[M],head[M];</span><br><span class="line"><span class="keyword">short</span> ok[<span class="number">202</span>][<span class="number">202</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    G[cnt].to=y,G[cnt].val=v,G[cnt].nxt=head[x],head[x]=cnt++;</span><br><span class="line">    G[cnt].to=x,G[cnt].val=<span class="number">0</span>,G[cnt].nxt=head[y],head[y]=cnt++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;q.push(s);dep[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=G[i].nxt)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=G[i].to;</span><br><span class="line"><span class="keyword">if</span>(dep[y]!=<span class="number">-1</span>||!G[i].val)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;dep[y]=dep[x]+<span class="number">1</span>,q.push(y);<span class="keyword">if</span>(y==t)<span class="keyword">return</span> <span class="literal">true</span>;&#125; </span><br><span class="line">&#125; </span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">            used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxlow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxlow+=dfs(s,<span class="number">1e9</span>);</span><br><span class="line"><span class="keyword">return</span> maxlow; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    IN(n),IN(m);s=<span class="number">0</span>,t=n*n+<span class="number">1</span>;sum=n*n-m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;++i)IN(x),IN(y),ok[x][y]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">           <span class="keyword">if</span>(ok[i][j])<span class="keyword">continue</span>;</span><br><span class="line">           <span class="keyword">if</span>((i+j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">               add(s,ID(i,j),<span class="number">1</span>);</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">8</span>;++k)&#123;</span><br><span class="line">                   <span class="keyword">int</span> nx=i+dx[k],ny=j+dy[k];</span><br><span class="line">                   <span class="keyword">if</span>(nx&lt;<span class="number">1</span>||ny&lt;<span class="number">1</span>||nx&gt;n||ny&gt;n||ok[nx][ny])<span class="keyword">continue</span>;</span><br><span class="line">                   add(ID(i,j),ID(nx,ny),<span class="number">1e9</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">else</span> add(ID(i,j),t,<span class="number">1</span>);</span><br><span class="line">       &#125;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum-dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [ZJOI2014]力 FFT bzoj3527/luogu3338</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP3338/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP3338/</url>
      
        <content type="html"><![CDATA[<p>这个式子有点……乱。</p><p>嗯，我们来推一推式子……推一推式子。 </p><p>原式推一推，那么就是：</p><script type="math/tex; mode=display">E_i = \frac{F_i}{q_i} = \sum_{j=1}^{i} \frac{q_j}{(i-j)^2} - \sum_{j=i+1}^{n} \frac{q_j}{(i-j)^2}​</script><a id="more"></a><p>令  $x = \frac{1}{y^2}​$ ， 那么：</p><script type="math/tex; mode=display">E_i = \frac{F_i}{q_i} = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} q_j x_{j-i}​</script><p>还可以写成：</p><script type="math/tex; mode=display">E_i = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} q_j x_{j-i}​</script><p>令 $S_i = q_{n-i+1} ​$，那么式子变成了：</p><script type="math/tex; mode=display">E_i = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} p_{n-j+1} x_{j-i}</script><p>这个时候我们可以发现，$\sum_{j=1}^{i} q_j x_{i-j}​$ 和 $\sum_{j=i+1}^{n} p_{n-j} x_{j-i}​$ 都是卷积，那么我们可以跑两遍 <strong>$FFT​$</strong>，分别求出上面的两个式子，记录为 $A,B​$ 。最后的答案就是 $A[i].x - B[n+1-i].x​$ 了。</p><p>FFT不用做太多修改，套模板跑就行(本来就是模板)。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,limit=<span class="number">1</span>,filp[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">max</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">min</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x:y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;;</span><br><span class="line"><span class="keyword">complex</span> A[N],B[N],C[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;limit;++i)<span class="keyword">if</span>(i&lt;filp[i])&#123;<span class="keyword">complex</span> t=f[i];f[i]=f[filp[i]],f[filp[i]]=t;&#125;</span><br><span class="line">    <span class="keyword">for</span>(RI p=<span class="number">2</span>;p&lt;=limit;p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        RI len=p/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len));</span><br><span class="line">        <span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;limit;k+=p)&#123;</span><br><span class="line">            <span class="keyword">complex</span> buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(RI l=k;l&lt;k+len;++l)&#123;</span><br><span class="line">                <span class="keyword">complex</span> t=buf*f[l+len];</span><br><span class="line">                f[l+len]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;A[i].x),B[n+<span class="number">1</span>-i].x=A[i].x;&#125;</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)C[i].x=(<span class="number">1.0</span>/<span class="keyword">double</span>(i))/<span class="keyword">double</span>(i);</span><br><span class="line"><span class="keyword">while</span>(limit&lt;=(n&lt;&lt;<span class="number">1</span>))limit&lt;&lt;=<span class="number">1</span>,cnt++;</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;limit;++i)filp[i]=((filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(cnt<span class="number">-1</span>)));</span><br><span class="line">FFT(A,<span class="number">1</span>);FFT(B,<span class="number">1</span>);FFT(C,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=limit;++i)A[i]=A[i]*C[i],B[i]=B[i]*C[i];</span><br><span class="line">FFT(A,<span class="number">-1</span>);FFT(B,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=limit;++i)A[i].x/=limit,B[i].x/=limit;</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,-B[n+<span class="number">1</span>-i].x+A[i].x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2016]生成魔咒 后缀自动机.SAM bzoj4516/luogu4070</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4070/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4070/</url>
      
        <content type="html"><![CDATA[<p>一眼题目。</p><p>题目简述如下：</p><ul><li>任务一：支持询问当前本质不同的子串的个数</li><li>任务二：支持插入</li></ul><p>很显然后缀自动机可以解决胜任，正好今天刚学了后缀自动机，那么就将它定为练手题了。</p><a id="more"></a><p>插入是很简单的，至于询问本质不同的字串的个数，我们知道新插入一个节点 $now$ 对答案的贡献是: $ |max(now)| - |min(now)| + 1$ 。我们建后缀自动机的时候只保存了 $max(now)$ ，难道还要保存一个 $min(now)$ 吗？其实不需要，根据其性质可以得到：$|max(now)| - |max(fa[now])|$，直接计算即可。</p><p>注意数据范围较大，记得开 $longlong​$ ！</p><p>*注：文中的 $|S|​$ 指的是字符串 $S​$ 的长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ch[N];</span><br><span class="line">    <span class="keyword">int</span> last,cnt,len[N],fa[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=last,now=last=++cnt;</span><br><span class="line">        len[now]=len[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;!ch[p][c])ch[p][c]=now,p=fa[p];</span><br><span class="line">        <span class="keyword">if</span>(!p)fa[now]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> q=ch[p][c];</span><br><span class="line">            <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>)fa[now]=q;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> copy=++cnt;</span><br><span class="line">                len[copy]=len[p]+<span class="number">1</span>,ch[copy]=ch[q];</span><br><span class="line">                fa[copy]=fa[q],fa[q]=fa[now]=copy;</span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;ch[p][c]==q)ch[p][c]=copy,p=fa[p];</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        ans+=len[now]-len[fa[now]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;IN(n);</span><br><span class="line">    sam.last=sam.cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> c;IN(c);</span><br><span class="line">        sam.Insert(c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sam.ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 后缀自动机.SAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [JSOI2008]球形空间产生器  高斯消元  洛谷P4035</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4035/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4035/</url>
      
        <content type="html"><![CDATA[<p>“你要<strong>求出</strong>这个n维球体的<strong>球心坐标</strong>“，这使我想到的解方程……</p><p>先假设n=2，这是一个二维平面。设圆心的坐标为$(x,y)$，有两个坐标$(a_1,b_1)$和$(a_2,b_2)$，显然两个坐标的关系为：</p><a id="more"></a><script type="math/tex; mode=display">(x-a_1)^2+(y-b_1)^2=(x-a_2)^2+(y-b_2)^2</script><p>考虑如何化简上面的式子。</p><script type="math/tex; mode=display">(x-a_1)^2-(x-a_2)^2+(y-b_1)^2-(y-b_2)^2=0</script><p>根据完全平方公式：</p><script type="math/tex; mode=display">(x-a_1)^2=x^2+a_1^2-2 \times x \times a_1</script><script type="math/tex; mode=display">(x-a_1)^2-(x-a_2)^2=x^2+a_1^2-2 \times x \times a_1-x^2-a_2^2+2 \times x \times a_2</script><script type="math/tex; mode=display">(x-a_1)^2-(x-a_2)^2=a_1^2-2 \times x \times a_1-a_2^2+2 \times x \times a_2</script><script type="math/tex; mode=display">(x-a_1)^2-(x-a_2)^2=a_1^2-a_2^2-2(a_1-a_2)x</script><p>同理</p><script type="math/tex; mode=display">(y-b_1)^2-(y-b_2)^2=b_1^2-b_2^2-2(b_1-b_2)y</script><p>整理后：</p><script type="math/tex; mode=display">a_1^2-a_2^2-2(a_1-a_2)x+b_1^2-b_2^2-2(b_1-b_2)y=0</script><p>移项后：</p><script type="math/tex; mode=display">a_1^2-a_2^2+b_1^2-b_2^2=2(a_1-a_2)x+2(b_1-b_2)y</script><p>这个式子最终为：</p><script type="math/tex; mode=display">2(a_1-a_2)x+2(b_1-b_2)y=a_1^2-a_2^2+b_1^2-b_2^2</script><p>由于 $a_1^2-a_2^2+b_1^2-b_2^2​$ 是已知的，我们将 $a_1^2-a_2^2+b_1^2-b_2^2​$ 设为$Sum​$.</p><p>$2(a_1-a_2)​$ 和 $2(b_1-b_2)​$都是已知的项，分别设为 $a​$ 和 $b​$ .</p><p><strong>所以它又变成了我们亲切的小学奥数之解方程</strong>：$ax+by=Sum$</p><p>对于二维的答案是 $(x,y)​$ ，$x​$ 和 $y​$  都可以通过高斯消元的模板来解出。</p><p>对于更高的维数，跟二维同理，只不过”元”多了几个而已。</p><h4 id="所以就这样愉快的A掉了这道大水题。"><a href="#所以就这样愉快的A掉了这道大水题。" class="headerlink" title="所以就这样愉快的A掉了这道大水题。"></a>所以就这样愉快的A掉了这道<del>大水题</del>。</h4><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">double</span> v[N][N],f[N][N],s[N],del;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Gauss</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(RI k=<span class="number">1</span>,i=<span class="number">1</span>;i&lt;=n;++i,k=i)&#123;</span><br><span class="line"><span class="keyword">for</span>(RI j=i+<span class="number">1</span>;j&lt;=n;++j)<span class="keyword">if</span>(<span class="built_in">abs</span>(f[j][i])&gt;<span class="built_in">abs</span>(f[k][i]))k=j;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(del=f[k][i])&lt;eps)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//不判就出BUG，不知道为啥</span></span><br><span class="line">swap(f[i],f[k]);swap(s[i],s[k]);</span><br><span class="line"><span class="keyword">for</span>(RI j=i;j&lt;=n;++j)f[i][j]/=del;s[i]/=del;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;++k)<span class="keyword">if</span>(k!=i)&#123;</span><br><span class="line">del=f[k][i];</span><br><span class="line"><span class="keyword">for</span>(RI j=i;j&lt;=n;++j)f[k][j]-=f[i][j]*del;</span><br><span class="line">s[k]-=s[i]*del;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)<span class="keyword">for</span>(RI j=<span class="number">1</span>;j&lt;=n;++j)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;v[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(RI j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">           s[i]+=(v[i][j]*v[i][j]-v[i+<span class="number">1</span>][j]*v[i+<span class="number">1</span>][j]);<span class="comment">//求上面的 "Sum"</span></span><br><span class="line">   f[i][j]=<span class="number">2</span>*(v[i][j]-v[i+<span class="number">1</span>][j]);<span class="comment">//求上面的 "a"、"b"等</span></span><br><span class="line">   &#125;</span><br><span class="line">Gauss();</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;n;++i)<span class="built_in">printf</span>(<span class="string">"%.3lf "</span>,s[i]);<span class="comment">//注意输出格式!</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lf"</span>,s[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题啥都好，就是输出格式有点制杖……请各位小心……</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [USACO18DEC]Balance Beam  期望+凸包  洛谷P5155</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP5155/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP5155/</url>
      
        <content type="html"><![CDATA[<blockquote><p>被概率冲昏的头脑~~~</p></blockquote><p>我们先将样例在图上画下来：</p><a id="more"></a><p><img src="/2019/02/14/[题解]luoguP5155/48586.png" alt=""></p><p>会发现，最大收益是：</p><p><img src="/2019/02/14/[题解]luoguP5155/48587.png" alt="">)</p><p>看出什么了吗？</p><p><strong>这不就是凸包吗？</strong></p><p>跑一遍凸包就好了呀，这些点中，如果i号点是凸包上的点，那么它的ans就是自己(第二个点)，不然的话，从上图来看，i的ans肯定和他相邻的两个是凸包边界的点有关(0节点和2节点)，那么怎么求这个ans呢？(第x号点为横坐标为x的点)</p><p><del>实际上我也不知道</del>就是个期望公式啊!</p><p>l[i]记录i号点往左走第一个为凸包边界的点(如果i为1号，那么l[i]为0，特殊的，如果i为2号，那么l[i]就是本身)，r[i]同理。当l[x]==r[x]时，x时边界。</p><h4 id="就是这个方程：-f-l-i-r-i-i-f-r-i-i-l-i-r-i-l-i"><a href="#就是这个方程：-f-l-i-r-i-i-f-r-i-i-l-i-r-i-l-i" class="headerlink" title="就是这个方程： (f[l[i]])*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);"></a>就是这个方程： <code>(f[l[i]])*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);</code></h4><p>基础的期望方程，在此不再赘述<del>(实际上是不会证)</del></p><p>关于凸包，在这贴一波yyb大神的博客：<a href="http://www.cnblogs.com/cjyyb/p/7260523.html" target="_blank" rel="noopener">传送门戳我QwQ</a>(顺便膜一波yyb大神%%%)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NS=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll f[NS],l[NS],r[NS],hep[NS];</span><br><span class="line"><span class="comment">//f如题,l[i]/r[i]如上文,hep为凸包 </span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,top=<span class="number">0</span>;IN(n);hep[++top]=<span class="number">0</span>;<span class="comment">//注意先加入0!</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(f[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)&#123;<span class="comment">//凸包</span></span><br><span class="line"><span class="keyword">while</span>(top&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> a=hep[top],b=hep[top<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(((f[a]-f[b])*(i-a))&lt;((f[i]-f[a])*(a-b)))--top;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;hep[++top]=i;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;top;++i)&#123;</span><br><span class="line"><span class="comment">//中间的节点的l,r值都为hep[i]/hep[i+1]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=hep[i]+<span class="number">1</span>;j&lt;hep[i+<span class="number">1</span>];++j)&#123;</span><br><span class="line">l[j]=hep[i],r[j]=hep[i+<span class="number">1</span>];</span><br><span class="line">&#125;l[hep[i]]=hep[i],r[hep[i]]=hep[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;<span class="comment">//记得LL!</span></span><br><span class="line"><span class="keyword">if</span>(l[i]==r[i])ans=f[i]*F;<span class="comment">//为边界，直接跳下最优</span></span><br><span class="line"><span class="keyword">else</span> ans=(F*(f[l[i]]*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);<span class="comment">//否则用方程算</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); </span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 期望 </tag>
            
            <tag> 凸包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [ICPC-Beijing 2006]狼抓兔子  网络流  bzoj1001/洛谷P4001</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4001/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4001/</url>
      
        <content type="html"><![CDATA[<p>网络流水题。</p><p>既然要抓到所有的兔子，又要用最少的狼，很容易想到，这是在让我们求最小割。</p><a id="more"></a><p>那么如何求最小割呢？</p><p>有一条定理是这样的：<strong>最大流=最小割</strong></p><p>所以我们只要用 $Dinic$ 跑出最大流，然后直接输出就行了。</p><p>不过，为什么<strong>最大流=最小割</strong>呢？</p><p>网上的一名 $Dalao$ 给出了答案：</p><blockquote><p>$Q:$ 如何凭直觉解释最大流等于最小割?</p><p>$A:$ $1.$ 最大流不可能大于最小割, 因为最大流所有的水流都一定经过最小割那些割边, 流过的水流怎么可能比水管容量还大呢? $2.$ 最大流不可能小于最小割, 如果小, 那么说明水管容量没有物尽其用, 可以继续加大水流.</p><p>$Q:$ 如何严谨证明最大流等于最小割?</p><p>$A:$ $1.$ 证明任意的 $s-t$ 流量小于 $s-t$ 割容量, 证明方法: 根据定义即可; $2.$ 根据 $Ford-Fulkerson$ 算法求出的流来选出一个 $s-t$ 割, $S$ 为残余网络中 $s$ 可达的顶点集合, 这样就可以证出算法求出的流$=$这个割的容量, 再根据已经证明的 $1$ 来得出算法求出的流是最大流, 对应的割是最小割.</p><p>$Dalao——Jecvay Notes$</p></blockquote><p>现在要注意的一点就是，直接跑朴素的 $Dinic$ 是会 <strong>T</strong> 的，这个时候或许会要一些优化，比如说用<strong>当前弧优化</strong>，或者可以跑$ISAP$，如果还过不了，吸氧算了[滑稽]。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,val;</span><br><span class="line">&#125;G[N*<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,cnt=<span class="number">1</span>,dep[N],head[N];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y)) </span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)*m+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[y],G[cnt].to=x,G[cnt].val=v,head[y]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;q.push(s),dep[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]||!G[i].val)<span class="keyword">continue</span>;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>;q.push(y);</span><br><span class="line">            <span class="keyword">if</span>(y==t)<span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&amp;&amp;used&lt;flow;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[y]!=dep[x]+<span class="number">1</span>||!G[i].val)<span class="keyword">continue</span>; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> rlow=dfs(y,min(G[i].val,flow-used));</span><br><span class="line">            <span class="keyword">if</span>(!rlow)&#123;dep[y]=<span class="number">-1</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow,used+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())ans+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    IN(n),IN(m);s=<span class="number">1</span>,t=n*m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;++j)</span><br><span class="line">          IN(v),add(id(i,j<span class="number">-1</span>),id(i,j),v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">          IN(v),add(id(i<span class="number">-1</span>,j),id(i,j),v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;++j)</span><br><span class="line">          IN(v),add(id(i<span class="number">-1</span>,j<span class="number">-1</span>),id(i,j),v);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈树套树(线段树套平衡树)&amp;学习笔记</title>
      <link href="/2019/02/14/%5B%E7%AE%97%E6%B3%95%5D%E6%A0%91%E5%A5%97%E6%A0%91(%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91)/"/>
      <url>/2019/02/14/%5B%E7%AE%97%E6%B3%95%5D%E6%A0%91%E5%A5%97%E6%A0%91(%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>唉还是太弱了，毕竟只会初级的线段树套平衡树，$QvQ$</p><p>码量巨大，超级不适合我这种天生码量恐惧症的人……</p><p>那么我们开始正文</p></blockquote><a id="more"></a><hr><h2 id="0XFF-前言"><a href="#0XFF-前言" class="headerlink" title="0XFF 前言"></a>0XFF 前言</h2><blockquote><p><strong>*如果本文有不好的地方，请在下方评论区提出，Monlights感激不尽！</strong></p></blockquote><h2 id="0X1F-这个东西有啥用"><a href="#0X1F-这个东西有啥用" class="headerlink" title="0X1F 这个东西有啥用?"></a>0X1F 这个东西有啥用?</h2><blockquote><p><strong>树套树———线段树套平衡树</strong>，可以用于解决待修改区间$K$大的问题，当然也可以用 树套树———树状数组套可持久化线段树，但是 线段树套平衡树 更加容易理解，更加便于新手理解，所以一般也作为树套树的入门类别。<br>对于静态区间$K$大，我们可以用小巧精悍的主席树来做，也可以用强大无比的$Splay$来做。如果带修改，主席树就无能为力了，$Splay$也会变得很棘手难打。如果用普通线段树，每个节点都有着一课包含子节点的$Splay$，对于一个区间，直接调用线段树上的$Splay$就迎刃而解了。这时的$Splay$不是对全局，而是只对这个线段树节点代表的区间。</p><p>当然，树套树———线段树套平衡树并不是那么的好打，还是要动纸笔 and 动脑筋。缺点也是有的：因为要打$Splay$和线段树，模板的码量就有 $150$ 行！因为线段树本来就是易手滑的数据结构，稍不留神可能会让你调上好久！另外，因为$Splay$的常数极大，再这么通过线段树一罩，效率就下来了许多，常数巨大无比……总之 树套树 是一个很强的数据结构，但是如果题目不是强制在线的话，<strong>$CDQ$分治</strong>和<strong>整体二分</strong>会将<strong>树套树</strong>吊起来打！<br>                                               ——————Qiuly</p></blockquote><hr><h2 id="0X2F-这个东西怎么实现"><a href="#0X2F-这个东西怎么实现" class="headerlink" title="0X2F 这个东西怎么实现?"></a>0X2F 这个东西怎么实现?</h2><p>首先，线段树套平衡树可以解决的一般问题如下：</p><ul><li><ol><li>查询 $k$ 在区间 $l,r$ 内的排名</li></ol></li><li><ol><li>查询区间 $l,r$ 内排名为 $k$ 的值</li></ol></li><li><ol><li>修改某一位置上的数值</li></ol></li><li><ol><li>查询 $k$ 在区间 $l,r$ 内的前驱</li></ol></li><li><ol><li>查询 $k$ 在区间 $l,r$ 内的后继</li></ol></li><li><ol><li>修改区间 $l,r$ 的值(集体加减)(不会)</li></ol></li></ul><p><strong>…………</strong></p><p>我们今天来讲讲前五个基础操作怎么实现<del>(我只会前五个操作)</del></p><h3 id="0X2f-1-查询-k-在区间-l-r-内的排名"><a href="#0X2f-1-查询-k-在区间-l-r-内的排名" class="headerlink" title="0X2f-1 查询 $k$ 在区间 $l,r$ 内的排名"></a>0X2f-1 查询 $k$ 在区间 $l,r$ 内的排名</h3><p>我们先将一个外面的线段树画下来：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121092840.png" alt=""></p><p>(叶子节点中的数字是序列各个元素的权值)</p><p>假设我们现在要查询区间 $3,8$ 中 $5$ 的排名。</p><p>查询一个数的排名，很显然，就是查询这个区间内有多少个数比 Ta 小，然后在+1(即自己)。</p><p>那怎么查询 $3,8$ 区间内有多少个数比他小呢？$3,8$ 不是整个线段树节点啊。</p><p>我们可以将它分成若干个线段树节点来处理。</p><p><strong>Code:</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_rank</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span></span>&#123;<span class="comment">//i表示以线段树的i号节点为根的Splay</span></span><br><span class="line">    <span class="keyword">int</span> x=rt[i],cal=<span class="number">0</span>;<span class="comment">//板子就不再赘述了</span></span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[x]==k)<span class="keyword">return</span> cal+((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v[x]&lt;k)&#123;</span><br><span class="line">            cal+=((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+c[x];x=ch[x][<span class="number">1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span> x=ch[x][<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> cal;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Kth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);<span class="keyword">return</span>;&#125;<span class="comment">//是整个线段树节点</span></span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);<span class="comment">//情况1：完全属于左子树</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_rank(rc,mid+<span class="number">1</span>,r,L,R,Kth);<span class="comment">//情况2：完全属于右子树</span></span><br><span class="line">    <span class="keyword">else</span> Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,Kth);<span class="comment">//情况3：横跨两子树区间</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main 函数中</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;IN(v);ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>没看懂？我们来一步一步解读。</p><p>首先，进入线段树。</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121094021.png" alt=""></p><p>不是整个线段树节点，跳过第一条语句。<br>发现 $3,8$ 横跨了两个子树，拆开询问区间，先询问左子树。这个时候往左子树递归，目标询问区间 $3,4$ ，右子树目标询问区间 $5,8$ 。分别处理。</p><p>进入左子树：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121094852.png" alt=""></p><p>然后，发现询问区间完全属于右子树(当前区间：$1,4$ ,  询问区间：$3~4$)，所以直接递归右子树：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121095114.png" alt=""></p><p>这个时候，发现当前区间和询问区间合并了(当前区间：$3,4$ ,  询问区间：$3~4$)，$Splay$ 询问小于 $5$ 的数的个数。</p><p>区间：$3,4$ 的 $Splay$ :</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121095518.png" alt=""></p><p>至于 $Splay$ 里面的操作不在模拟，因为 $(4,6)$ 中比 $5$ 小的只有一个数，所以 $ans+=1$ ，现在 $ans=1$</p><p>左子树的任务完成，现在处理在右子树的询问区间 $(5,8)$ ，发现一下去 当前区间：$5,8$ ,  询问区间：$5,8$ 合并了！<br>直接跳进 $Splay$。</p><p>跑完 $Splay$ 后，发现有两个数小于 $5$ ($=$的不算)，$ans+=2$ ，现在 $ans=3$ 。</p><p>所以询问区间全部处理完了，退出函数。<br>main函数输出：$ans(3)+1=4$ 即答案为 $4$ .</p><hr><h3 id="0X2f-2-查询区间-l-r-内排名为-k-的值"><a href="#0X2f-2-查询区间-l-r-内排名为-k-的值" class="headerlink" title="0X2f-2 查询区间 $l,r$ 内排名为 $k$ 的值"></a>0X2f-2 查询区间 $l,r$ 内排名为 $k$ 的值</h3><p>这个我们需要用到二分来实现，我们不能讲询问区间拆成两个区间(像第一个操作那样)，因为合并不了答案啊。</p><p>所以我们依靠二分来实现。</p><p><strong>Code:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Kth</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=MX+<span class="number">1</span>,M;<span class="comment">//MX为序列权值的最大值，上图中MX为9.</span></span><br><span class="line">    <span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">        M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,M);<span class="comment">//询问M的排名</span></span><br><span class="line">        <span class="keyword">if</span>(ans&lt;k)L=M+<span class="number">1</span>;<span class="keyword">else</span> R=M;<span class="comment">//二分</span></span><br><span class="line">    &#125;<span class="keyword">return</span> L<span class="number">-1</span>;<span class="comment">//return</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main函数中</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:&#123;IN(v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get_Kth(x,y,v));&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>这个我就不贴图了，不好画图解释。理解不难，多读几遍代码就好了。</p><h3 id="0X2f-3-修改某一位置上的数值"><a href="#0X2f-3-修改某一位置上的数值" class="headerlink" title="0X2f-3 修改某一位置上的数值"></a>0X2f-3 修改某一位置上的数值</h3><p>这个很简单，跟普通的线段树单点修改几乎一模一样，只是要同时更新 $Splay$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    Splay_Delete(x,a[pos]);Splay_Insert(x,val);<span class="comment">//更新 Splay</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;a[pos]=val;<span class="keyword">return</span>;&#125;;<span class="comment">//修改序列的值</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_change(lc,l,mid,pos,val);<span class="comment">//普通的线段树</span></span><br><span class="line">    <span class="keyword">else</span> Seg_change(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main函数中</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:&#123;Seg_change(<span class="number">1</span>,<span class="number">1</span>,n,x,y);&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="0X2f-4-查询-k-在区间-l-r-内的前驱"><a href="#0X2f-4-查询-k-在区间-l-r-内的前驱" class="headerlink" title="0X2f-4 查询 $k$ 在区间 $l,r$ 内的前驱"></a>0X2f-4 查询 $k$ 在区间 $l,r$ 内的前驱</h3><p>对于这个操作，我们依旧可以拆开来操作，合并的时候对于每个拆分后的询问区间的答案取个最大值，因为是求前驱，肯定是越接近 $k$ 越好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_pre(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main函数中</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:&#123;IN(v);ans=-inf;Seg_pre(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="0X2f-4-查询-k-在区间-l-r-内的后继"><a href="#0X2f-4-查询-k-在区间-l-r-内的后继" class="headerlink" title="0X2f-4 查询 $k$ 在区间 $l,r$ 内的后继"></a>0X2f-4 查询 $k$ 在区间 $l,r$ 内的后继</h3><ul><li>跟 $4$ 操作同理.</li></ul><hr><h2 id="0X3F-一些题目"><a href="#0X3F-一些题目" class="headerlink" title="0X3F 一些题目"></a>0X3F 一些题目</h2><blockquote><h4 id="BZOJ3196-Tyvj-1730-二逼平衡树"><a href="#BZOJ3196-Tyvj-1730-二逼平衡树" class="headerlink" title="BZOJ3196: Tyvj 1730 二逼平衡树"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3196" target="_blank" rel="noopener">BZOJ3196: Tyvj 1730 二逼平衡树</a></h4><h4 id="LUOGU-P3380【模板】二逼平衡树-树套树"><a href="#LUOGU-P3380【模板】二逼平衡树-树套树" class="headerlink" title="LUOGU P3380【模板】二逼平衡树(树套树)"></a><a href="https://www.luogu.org/problemnew/show/P3380" target="_blank" rel="noopener">LUOGU P3380【模板】二逼平衡树(树套树)</a></h4></blockquote><p>这道题就是上面讲的那道啊!</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">" "</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="comment">//template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; </span></span><br><span class="line"><span class="comment">//template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],ans,MX;</span><br><span class="line"><span class="comment">/*----------------------------------Splay-------------------------------------*/</span></span><br><span class="line"><span class="keyword">int</span> f[N],c[N],s[N],v[N],ch[N][<span class="number">2</span>],rt[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_del_node</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;f[x]=s[x]=c[x]=v[x]=ch[x][<span class="number">0</span>]=ch[x][<span class="number">1</span>]=<span class="number">0</span>;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;s[x]=(ch[x][<span class="number">0</span>]?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+(ch[x][<span class="number">1</span>]?s[ch[x][<span class="number">1</span>]]:<span class="number">0</span>)+c[x];&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=f[x],z=f[y],k=chk(x),v=ch[x][k^<span class="number">1</span>];</span><br><span class="line">    ch[y][k]=v;<span class="keyword">if</span>(v)f[v]=y;f[x]=z;<span class="keyword">if</span>(z)ch[z][chk(y)]=x;</span><br><span class="line">    f[y]=x,ch[x][k^<span class="number">1</span>]=y;Splay_pushup(y),Splay_pushup(x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x,<span class="keyword">int</span> top=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(f[x]!=top)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=f[x],z=f[y];</span><br><span class="line">        <span class="keyword">if</span>(z!=top)Splay_rotate((ch[z][<span class="number">0</span>]==y)==(ch[y][<span class="number">0</span>]==x)?y:x);</span><br><span class="line">        Splay_rotate(x);</span><br><span class="line">    &#125;<span class="keyword">if</span>(!top)rt[i]=x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_Insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];</span><br><span class="line">    <span class="keyword">if</span>(!rt[i])&#123;</span><br><span class="line">        rt[i]=pos=++tot;v[pos]=x;s[pos]=c[pos]=<span class="number">1</span>;</span><br><span class="line">        f[pos]=ch[pos][<span class="number">0</span>]=ch[pos][<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]==x)&#123;++c[pos];Splay_pushup(last);<span class="keyword">break</span>;&#125;</span><br><span class="line">        last=pos;pos=ch[pos][x&gt;v[pos]];</span><br><span class="line">        <span class="keyword">if</span>(!pos)&#123;</span><br><span class="line">            pos=++tot;v[pos]=x;s[pos]=c[pos]=<span class="number">1</span>;</span><br><span class="line">            ch[last][x&gt;v[last]]=pos;</span><br><span class="line">            f[pos]=last;ch[pos][<span class="number">0</span>]=ch[pos][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            Splay_pushup(last);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;Splay(i,pos);<span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_rank</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=rt[i],cal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[x]==k)<span class="keyword">return</span> cal+((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v[x]&lt;k)&#123;</span><br><span class="line">            cal+=((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+c[x];x=ch[x][<span class="number">1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span> x=ch[x][<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> cal;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_find</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]==x)&#123;Splay(i,pos);<span class="keyword">return</span> pos;&#125;;</span><br><span class="line">        pos=ch[pos][x&gt;v[pos]];</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_pre</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">int</span> x=ch[rt[i]][<span class="number">0</span>];<span class="keyword">while</span>(ch[x][<span class="number">1</span>])x=ch[x][<span class="number">1</span>];<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_suc</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">int</span> x=ch[rt[i]][<span class="number">1</span>];<span class="keyword">while</span>(ch[x][<span class="number">0</span>])x=ch[x][<span class="number">0</span>];<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_Get_pre</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(pos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]&lt;x)&#123;<span class="keyword">if</span>(ans&lt;v[pos])ans=v[pos];pos=ch[pos][<span class="number">1</span>];&#125;</span><br><span class="line">        <span class="keyword">else</span> pos=ch[pos][<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_Get_suc</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(pos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]&gt;x)&#123;<span class="keyword">if</span>(ans&gt;v[pos])ans=v[pos];pos=ch[pos][<span class="number">0</span>];&#125;</span><br><span class="line">        <span class="keyword">else</span> pos=ch[pos][<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_Delete</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=Splay_find(i,key);</span><br><span class="line">    <span class="keyword">if</span>(c[x]&gt;<span class="number">1</span>)&#123;--c[x];Splay_pushup(x);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">0</span>]&amp;&amp;!ch[x][<span class="number">1</span>])&#123;Splay_del_node(rt[i]);rt[i]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">0</span>])&#123;<span class="keyword">int</span> y=ch[x][<span class="number">1</span>];rt[i]=y;f[y]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">1</span>])&#123;<span class="keyword">int</span> y=ch[x][<span class="number">0</span>];rt[i]=y;f[y]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> p=Splay_pre(i);<span class="keyword">int</span> lastrt=rt[i];</span><br><span class="line">    Splay(i,p,<span class="number">0</span>);ch[rt[i]][<span class="number">1</span>]=ch[lastrt][<span class="number">1</span>];f[ch[lastrt][<span class="number">1</span>]]=rt[i];</span><br><span class="line">    Splay_del_node(lastrt);Splay_pushup(rt[i]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*------------------------------Seg_Tree--------------------------------------*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ((x)&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ((x)&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_Insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    Splay_Insert(x,val);<span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_Insert(lc,l,mid,pos,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_Insert(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Kth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_rank(rc,mid+<span class="number">1</span>,r,L,R,Kth);</span><br><span class="line">    <span class="keyword">else</span> Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,Kth);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="comment">//    printf("QvQ:: %d %d %d %d %d\n",x,l,r,pos,val);</span></span><br><span class="line">    Splay_Delete(x,a[pos]);Splay_Insert(x,val);</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;a[pos]=val;<span class="keyword">return</span>;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_change(lc,l,mid,pos,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_change(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_pre(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_suc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=min(ans,Splay_Get_suc(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_suc(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_suc(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_suc(lc,l,mid,L,mid,val),Seg_suc(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*---------------------------------ask----------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Kth</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=MX+<span class="number">1</span>,M;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">        M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,M);</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;k)L=M+<span class="number">1</span>;<span class="keyword">else</span> R=M;</span><br><span class="line">    &#125;<span class="keyword">return</span> L<span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*-------------------------------main-------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> <span class="keyword">const</span>* argv[])</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)&#123;IN(a[i]);Seg_Insert(<span class="number">1</span>,<span class="number">1</span>,n,i,a[i]);MX=max(MX,a[i]);&#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,x,y,v;IN(op),IN(x),IN(y);</span><br><span class="line">        <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;IN(v);ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;IN(v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get_Kth(x,y,v));&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;Seg_change(<span class="number">1</span>,<span class="number">1</span>,n,x,y);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;IN(v);ans=-inf;Seg_pre(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:&#123;IN(v);ans=inf;Seg_suc(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>然后就是这道题，跟上面的那道题差不多，大家可以拿来练练手：</p><blockquote><h4 id="BZOJ3196-1901-Dynamic-Rankings"><a href="#BZOJ3196-1901-Dynamic-Rankings" class="headerlink" title="BZOJ3196: 1901 Dynamic Rankings"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1901" target="_blank" rel="noopener">BZOJ3196: 1901 Dynamic Rankings</a></h4><h4 id="LUOGU-P2617-Dynamic-Rankings"><a href="#LUOGU-P2617-Dynamic-Rankings" class="headerlink" title="LUOGU P2617 Dynamic Rankings"></a><a href="https://www.luogu.org/problemnew/show/P3380" target="_blank" rel="noopener">LUOGU P2617 Dynamic Rankings</a></h4></blockquote><p>不贴代码了。</p><hr><p>一道不错的细节题：</p><blockquote><h4 id="LUOGU-P3332-ZJOI2013-K大数查询"><a href="#LUOGU-P3332-ZJOI2013-K大数查询" class="headerlink" title="LUOGU P3332 [ZJOI2013]K大数查询"></a><a href="https://www.luogu.org/problemnew/show/P3332" target="_blank" rel="noopener">LUOGU P3332 [ZJOI2013]K大数查询</a></h4></blockquote><p>$———by Qiuly$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 点分治总结&amp;学习笔记</title>
      <link href="/2019/02/13/%5B%E7%AE%97%E6%B3%95%5D%E7%82%B9%E5%88%86%E6%B2%BB/"/>
      <url>/2019/02/13/%5B%E7%AE%97%E6%B3%95%5D%E7%82%B9%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>其实很短的啦，感觉……感觉淀粉质这种东西好像没什么可以总结的……<br>只会有一些简单的板子题而已……(实际上是砍不动难的题目)<br>(淀粉质吗？味道真是不错呢嘿嘿嘿)</p></blockquote><a id="more"></a><h3 id="0XFF—-点分治是啥？"><a href="#0XFF—-点分治是啥？" class="headerlink" title="0XFF—-点分治是啥？"></a>0XFF—-点分治是啥？</h3><blockquote><p>   点分治，是处理树上路径的一个极好的工具。<br>   一般如果需要大规模处理树上路径，点分治是一个不错的选择。<br>   ———一位网上的Dalao</p></blockquote><p>现在有一个问题，给你一颗树，树上的每一条边都有权值，现在给一个 $k$ ，要求你求出树上所有路径中路径权值小于 $k$ 的路径总数，你怎么办？</p><p>暴力？$O(N^3)$ 的复杂度分分钟让你 <strong>T</strong> 飞！</p><p>当然，你可以用分治来求，复杂度仅有 $O(nlogn)$。</p><p>对于树上做分治，不仅有基于点的分治方式，还有基于边的以及基于链的，但是这不在我们的讨论范围类<del>(作者太蒟了不会QvQ)</del>。</p><h3 id="0X1F-点分治的流程"><a href="#0X1F-点分治的流程" class="headerlink" title="0X1F 点分治的流程"></a>0X1F 点分治的流程</h3><h4 id="0X1F—-1-怎么分治？"><a href="#0X1F—-1-怎么分治？" class="headerlink" title="0X1F—-1 怎么分治？"></a>0X1F—-1 怎么分治？</h4><p>对于所有的路径，很显然我们可以将它们分成两部分：</p><ul><li>$1.$ 这条路径经过了它所在的子树的根节点</li><li>$2.$ 这条路径没经过它所在的子树的根节点</li></ul><p>假设现在有一颗树，Ta的根节点是 $1$：</p><p><img src="https://qiulyn.files.wordpress.com/2019/02/time688aae59bbe20190204204228.png" alt=""></p><p>对于路径 $2 -&gt; 1 -&gt; 3 -&gt; 6$ ，它是经过了根节点的，属于 $1$ 类路径。</p><p>对于路径 $4 -&gt; 2 -&gt; 5 -&gt; 8$ ，它没有经过根节点 $1$，属于 $2$ 类路径。</p><p>对于第一类路径我们直接处理，对于第二类路径，递归处理当前根的儿子，在儿子里面处理，也就是说现在我们只需要处理第一类路径。</p><p>怎么确定这个根呢？显然根的好坏可以决定算法的复杂度。</p><p>因为每次是递归儿子，显然递归层数越少越好，什么情况下递归层数越少？<strong>当前根是当前树的重心时</strong>！</p><p>那么，整个算法的框架如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="comment">//当前节点u</span></span><br><span class="line">    当前树的当前根节点为u，统计第一类路径;</span><br><span class="line">    做标记，当前点已经当过根了(总不可能一直是一个点当吧=。=)</span><br><span class="line">    <span class="keyword">for</span>(u的所有儿子)&#123;</span><br><span class="line">        <span class="keyword">if</span>(儿子当过根节点了)<span class="keyword">continue</span>;</span><br><span class="line">        去掉满足在一个子树条件的不合法答案;</span><br><span class="line">        在儿子的子树中得到一个新的根节点;</span><br><span class="line">        solve(新的根节点);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，在儿子的子树中得到一个新的根节点如下：</p><p><img src="https://qiulyn.files.wordpress.com/2019/02/time688aae59bbe20190204210311.png" alt=""></p><p>现在在 $Solva(1)$ 函数中，并且现在循环到了 $1$ 的儿子 $3$ ，那么 $3$ 的子树就是灰色三角形中的三个节点，我们的新 $root$ 就是灰色三角形这棵树的重心，现在刚开始的时候可以将 $3$ 看成根节点，然后再往下计算。</p><h4 id="0X1F—-2-获取树的重心"><a href="#0X1F—-2-获取树的重心" class="headerlink" title="0X1F—-2 获取树的重心"></a>0X1F—-2 获取树的重心</h4><p>很简单，只需要一个 $DP$ 就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;mxss[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        getroot(v,u);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">        mxss[u]=max(mxss[u],size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    mxss[u]=max(mxss[u],sum-size[u]);</span><br><span class="line">    <span class="keyword">if</span>(mxss[u]&lt;mxss[root])root=u; </span><br><span class="line">    <span class="comment">//mxss[u]为u的子树中size最大的size，size就是u下面的子树大小。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这一句是什么意思呢：<code>mxss[u]=max(mxss[u],sum-size[u]);</code></p><p>我们再举个栗子，假如现在的 $u$ 是 $1$ ：($Qiuly$懒所以用的前面的那个图)</p><p><img src="https://qiulyn.files.wordpress.com/2019/02/time688aae59bbe20190204211515.png" alt=""></p><p>但是 $size[1]$ 统计的只是Ta下面的 ${2,3,4,5,6,7,8}$ 号节点，万一当前树不止这些呢？也就是说上面还有一坨节点，如果计算的时候显然也是要考虑进去的。</p><h4 id="0X1F—-怎么统计1类路径？"><a href="#0X1F—-怎么统计1类路径？" class="headerlink" title="0X1F—-怎么统计1类路径？"></a>0X1F—-怎么统计1类路径？</h4><h5 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdist</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    use[++cnt]=dist[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        dist[v]=dist[u]+G[i].val;getdist(v,u);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dist0)</span></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;dist[u]=dist0;</span><br><span class="line">    getdist(u,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(use+<span class="number">1</span>,use+<span class="number">1</span>+cnt);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=cnt,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">       <span class="keyword">if</span>(use[l]+use[r]&lt;=k)res+=r-l,++l;</span><br><span class="line">       <span class="keyword">else</span> --r;</span><br><span class="line">    <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定了当前树的 $root$ 后，我们可以定义 $dist[root]$ 为 $0$ ，其余的当前树的节点的 $dist$ 为Ta到 $root$ 的距离(路上所有边的权值和)。</p><p>显然，这个问题很容易搞定($getdist$)。</p><p>想象一下，现在有一条路径 $l -&gt; \cdots -&gt; root -&gt; \cdots -&gt; r$，显然这条路径的权值就是 $dist[l] + dist[r]$。</p><p>可是，如果一一去枚举 $l,r$ 并且统计的话复杂度是报表的啊！<br>这没关系，我们依旧可以用线性的时间复杂度解决问题。</p><p>得到了所有的 $dist$ 后，我们排个序。</p><p>然后就是统计的流程。</p><p>假设现在排好序的数列为 {$1,1,2,3,4,4,5,6,7,7,8$}，$l$ 为 $1$ ，$r$ 为 $cnt$。</p><p>现在计算 $1+8$ ，显然如果 $1+8$ 小于 $k$ ，那么 $1 + (1/2/3/4/4/5/6/7/7)$ 都会小于 $k$，这个时候直接统计即可。否则  <code>--r</code> ，因为我们还需要统计的是 $l+1,l+2,\cdots$，既然这个 $r$ 不行了，对后面的答案是肯定不会有影响的。</p><p>最后 $return;$</p><h3 id="0X2F-总体代码"><a href="#0X2F-总体代码" class="headerlink" title="0X2F 总体代码"></a>0X2F 总体代码</h3><blockquote><h4 id="Test-Luogu-P4178-Tree"><a href="#Test-Luogu-P4178-Tree" class="headerlink" title="Test:Luogu P4178 Tree"></a>Test:Luogu <a href="https://www.luogu.org/problemnew/show/P4178" target="_blank" rel="noopener">P4178 Tree</a></h4><h4 id="Code-如下"><a href="#Code-如下" class="headerlink" title="Code:如下"></a>Code:如下</h4></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="comment">//为了格式不鬼畜这两个宏定义我只能放着了QvQ</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,cnt,sum,ans,root,head[N];</span><br><span class="line"><span class="keyword">int</span> vis[N],use[N],dist[N],size[N],mxss[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,val; </span><br><span class="line">&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;mxss[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        getroot(v,u);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">        mxss[u]=max(mxss[u],size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    mxss[u]=max(mxss[u],sum-size[u]);</span><br><span class="line">    <span class="keyword">if</span>(mxss[u]&lt;mxss[root])root=u; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdist</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    use[++cnt]=dist[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        dist[v]=dist[u]+G[i].val;getdist(v,u);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dist0)</span></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;dist[u]=dist0;</span><br><span class="line">    getdist(u,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(use+<span class="number">1</span>,use+<span class="number">1</span>+cnt);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=cnt,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">       <span class="keyword">if</span>(use[l]+use[r]&lt;=k)res+=r-l,++l;</span><br><span class="line">       <span class="keyword">else</span> --r;</span><br><span class="line">    <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    ans+=calc(u,<span class="number">0</span>);</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[(v=G[i].to)])<span class="keyword">continue</span>;</span><br><span class="line">        ans-=calc(v,G[i].val);</span><br><span class="line">        sum=size[v];root=<span class="number">0</span>;</span><br><span class="line">        getroot(v,<span class="number">0</span>);</span><br><span class="line">        solve(root);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),sum=mxss[<span class="number">0</span>]=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v,w;i&lt;n;++i)&#123;</span><br><span class="line">        IN(u),IN(v),IN(w);</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[u],v,w&#125;;head[u]=cnt;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[v],u,w&#125;;head[v]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    IN(k);</span><br><span class="line">    getroot(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="Test-Luogu-P3806-【模板】点分治1"><a href="#Test-Luogu-P3806-【模板】点分治1" class="headerlink" title="Test:Luogu P3806 【模板】点分治1"></a>Test:Luogu <a href="https://www.luogu.org/problemnew/show/P3806" target="_blank" rel="noopener">P3806 【模板】点分治1</a></h4><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h4><h6 id="很显然我们不能像上面那样傻乎乎的While了，那样不能算出路径的权值，只能统计。"><a href="#很显然我们不能像上面那样傻乎乎的While了，那样不能算出路径的权值，只能统计。" class="headerlink" title="很显然我们不能像上面那样傻乎乎的While了，那样不能算出路径的权值，只能统计。"></a>很显然我们不能像上面那样傻乎乎的While了，那样不能算出路径的权值，只能统计。</h6><h6 id="干脆统计时来个双重循环暴力吧！然后搞个桶。复杂度很高但是能过得了-至少这一题是这样的"><a href="#干脆统计时来个双重循环暴力吧！然后搞个桶。复杂度很高但是能过得了-至少这一题是这样的" class="headerlink" title="干脆统计时来个双重循环暴力吧！然后搞个桶。复杂度很高但是能过得了(至少这一题是这样的)"></a>干脆统计时来个双重循环暴力吧！然后搞个桶。复杂度很高但是能过得了(至少这一题是这样的)</h6><h4 id="Code-如下-1"><a href="#Code-如下-1" class="headerlink" title="Code:如下"></a>Code:如下</h4></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="comment">//Q.v.Q........................</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">10000005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k,cnt,sum,root,head[N];</span><br><span class="line"><span class="keyword">int</span> vis[N],use[N],dist[N],size[N],mxss[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,val; </span><br><span class="line">&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;mxss[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        getroot(v,u);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">        mxss[u]=max(mxss[u],size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    mxss[u]=max(mxss[u],sum-size[u]);</span><br><span class="line">    <span class="keyword">if</span>(mxss[u]&lt;mxss[root])root=u; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdist</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    use[++cnt]=dist[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        dist[v]=dist[u]+G[i].val;getdist(v,u);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dist0,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;dist[u]=dist0;</span><br><span class="line">    getdist(u,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)</span><br><span class="line">          ans[use[i]+use[j]]+=add; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    calc(u,<span class="number">0</span>,<span class="number">1</span>);vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[(v=G[i].to)])<span class="keyword">continue</span>;</span><br><span class="line">        calc(v,G[i].val,<span class="number">-1</span>);</span><br><span class="line">        sum=size[v];root=<span class="number">0</span>;</span><br><span class="line">        getroot(v,<span class="number">0</span>);</span><br><span class="line">        solve(root);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),sum=mxss[<span class="number">0</span>]=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v,w;i&lt;n;++i)&#123;</span><br><span class="line">        IN(u),IN(v),IN(w);</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[u],v,w&#125;;head[u]=cnt;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[v],u,w&#125;;head[v]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    getroot(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">       IN(k),<span class="built_in">printf</span>(ans[k]?<span class="string">"AYE\n"</span>:<span class="string">"NAY\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>~~(还是背板子最重要嘿嘿嘿)</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 小清新人渣的本愿  莫队+bitset  luoguP3674</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP3674/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP3674/</url>
      
        <content type="html"><![CDATA[<p>莫队 $+$ $bitset$.</p><p>我们可以用 $bitset$ 维护当前 $l,r$ 区间数的出现的状态，莫对依旧按照套路搞，然后来考虑怎么回答每一个询问。</p><a id="more"></a><p>对于操做 $1$ ，要求回答我们从当前区间能否找出 $a,b$ 使得其差为 $x$。</p><p>很显然，$a-b=x$ 等价于 $a=b+x$。</p><p>我们维护的是数的出现的状态，于是可以将当前的 $bitset$ 左移 $x$ 位，也就是让所有数都加上 $x$，然后与原 $bitset$ 做与运算，看看是否有一个 $a$ 出现，如果与的结果非 $0$ ，那么显然是有的，否则没有。</p><p>第二个操作有些不好办，我们再开一个 $bitset$ 集，对于一个出现过的数 $i$，在第二个 $bitset$ 集中记为 $N-i$。然后再来看操作要求，这次是让 $a+b=x$。</p><p>那么可以得到：<script type="math/tex">a=x-b</script></p><p>于是设一个数 $z$ ，表示 $N-a$ 。</p><p>然后：<script type="math/tex">z=N-x+b</script></p><p>移项得：<script type="math/tex">z-b=N-x</script></p><p>于是我们将第二个 $bitset$ 右移 $N-x$ 为，显然第二个 $bitset$ 集上的第 $i$ 位代表的就是第一个 $bitset$ 上的 $x-i$ 位。</p><p>然后，将两个 $bitset$ 与一下，看看是否同时存在 $a$ 和 $x-a$ 即可。</p><p>最后对于第三个操作，貌似bitset也不太好搞，那么直接暴力枚举因子就好了，复杂度 $O(\sqrt{n})$，放心不会炸。具体怎么暴力枚举呢？在 $1 - \sqrt{x}$ 的范围类枚举一个 $j$ ，如果 $x$ % $j==0$ 并且同时存在 $j$ 和 $x/j$，显然就有答案了。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;N&gt; now1,now2; </span><br><span class="line"><span class="keyword">int</span> n,m,l,r,s,a[N],c[N],Be[N],ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MO</span>&#123;</span><span class="keyword">int</span> opt,l,r,x,id;&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(MO a,MO b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> Be[a.l]==Be[b.l]?a.r&lt;b.r:a.l&lt;b.l;&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);s=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]),Be[i]=(i<span class="number">-1</span>)/s+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">       IN(q[i].opt),IN(q[i].l),IN(q[i].r),IN(q[i].x),q[i].id=i;</span><br><span class="line">    <span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m,cmp);</span><br><span class="line">    l=<span class="number">1</span>,r=<span class="number">0</span>;now1.reset(),now2.reset();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(c[x]++==<span class="number">0</span>)now1[x]=<span class="number">1</span>,now2[N-x]=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(--c[x]==<span class="number">0</span>)now1[x]=<span class="number">0</span>,now2[N-x]=<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;q[i].l)Del(a[l++]);</span><br><span class="line">        <span class="keyword">while</span>(l&gt;q[i].l)Add(a[--l]);</span><br><span class="line">        <span class="keyword">while</span>(r&gt;q[i].r)Del(a[r--]);</span><br><span class="line">        <span class="keyword">while</span>(r&lt;q[i].r)Add(a[++r]);</span><br><span class="line">        <span class="keyword">if</span>(q[i].opt==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((now1&amp;(now1&lt;&lt;q[i].x)).any())ans[q[i].id]=<span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((now1&amp;(now2&gt;&gt;(N-q[i].x))).any())ans[q[i].id]=<span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j*j&lt;=q[i].x;++j)</span><br><span class="line">           <span class="keyword">if</span>(!(q[i].x%j)&amp;&amp;now1[j]&amp;&amp;now1[q[i].x/j])</span><br><span class="line">           &#123;ans[q[i].id]=<span class="literal">true</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">       <span class="keyword">if</span>(ans[i])<span class="built_in">printf</span>(<span class="string">"hana\n"</span>);</span><br><span class="line">       <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"bi\n"</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫队 </tag>
            
            <tag> bitset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2008]Cave洞穴勘测  LCT  bzoj2049/洛谷P2147</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2147/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2147/</url>
      
        <content type="html"><![CDATA[<p>Link-Cut-Tree的模板题啊……(听说还可以用其他的方法做，不管了，直接上LCT)</p><p>没有要求维护点权，只需要维护点的连通性即可。</p><p>就是朴素的LCT，居然还不要pushup。</p><a id="more"></a><p>感觉有些不适应啊…….不得不说LCT是个神器。</p><p>简单分析一下。</p><ul><li>对于每种命令:<ul><li>如果是<code>Connect x y (链接 x y)</code>:直接 <code>link(x,y)</code>即可。</li><li>如果是<code>Destroy x y (切断 x y)</code>:直接 <code>cut(x,y)</code>即可。</li><li>如果是<code>Query x y (询问 x y 的连通性)</code>:判断<code>findroot(x)</code>和<code>findroot(y)</code>是否一致，一致输出<code>Yes</code>，否则输出<code>No</code>。</li></ul></li></ul><p>然后就A了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">" "</span>) </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(Tp &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();x*=f;</span><br><span class="line">&#125;<span class="keyword">int</span> n,m,f[N],r[N],hep[N],ch[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">0</span>]==x||ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">filp</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);r[x]^=<span class="number">1</span>;&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!r[x])<span class="keyword">return</span>;r[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">0</span>])filp(ch[x][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">1</span>])filp(ch[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=f[x],z=f[y],k=chk(x),&amp;v=ch[x][!k];</span><br><span class="line"><span class="keyword">if</span>(get(y))ch[z][chk(y)]=x;v=y,ch[y][k]=v;</span><br><span class="line"><span class="keyword">if</span>(v)f[v]=y;f[y]=x,f[x]=z;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=x,top=<span class="number">0</span>;hep[++top]=y;</span><br><span class="line"><span class="keyword">while</span>(get(y))hep[++top]=y=f[y];</span><br><span class="line"><span class="keyword">while</span>(top)pushdown(hep[top--]);</span><br><span class="line"><span class="keyword">while</span>(get(x))&#123;</span><br><span class="line">y=f[x],top=f[y];</span><br><span class="line"><span class="keyword">if</span>(get(y))rotate((ch[y][<span class="number">0</span>]==x)^(ch[top][<span class="number">0</span>]==y)?x:y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;<span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> y=<span class="number">0</span>;x;x=f[y=x])</span><br><span class="line">       Splay(x),ch[x][<span class="number">1</span>]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Access(x);Splay(x);filp(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Access(x);Splay(x);</span><br><span class="line">    <span class="keyword">while</span>(ch[x][<span class="number">0</span>])pushdown(x),x=ch[x][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    makeroot(x);Access(y);Splay(y);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    makeroot(x);<span class="keyword">if</span>(findroot(y)!=x)f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    <span class="keyword">if</span>(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][<span class="number">1</span>])&#123;</span><br><span class="line">        f[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,op,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'C'</span>)link(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'D'</span>)cut(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'Q'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(findroot(x)==findroot(y))<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2014]魔法森林  动态加边Spfa  bzoj3669/luogu2387</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2387/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2387/</url>
      
        <content type="html"><![CDATA[<p>膜法森林2333……</p><p>显然是一道 $LCT$ 动态加边的题目。</p><p>然而并不需要这么高深的数据结构来动态加边<del>(实际上是不会)</del>，我们只需要 $Spfa$ 动态加边即可切掉此题。</p><a id="more"></a><p>怎么 $Spfa$?又是个怎么的动态加边法呢？</p><p>在下面我先给出代码，然后再来一步一步剖析(跟 $Spfa$ 板子差不多)。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e4</span>+<span class="number">2</span>,M=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;<span class="keyword">char</span> ch;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> head[N],dis[N],tot,cnt,ans,n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_Spfa</span>&#123;</span><span class="keyword">int</span> nxt,to,v1,v2;&#125;G[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_Main</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,v1,v2;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Edge_Main a)<span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1&lt;a.v1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;L[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make_line</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>&#123;</span><br><span class="line">    G[++tot].nxt=head[x],head[x]=tot,G[tot].to=y,G[tot].v1=v1,G[tot].v2=v2;</span><br><span class="line">    G[++tot].nxt=head[y],head[y]=tot,G[tot].to=x,G[tot].v1=v1,G[tot].v2=v2;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">"\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> star_1,<span class="keyword">int</span> star_2)</span></span>&#123;</span><br><span class="line">    vis[star_1]=<span class="literal">true</span>,vis[star_2]=<span class="literal">true</span>;</span><br><span class="line">    q.push(star_1),q.push(star_2);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">    <span class="keyword">int</span> to=G[i].to;</span><br><span class="line">    <span class="keyword">if</span>(max(dis[u],G[i].v2)&lt;dis[to])&#123;</span><br><span class="line">        dis[to]=max(dis[u],G[i].v2);</span><br><span class="line"><span class="keyword">if</span>(!vis[to])q.push(to),vis[to]=<span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;vis[u]=<span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">127</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>,q.push(<span class="number">1</span>),ans=inf; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">   IN(L[i].x),IN(L[i].y),IN(L[i].v1),IN(L[i].v2);</span><br><span class="line">    <span class="built_in">std</span>::sort(L+<span class="number">1</span>,L+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    make_line(L[i].x,L[i].y,L[i].v1,L[i].v2);</span><br><span class="line">spfa(L[i].x,L[i].y);</span><br><span class="line">ans=min(ans,dis[n]+L[i].v1); </span><br><span class="line">&#125;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans==inf?<span class="number">-1</span>:ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态加边，顾名思义，就是按最优顺序依次将边插入，对于每次插完边的图做一次答案统计($Spfa$)，然后每次在 $main$ 函数里统计答案，最后输出即可。</p><p>我们固定 $v1$ ，用 $v2$ 跑 $Spfa$，边的插入顺序是按照 $v1$ 的大小来的，小的先插。</p><p>之所以上面要用到 $sort$，是因为我们要达到”按最优顺序依次将边插入”。</p><p>$Spfa$ 的板子就不解释了，不懂的同学左转搜素 $Spfa$ ，先刷几道黄牌去吧……</p><p>我们来看看动态加边的过程:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    make_line(L[i].x,L[i].y,L[i].v1,L[i].v2);</span><br><span class="line">spfa(L[i].x,L[i].y);</span><br><span class="line">ans=min(ans,dis[n]+L[i].v1); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>make_line(L[i].x,L[i].y,L[i].v1,L[i].v2);</code> :</strong></p><ul><li>加边，不解释</li></ul><p><strong><code>spfa(L[i].x,L[i].y);</code> :</strong></p><ul><li><p>$Spfa$ 过程。</p><blockquote><ul><li><p>$Q$ :为什么要定义两个起点 $L[i].x$ 和 $L[i].y$ 呢？</p></li><li><p>$A$ :显然加进来了这条边后，对当前图中一些点的 $dis$ 值可能会有影响，所以以这个边的两端的点为起点，依次更新旁边的点，直到不能再更新。</p></li></ul></blockquote></li></ul><p><strong><code>ans=min(ans,dis[n]+L[i].v1);</code> :</strong></p><ul><li><p>更新 $ans$ 值</p><blockquote><ul><li><p>$Q$ :为什么使用 $dis[n]+L[i].v1$ 对 $ans$ 进行更新，有可能这条最短路上并不包含这个边啊，为什么要将 $L[i].v1$ 算进去呢？可能会更新错答案啊。</p></li><li><p>$A$ :对于当前图的最短路，我们分两种情况来讨论：</p><ul><li>$1.$ 这条最短路上没包含这条新加上的边</li><li>$2.$ 这条最短路上包含了这条新加上的边</li></ul></li><li><p>对于第一种情况，显然这条最短路在加上这条边之前就已经有了，因为这条边的存在跟这条最短路没任何关系，既然之前有了，那么就肯定已经更新过 $ans$ 了。而那个时候的 $v1$ 是肯定比这个时候的 $v1$ 小的，也就是说 $ans$ 在之前已经被比现在的答案更小的答案更新过了，所以 $ans$ 也不会被当前答案更新。</p></li><li><p>对于第二种情况，因为这条最短路上包含了这条边，而这条边肯定是这条最短路上 $v1$ 最大的边(当然也是当前图上 $v1$ 最大的边)，所以直接更新没错。</p></li></ul></blockquote></li></ul><ul><li><p>每一次循环后数组不要重置吗？</p><ul><li><p>显然队列是不要的，因为 $Spfa$ 的退出条件是是队列为空，所以每次做完 $Spfa$ 时队列也就空了。</p></li><li><p>$vis$ 数组也不需要，跟队列是一个道理，只有 $vis$ 数组里面还有 $true$ 的元素，说明还有元素在队列里，队列空了，$vis$  数组也自然空了。</p></li><li><p>$dis$ 数组不需要，因为循环中每次跑 $Spfa$ 是为了<strong>更新 $dis$ 数组而非做最短路</strong>。</p></li></ul></li></ul><p>然后……然后就没有然后了……</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> LCT </tag>
            
            <tag> Spfa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2010]超级钢琴 RMQ+优先队列 bzoj2006/洛谷P2048</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2048/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2048/</url>
      
        <content type="html"><![CDATA[<p>这一道题显然是一道 $RMQ$ 的题目，用一个三元素组$（o，l，r）​$表示：左端点为o，右端点在l到r的区间内的最大子段，元素组用堆维护。</p><a id="more"></a><p>对于每个和弦的值，用前缀和在$O(1)$的时间复杂度求出。</p><p>$ans$累加这个三元组的贡献。由于$t$已经被选中，对于这个$o$，$t$已经不能重复选中，但最优解还可能存在于 $t$左右的两端区间中，所以提取出$(o, l, r)$之后，为了避免重复且不丧失其他较优解，我们仍然要把$(o, l, t - 1),(o, t + 1, r)$扔回堆里面去。还要避免重复或错误，即$l = t$或$r = t$的情况要进行特判。</p><p>对于$t$的位置，我们直接用ST表预处理出即可。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Macth</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500005</span>,Log=<span class="number">20</span>;</span><br><span class="line">ll f[N][Log],sum[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> RMQ&#123;<span class="comment">//ST表求区间最优位置(貌似在本题中是这样)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)f[i][<span class="number">0</span>]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;++j)</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)&#123;</span><br><span class="line">             <span class="keyword">int</span> x=f[i][j<span class="number">-1</span>],y=f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">                f[i][j]=sum[x]&gt;sum[y]?x:y;<span class="comment">//取更优的位置</span></span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> x=f[l][k],y=f[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k];</span><br><span class="line">        <span class="keyword">return</span> sum[x]&gt;sum[y]?x:y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k,L,R;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,o,t;<span class="comment">//t就是最优的位置</span></span><br><span class="line">Queue()&#123;&#125;</span><br><span class="line">Queue(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r):o(o),l(l),r(r),t(RMQ::query(l,r))&#123;&#125;<span class="comment">//t:取个l至r区间的最优值</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Queue a)<span class="keyword">const</span>&#123;<span class="comment">//重载运算符</span></span><br><span class="line"><span class="keyword">return</span> sum[a.t]-sum[a.o<span class="number">-1</span>]&lt;sum[t]-sum[o<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;A;</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;Queue&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;k,&amp;L,&amp;R);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;sum[i]);sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">&#125;RMQ::make(n);ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123; </span><br><span class="line">   <span class="keyword">if</span>(i+L<span class="number">-1</span>&lt;=n)q.push(Queue(i,i+L<span class="number">-1</span>,min(i+R<span class="number">-1</span>,n)));</span><br><span class="line">&#125;<span class="keyword">while</span>(k--)&#123;</span><br><span class="line">A=q.top();q.pop();</span><br><span class="line">ans+=sum[A.t]-sum[A.o<span class="number">-1</span>];<span class="comment">//更新ans</span></span><br><span class="line"><span class="keyword">if</span>(A.l!=A.t)q.push(Queue(A.o,A.l,A.t<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">if</span>(A.r!=A.t)q.push(Queue(A.o,A.t+<span class="number">1</span>,A.r));</span><br><span class="line">&#125;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差不多就是这样了……</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> RMQ </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 Tyvj1730二逼平衡树 树套树  luogu3380/bzoj3196</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP1730/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP1730/</url>
      
        <content type="html"><![CDATA[<p>树套树，直接线段树套 $Splay$ .</p><p>因为有区间的$k$大，不能直接用$Splay$(大佬忽视这句话)，显然可以用树套树(废话)。对于每一个线段树的节点都建一棵 $Splay$ ，需要查询这个节点所代表的区间第 $k$ 大等操作时直接用 $Splay$ 来完成即可……</p><a id="more"></a><p>但是，如果不是正好的区间呢？假如询问区间横跨了两个子树区间怎么办呢？</p><p>这就需要技巧了.</p><p>下面，对于第一个操作，先贴出代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Kth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);<span class="keyword">return</span>;&#125;<span class="comment">//必须判断啊，一定要相等</span></span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);<span class="comment">//完全属于左子树</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_rank(rc,mid+<span class="number">1</span>,r,L,R,Kth);<span class="comment">//完全属于左子树</span></span><br><span class="line">    <span class="keyword">else</span> Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,Kth);</span><br><span class="line">    <span class="comment">//因为 ans 是 += ，所以直接拆开即可，因为有些抽象，可以画图模拟</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;IN(v);ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>基本上，所有有关的操作都可以参考上面的代码段……</p><p>多说无益，直接看代码吧.</p><p>哦，对了，其实理解只需纸笔和一份正确的代码，并不要太多的讲解(感觉网上没找到很优秀的文章……)</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">" "</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="comment">//template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; </span></span><br><span class="line"><span class="comment">//template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],ans,MX;</span><br><span class="line"><span class="comment">/*----------------------------------Splay-------------------------------------*/</span></span><br><span class="line"><span class="keyword">int</span> f[N],c[N],s[N],v[N],ch[N][<span class="number">2</span>],rt[N],tot;</span><br><span class="line"><span class="comment">// rt[i] 表示线段树编号为i的节点的Splay的根节点</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_del_node</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;f[x]=s[x]=c[x]=v[x]=ch[x][<span class="number">0</span>]=ch[x][<span class="number">1</span>]=<span class="number">0</span>;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;s[x]=(ch[x][<span class="number">0</span>]?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+(ch[x][<span class="number">1</span>]?s[ch[x][<span class="number">1</span>]]:<span class="number">0</span>)+c[x];&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=f[x],z=f[y],k=chk(x),v=ch[x][k^<span class="number">1</span>];</span><br><span class="line">ch[y][k]=v;<span class="keyword">if</span>(v)f[v]=y;f[x]=z;<span class="keyword">if</span>(z)ch[z][chk(y)]=x;</span><br><span class="line">f[y]=x,ch[x][k^<span class="number">1</span>]=y;Splay_pushup(y),Splay_pushup(x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x,<span class="keyword">int</span> top=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(f[x]!=top)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=f[x],z=f[y];</span><br><span class="line">        <span class="keyword">if</span>(z!=top)Splay_rotate((ch[z][<span class="number">0</span>]==y)==(ch[y][<span class="number">0</span>]==x)?y:x);</span><br><span class="line">        Splay_rotate(x);</span><br><span class="line">    &#125;<span class="keyword">if</span>(!top)rt[i]=x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_Insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=rt[i];</span><br><span class="line"><span class="keyword">if</span>(!rt[i])&#123;</span><br><span class="line">    rt[i]=pos=++tot;v[pos]=x;s[pos]=c[pos]=<span class="number">1</span>;</span><br><span class="line">        f[pos]=ch[pos][<span class="number">0</span>]=ch[pos][<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[pos]==x)&#123;++c[pos];Splay_pushup(last);<span class="keyword">break</span>;&#125;</span><br><span class="line">        last=pos;pos=ch[pos][x&gt;v[pos]];</span><br><span class="line">        <span class="keyword">if</span>(!pos)&#123;</span><br><span class="line">            pos=++tot;v[pos]=x;s[pos]=c[pos]=<span class="number">1</span>;</span><br><span class="line">            ch[last][x&gt;v[last]]=pos;</span><br><span class="line">            f[pos]=last;ch[pos][<span class="number">0</span>]=ch[pos][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            Splay_pushup(last);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;Splay(i,pos);<span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_rank</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=rt[i],cal=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[x]==k)<span class="keyword">return</span> cal+((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v[x]&lt;k)&#123;</span><br><span class="line">        cal+=((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+c[x];x=ch[x][<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> x=ch[x][<span class="number">0</span>];</span><br><span class="line">&#125;<span class="keyword">return</span> cal;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_find</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[pos]==x)&#123;Splay(i,pos);<span class="keyword">return</span> pos;&#125;;</span><br><span class="line">pos=ch[pos][x&gt;v[pos]];</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_pre</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">int</span> x=ch[rt[i]][<span class="number">0</span>];<span class="keyword">while</span>(ch[x][<span class="number">1</span>])x=ch[x][<span class="number">1</span>];<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_suc</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">int</span> x=ch[rt[i]][<span class="number">1</span>];<span class="keyword">while</span>(ch[x][<span class="number">0</span>])x=ch[x][<span class="number">0</span>];<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_Get_pre</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(pos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]&lt;x)&#123;<span class="keyword">if</span>(ans&lt;v[pos])ans=v[pos];pos=ch[pos][<span class="number">1</span>];&#125;</span><br><span class="line">        <span class="keyword">else</span> pos=ch[pos][<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_Get_suc</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(pos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]&gt;x)&#123;<span class="keyword">if</span>(ans&gt;v[pos])ans=v[pos];pos=ch[pos][<span class="number">0</span>];&#125;</span><br><span class="line">        <span class="keyword">else</span> pos=ch[pos][<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_Delete</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=Splay_find(i,key);</span><br><span class="line">    <span class="keyword">if</span>(c[x]&gt;<span class="number">1</span>)&#123;--c[x];Splay_pushup(x);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">0</span>]&amp;&amp;!ch[x][<span class="number">1</span>])&#123;Splay_del_node(rt[i]);rt[i]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">0</span>])&#123;<span class="keyword">int</span> y=ch[x][<span class="number">1</span>];rt[i]=y;f[y]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(!ch[x][<span class="number">1</span>])&#123;<span class="keyword">int</span> y=ch[x][<span class="number">0</span>];rt[i]=y;f[y]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> p=Splay_pre(i);<span class="keyword">int</span> lastrt=rt[i];</span><br><span class="line">Splay(i,p,<span class="number">0</span>);ch[rt[i]][<span class="number">1</span>]=ch[lastrt][<span class="number">1</span>];f[ch[lastrt][<span class="number">1</span>]]=rt[i];</span><br><span class="line">Splay_del_node(lastrt);Splay_pushup(rt[i]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*------------------------------Seg_Tree--------------------------------------*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ((x)&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ((x)&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_Insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    Splay_Insert(x,val);<span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_Insert(lc,l,mid,pos,val);</span><br><span class="line"><span class="keyword">else</span> Seg_Insert(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Kth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_rank(rc,mid+<span class="number">1</span>,r,L,R,Kth);</span><br><span class="line">    <span class="keyword">else</span> Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,Kth);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="comment">//    printf("QvQ:: %d %d %d %d %d\n",x,l,r,pos,val);</span></span><br><span class="line">Splay_Delete(x,a[pos]);Splay_Insert(x,val);</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;a[pos]=val;<span class="keyword">return</span>;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_change(lc,l,mid,pos,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_change(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_pre(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_suc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=min(ans,Splay_Get_suc(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_suc(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_suc(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_suc(lc,l,mid,L,mid,val),Seg_suc(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*---------------------------------ask----------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Kth</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=MX+<span class="number">1</span>,M;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">        M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,M);</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;k)L=M+<span class="number">1</span>;<span class="keyword">else</span> R=M;</span><br><span class="line">    &#125;<span class="keyword">return</span> L<span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*-------------------------------main-------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> <span class="keyword">const</span>* argv[])</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)&#123;IN(a[i]);Seg_Insert(<span class="number">1</span>,<span class="number">1</span>,n,i,a[i]);MX=max(MX,a[i]);&#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,x,y,v;IN(op),IN(x),IN(y);</span><br><span class="line">        <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;IN(v);ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;IN(v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get_Kth(x,y,v));&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;Seg_change(<span class="number">1</span>,<span class="number">1</span>,n,x,y);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;IN(v);ans=-inf;Seg_pre(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:&#123;IN(v);ans=inf;Seg_suc(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 楼房重建 线段树 bzoj2957</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5Dbzoj2957/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5Dbzoj2957/</url>
      
        <content type="html"><![CDATA[<p>每个楼房，还有单点修改操作。简单的想到用线段树来维护信息。</p><p>显然线段树只需要维护y/x即可，对于每一个楼房，能看见的条件就是前面楼房的y/x的严格小于当前楼房的y/x。</p><a id="more"></a><p>线段树的区间修改不再赘述。</p><p>那么怎么维护可以看到的楼房数呢？</p><p>考虑在线段树的每一个节点上用一个变量<code>sum</code>来表示从这个节点的左端点向右端点看时能看到多少楼房。</p><p>假设现在有一区间：<code>1,5,8,0,7,9</code>。维护这个区间信息的节点编号为<code>x</code>。</p><p>x的左儿子维护的区间是<code>1,5,8</code>，从<code>1</code>往<code>8</code>看可以看到三个楼房，故x的左儿子的sum的值为<code>3</code>。</p><p>x的右儿子维护的区间是<code>0,7,9</code>，从<code>0</code>往<code>9</code>看也可以看到三个楼房，故x的右儿子的sum的值也为<code>3</code>。</p><h4 id="难道x的sum值也为3-3-6？错"><a href="#难道x的sum值也为3-3-6？错" class="headerlink" title="难道x的sum值也为3+3=6？错!"></a>难道<code>x的sum值</code>也为<code>3+3=6</code>？错!</h4><p>这显然是不能加在一起的，<code>x的sum的值</code>为4。</p><p>为什么会错呢？因为x的右儿子的观察视角不是从1开始的，是从0开始的。</p><p>显然0被前面的楼房挡住了。</p><p>首先考虑每个线段树节点在维护一个<code>mx</code>，<code>mx</code>代表这个节点所代表的区间中所有的楼房中最高的高度。</p><p>上传时，由于两个儿子的<code>sum</code>值是已经处理好的，而左儿子的视角是跟<code>x</code>的视角一样的(对于上面的例子来说都是1)，可以直接上传，即<code>sum(x)+=sum(l(x))</code>。</p><p>对于右儿子，考虑递归处理右儿子的区间，递归时带一个<code>Mx</code>变量表示x的左儿子<code>mx</code>(右儿子再左儿子后面，原因下面解释)，递归函数的返回值是当前处理区间可以被看到的楼房数(从x的视角看)</p><p>对于现在处理的每一个区间：</p><ul><li>如果这个区间的最高的楼房的高度都Mx(可以看到)，那么return 当前区间维护的sum值。</li><li>如果这个区间只代表一个楼房，直接判断其能否被看到即可。</li></ul><ul><li>对于剩下的情况，递归儿子，分两种情况讨论：<ul><li>如果左儿子的最高的楼房小于Mx(不能对答案有任何贡献)，直接递归右儿子。</li><li>否则，递归左儿子，右儿子能看到的楼房个数为当前区间sum-左儿子sum即可，(应为下面已经更新好了，只需要直接调用就好了。)</li></ul></li></ul><h5 id="Code-文中的sum用l代替"><a href="#Code-文中的sum用l代替" class="headerlink" title="Code(文中的sum用l代替):"></a>Code(文中的sum用l代替):</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson x&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson x&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> mx;<span class="keyword">int</span> l;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> m(x) tree[x].mx</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">&#125; tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">double</span> val[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup_max</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">m(x)=max(m(x&lt;&lt;<span class="number">1</span>),m(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pushup_sum</span><span class="params">(<span class="keyword">double</span> Mx,<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m(x)&lt;Mx)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(val[l]&gt;Mx)<span class="keyword">return</span> l(x);</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> val[l]&gt;Mx;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m(lson)&lt;=Mx)<span class="keyword">return</span> pushup_sum(Mx,rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> pushup_sum(Mx,lson,l,mid)+l(x)-l(lson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r&amp;&amp;l==pos)&#123;m(x)=(<span class="keyword">double</span>)value/pos;l(x)=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)change(lson,l,mid,pos,value);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid)change(rson,mid+<span class="number">1</span>,r,pos,value);</span><br><span class="line">pushup_max(x);</span><br><span class="line">l(x)=l(lson)+pushup_sum(m(lson),rson,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> x,y,i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">val[x]=(<span class="keyword">double</span>)y/x;</span><br><span class="line">change(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello new blog!</title>
      <link href="/2019/02/12/Hello%20new%20blog!/"/>
      <url>/2019/02/12/Hello%20new%20blog!/</url>
      
        <content type="html"><![CDATA[<p>曾经尝试过用 $Wordpress$ 搭过博客，虽说操作简单，却因为我不想花钱而使用不了 $Makedown$ 格式，对于超级依赖 $Makedown$ 的我，找遍了方法都没法解决……</p><a id="more"></a><p>于是蠢蠢欲动的想要用 $Hexo$ 搭个博客，虽然听学长说，$Hexo$ 只是静态页面，不是那么好。但是却可以免费，还可以用自己喜欢的编辑器学文章。这个计划就这么开始了。</p><p>两天时间，一共搭建了四次，前三次在机房搭的，均未成功。一到家用自己的笔记本电脑，却出奇的顺利，看到页面成功的弹出来时，我真的是激动得不能言语！</p><p>然后，对这个也挺满意的。但是由于本人实在太弱，没有实力与精力去优化博客界面，只是草草的搞了一下 $LATEX$(打错了？) ，不知道能不能用。</p><p>之前我的 $Wordpress$ 的第一篇文章叫新的开始，现在看来那还不是，希望这才是一个崭新的开始吧！ </p><p>（实际上原来叫 $Qiuly$，这个 $“monlights”$ 只是小号而已，$QvQ!$）</p><p>（逃</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome,new visitors! Here is Qiuly&#39;s blog!</title>
      <link href="/2019/02/12/Welcome/"/>
      <url>/2019/02/12/Welcome/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/02/12/Welcome/wallhaven-698904.jpg" alt=""></p><blockquote><p>数学法则只要与现实有关，都是不确定的；若是确定的，都与现实无关          ——阿尔伯特 · 爱因斯坦</p></blockquote><p>欢迎！这里是 $Qiuly‘s\ blog$ ！在翻阅文章之前，$Qiuly$ 有几个小小的要求：</p><ul><li>如果需要复制原文的话可以加 $Qiuly$ $QQ:2641450959$ ，请不要擅自复制却不跟 $Qiuly$ 说一声，谢谢理解。$Qiuly$ 目前还只是一个可爱的小学森，更博<del>勤快</del>的确不容易。</li><li>如果有图片挂了的，或者是代码缩进变成了 $8$ 的代码，还有就是格式问题爆炸的话(就是字之间突然有若干个空格之类的)也请加 $QQ$ ，$Qiuly’s \ blog$ 没有邮箱提醒的功能，所以如果只的是评论的话 $Qiuly$ 根本不知道。$QQ$ 的验证就填”六年级”好了，说明的话就填”博客问题”。</li><li>作为一个个人博客，当然欢迎加友链啦！想要加友链的朋友可以再下方评论区提出哦。</li><li>或许是使用的 $Latex$ 比较多，有些公式/ $Latex$ 的句子或许会加载的比较慢，需要等待片刻后再食用。</li><li>好啦，现在开始你的 $Qiuly’s \ blog$ 之旅吧！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
