<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HNOI2009]ÂèåÈÄíÂ¢ûÂ∫èÂàó Á∫øÊÄßDP luoguP4728]]></title>
    <url>%2F2019%2F05%2F07%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4728%2F</url>
    <content type="text"><![CDATA[ÂÖ∂ÂÆûËøôÈ¢òÂæàÂÆπÊòìËÆæÂá∫ÂõõÁª¥ÁöÑ $\rm{DP}$ Ôºå‰πüÂ∞±ÊòØÁî® $dp_{i,j,x,y}$ Ë°®Á§∫Á¨¨‰∏Ä‰∏™Â∫èÂàóÁöÑÁªàÊ≠¢‰ΩçÁΩÆ‰∏∫ $i$ ‰∏îÈïøÂ∫¶‰∏∫ $x$ÔºåÁ¨¨‰∫å‰∏™Â∫èÂàóÁöÑÁªàÊ≠¢‰ΩçÁΩÆ‰∏∫ $j$ ‰∏îÈïøÂ∫¶‰∏∫ $y$ ÊòØÂê¶ÊàêÁ´ã ÔºåÁÑ∂Âêé‰πüÂæàÂÆπÊòìÊÉ≥Âà∞ÈôçÁª¥ÔºåÊûö‰∏æÂΩìÂâçÂ∫èÂàóÈïøÂ∫¶ $len$ ÁöÑÊó∂ÂÄôÁü•ÈÅì‰∫Ü $x$ Â∞±Â∑≤ÁªèÁü•ÈÅì $y$ ‰∫Ü‚Äî‚Äî $y$ Â∞±ÊòØ $len-x$ „ÄÇ‰πüÂ∞±ÊòØËØ¥Áé∞Âú®ÁöÑ $DP$ ÊòØ $O(n^3)$ ÁöÑÔºåËøòÈúÄË¶Å‰ºòÂåñ„ÄÇ ËÄÉËôëËÆæ $dp_{i,j}$ Ë°®Á§∫Á¨¨‰∏Ä‰∏™Â∫èÂàóÁöÑÊúÄÁªà‰ΩçÁΩÆ‰∏∫ $i-1$ ‰∏îÈïøÂ∫¶‰∏∫ $j$ Êó∂Á¨¨‰∫å‰∏™Â∫èÂàóÁöÑÊúÄÁªà‰ΩçÁΩÆÁöÑÊúÄÂ∞èÂÄº„ÄÇÊûö‰∏æÂΩìÂâçÊï∞Â≠ó $i$ ÔºåÁÑ∂ÂêéÂàÜ‰∏§ÁßçÊÉÖÂÜµËøõË°åËΩ¨Áßª‚Äî‚ÄîÂ∞Ü $a_i$ ÊîæÂà∞Á¨¨‰∏Ä‰∏™Â∫èÂàóÊú´Â∞æ $\texttt{and}$ Â∞Ü $a_i$ ÊîæÂà∞Á¨¨‰∫å‰∏™Â∫èÂàóÊú´Â∞æ„ÄÇ ÊîæÂà∞Á¨¨‰∏Ä‰∏™Â∫èÂàóÊú´Â∞æÂæàÂ•ΩÊÉ≥ÔºöÂõ†‰∏∫ÂΩìÂâçÁ¨¨‰∏Ä‰∏™Â∫èÂàóÁöÑÁªìÂ∞æÂ§ÑÂ∞±ÊòØ $a_{i-1}$ ÔºåÊØîËæÉ‰∏Ä‰∏ãÂ§ßÂ∞èÁõ¥Êé•ËΩ¨ÁßªÂ∞±Â•Ω‰∫ÜÔºö dp_{i,j}=min(dp_{i,j},dp_{i-1,j-1}) \ \ \ (a_i>a_{i-1})Âõ†‰∏∫Á¨¨‰∫å‰∏™Â∫èÂàóÁöÑÊú´Â∞æÊ≤°ÂèòÔºåÊâÄÊúâÁõ¥Êé•ËΩ¨ÁßªÂ∞±Â•Ω„ÄÇ Êé•‰∏ãÊù•ËÄÉËôëÂ∞ÜÁ¨¨ $i$ ‰∏™Êï∞ÊîæÂà∞Á¨¨‰∫å‰∏™Â∫èÂàóÊú´Â∞æÁöÑÊÉÖÂÜµÔºåÂÖ∂ÂÆûÁ¨¨‰∏Ä‰∏™Â∫èÂàóÂíåÁ¨¨‰∫å‰∏™Â∫èÂàóÊ≤°Âå∫Âà´ÔºåÂΩìÁÑ∂Èô§‰∫ÜÂêçÂ≠ó‰∏äÊúâ‰∏Ä‰∏™Â≠óÁöÑÂ∑ÆÂºÇÔºåÂÅáËÆæÁ¨¨ $i-1$ ‰∏™Êï∞ÊòØÁ¨¨‰∫å‰∏™Â∫èÂàóÊú´Â∞æÔºåÂΩìÂâçÁ¨¨‰∏Ä‰∏™Â∫èÂàóÁöÑÈïøÂ∫¶‰∏∫ $j-1$ ÔºåÈÇ£‰πàÁ¨¨‰∫å‰∏™Â∫èÂàóÁöÑÈïøÂ∫¶Âõ†ËØ•Â∞±ÊòØ $(i-1)-(j-1)$ ‰∫ÜÔºåÂõ†‰∏∫Êàë‰ª¨ÂÅáËÆæ‰∫ÜÁ¨¨ $i-1$ ‰∏™Êï∞ÊòØÁ¨¨‰∫å‰∏™Â∫èÂàóÊú´Â∞æÔºåÈÇ£‰πà $dp_{i-1,i-j}$ ÂèàÂèØ‰ª•Ë¢´Ëß£Èáä‰∏∫Á¨¨‰∫å‰∏™Â∫èÂàóÁöÑÊú´Â∞æ‰∏∫ $i-1$ ‰∏™Êï∞‰∏îÁ¨¨‰∫å‰∏™Â∫èÂàóÁöÑÈïøÂ∫¶‰∏∫ $i-j$ ÁöÑÊó∂ÂÄôÁ¨¨‰∏Ä‰∏™Â∫èÂàóÁöÑÊú´Â∞æÁöÑÊúÄÂ∞èÂÄº ÔºåÂ¶ÇÊûúËøô‰∏™ÊúÄÂ∞èÂÄºÂ∞è‰∫é $a_i$ ÔºåËØ¥Êòé $a_i$ ÂèØ‰ª•Êé•Âà∞Á¨¨‰∏Ä‰∏™Â∫èÂàóÂâçÈù¢ÔºåÈÇ£‰πàËøô‰∏™Êó∂ÂÄôÁ¨¨‰∫å‰∏™Â∫èÂàóÁöÑÊú´Â∞æ‰∏∫ $a_{i-1}$ ÔºåÊòæÁÑ∂ÂèàÊúâËΩ¨ÁßªÔºö dp_{i,j}=min(dp_{i,j},a_{i-1}) \ \ \ (a_i>dp_{i-1,i-j})ÂºÄÂßãÁöÑÊó∂ÂÄôÊàë‰ª¨Â∞Ü $dp$ Êï∞ÁªÑËµãÊàêÊûÅÂ§ßÂÄºÔºåÁÑ∂ÂêéÊúÄÂêéÂà§Êñ≠‰∏Ä‰∏ã $dp_{n,n/2}$ Ëøô‰∏™Áä∂ÊÄÅÂèòÂ∞èÊ≤°ÊúâÂ∞±Â•Ω„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=2e3+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int a[N],f[N][N];int solve() &#123; int n;IN(n); memset(f,0x3f,sizeof(f)); for(int i=1;i&lt;=n;++i) IN(a[i]); a[0]=f[0][0]=-1; for(int i=1;i&lt;=n;++i) &#123; f[i][0]=a[i]; for(int j=1;j&lt;=i&amp;&amp;j&lt;=n/2;++j) &#123; if(a[i]&gt;a[i-1]) f[i][j]=min(f[i][j],f[i-1][j-1]); if(a[i]&gt;f[i-1][i-j]) f[i][j]=min(f[i][j],a[i-1]); &#125; &#125;return f[n][n/2]&lt;0x3f3f3f3f;&#125;int main() &#123; int T;IN(T); while(T--) puts(solve()?"Yes!":"No!"); return 0;&#125; ÊÑüËßâËøôÈÅìÈ¢òÁöÑÁ°ÆÂæàÁªï‚Ä¶‚Ä¶=„ÄÇ=]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HEOI2013]SAO ÁªÑÂêàÊï∞Â≠¶+Ê†ëÂΩ¢DP luoguP4099]]></title>
    <url>%2F2019%2F05%2F06%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4099%2F</url>
    <content type="text"><![CDATA[$loj$ ‰∏äÊ≤°ÊúâÊ≠§È¢òÔºå$bzoj$ ‰∏äÊòØÊùÉÈôêÈ¢òÔºåÂØπ‰∫é‰∏ç‰∏ä $yzoj$ ÁöÑÊàëÊù•ËØ¥Âè™ËÉΩÂéªÊ¥õË∞∑ÂÅöÈ¢ò‰∫ÜÔºöËΩ¨ÈÄÅÈó®üòÑ „ÄÇ Êàë‰ª¨ÂÖà‰∏çËÄÉËôëËæπÁöÑÊùÉÂÄº(&lt;‰∏é&gt;)ÔºåËøôÊ†∑Â≠ê $n-1$ Êù°ËæπÁªÑÊàêÁöÑÂ∞±ÊòØÊ†ë‰∫ÜÔºåÂæàÊòæÁÑ∂ÊòØÈúÄË¶ÅÊàë‰ª¨Ê±ÇÂá∫ËøôÊ£µÊ†ëÁöÑÂêàÊ≥ïÊãìÊâëÂ∫èÁöÑ‰∏™Êï∞ÔºåËÄÉËôë‰ΩøÁî® $\rm{DP}$ ÔºåÂØπ‰∫éËæπÁöÑÊñπÂêë(Âç≥&lt;,&gt;) ÔºåÊàë‰ª¨ÂàÜÁ±ªËÆ®ËÆ∫Âç≥ÂèØ„ÄÇ È¶ñÂÖàÁöÑ‰∏Ä‰∏™ÊÉ≥Ê≥ïÂ∞±ÊòØËÆæ $f_u$ Ë°®Á§∫ÁÇπ $u$ ÁöÑÂ≠êÊ†ëÁöÑÂêàÊ≥ïÊãìÊâëÂ∫èÁöÑÊÄªÊï∞Ôºå‰ΩÜÊòØËøô‰∏™Êó∂ÂÄôÂ¶Ç‰ΩïËÆ°ÁÆóÂë¢ÔºåÂØπ‰∫é‰∏Ä‰∏™ $u$ ÁöÑÂÑøÂ≠ê $v$ ÔºåÊàë‰ª¨ËôΩÁÑ∂Áü•ÈÅì $u$ Âíå $v$ ÁöÑÊîªÂÖãÁöÑÂâçÂêéÂÖ≥Á≥ªÔºå‰ΩÜÊòØÂêàÂπ∂Á≠îÊ°àË≤å‰ººÂπ∂‰∏çÂ•ΩÂêàÂπ∂„ÄÇËøô‰∏™Êó∂ÂÄôÊàë‰ª¨Â¢ûÂä†‰∏ÄÁª¥ $j$ Ôºå$f_{u,j}$ Ë°®Á§∫ $u$ ÁöÑÂ≠êÊ†ëÁöÑÊâÄÊúâÂêàÊ≥ïÊãìÊâëÂ∫è‰∏≠ $u$ Âú®Á¨¨ $j$ ‰Ωç‰∏äÁöÑÊÄªÁä∂ÊÄÅÊï∞„ÄÇ ‰πüÂ∞±ÊòØËØ¥ÔºåÂØπ‰∫é‰∏Ä‰∏™ÂøÖÈ°ªÂú® $u$ ÂâçÈù¢ÊîªÂÖãÁöÑÂÖ≥Âç° $v$ ÔºåÊàë‰ª¨ËÄÉËôëÊûö‰∏æ‰∏Ä‰∏™ $j$ Ôºå$v$ Â≠êÊ†ë‰∏≠ $j$ ‰∏™ÁªìÁÇπÂú®ÂêàÂπ∂ $u,v$ ÂêéÊîæÂà∞ $u$ ÂâçÈù¢ÔºåÂè¶Â§ñ $sz_v-j$ ‰∏™ÊîæÂà∞ $u$ ÂêéÈù¢ÔºåÁÑ∂ÂêéÊûö‰∏æ‰∏Ä‰∏™ $k$ ÔºåË°®Á§∫ÂΩìÂâçÁöÑ $v$ ÊéíÂú® $v$ Â≠êÊ†ëÁöÑÊãìÊâëÂ∫è‰∏≠ÁöÑÁ¨¨ $k$ ‰ΩçÔºåÂè™Êúâ $k\leq j$ ÁöÑÊó∂ÂÄô $v$ ÊâçÂèØ‰ª•ËΩ¨Áßª $u$ ÔºåÂõ†‰∏∫Ëøô‰∏™Êó∂ÂÄô $v$ Âú® $u$ ÂâçÈù¢„ÄÇ Áé∞Âú®ÂÜçÊù•ËÄÉËôë$‚Äú$ $j$ ‰∏™ÁªìÁÇπÊîæÂú® $u$ ÂâçÈù¢ $‚Äù$ ÁöÑÊñπÊ°àÊï∞Âíå$‚Äú$ $sz_v-j$ ‰∏™ÁªìÁÇπÊîæÂú® $u$ ÂêéÈù¢ÁöÑÊñπÊ°àÊï∞$‚Äù$ÔºåËøô‰∏™ÊòæÁÑ∂ÂèØ‰ª•Áî®ÁªÑÂêàÊï∞ÁÆóÔºåÂêàÂπ∂ $v$ ÁöÑÂ≠êÊ†ëÂêéÔºå$u$ ÁöÑÊéíÂêç‰ªé $i$ ÂèòÊàê‰∫Ü $i+j$ Ôºå‰πüÂ∞±ÊòØËØ¥Êàë‰ª¨ÈúÄË¶ÅÂ∞Ü $j$ ‰∏™‰π±Â∫èÊèíÂÖ•Âà∞ $u$ ÂâçÈù¢ $i+j-1$ ‰∏™Êï∞‰∏≠ÔºåÊñπÊ°àÊï∞ÊòæÁÑ∂‰∏∫ $C_{i+j-1}^{j}$ ÔºåÈÇ£‰πàÁé∞Âú®ÊÄªËäÇÁÇπÊï∞ÊòæÁÑ∂‰∏∫ $sz_u+sz_v$ (Áé∞Âú® $sz_u$ Âíå $sz_v$ ËøòÊ≤°ÊúâÂπ∂Âú®‰∏ÄËµ∑) Ôºå$u$ ÂêéÈù¢ÁêÜÊâÄÂΩìÁÑ∂Êúâ $sz_u+sz_v-i-j$ ‰∏™‰ΩçÁΩÆÔºåÂ∞Ü $sz_v-j$ ‰∏™Êï∞ÊèíËøõÂéªÁöÑÊñπÊ°àÊï∞ÊòæÁÑ∂‰∏∫ $C_{sz_u+sz_v-i-j}^{sz_v-j}$ ‰∏™ÔºåËøô‰∏§‰∏™Êï∞ÂÜç‰πò‰∏ä $f_{u,i}$ Âíå $f_{v,k}$ Â∞±Â•Ω‰∫ÜÔºåËøô‰∏ÄÊ¨°ÂêàÂπ∂Âêé $u$ ÁöÑ‰ΩçÁΩÆÊòæÁÑ∂Âà∞‰∫Ü $i+j$ ÔºåÊâÄ‰ª• $f_{u,i+j}$ ÊòæÁÑ∂Ë¶ÅÂä†‰∏äËøô‰∏ÄÁªÑË¥°ÁåÆ„ÄÇ ÁªèÊï¥ÁêÜÂêéÁöÑËΩ¨ÁßªÊñπÁ®ãÂ¶Ç‰∏ãÔºö pls(f_{u,i+j},f_{u,i}\cdot f_{v,k}\cdot C_{i+j-1}^{j}\cdot C_{sz_u+sz_v-i-j}^{sz_v-j})‰ª£Á†ÅÂ∞±ÊòØËøôÊ†∑ÂÜôÔºö 1234for i=1 to sz[u] for j=1 to sz[v] for k=1 to j pls(f[u][i+j],f[u][i]*f[v][k]*C[i+j-1][j]*C[sz[u]+sz[v]-i-j][sz[v]-j]) ËøôÊòØ $n^3$ ÁöÑÔºåËøá‰∏çÂéª„ÄÇËÄÉËôëÂâçÁºÄÂíå‰ºòÂåñÔºåÂá†‰∏ã $f_v$ ÁöÑÂâçÁºÄÂíåÔºåÊúÄÂêéÁöÑ‰∏ÄÂ±ÇÂæ™ÁéØÂ∞±ÂèØ‰ª•Áõ¥Êé•‰∏¢Êéâ‰∫Ü„ÄÇ Ëøô‰∏™Â∞±ÊòØ $v$ Ë¶ÅÂú® $u$ ÂâçÈù¢ÁöÑÊÉÖÂÜµÔºå$u$ Âú® $v$ ÂâçÈù¢ÁöÑÊÉÖÂÜµÂíåËøô‰∏™Â∑Æ‰∏çÂ§öÔºå‰∏çËøáËΩ¨ÁßªÁöÑÊó∂ÂÄô $j$ Â∞±Ë¶Å‰ªé $0$ ÂºÄÂßã‰∫ÜÔºåÂõ†‰∏∫ÈÇ£‰∏™Êó∂ÂÄô $u$ ÂâçÈù¢ÊòØÂèØ‰ª•‰∏çÂ§öÊîæ‰ªª‰Ωï‰∏úË•øÁöÑÔºåËøòÊúâÂ∞±ÊòØ $u$ Âú® $v$ ÂâçÈù¢ÁöÑÊó∂ÂÄôÊ≥®ÊÑè $k\geq j$ Êó∂ÊâçÂèØ‰ª•ËΩ¨Áßª ! ÊúÄÂêéÁöÑÁ≠îÊ°àÂ∞±ÊòØ $\sum\limits_{i=1}^{n} f_{1,i}$ Âï¶„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e3+9;const int mod=1e9+7;int head[N],cnt;struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;1];int C[N][N],f[N][N],pre[N][N],suf[N][N],sz[N],g[N];void add(int u,int v,int w) &#123; G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,w^1&#125;,head[v]=cnt;&#125;namespace OI &#123; void pls(int&amp;x,int y) &#123;x+=y;if(x&gt;=mod)x-=mod;&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI;void dfs(int u,int fa) &#123; sz[u]=f[u][1]=1; for(int l=head[u];l;l=G[l].nxt) &#123; int v=G[l].to,w=G[l].val; if(v==fa) continue; dfs(v,u); memset(g,0,sizeof(g)); if(w) &#123; for(int i=1;i&lt;=sz[u];++i) for(int j=1;j&lt;=sz[v];++j) pls(g[i+j],1ll*f[u][i]*pre[v][j]%mod*C[i+j-1][j]%mod *C[sz[u]+sz[v]-i-j][sz[v]-j]%mod); &#125; else &#123; for(int i=1;i&lt;=sz[u];++i) for(int j=0;j&lt;=sz[v];++j) pls(g[i+j],1ll*f[u][i]*suf[v][j+1]%mod*C[i+j-1][j]%mod *C[sz[u]+sz[v]-i-j][sz[v]-j]%mod); &#125; sz[u]+=sz[v]; memcpy(f[u],g,sizeof(g)); &#125; pre[u][0]=suf[u][sz[u]+1]=0; for(int i=1;i&lt;=sz[u];++i) pre[u][i]=(pre[u][i-1]+f[u][i])%mod; for(int i=sz[u];i&gt;=1;--i) suf[u][i]=(suf[u][i+1]+f[u][i])%mod;&#125;int solve() &#123; memset(head,0,sizeof(head)),cnt=0; memset(f,0,sizeof(f)); int n;IN(n); for(int i=1;i&lt;n;++i) &#123; int u,v;char sign; IN(u),sign=getchar(),IN(v); add(u+1,v+1,sign=='&lt;'?0:1); &#125; dfs(1,0); int ans=0; for(int i=1;i&lt;=n;++i) pls(ans,f[1][i]); return ans;&#125;int main() &#123; /*È¢ÑÂ§ÑÁêÜÁªÑÂêàÊï∞*/ for(int i=0;i&lt;=N-2;++i) C[i][0]=1; for(int i=1;i&lt;=N-2;++i) for(int j=1;j&lt;=N-2;++j) C[i][j]=(C[i-1][j]+C[i-1][j-1])%mod; int T;IN(T); while(T--) printf("%d\n",solve()); return 0;&#125; ÂèØËÉΩÊúâ‰∫∫‰ºöÈóÆÔºåÂ¶ÇÊûú $u$ ÁöÑÂÑøÂ≠ê $v$ ‰∏ãÈù¢ÁöÑËæπÂÖ®ÈÉΩÊòØ $&gt;$ ÔºåÂπ∂‰∏î $u$ ËøûÂêë $v$ ÁöÑËæπ‰πüÊòØ $&gt;$ ÔºåÈÇ£‰πàËøô‰∏™Êó∂ÂÄô $v$ ‰ª•ÂèäÂÖ∂Â≠êÊ†ëÁöÑÊâÄÊúâÁÇπÈÉΩÂøÖÈ°ªÂú® $u$ ÂâçÈù¢ÂÆåÊàêÔºåÂú®ËΩ¨ÁßªÁöÑÊó∂ÂÄô‰∏∫‰ªÄ‰πàÂèØ‰ª• $‚Äú$ ÊèêÂá∫ $j$ ‰∏™ÁªìÁÇπÊîæÂà∞ $u$ ÂâçÈù¢ $‚Äù$ Âë¢Ôºü ÂÖ∂ÂÆûÊÉ≥ÊÉ≥Â∞±ÂèØ‰ª•ÊòéÁôΩÔºåÂú®Âêë‰∏äÁªüËÆ°Á≠îÊ°àÁöÑÊó∂ÂÄôÂØπ‰∫é‰∏Ä‰∏™ $v$ ÁöÑÂÑøÂ≠ê $a$ ÔºåÊàë‰ª¨Âè™ÁªüËÆ°‰∫ÜÂêàÂπ∂Âêé $a$ Âú® $v$ ÂâçÈù¢ÁöÑÊÉÖÂÜµÔºåÂêåÊ†∑Âú® $u$ ÁªüËÆ° $v$ Êó∂‰πüÂè™ÊòØÁªüËÆ°‰∫ÜÂêàÂπ∂Âêé $v$ Âú® $u$ ÂâçÈù¢ÁöÑÊÉÖÂÜµÔºåÊâÄÊúâÊàë‰ª¨‰πüÂè™ÊòØÁªüËÆ°‰∫Ü $‚Äú$ $a$ Âú® $v$ ÂâçÈù¢‰∏î $v$ Âú® $u$ ÂâçÈù¢ $‚Äù$ ÁöÑÊÉÖÂÜµÔºåÊâÄÊúâË¢´ÁªüËÆ°ÁöÑÊÉÖÂÜµ‰∏ÄÂÆöÊòØÂêàÊ≥ïÁöÑ„ÄÇ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>ÁªÑÂêàÊï∞Â≠¶</tag>
        <tag>Ê†ëÂΩ¢DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [ÂÖ≠ÁúÅËÅîËÄÉ2017]ÂàÜÊâãÊòØÁ•ùÊÑø Ê¶ÇÁéáDP loj2145]]></title>
    <url>%2F2019%2F05%2F05%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2145%2F</url>
    <content type="text"><![CDATA[Ê¶ÇÁéáÁ•û‰ªôÈ¢òÁöÑ‰º†ÈÄÅÈó®ÔºöÂà´Êà≥ÂÅè‰∫Ü ËÆæ $f_i$ Ë°®Á§∫ËøòÂâ©‰∏ã $i$ ÁõèÁÅØ‰∫ÆÂà∞ËøòÂâ©‰∏ã $i-1$ ÁõèÁÅØ‰∫ÆÁöÑÊúüÊúõÊìç‰ΩúÊ¨°Êï∞ÔºåËøô‰∏™Êó∂ÂÄôÊúâ $\frac{i}{n}$ ÁöÑÊ¶ÇÁéáÊåâ‰∏≠‰∫ÆÁöÑÔºå‰ΩÜÊòØÊ≤°ÊúâÊåâ‰∏≠‰∫ÆÁöÑÁöÑËØùÂ∞±Âè™ËÉΩÈÄÄÂà∞ $f_{i+1}$ „ÄÇ‰∏çÈöæÂàóÂá∫ËΩ¨ÁßªÊñπÁ®ãÔºö f_i=\frac{i}{n}+(1-\frac{i}{n})\cdot (1+f_i+f_{i+1})Âõ†‰∏∫ËΩ¨ÁßªÂºè‰∏≠Êúâ‰∏™ $f_i$ ÔºåÊúâ‰∫õ‰∏çÂ•ΩÂäû‚Ä¶‚Ä¶Êé®‰∏ÄÊé®ÂºèÂ≠êÂ∫∑Â∫∑„ÄÇ f_i=\frac{i}{n}+1\cdot (1+f_i+f_{i+1})-\frac{i}{n}\cdot (1+f_i+f_{i+1})\\\\f_i=\frac{i}{n}+1+f_i+f_{i+1}-\frac{i}{n}-\frac{i}{n}f_i-\frac{i}{n}f_{i+1}\\\\f_i=1+f_i+f_{i+1}-\frac{i}{n}f_i-\frac{i}{n}f_{i+1}\\\\\frac{i}{n}f_i=1+f_{i+1}-\frac{i}{n}f_{i+1}\\\\f_i=\frac{1+f_{i+1}-\frac{i}{n}f_{i+1}}{\frac{i}{n}}\\\\f_i=\frac{n\cdot(1+f_{i+1})-i\cdot f_{i+1}}{i}\\\\f_i=\frac{n+(n-i)\cdot f_{i+1}}{i}\\\\f_i=1+\frac{(n-i)\cdot (f_{i+1}+1)}{i}È¢ÑÂ§ÑÁêÜÈÄÜÂÖÉÂ∞±ÂèØ‰ª•Áõ¥Êé•ËÆ°ÁÆó‰∫ÜÔºåËÆ∞ÂæóÊúÄÂêé‰πò‰∏ä $n!$ „ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e5+7;const int inf=1e9+9;const int p=100003;int n,k,step,a[N];long long ans,f[N],inv[N];vector&lt;int&gt; g[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int main() &#123; IN(n),IN(k); inv[0]=0,inv[1]=1; for(int i=2;i&lt;=n;++i) inv[i]=(long long)(p-p/i)*inv[p%i]%p; for(int i=1;i&lt;=n;++i) IN(a[i]); for(int i=1;i&lt;=n;++i) for(int j=i;j&lt;=n;j+=i) g[j].push_back(i); for(int i=n;i&gt;=1;--i) if(a[i]) &#123; for(int j=0;j&lt;g[i].size();++j) a[g[i][j]]^=1; ++step; &#125; if(step&lt;=k) ans=step; else &#123; f[n]=1; for(int i=n-1;i&gt;1;--i) f[i]=(1ll+(1ll*n-i)*(f[i+1]+1)*inv[i])%p; for(int i=step;i&gt;k;--i) ans=(ans+f[i])%p; ans=(ans+k)%p; &#125; for(int i=1;i&lt;=n;++i) ans=(1ll*i*ans)%p; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>Ê¶ÇÁéá</tag>
        <tag>ÊúüÊúõ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HAOI2018]ËãπÊûúÊ†ë ÁªÑÂêàÊï∞Â≠¶ loj2526]]></title>
    <url>%2F2019%2F05%2F05%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2526%2F</url>
    <content type="text"><![CDATA[ÊúâË∂£ÁöÑÈ¢òÁõÆÔºåÂèØÁà±ÁöÑ‰º†ÈÄÅÈó®ÔºöÊà≥ËøôÂë¢=Ôø£œâÔø£= ÂàöÂºÄÂßãÂæÄÊ¶ÇÁéá $\rm{DP}$ ÊÉ≥‰∫ÜÔºåÂèëÁé∞ÂØπ‰∫é‰∏Ä‰∏™ÁÇπÁöÑÊ¶ÇÁéáÊòØÂ•ΩÁÆóÔºå‰ΩÜÊòØÂ¶ÇÊûúÊ±ÇË¥°ÁåÆÁöÑËØùÂ∞±‰ºöÂæàÈöæÂäû„ÄÇÊúÄÂêé‰∏áËà¨Êó†ËµñÁöÑÁÇπÂºÄ‰∫ÜÈ¢òËß£ÔºåÂèëÁé∞Â±ÖÁÑ∂ÊòØ‚Ä¶‚Ä¶ÁªÑÂêàÊï∞Â≠¶ÔºüÂÖ∂ÂÆûÂíå $\rm{DP}$ Ê≤°ÊúâÂçäÊØõÈí±ÂÖ≥Á≥ª„ÄÇ Êàë‰ª¨ËÄÉËôë‰∏Ä‰∏™ËäÇÁÇπ $i$ ÔºåÊàë‰ª¨Êûö‰∏æÂÖ∂Â≠êÊ†ëÂ§ßÂ∞è $j$ „ÄÇÁé∞Âú®ËÄÉËôëÊúÄÁªàÊúâÂ§öÂ∞ëÁßçÂêàÊ≥ïÁöÑÊÉÖÂÜµÂèØ‰ª•‰ΩøÂæó $i$ ÁöÑÂ≠êÊ†ëÂ§ßÂ∞èÊÅ∞Â•Ω‰∏∫ $j$ „ÄÇ ÊòìÁü•ËäÇÁÇπÊï∞‰∏∫ $n$ ÁöÑ‰∫åÂèâÊ†ëÁöÑÊÄªÂΩ¢ÊÄÅÊï∞‰∏∫ $n!$ ÔºåËÄå‰∏î $i$ Â≠êÊ†ë‰∏ãÁöÑÊâÄÊúâËäÇÁÇπÁöÑÁºñÂè∑‰∏ÄÂÆöË¶ÅÂ§ß‰∫é $i$ ÔºåÊàë‰ª¨ËÄÉËôë‚ÄùÂÖàÂ∞Ü $i$ Â≠êÊ†ëÊûÑÈÄ†Âá∫Êù•ÂÜçÂ°´ÂÖ•ËäÇÁÇπ‚ÄùÁöÑËøáÁ®ãÔºåÂ≠êÊ†ëÁöÑÂΩ¢ÊÄÅÊï∞ÊòæÁÑ∂‰∏∫ $j!$ ÔºåÁÑ∂ÂêéÊàë‰ª¨Âè™ËÉΩÈÄâÂâ©‰∏ãÁöÑ $n-i$ ‰∏™ËäÇÁÇπ(ÁºñÂè∑Ë¶ÅÊØî $i$ Â§ß) ÔºåÂ°´ÂÖ•Ââ©‰∏ãÁöÑ $j-1$ ‰∏™‰ΩçÁΩÆ( $i$ Âç†‰∫Ü‰∏Ä‰∏™‰ΩçÁΩÆ) ÔºåÊòæÁÑ∂ËøôÊ†∑ÁöÑÊñπÊ°àÊï∞‰∏∫ $C_{n-i}^{j-1}$ „ÄÇ ËøôÊ†∑ÁöÑ‰∏Ä‰∏™ $i$ ÔºåÂÖ∂Â≠êÊ†ëÂ§ßÂ∞è‰∏∫ $j$ ÔºåÈÇ£‰πàÂÆÉÂèØ‰ª•ÂÅöÂá∫Â§öÂ∞ëË¥°ÁåÆÂë¢ÔºüËÄÉËôë $fa_i \Rightarrow i$ ËøôÊù°Ëæπ‰ºöÁªèËøáÂ§öÂ∞ëÊ¨°ÔºåÊòæÁÑ∂ÊòØ $j\cdot(n-j)$ Ê¨°( $j$ ‰∏∫Â≠êÊ†ëËäÇÁÇπ‰∏™Êï∞Ôºå$n-j$ ‰∏∫‰∏äÈù¢ÁöÑËäÇÁÇπ‰∏™Êï∞) Ôºå‰πüÂ∞±ÊòØËØ¥ËøôÊ†∑ÁöÑÊñπÊ°àÂèØ‰ª•ÈÄ†Êàê $j\cdot (n-j)$ ÁöÑË¥°ÁåÆ„ÄÇ ÈÇ£‰πàÁé∞Âú® $i$ ÁöÑÂ≠êÊ†ëÂæóÂà∞Á°ÆÂÆö‰∫ÜÔºåÊàë‰ª¨Â∞Ü $i$ ‰ª•ÂèäÂÖ∂Â≠êÊ†ëÁúãÂÅö‰∏Ä‰∏™ÁÇπÔºåÊàë‰ª¨ËÄÉËôë $1$ Âà∞ $i$ Ëøô‰∫õËäÇÁÇπÔºåÂÆÉ‰ª¨ÂèØ‰ª•‰ª•‰ªªÊÑèÂΩ¢ÊÄÅÁªÑÊàê‰∏ÄÊ£µÊ†ëÔºåÊñπÊ°àÊï∞ÊòØ $i!$ „ÄÇ Êé•ÁùÄÊàë‰ª¨ÈúÄË¶ÅÂ∞ÜÂâ©‰∏ãÁöÑ $n-j-(i-1)$ ‰∏™ËäÇÁÇπÊåÇÂà∞Ê†ë‰∏äÂéª„ÄÇÂØπ‰∫éÁ¨¨ $i$ ‰∏™ÊåÇÂà∞Ê†ë‰∏äÁöÑÁÇπÔºåÂÆÉÊúâ $i$ ‰∏™‰ΩçÁΩÆÂèØ‰ª•ÊåÇ„ÄÇ‰ΩÜÊòØÂõ†‰∏∫ $i$ ‰∏ÄÂÆöË¶ÅÂç†‰∏Ä‰∏™‰ΩçÁΩÆÔºåÊâÄ‰ª•Ëøô‰∏™ËäÇÁÇπÂè™Êúâ $i-1$ ‰∏™‰ΩçÁΩÆÂèØ‰ª•ÊåÇ‰∫ÜÔºåÁ¨¨‰∫å‰∏™Â§öÂá∫Êù•ÁöÑËäÇÁÇπÂ∞±Êúâ $i$ ‰∏™‰ΩçÁΩÆÂèØ‰ª•ÊåÇ‚Ä¶‚Ä¶Á¨¨ $k$ ‰∏™ÊòæÁÑ∂Êúâ $i-2+k$ ‰∏™‰ΩçÁΩÆÂèØ‰ª•ÊåÇ„ÄÇ‰πüÂ∞±ÊòØËØ¥Ëøô‰∫õÁÇπÊåÇ‰∏äÂéªÁöÑÊÄªÊñπÊ°àÊï∞‰∏∫ $\prod\limits_{k=1}^{n-j-(i-1)} (i-2+k)$ „ÄÇ Â∞Ü‰∏äÈù¢ÁöÑ‰πòËµ∑Êù•Â∞±ÊòØËøô‰∏ÄÁªÑ $i,j$ ÂØπÁ≠îÊ°àÈÄ†ÊàêÁöÑË¥°ÁåÆ‰∫ÜÔºö j!\cdot C_{n-i}^{j-1}\cdot j\cdot (n-j)\cdot i!\cdot\prod\limits_{k=1}^{n-j-(i-1)} (i-2+k)$\prod\limits_{k=1}^{n-j-(i-1)} (i-2+k)$ ÊØîËæÉ‰∏çÂ•ΩËÆ°ÁÆóÔºå‰ΩÜÊòØÁÆÄÂçïÁöÑÂèòÂåñÂêéÂèëÁé∞Ëøô‰∏™ÊòØÂíå $(n-j-1)!/(i-2)!$ Á≠â‰ª∑ÁöÑÔºåÊàë‰ª¨Â∏¶ËøõÂéüÂºèÂ≠ê„ÄÇ j!\cdot C_{n-i}^{j-1}\cdot j\cdot (n-j)\cdot i!\cdot(n-j-1)!/(i-2)!\\\\=j!\cdot C_{n-i}^{j-1}\cdot j\cdot (n-j)\cdot i\cdot (i-1)\cdot(n-j-1)!\\\\=j!\cdot C_{n-i}^{j-1}\cdot j\cdot i\cdot (i-1)\cdot (n-j)!ËøôÊ†∑Â∞±ÂæàÂ•ΩÁÆó‰∫ÜÔºåÊàë‰ª¨È¢ÑÂ§ÑÁêÜÁªÑÂêàÊï∞ÂíåÈò∂‰πòÔºå‰∏äÈù¢ÁöÑÂºèÂ≠ê $O(1)$ ÁÆó~ ‰ª£Á†ÅÂæàÁü≠„ÄÇ CodeÔºö1234567891011121314151617181920212223242526272829303132333435363738#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=2e3+2;const int inf=1e9+9;int n,p,ans,fac[N],C[N][N];namespace OI &#123; void pls(int&amp;x,int y) &#123;x+=y;x%=p;&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI;int main() &#123; IN(n),IN(p); fac[1]=1; for(int i=2;i&lt;=n;++i) fac[i]=1ll*fac[i-1]*i%p; for(int i=0;i&lt;=n;++i) C[i][0]=1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=i;++j) C[i][j]=(C[i-1][j]+C[i-1][j-1])%p; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n-i+1;++j) pls(ans,(ll)fac[j]*fac[n-j]%p*C[n-i][j-1]%p*(i*(i-1))%p*j%p); printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁªÑÂêàÊï∞Â≠¶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SCOI2014]Êñπ‰ºØ‰ºØÁöÑÁéâÁ±≥Áî∞ Ê†ëÁä∂Êï∞ÁªÑ‰ºòÂåñDP luoguP3287]]></title>
    <url>%2F2019%2F05%2F04%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3287%2F</url>
    <content type="text"><![CDATA[‰ª•Âêé‰∏çË¶ÅË¢´ËøôÁßçÂÇªÈÄºÈ¢òÁªôËíôÈ™ó‰∫Ü„ÄÇ‰º†ÈÄÅÈó®ÔºöÊñπ‰ºØ‰ºØÁöÑ‰º†ÈÄÅÈó®=„ÄÇ= È¶ñÂÖàË¶ÅÊòéÁ°Æ‰∏Ä‰∏™ÈÅìÁêÜÔºåÊØè‰∏ÄÊ¨°ÊãîÈ´òÁöÑÂè≥Á´ØÁÇπ‰∏ÄÂÆöÊòØ $n$ ÔºåÂ¶ÇÊûúÊòØÂè™ÊãîÈ´ò‰∏≠Èó¥ÈÉ®ÂàÜÔºåÂè≥ËæπÁöÑÂèàË¶ÅÂ∞ΩÂèØËÉΩÂ§ß‰∫é‰∏≠Èó¥ÈÉ®ÂàÜÔºåÁ¥¢ÊÄß‰∏ÄËµ∑Êãî‰∫ÜÔºåËøô‰∏ÄÂÆöÊòØÊúÄ‰ºòÁöÑ„ÄÇ ËÆæ $f_{i,j}$ Ë°®Á§∫Á¨¨ $i$ ‰∏™ÁéâÁ±≥Ë¢´ÊãîÈ´ò‰∫Ü $j$ Ê¨°Êó∂‰ª• $i$ ÁªìÂ∞æÁöÑÊúÄÈïø‰∏ç‰∏ãÈôçÂ≠êÂ∫èÂàóÈïøÂ∫¶ÔºåÂÆπÊòìÂæóÂá∫ËΩ¨ÁßªÊñπÁ®ãÔºö f_{i,j}=\max\{f_{k,l}+1\} \ \ (k]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>Ê†ëÁä∂Êï∞ÁªÑ</tag>
        <tag>‰∫åÁª¥Ê†ëÁä∂Êï∞ÁªÑ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SHOI2014]Ê¶ÇÁéáÂÖÖÁîµÂô® Ê¶ÇÁéáDP loj2192]]></title>
    <url>%2F2019%2F05%2F02%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2192%2F</url>
    <content type="text"><![CDATA[‰º†ÈÄÅÈó®Âú®ËøôÔºöÊàëÊòØ‰º†ÈÄÅÈó®$QwQ$ ÂÖ∂ÂÆû‰∏çÈöæÂèëÁé∞ÔºåÊàë‰ª¨ÈúÄË¶ÅÁÆóÁöÑÂ∞±ÊòØ $\sum a_i$ (ÂÖ∂‰∏≠ $a_i$ ‰∏∫ÁÇπ $i$ ÁöÑÈÄöÁîµÊ¶ÇÁéá) „ÄÇÊàë‰ª¨ÈúÄË¶ÅÁÆóÂá∫ÊØè‰∏™ÁÇπÁöÑÈÄöÁîµÊ¶ÇÁéáÂç≥ÂèØ„ÄÇÂõ†‰∏∫Êúâ‰∫õÁÇπÂèØ‰ª•Ëá™Â∑±ÂèëÁîµÔºåÊâÄ‰ª•Êàë‰ª¨Ë¶ÅÂàÜÂà´ËÄÉËôëÁà∂‰∫≤ÂíåÂÑøÂ≠êÁöÑÈÄöÁîµÊÉÖÂÜµ„ÄÇ Âõ†‰∏∫Áõ¥Êé•ËÆæÈÄöÁîµÊ¶ÇÁéáÊúâ‰∫õÊ£òÊâãÔºåÊàë‰ª¨ËÆæ $f_i$ Ë°®Á§∫ÁÇπ $i$ ÁöÑÂÑøÂ≠êÊ≤°ÊúâÂêëÁÇπ $i$ ÈÄöÁîµÁöÑÊ¶ÇÁéáÔºåËøô‰∏™ÊØîËæÉÂ•ΩÁÆóÔºåÊàë‰ª¨È°∫Â∏¶ÁÆó‰∏äÁÇπ $i$ Ëá™Â∑±ÂèëÁîµÁöÑÊ¶ÇÁéá„ÄÇ Êûö‰∏æÊØè‰∏Ä‰∏™ÂÑøÂ≠êÔºåÂØπ‰∫éËøô‰∏™ÂÑøÂ≠êÂè™Êúâ‰∏§ÁßçÊÉÖÂÜµÔºöËØ•ÂÑøÂ≠êÊ≤°ÊúâÈÄö‰∏äÁîµÔºåËØ•ÂÑøÂ≠êÈÄö‰∏äÁîµ‰∫Ü‰∏î‰º†ÈÄÅÂ§±Ë¥•„ÄÇ‰∏§ÁßçÊÉÖÂÜµÁöÑÊ¶ÇÁéáÈÉΩÂæàÂ•ΩÁÆó„ÄÇÊàë‰ª¨ÂèØ‰ª•ÂàóÂá∫ËΩ¨ÁßªÊñπÁ®ãÔºö f_u=(1-q_u)\cdot \prod (f_v+(1-f_v)\cdot(1-G_i.p))ÂÖ∂‰∏≠ $(1-q_u)$ ÊòæÁÑ∂‰∏∫ËØ•ÁÇπÊú¨Ë∫´‰∏çÈÄöÁîµÁöÑÊ¶ÇÁéáÔºåÁÑ∂ÂêéÊûö‰∏æÂÑøÂ≠ê $v$ Ôºå$f_v$ Â∞±ÊòØËØ•ÂÑøÂ≠êÊú¨Êù•Â∞±Ê≤°ÊúâÈÄö‰∏äÁîµÁöÑÊ¶ÇÁéáÔºå$(1-f_v)\cdot(1-G_i.p)$ Â∞±ÊòØÈÄö‰∏äÁîµÁöÑ‰º†ÈÄÅÂ§±Ë¥•(Ê≥®Ôºö$G_i.p$ ÊòØÂΩìÂâçËøûÊé• $u,v$ ÁöÑËæπÁöÑÈÄöÁîµÊ¶ÇÁéá) „ÄÇ ÈÇ£‰πàÂ¶Ç‰ΩïËÆ°ÁÆóÁà∂‰∫≤‰º†Êù•ÁöÑÁîµÂë¢ÔºüËÆæ $g_i$ Ë°®Á§∫ÁÇπ $i$ ÁöÑÁà∂‰∫≤Ê≤°ÊúâÂêëÁÇπ $i$ ÈÄöÁîµÁöÑÊ¶ÇÁéá„ÄÇËÆ°ÁÆó‰∏Ä‰∏ãÁà∂ËäÇÁÇπ‰∏çÈÄöÁîµÁöÑÊ¶ÇÁéáÔºåÊ≥®ÊÑè‰∏çË¶ÅËÆ°ÁÆó‰∏äËØ•ÂÑøÂ≠êÁöÑË¥°ÁåÆÔºå‰∏çÁÑ∂‰ºö‰π±„ÄÇËÆ°ÁÆóÂÆå‰∏çÈÄöÁîµÁöÑÊ¶ÇÁéáÂêéÂàÜ‰∏äÈù¢‰∏§ÁßçÊÉÖÂÜµËÆ®ËÆ∫Âç≥ÂèØ„ÄÇ res=g_u\cdot f_v / (f_v+(1-f_v)\cdot(1-G_i.p))\\\\g_v=res+(1-res)\cdot(1-G_i.p)‰∏§Ëæπ $dfs$ Â∞±ÂèØ‰ª•ÊêûÂÆö„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=5e5+7;const int inf=1e9+9;double ans,f[N],g[N],q[N];int head[N],cnt,n,tot;struct Edge&#123;int nxt,to;double p;&#125;G[N&lt;&lt;1];void add(int x,int y,double p) &#123;G[++cnt]=(Edge)&#123;head[x],y,p&#125;,head[x]=cnt;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;void dfs1(int u,int fa) &#123; f[u]=1-q[u]; for(int i=head[u],v;i;i=G[i].nxt) if((v=G[i].to)!=fa) dfs1(v,u),f[u]*=(f[v]+(1-f[v])*(1-G[i].p));&#125;void dfs2(int u,int fa) &#123; for(int i=head[u],v;i;i=G[i].nxt) if((v=G[i].to)!=fa) &#123; double res=g[u]*f[u]/(f[v]+(1-f[v])*(1-G[i].p)); g[v]=res+(1-res)*(1-G[i].p);dfs2(v,u); &#125;&#125;int main() &#123; IN(n); for(int i=1;i&lt;n;++i) &#123; int x,y,p;IN(x),IN(y),IN(p); add(x,y,p/100.0),add(y,x,p/100.0); &#125; for(int i=1,x;i&lt;=n;++i) IN(x),q[i]=x/100.0; dfs1(1,1); g[1]=1.0,dfs2(1,1); for(int i=1;i&lt;=n;++i) ans+=1-f[i]*g[i]; printf("%.6f\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>Ê¶ÇÁéá</tag>
        <tag>ÊúüÊúõ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2015]ÂØøÂè∏ÊôöÂÆ¥ Áä∂ÂéãDP loj2131]]></title>
    <url>%2F2019%2F05%2F01%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2131%2F</url>
    <content type="text"><![CDATA[È¶ñÂÖàÔºå‰∏§‰∏™Êï∞‰∏ç‰∫íË¥®ÂêåÁêÜ‰∫é‰∏§‰∏™Êï∞ÁöÑË¥®Âõ†Â≠êÈõÜÂêàÊ≤°Êúâ‰∫§ÈõÜ„ÄÇËÄÉËôë‰∏Ä‰∏ã $n\leq 30$ ÁöÑÊÉÖÂÜµÔºåÂèØ‰ª•ÂèëÁé∞ËøôÈáåÈù¢ÁöÑË¥®Êï∞‰πüÂè™Êúâ $10$ ‰∏™ÔºåÈÇ£‰πàÊàë‰ª¨Â∞ÜÊØè‰∏Ä‰∏™ÂØøÂè∏ÂàÜËß£Ë¥®Âõ†Êï∞ÔºåÁÑ∂ÂêéÂ∞ÜË¥®Âõ†Â≠êÂéãÊàê‰∏Ä‰∏™Áä∂ÊÄÅ„ÄÇ ËÆæ $f[s1][s2]$ Ë°®Á§∫Â∞è $\rm{G}$ ÂêÉ‰∫ÜÁöÑÂØøÂè∏ÁöÑÁä∂ÊÄÅ‰∏∫ $s1$ ÔºåÂ∞è $\rm{W}$ ÂêÉ‰∫ÜÁöÑÂØøÂè∏ÁöÑÁä∂ÊÄÅ‰∏∫ $s2$ Êó∂ÁöÑÊñπÊ°àÊï∞„ÄÇËΩ¨ÁßªÁöÑÊó∂ÂÄôÊûö‰∏æÂØøÂè∏ÔºåÂàÜÂà´Âà§Êñ≠‰∏§‰∏™‰∫∫ÊòØÂê¶ËÉΩÂêÉÁÑ∂ÂêéËΩ¨ÁßªÂç≥ÂèØ„ÄÇ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e2+2;const int mul=1024;const int pri[]=&#123;0,2,3,5,7,11,13,17,19,23,29&#125;;int n,s[N];ll p,f[2][mul][mul];namespace OI &#123; void pls(ll&amp;x,ll&amp;y) &#123;x+=y;if(x&gt;p)x-=p;&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI;int main() &#123; // freopen("1.in","r",stdin); // freopen("1.out","w",stdout); IN(n),IN(p); for(int i=2;i&lt;=n;++i) for(int j=1;j&lt;=10;++j) if(!(i%pri[j])) s[i]|=1&lt;&lt;(j-1); f[1][0][0]=1; for(int i=2;i&lt;=n;++i) &#123; int now=i&amp;1,lst=!now; memcpy(f[now],f[lst],sizeof(f[lst])); for(int s1=0;s1&lt;mul;++s1)for(int s2=0;s2&lt;mul;++s2) &#123; if(!f[lst][s1][s2]) continue; if(!(s2&amp;s[i])) pls(f[now][s1|s[i]][s2],f[lst][s1][s2]); if(!(s1&amp;s[i])) pls(f[now][s1][s2|s[i]],f[lst][s1][s2]); &#125; &#125; long long ans=0; for(int s1=0;s1&lt;mul;++s1) for(int s2=0;s2&lt;mul;++s2) pls(ans,f[n&amp;1][s1][s2]); printf("%lld\n",ans); return 0;&#125; ÂèØ‰ª•Áü•ÈÅì $n\leq 500$ ÁöÑÊó∂ÂÄôÔºåÊØè‰∏Ä‰∏™Êï∞ÊúÄÂ§öÂ∏¶‰∏ä‰∏Ä‰∏™Â§ß‰∫éÁ≠â‰∫é $23$ ÁöÑË¥®Âõ†Â≠ê„ÄÇÊàë‰ª¨È¶ñÂÖàÂ∞ÜÊâÄÊúâÁöÑÂØøÂè∏ÂàÜ‰∏∫‰∏§Á±ªÔºöÂ∏¶‰∫ÜÂ§ß‰∫éÁ≠â‰∫é $23$ ÁöÑË¥®Âõ†Â≠êÁöÑÂíåÊ≤°Â∏¶ÁöÑ„ÄÇ Ê≤°Â∏¶ÁöÑÊòæÁÑ∂ÂèØ‰ª•Âêë‰∏äÈù¢ÈÇ£Ê†∑ËΩ¨Áßª„ÄÇÈÇ£‰πàÂ∏¶‰∫ÜÁöÑÂë¢ÔºüËøô‰∏™ÊòæÁÑ∂‰∏çËÉΩÂéãÁº©Âêß„ÄÇ Êàë‰ª¨ËÄÉËôëÂ∞ÜÂ∏¶‰∫ÜÂêåÊ†∑ÁöÑÂ§ß‰∫éÁ≠â‰∫é $23$ ÁöÑË¥®Âõ†Â≠êÁöÑÂàÜÊàê‰∏ÄÁªÑÔºåËøô‰∏ÄÁªÑË¶Å‰∏çÂ∞è $\rm{G}$ ÂêÉÂ∞è $\rm{W}$ ‰∏çÂêÉÔºåË¶Å‰∏çÂ∞è $\rm{W}$ ÂêÉÂ∞è $G$ ‰∏çÂêÉ„ÄÇÂàÜÂà´ËÆ®ËÆ∫Âç≥ÂèØ„ÄÇ ËÆæ $f1[s1][s2]$ Ë°®Á§∫Ëøô‰∏ÄÁªÑÊòØÂ∞è $\rm{G}$ ÂêÉÊó∂ÔºåÂ∞è $\rm{G}$ ÂêÉ‰∫ÜÁöÑÂØøÂè∏ÁöÑÁä∂ÊÄÅ‰∏∫ $s1$ Ôºå Â∞è $\rm{W}$ ÂêÉ‰∫ÜÁöÑÂØøÂè∏ÁöÑÁä∂ÊÄÅ‰∏∫ $s2$ Êó∂ÁöÑÊñπÊ°àÊï∞„ÄÇÂêåÁêÜÔºåËÆæ $f2[s1][s2]$ Ë°®Á§∫Ëøô‰∏ÄÁªÑÊòØÂ∞è $\rm{W}$ ÂêÉÊó∂ÔºåÂ∞è $\rm{G}$ ÂêÉ‰∫ÜÁöÑÂØøÂè∏ÁöÑÁä∂ÊÄÅ‰∏∫ $s1$ Ôºå Â∞è $\rm{W}$ ÂêÉ‰∫ÜÁöÑÂØøÂè∏ÁöÑÁä∂ÊÄÅ‰∏∫ $s2$ Êó∂ÁöÑÊñπÊ°àÊï∞„ÄÇÂàÜÂà´ËΩ¨ÁßªÂ∞±Â•Ω‰∫Ü„ÄÇ 12345678910111213141516for(int i=pos+1;i&lt;=n;++i) &#123; /*Êûö‰∏æËøô‰∫õÂØøÂè∏*/ if(a[i].t!=a[i-1].t) /*Â§ßË¥®Âõ†Â≠ê‰∏çÂêå‰∫Ü*/ memcpy(f1,f,sizeof(f)),memcpy(f2,f,sizeof(f)); for(int s1=M-1;~s1;--s1)for(int s2=M-1;~s2;--s2) &#123; /*ÂÄíÁùÄÊûö‰∏æÊâÄ‰ª•Ê≤°Áî®ÊªöÂä®Êï∞ÁªÑ*/ /*ÊâÄË∞ìÁöÑÂàÜÂà´ËΩ¨Áßª*/ if(!(s2&amp;a[i].s)) pls(f1[s1|a[i].s][s2],f1[s1][s2]); if(!(s1&amp;a[i].s)) pls(f2[s1][s2|a[i].s],f2[s1][s2]); &#125; /*Ëøô‰∏ÄÁªÑÁªìÊùü‰∫ÜÔºåÈúÄË¶ÅÂêàÂπ∂Á≠îÊ°à*/ if(a[i].t!=a[i+1].t||i==n) for(int s1=0;s1&lt;M;++s1)for(int s2=0;s2&lt;M;++s2) /*Âõ†‰∏∫f1[s1][s2]Âíåf2[s1][s2]ÈÉΩÈáçÂ§çÁÆó‰∫Ü‰∏ÄÈÅçÂéüÊù•ÁöÑ f[s1][s2]ÔºåÊâÄ‰ª•ÂáèÊéâÂêéÂÜçÂèñËÜú*/ f[s1][s2]=(f1[s1][s2]+f2[s1][s2]-f[s1][s2]+p)%p;&#125; Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=5e2+2;const int M=256;const int pri[]=&#123;0,2,3,5,7,11,13,17,19&#125;;ll p,f[M][M],f1[M][M],f2[M][M];struct Node &#123;int t,s;&#125;a[N];bool cmp(Node a,Node b) &#123;return a.t&lt;b.t;&#125;namespace OI &#123; void pls(ll&amp;x,ll&amp;y) &#123;x+=y;if(x&gt;=p)x%=p;&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI;int main() &#123; int n;IN(n),IN(p); for(int i=2;i&lt;=n;++i) &#123; a[i].t=i; for(int j=1;j&lt;=8;++j)if(!(i%pri[j])) &#123; a[i].s|=1&lt;&lt;(j-1),a[i].t/=pri[j]; while(!(a[i].t%pri[j])) a[i].t/=pri[j]; &#125; &#125; f[0][0]=1; sort(a+2,a+n+1,cmp); int pos=2; while(a[pos].t==1) ++pos;--pos; for(int i=2;i&lt;=pos;++i) &#123; for(int s1=M-1;~s1;--s1)for(int s2=M-1;~s2;--s2) &#123; if(!(s2&amp;a[i].s)) pls(f[s1|a[i].s][s2],f[s1][s2]); if(!(s1&amp;a[i].s)) pls(f[s1][s2|a[i].s],f[s1][s2]); &#125; &#125; for(int i=pos+1;i&lt;=n;++i) &#123; if(a[i].t!=a[i-1].t) memcpy(f1,f,sizeof(f)),memcpy(f2,f,sizeof(f)); for(int s1=M-1;~s1;--s1)for(int s2=M-1;~s2;--s2) &#123; if(!(s2&amp;a[i].s)) pls(f1[s1|a[i].s][s2],f1[s1][s2]); if(!(s1&amp;a[i].s)) pls(f2[s1][s2|a[i].s],f2[s1][s2]); &#125; if(a[i].t!=a[i+1].t||i==n) for(int s1=0;s1&lt;M;++s1)for(int s2=0;s2&lt;M;++s2) f[s1][s2]=(f1[s1][s2]+f2[s1][s2]-f[s1][s2]+p)%p; &#125; long long ans=0; for(int s1=0;s1&lt;M;++s1) for(int s2=0;s2&lt;M;++s2) pls(ans,f[s1][s2]); printf("%lld\n",(ans+p)%p); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>Áä∂ÊÄÅÂéãÁº©</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [JSOI2016]ÁÅØÂ°î ÂÜ≥Á≠ñÂçïË∞ÉÊÄß&DP loj2074]]></title>
    <url>%2F2019%2F04%2F30%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2047%2F</url>
    <content type="text"><![CDATA[ÂÖ∂ÂÆûËøôÈÅìÈ¢òÊòØ $\rm{POI}$ ÁöÑÂéüÈ¢òÔºå$loj$ ‰º†ÈÄÅÈó®ÈìæÊé•ÔºöÂú®ËøôÂë¢o(Ôø£Ô∏∂Ôø£)o ÂàöÂºÄÂßãËÇØÂÆöËøòÊòØÁúã‰∏çÂá∫ËøôÈ¢òÊòØ‰ªÄ‰πà $\rm{DP}$ ÔºåÊÑüËßâÂæàËØ°ÂºÇÔºå‰ΩÜÊòØÊé®‰∏ÄÊé®Ëá™ÁÑ∂Â∞±Âá∫Êù•‰∫ÜÔºö h_j \leq h_i+p-\sqrt{|i‚àíj|}\\\\p\geq h_j-h_i +\sqrt{|i‚àíj|}\\\\p=\max\{ h_j-h_i +\sqrt{|i‚àíj|}\}ËÆæ $f_i$ Ë°®Á§∫ $i$ ÁöÑ $p$ ÂÄºÔºåÈÇ£‰πàÁªßÁª≠Ôºö f_i=\max\{ h_j +\sqrt{|i‚àíj|}\}-h_iÂèëÁé∞ÁªùÂØπÂÄºÂæàÁÉ¶‰∫∫ÔºåÂ∞ÜÁªùÂØπÂÄºÊãÜÂºÄ„ÄÇ f_i=\max(\max\limits_{j=1}^{i}\{h_j +\sqrt{i‚àíj}\},\max\limits_{j=i}^{n}\{h_j +\sqrt{j-i}\})-h_iÂéüÂ∫èÂàóÁøªËΩ¨‰∏Ä‰∏ãÂ∞±ÂèØ‰ª•Áõ¥Êé•ËÆ°ÁÆóÂêéÈù¢ÁöÑÂºèÂ≠êÔºå‰πüÂ∞±ÊòØËØ¥Êàë‰ª¨Âè™ÈúÄË¶ÅËÄÉËôëÁ¨¨‰∏Ä‰∏™Ôºö f_i=\max\limits_{j=1}^{i}\{h_j +\sqrt{i‚àíj}\}-h_iÂÅáËÆæÂØπ‰∫é $i$ Êù•ËØ¥ $j$ ÊòØÊúÄ‰ºòÁöÑÂÜ≥Á≠ñÔºåÈÇ£‰πàÂ¶ÇÊûúÂ≠òÂú®‰∏Ä‰∏™Â∞è‰∫é $j$ ÁöÑ $k$ ÔºåÊòØÂê¶Âú®ËΩ¨Áßª‰∏Ä‰∏™Â§ß‰∫é $i$ ÁöÑ $l$ ‰ºöÊõ¥‰ºòÂë¢ÔºüÊòæÁÑ∂‰∏ç‰ºöÔºåÂèØ‰ª•Áü•ÈÅì $i-k$ ÊòæÁÑ∂ÊòØÂ§ß‰∫é $i-j$ ÁöÑÔºåËÄå‰∏îÊ†πÂè∑ÊòØÂ¢ûÈïøÁöÑË∂äÊù•Ë∂äÊÖ¢ÁöÑ„ÄÇÊâÄ‰ª•Â¶ÇÊûúÂú® $i$ Êó∂ $k$ Â∞±Ê≤°Êúâ $j$ ‰ºò‰∫ÜÔºåÈÇ£‰πàÂú®‰ª•ÂêéÊâÄ‰ª•Â§ß‰∫é $i$ ÁöÑ $l$ ËΩ¨ÁßªÊó∂ $k$ ‰πü‰∏çÂèØËÉΩÊØî $j$ ‰ºò„ÄÇ ‰πüÂ∞±ÊòØËØ¥‰∏äÈù¢ÁöÑÂºèÂ≠êÊª°Ë∂≥ÂÜ≥Á≠ñÂçïË∞ÉÊÄßÔºåÈÇ£‰πàÊàë‰ª¨ÂèØ‰ª• $O(n\log n)$ ÊÑâÂø´Ê±ÇÂá∫‰∫Ü„ÄÇ ËøôÈáåËØ¥Êòé‰∏§‰∏™ÊñπÊ≥ïÔºö 1. ÂçïË∞ÉÈòüÂàóÁª¥Êä§‰∏âÂÖÉÁªÑÔºå‰∏âÂÖÉÁªÑÂåÖÂê´ $v$ (ÂÜ≥Á≠ñÁÇπ $v$) Ôºå$l$ (ÂÜ≥Á≠ñÁÇπ $v$ ‰Ωú‰∏∫ÊúÄ‰ºòÂÜ≥Á≠ñÁÇπÁöÑÊúÄÂ∑¶Á´ØÁÇπ) Ôºå$r$ (ÂÜ≥Á≠ñÁÇπ $v$ ‰Ωú‰∏∫ÊúÄ‰ºòÂÜ≥Á≠ñÁÇπÁöÑÊúÄÂè≥Á´ØÁÇπ) ÔºåÊØè‰∏ÄÊ¨°ÊéíÈô§ÊéâÊúÄÂè≥Á´ØÁÇπÂ∞è‰∫é $i$ ÁöÑÂÖÉÁ¥†(Âõ†‰∏∫ËØ•ÂÖÉÁ¥†Â∑≤ÁªèÊ≤°Áî®‰∫Ü) ÔºåÊèíÂÖ•ÈòüÂàóÁöÑÊó∂ÂÄôÂéªÊéâÂÆåÂÖ®Âä£‰∫é $i$ ÁöÑÔºåÁÑ∂ÂêéÂØπ‰∫éÊäò‰∏≠ÁöÑ‰∫åÂàÜÂç≥ÂèØ„ÄÇ(ÂÖ∑‰ΩìÂèÇËßÅËØó‰∫∫Â∞è $\rm{G}$ ÁöÑÈ¢òËß£) „ÄÇ 2. ÂàÜÊ≤ªËÆ°ÁÆóÁ≠îÊ°à„ÄÇËÆæ $slove(al,ar,vl,vr)$ Ë°®Á§∫Âú®ÂéüÊï∞ÁªÑ $al$ Âà∞ $ar$ ËøôÊÆµÂå∫Èó¥ÁöÑÊúÄ‰ºòÂÜ≥Á≠ñÁÇπ‰Ωç‰∫é $vl$ Âà∞ $vr$ Âå∫Èó¥„ÄÇÊàë‰ª¨ÊØè‰∏ÄÊ¨°ÊâæÂà∞ $al$ Âà∞ $ar$ ÁöÑ‰∏≠Èó¥ÁÇπÔºå‰πüÂ∞±ÊòØ $mid$ ÔºåÁÑ∂ÂêéÂú® $vl$ Âà∞ $vr$ ÂØªÊâæÊúÄ‰ºòÁöÑÂÜ≥Á≠ñÁÇπÊõ¥Êñ∞ $f_{mid}$ ( $\rm{DP}$ Êï∞ÁªÑ)ÔºåËÆæËøô‰∏™ÊúÄ‰ºòÁÇπ‰∏∫ $g$ „ÄÇÂõ†‰∏∫Êª°Ë∂≥ÂÜ≥Á≠ñÂçïË∞ÉÊÄßÔºå$al$ Âà∞ $mid-1$ ÁöÑÊâÄÊúâÁÇπÁöÑÊúÄ‰ºòÂÜ≥Á≠ñÁÇπ‰∏ÄÂÆöÂú® $vl$ Âà∞ $g$ ‰πãÈó¥ÔºåÂè≥Ëæπ $mid+1$ Âà∞ $ar$ ÁöÑ‰πüÂêåÁêÜÔºåÂ∞±Ëøô‰πàÂàÜÊ≤ª‰∏ãÂéªÂç≥ÂèØ„ÄÇ ÂÆûÈôÖËøêÁî®‰∏≠ÂàÜÊ≤ªÁöÑÊïàÁéá‰∏çÂ¶Ç‰∏âÂÖÉÁªÑÔºå‰ΩÜÊòØ‰ª£Á†ÅÂç¥Â•ΩÂÜôÂæóÂ§öÔºåÂæàÁü≠ÔºåÂπ∂‰∏îË∞ÉËØïÈöæÂ∫¶‰πüÂ§ßÂ§ßÈôç‰ΩéÔºåÊâÄ‰ª•ÊúÄÁªàÊàëÈÄâÊã©‰∫ÜÂàÜÊ≤ª‚Ä¶‚Ä¶ÂàÜÊ≤ªÁöÑÂÖ∑‰ΩìÁªÜËäÇÁúã‰ª£Á†Å„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;cmath&gt;#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=6e5+2;const int inf=1e9+9;int n;ll a[N];long double f1[N],f2[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;void solve_f1(int al,int ar,int vl,int vr) &#123; if(al&gt;ar) return; int mid=(al+ar)&gt;&gt;1,g=0; f1[mid]=a[mid]; for(int i=vl;i&lt;=min(vr,mid);++i) &#123; long double calc=a[i]+sqrt(double(mid-i)); if(calc&gt;f1[mid]) f1[mid]=calc,g=i; &#125; if(!g) g=mid;f1[mid]-=a[mid]; solve_f1(al,mid-1,vl,g),solve_f1(mid+1,ar,g,vr);&#125;void solve_f2(int al,int ar,int vl,int vr) &#123; if(al&gt;ar) return; int mid=(al+ar)&gt;&gt;1,g=0; f2[mid]=a[mid]; for(int i=vr;i&gt;=max(vl,mid);--i) &#123; long double calc=a[i]+sqrt(double(i-mid)); if(calc&gt;f2[mid]) f2[mid]=calc,g=i; &#125; if(!g) g=mid;f2[mid]-=a[mid]; solve_f2(al,mid-1,vl,g),solve_f2(mid+1,ar,g,vr);&#125;int main() &#123; IN(n); for(int i=1;i&lt;=n;++i) IN(a[i]); solve_f1(1,n,1,n),solve_f2(1,n,1,n); /*ÊúÄÁªàÊ≤°ÊúâÁøªËΩ¨Â∫èÂàóÔºåËÄåÊòØÈÄâÊã©ÂÅö‰∏§ÈÅçÂàÜÊ≤ª*/ for(int i=1;i&lt;=n;++i) printf("%lld\n",(ll)ceil(max(f1[i],f2[i]))); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>ÂÜ≥Á≠ñÂçïË∞ÉÊÄß</tag>
        <tag>ÂàÜÊ≤ª</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2016]ÂõΩÁéãÈ•ÆÊ∞¥ËÆ∞ ÊñúÁéá‰ºòÂåñDP loj2087]]></title>
    <url>%2F2019%2F04%2F29%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2087%2F</url>
    <content type="text"><![CDATA[ÂèØÁà±ÁöÑÈ¢òÁõÆ‰º†ÈÄÅÈó®ÔºöÊà≥ÊàëÊà≥Êàë¬∑(‚ïπ‚ñΩ‚ïπ)¬∑ ËØ¥ÂÆûËØùËøôÈÅìÈ¢òÂ¶ÇÊûúÂçïÁúãÊñúÁéá‰ºòÂåñ $\texttt{DP}$ Ôºå‰ΩÜÊòØÂ¶ÇÊûúÊ≤°ÁåúÂà∞ÈÇ£‰πàÂ§öÁªìËÆ∫Ôºå‰Ω†ÊòØÊÄé‰πà‰πüÊÉ≥‰∏çÂà∞‚ÄùÊñúÁéá‰ºòÂåñ‚ÄùÊòØ‰ªéÂì™ÈáåÊù•ÁöÑ„ÄÇÈÇ£‰πàÊàë‰ª¨ÂºÄÂßãÁåúÁªìËÆ∫Âêß‚Ä¶‚Ä¶ 1. ÂàùÂßãÊ∞¥‰ΩçÂ∞è‰∫é $h_1$ ÁöÑÊ≤°ÊúâÁî®„ÄÇ ËøôÂæàÊòæÁÑ∂„ÄÇ 2. Â¶ÇÊûú $n\leq k$ ÔºåÈÇ£‰πàÂè™ÈúÄË¶ÅÂ∞ÜÊâÄ‰ª•Â§ß‰∫é $h_1$ ÁöÑË∑ü $1$ ÂüéÂ∏ÇËøûÂ∞±Â•Ω‰∫Ü„ÄÇ ÊØèÊ¨°ËøûÊé•ÁöÑÂüéÂ∏ÇÊï∞Ë∂äÂ∞ëË¥°ÁåÆË∂äÂ§ßÔºåÈÇ£‰πàÊØè‰∏™ÈÄê‰∏ÄËøû‰∏ÄÊ¨°‰∏ÄÂÆöÊòØÊúÄ‰ºòÊñπÊ°à„ÄÇ 3. ÊØèÊ¨°Êìç‰ΩúÂøÖÁÑ∂Ë∑ü $1$ ÂüéÂ∏ÇÊúâÂÖ≥Á≥ª„ÄÇ ‰∏çÁÑ∂Ê≤°Ë¥°ÁåÆ„ÄÇ 4. Èô§‰∫Ü $1$ Âè∑ÂüéÂ∏ÇÔºåÂÖ∂‰ªñÊØè‰∏™ÂüéÂ∏ÇÊúÄÂ§öËøû‰∏ÄÊ¨°„ÄÇ Âõ†‰∏∫ËøûËøá‰∏ÄÊ¨°ÁöÑÂüéÂ∏ÇÁöÑÊ∞¥‰ΩçÂ∑≤ÁªèÂíå $1$ ÂüéÂ∏Ç‰∏ÄÊ†∑‰∫ÜÔºåÁÆÄÂçïÁÇπËØ¥ËÇØÂÆöÂ∞±ÊòØÂ∫ü‰∫Ü„ÄÇ 5. ÊØèÊ¨°ËøûÁöÑÊâÄÊúâÂüéÂ∏Ç‰∏≠ÊúÄÂ∞èÁöÑ $h_i$ ÂøÖÁÑ∂Â§ß‰∫é‰∏ä‰∏ÄÊ¨°ÈìæÊé•ÁöÑÊúÄÂ§ßÁöÑ $h_i$ „ÄÇ ËøôÂæàÊòæÁÑ∂Ôºå‰∏çÁÑ∂‰∏çÊª°Ë∂≥ÊúÄ‰ºòÊñπÊ°à„ÄÇ 6. Â∞ÜÊâÄ‰ª•ÂüéÂ∏ÇÊåâÊ∞¥‰ΩçÊéíÂ∫èÂêéÔºåÊØèÊ¨°ÈÄâÊã©ÁöÑÂøÖÁÑ∂ÊòØËøûÁª≠‰∏ÄÊÆµÂå∫Èó¥„ÄÇ Âíå‰∏ä‰∏Ä‰∏™Â∑Æ‰∏çÂ§ö„ÄÇ 7. ÊØèÊ¨°ÈÄâÊã©ÁöÑÂå∫Èó¥ÂøÖÁÑ∂Âíå‰∏ä‰∏ÄÊ¨°ÁöÑÈÄâÊã©Âå∫Èó¥Êé•Ëß¶„ÄÇ ËøôÂæàÊòæÁÑ∂„ÄÇ 8. ÊØèÊ¨°ÈÄâÊã©ÁöÑÂå∫Èó¥ÁöÑÈïøÂ∫¶ÂøÖÂÆöÂçïË∞É‰∏çÂ¢û„ÄÇ Êª°Ë∂≥ÊúÄ‰ºòÔºåÈÉΩËØ¥‰∫ÜÊØèÊ¨°ËøûÊé•ÁöÑÂüéÂ∏ÇË∂äÂ∞ëË¥°ÁåÆË∂äÂ§ß„ÄÇ ÈÇ£‰πàÊòæÁÑ∂Â∞±ÂèòÊàê‰∫Ü‰∏Ä‰∏™Âå∫Èó¥ÈóÆÈ¢ò‰∫ÜÔºåÊàë‰ª¨ÈúÄË¶ÅÂ∞ÜËøô‰∏™Âå∫Èó¥ÂàÜÊàêËã•Âπ≤Âùó„ÄÇ ËÆæ $f_{i,j}$ Ë°®Á§∫ÊéíÂ∫èÂêéÂâç $i$ ‰∏™ÂüéÂ∏ÇËÅîÈÄö‰∫Ü $j$ Ê¨°Âêé $1$ Âè∑ÂüéÂ∏ÇÁöÑÊúÄÂ§ßÊ∞¥‰ΩçÈ´òÂ∫¶„ÄÇÈÇ£‰πàËΩ¨ÁßªÁõ¥Êé•Êûö‰∏æ‰∏Ä‰∏™ $k$ ÔºåÂú®Êñ∞ÁöÑ‰∏ÄÊ¨°ËøûÊé•‰∏≠ËøûÊé•‰∫Ü $k+1$ Âà∞ $i$ Ëøô‰∫õÂüéÂ∏Ç„ÄÇËΩ¨ÁßªÊñπÁ®ãÊòæÁÑ∂Ôºö f_{i,j}=\frac{f_{k,j-1}+(s_i-s_k)}{i-k+1}*Ê≥®Ôºö$s_i$ ‰∏∫ÂâçÁºÄÂíå„ÄÇ ‰∏äÂºèÁöÑÂ§çÊùÇÂ∫¶‰∏∫ $O(n^2k)$ ÔºåËÇØÂÆöÁàÜÁÇ∏„ÄÇ‰ΩÜÊòØËøô‰∏™ÊòØÂèØ‰ª•ÊñúÁéá‰ºòÂåñÁöÑÔºö \frac{f_{k,j-1}+(s_i-s_k)}{i-k+1} =\frac{s_i-(s_k-f_{k,j-1})}{i-(k-1)}\Rightarrow \frac{Y(i)-Y(k)}{X(i)-X(k)}ÁÑ∂ÂêéÈÄöËøáÁ¨¨ $8$ Êù°ÊÄßË¥®ÂèØ‰ª•ÂæóÁü• $\texttt{DP}$ ÊòØÊúâÂÜ≥Á≠ñÂçïË∞ÉÊÄßÁöÑÔºåÊïÖÂ§çÊùÇÂ∫¶‰∏∫ $O(nk)$ „ÄÇÂõ†‰∏∫ÊÅ∂ÂøÉÁöÑÈ´òÁ≤æÂ∫¶Â∞èÊï∞ÁöÑËøêÁÆóËøòÈúÄË¶Å $O(p)$ ÁöÑÂ§çÊùÇÂ∫¶ÔºåÊâÄ‰ª•ÊúÄÁªàÊÄªÊó∂Èó¥Â§çÊùÇÂ∫¶‰∏∫ $O(nkp)$ „ÄÇ Êàë‰ª¨ÂèëÁé∞ $k$ Êúâ $10^9$ ÔºåÊâÄ‰ª•Â§çÊùÇÂ∫¶Â∏¶ $k$ ÁöÑ‰∏ÄÂÆöÂÅáÊéâ‰∫Ü„ÄÇ ÈÇ£‰πàËßÇÂØüÁ¨¨ $2$ Êù°ÊÄßË¥®‰ºöÂèëÁé∞ÔºåÂ¶ÇÊûú $k$ Â§ß‰∫é $n$ ‰∫ÜÁõ¥Êé•Â∞Ü $k$ ËÆæ‰∏∫ $n$ Â∞±Â•Ω‰∫Ü„ÄÇ‰πüÂ∞±ÊòØËØ¥Â§çÊùÇÂ∫¶Â∫îËØ•‰∏∫ $O(n^2p)$ ÔºåËøôÊ†∑Â∞±ÊòØ $86$ ÂàÜÔºåÈÄöËøáÊï∞ÊçÆÊù•Áúã‰ºöÂèëÁé∞Ëøô‰∏™ÂÄæÂêë‰∫éÂ§ß‰ºóÂàÜÔºå‰∏ÄËΩ¶Âé¢ÁöÑ‰∫∫ÈÉΩÊòØËøô‰∏™ÂàÜÊï∞„ÄÇ ÈÇ£‰πàÂ¶ÇÊûúÊÉ≥Ë¶Å $\texttt{AC}$ ÁöÑËØùÈúÄË¶ÅÊúÄÂêé‰∏ÄÊù°ÂæàËø∑ÁöÑÊÄßË¥®Ôºö 9. Âõ†‰∏∫ $h$ ÂêÑ‰∏çÂêåÔºåÈÄâÊã©ÁöÑÂå∫Èó¥ÊúÄÂ§öÂè™Êúâ $14$ ‰∏™Âå∫Èó¥ÈïøÂ∫¶Â§ß‰∫é $1$ ÔºåÂÖ∂‰ªñÁöÑÂå∫Èó¥ÂùáÁ≠â‰∫é $1$ „ÄÇ ÂæàËø∑ÔºåÂáÜÁ°ÆÁöÑËØ¥ËøôÊ†∑ÁöÑÂå∫Èó¥ÊòØ $O(\log\frac{nh}{\min_i\{h_i-h_{i-1}\}})$ ‰∏™„ÄÇ ËØÅÊòé‰∏ç‰ºö‚Ä¶‚Ä¶‰ΩÜÊòØËøôÈáåÂÜô‰∫ÜËØÅÊòé(ÂîØ‰∏ÄÁöÑ‰∏îÂæàËø∑ÁöÑËØÅÊòé)ÔºöÂìàÂìàÊàëÊòØ‰º†ÈÄÅÈó®O(‚à©_‚à©)O ÈÇ£‰πàÂ∞±‰∏¢‰ª£Á†Å‰∫ÜÔºåÂÆûÈôÖ‰∏äÊòØÈúÄË¶ÅÈ´òÁ≤æÂ∞èÊï∞ÁöÑÔºåËøôÈáåÂÖàÁªôÂá∫‰∏Ä‰∏™Èô§ÂéªÈ´òÁ≤æÂ∞èÊï∞ÊùøÂ≠êÁöÑÁâàÊú¨Ôºö 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=8e3+2;Decimal ans;int n,k,p,lim,h[N],s[N],pre[N][16],tot;int q[N],head,tail;double f[N][16];struct point&#123;double x,y;&#125;t[N];double slope(point a,point b) &#123;return (a.y-b.y)/(a.x-b.x);&#125;Decimal solve(int i,int j) &#123; if(!j) return h[1]; return (solve(pre[i][j],j-1)+s[i]-s[pre[i][j]])/(i-pre[i][j]+1);&#125;int main() &#123; scanf("%d%d%d%d",&amp;n,&amp;k,&amp;p,&amp;h[tot=1]); for(int i=2;i&lt;=n;++i) &#123; scanf("%d\n",&amp;h[i]); if(h[i]&gt;h[1]) h[++tot]=h[i]; &#125; n=tot;sort(&amp;h[1],&amp;h[n+1]); for(int i=1;i&lt;=n;++i) f[i][0]=h[1]; for(int i=1;i&lt;=n;++i) s[i]=s[i-1]+h[i]; k=min(k,n),lim=min(k,14); for(int j=1;j&lt;=lim;++j) &#123; q[head=tail=1]=1; for(int i=1;i&lt;=n;++i) t[i]=(point)&#123;i-1,s[i]-f[i][j-1]&#125;; for(int i=2;i&lt;=n;++i) &#123; point now=(point)&#123;i,s[i]&#125;; while(head&lt;tail&amp;&amp;slope(now,t[q[head]])&lt;slope(now,t[q[head+1]])) ++head; f[i][j]=(f[q[head]][j-1]+s[i]-s[q[head]])/(i-q[head]+1); pre[i][j]=q[head]; while(head&lt;tail&amp;&amp;slope(t[q[tail]],t[q[tail-1]])&gt;slope(t[q[tail]],t[i])) --tail; q[++tail]=i; &#125; &#125; int m=n-k+lim,pos; double mx=0; for(int i=0;i&lt;=lim;++i) if(f[m][i]&gt;mx) mx=f[m][i],pos=i; ans=solve(m,pos); for(int i=m+1;i&lt;=n;++i) ans=(ans+h[i])/2; cout&lt;&lt;ans.to_string(p&lt;&lt;1)&lt;&lt;endl; return 0;&#125; ÈÇ£‰πàÈ´òÁ≤æÂ∫¶Â∞èÊï∞ÊùøÂ≠êÁöÑ‰∏ãËΩΩÈìæÊé•Â∞±Ë¥¥Ëøô‰∫ÜÔºö$loj$ ÁöÑ‰∏ãËΩΩÂú∞ÂùÄ‰º†ÈÄÅ‰ª¨(ÔΩûÔø£‚ñΩÔø£)ÔΩû]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>ÊñúÁéá‰ºòÂåñ</tag>
        <tag>È¢òËß£</tag>
        <tag>ÂÜ≥Á≠ñÂçïË∞ÉÊÄß</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÁÆóÊ≥ï„Äë Â∞èË∞àÊñúÁéá‰ºòÂåñ]]></title>
    <url>%2F2019%2F04%2F28%2F%5B%E7%AE%97%E6%B3%95%5D%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[ÂÜçÊ≠§ËæìÂÖ•‰Ω†ÁöÑÂØÜÁ†Å‰ª•‰æøÈòÖËØªÂÖ®Êñá Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>DP</tag>
        <tag>ÊñúÁéá‰ºòÂåñ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HNOI2015]‰∫öÁëüÁéã Ê¶ÇÁéáDP loj2112]]></title>
    <url>%2F2019%2F04%2F28%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2112%2F</url>
    <content type="text"><![CDATA[ÂèëÁé∞ $loj$ ÁúüÁöÑÂ•ΩÁî®‚Ä¶‚Ä¶ÊØî $luogu$ ‰∏çÁü•ÈÅìÊ∏ÖÁàΩÂà∞Âì™ÈáåÂéª‰∫ÜÔºåÊõ¥‰ΩïÂÜµ $loj$ ÁöÑÈ¢òÁõÆ‰πüÊõ¥Â§öÔºåËÄå‰∏îÊèê‰æõÊï∞ÊçÆÂíå‰ª£Á†ÅÔºåÊõ¥Âä†ÂºÄÊîæ„ÄÇ‰º∞ËÆ°‰ª•ÂêéÈÉΩ‰ºöÂú® $loj$ ‰∏äÂ§öÈÄõÈÄõ„ÄÇ( $bzoj$ ÊòØÁúüÁöÑ‰∏ëÔºåÈô§ÈùûÊòØÂÅö $bzoj$ ÁöÑÂéüÂàõÈ¢ò‰∏çÁÑ∂Êàë‰∏ç‰ºö‰∏ä $bzoj$ ÁöÑ) „ÄÇ È°∫‰æøË¥¥‰∏Ä‰∏ãÈ¢òÁõÆ‰º†ÈÄÅÈó®Ôºö$loj$ÁöÑ‰º†ÈÄÅÈó®Â∞±Êà≥ÊàëÂï¶(ÔΩûÔø£‚ñΩÔø£)ÔΩû Ê¶ÇÁéá $\texttt{DP}$ ÔºåËÆæ $f_{i,j}$ Ë°®Á§∫Êâì‰∫ÜÂâç $i$ Âº†ÁâåÔºåËøòÊúâ $j$ ËΩÆÊ≤°ÊúâÊâìÂá∫ÁâåÁöÑÊ¶ÇÁéá„ÄÇÊàë‰ª¨Êûö‰∏æÁ¨¨ $i+1$ Âº†ÁâåÔºåÂàÜÂà´ËÆ®ËÆ∫‰∏Ä‰∏ãËØ•ÁâåÊâìÂá∫‰∏é‰∏çÊâìÂá∫ÁöÑÊÉÖÂÜµÂç≥ÂèØ„ÄÇ Á¨¨‰∏ÄÁßçÊÉÖÂÜµÔºö$j$ ËΩÆ‰∏≠ÈÉΩÊ≤°ÊúâÊâìÂá∫Á¨¨ $i+1$ Âº†ÁâåÔºåÁî±‰∫é‰∏ÄËΩÆ‰∏≠‰∏çÊâìÂá∫Á¨¨ $i+1$ Âº†ÁâåÁöÑÊ¶ÇÁéá‰∏∫ $1-p_i$ ÔºåÈÇ£‰πà $j$ ËΩÆÈÉΩ‰∏çÊâìÂá∫ËØ•ÁâåÁöÑÊ¶ÇÁéáÊòæÁÑ∂‰∏∫ $(1-p_i)^j$ „ÄÇËΩ¨ÁßªÊñπÁ®ãÊòæÁÑ∂Ôºö f_{i+1,j}+=f_{i,j}\cdot (1-p_i)^j‚ÄãÂõ†‰∏∫ $f_{i+1,j}$ ÂèØËÉΩ‰ªéÂ§öÊñπÂêëËΩ¨ÁßªËøáÊù•ÔºåÊâÄ‰ª•ÊòØ $+=$ „ÄÇ Á¨¨‰∫åÁßçÊÉÖÂÜµÔºö$j$ ËΩÆ‰∏≠Ëá≥Â∞ëÊúâ‰∏ÄËΩÆÊâìÂá∫‰∫ÜÁ¨¨ $i+1$ Âº†ÁâåÔºåÊ¶ÇÁéáÊòæÁÑ∂‰∏∫ $1-(1-p_i)^j$ ÔºåËΩ¨Áßª‰πüÂ∞±ÂæàÊòæÁÑ∂‰∫ÜÔºö f_{i+1,j-1}+=f_{i,j}\cdot Ôºà1-(1-p_i)^jÔºâÂ¶ÇÊûúÊàë‰ª¨ÊâìÂá∫‰∫ÜÁ¨¨ $i+1$ Âº†ÁâåÔºåÈÇ£‰πàËÇØÂÆöÊòØË¶ÅËÆ°ÁÆóË¥°ÁåÆÁöÑÔºåËøô‰∏™Êó∂ÂÄôÁõ¥Êé•Áî®Ëøô‰∏™Ê¶ÇÁéáÁÆóË¥°ÁåÆÂ∞±Â•Ω‰∫Ü„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=3e2+2;int T,n,r,d[N];double f[N][N],p[N],pw[N][N];int main() &#123; scanf("%d",&amp;T); while(T--) &#123; memset(f,0,sizeof(f)); scanf("%d%d",&amp;n,&amp;r); for(int i=1;i&lt;=n;++i) scanf("%lf%d",&amp;p[i],&amp;d[i]); for(int i=1;i&lt;=n;++i) &#123; pw[i][0]=1; for(int j=1;j&lt;=r;++j) pw[i][j]=pw[i][j-1]*(1-p[i]); &#125; f[0][r]=1; double ans=0; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;=r;++j) &#123; f[i+1][j]+=f[i][j]*pw[i+1][j]; if(j) &#123; double calc=f[i][j]*(1-pw[i+1][j]); f[i+1][j-1]+=calc,ans+=calc*d[i+1]; &#125; &#125; printf("%.10f\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>Ê¶ÇÁéá</tag>
        <tag>ÊúüÊúõ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [CEOI2017]Building Bridges ÊñúÁéá‰ºòÂåñDP loj2483]]></title>
    <url>%2F2019%2F04%2F27%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2483%2F</url>
    <content type="text"><![CDATA[ÊÑâÂø´ÁöÑÊé®ÂºèÂ≠êÂêß(Ôæâ‚âß‚àÄ‚â¶)ÔæâÔºÅ ËÆæ $f_i$ Ë°®Á§∫Ââç $i$ Ê†πÊü±Â≠êÂÆåÂ∑•ÂêéÁöÑÊúÄÂ∞è‰ª£‰ª∑„ÄÇÊûö‰∏æ‰∏Ä‰∏™Â∞è‰∫é $i$ ÁöÑ $j$ ÔºåË°®Á§∫‰∏∫‰ªé $j$ Âêë $i$ Ëøû‰∫Ü‰∏ÄÂ∫ßÊ°•Ôºå‰∏≠Èó¥ÁöÑÊü±Â≠êÂΩìÁÑ∂ÂÖ®ÈÉ®Êé®ÊéâÔºåËÆ°ÁÆó‰∏Ä‰∏ãÂ∞±Â•ΩÔºö f_i=\min\{f_j+(s_{i-1}-s_j)+(h_i-h_j)^2\}*ÂÖ∂‰∏≠ $s$ ‰∏∫ $w$ ÁöÑÂâçÁºÄÂíå„ÄÇ f_i=f_j+(s_{i-1}-s_j)+(h_i-h_j)^2\\\\f_i=f_j+s_{i-1}-s_j+h_i^2+h_j^2-2h_ih_j\\\\f_j+s_{i-1}-s_j+h_i^2+h_j^2=2h_ih_j+f_i‰∫éÊòØÊúÄÁªàÂºèÂ≠êÂèòÊàê‰∫Ü $y=kx+b$ ÁöÑÂΩ¢ÂºèÔºåÊñúÁéá‰ºòÂåñÔºÅ ‰ΩÜÊòØ‚Ä¶‚Ä¶Ê≥®ÊÑèËøô‰∏™ÂºèÂ≠êÁöÑ $k$ ‰∏çÊòØÂçïË∞ÉÈÄíÂ¢ûÁöÑÔºåÂπ∂‰∏î $x$ ‰πü‰∏çÊòØÂçïË∞ÉÈÄíÂ¢ûÁöÑÔºÅÈÇ£‰πàÊàë‰ª¨‰∏çËÉΩÁî®Êú¥Á¥†ÂÅöÊ≥ï‰∫ÜÔºå‰πü‰∏çËÉΩÁî®‰∫åÂàÜ‚Ä¶‚Ä¶ÈöæÈÅìÁî® $Splay$ Ôºü(Á†ÅÈáèÂ∑®Â§ß) „ÄÇ ‰∏çÔºåÁî® $CDQ$ ÂàÜÊ≤ª„ÄÇ ÂØπ‰∫é‰∏Ä‰∏™ $i$ ÔºåÂèØËÉΩÂèØ‰ª•ÂØπ $i$ ÂÅöÂá∫Ë¥°ÁåÆÁöÑÂè™ÊúâÊâÄÊúâÂ∞è‰∫é $i$ ÁöÑ $j$ „ÄÇ‰∏∫‰∫Ü‰øùËØÅ $x$ ÂçïË∞ÉÊàë‰ª¨ÂÖàÂ§ßÂäõÂ∞ÜÂéüÊù•ÁöÑÊï∞ÁªÑÊåâÁÖß $x$ ‰ªéÂ∞èÂà∞Â§ßÊéí‰∏™Â∫èÔºåÁÑ∂Âêé $CDQ$ ÁöÑÊó∂ÂÄôÂàÜÂ∑¶Âè≥‰∏§ËæπÔºåÂ∑¶ËæπÁöÑÊâÄÊúâÂÖÉÁ¥†Âú®ÂàùÂßãÊï∞ÁªÑÁöÑ‰ΩçÁΩÆÈÉΩÂ∞è‰∫éÂè≥ËæπÁöÑÂ∑¶Âè≥ÂÖÉÁ¥†Ôºå‰πüÂ∞±ÊòØËØ¥Êàë‰ª¨Áõ¥Êé•Áî®Â∑¶ËæπÂÖÉÁ¥†ÂØπÂè≥ËæπÂÖÉÁ¥†ÂÅöÂá∫Ë¥°ÁåÆ„ÄÇ ÂêåÊó∂ËøôÈáå‰πü‰øùËØÅ‰∫ÜÂ∑¶Âè≥‰∏§ËæπÁöÑ $x$ ‰∏ÄÂÆöÊòØÂçïË∞É‰∏äÂ¢ûÁöÑ„ÄÇ Êàë‰ª¨‰ΩøÁî®ÂçïË∞ÉÈòüÂàóÔºåÊâ´‰∏ÄÈÅçÂ∑¶ËæπÁöÑÂÖÉÁ¥†ÔºåÁïô‰∏ãËÉΩÂÅöË¥°ÁåÆÁöÑÁÇπ(‰∏ãÂá∏Â£≥‰∏äÁöÑÁÇπ)ÔºåËøôÊó∂ÂÄôÂ∑¶ËæπÁöÑÊâÄÊúâÂÖÉÁ¥†ÂèØ‰ª•‰øùËØÅ $x$ ÂíåÊñúÁéáÈÉΩÊòØÂçïË∞É‰∏äÂ¢ûÁöÑ„ÄÇ Âè≥ËæπÂë¢ÔºüÂõ†‰∏∫Áõ¥Á∫øÁöÑÊñúÁéáÊòØ $2x$ ÔºåËÄåÂè≥ËæπÁöÑ $x$ ‰πüÊòØÂçïË∞É‰∏äÂ¢ûÁöÑÔºåÊâÄ‰ª•Êàë‰ª¨ÂèØ‰ª•ÊÑâÂø´ÁöÑÂÅöÊú¥Á¥†ÁöÑÂçïË∞ÉÈòüÂàó‰∫Ü„ÄÇ $CDQ$ ÂàÜÊ≤ªÈÉ®ÂàÜÁöÑ‰ª£Á†ÅÔºö 12345678910111213141516171819202122232425262728293031323334void CDQ(int l,int r) &#123; if(l==r) &#123;/*‰∏Ä‰∏™ÁÇπÁöÑÊó∂ÂÄôÁõ¥Êé•ËÆ°ÁÆóyÂÄº*/ a[l].y=f[a[l].id]-s[a[l].id]+S(a[l].x); return; &#125; int mid=(l+r)&gt;&gt;1; for(int i=l,c1=l,c2=mid+1;i&lt;=r;++i) if(a[i].id&lt;=mid) b[c1++]=a[i]; /*ÁºñÂè∑Â∞èÁöÑÂ∑¶ËæπÂéª*/ else b[c2++]=a[i]; /*ÁºñÂè∑Â§ß‰∫õÁöÑÂè≥ËæπÂéª*/ for(int i=l;i&lt;=r;++i) a[i]=b[i]; CDQ(l,mid); /*ËÆ°ÁÆóÂá∫Â∑¶ËæπÊâÄÊúâÂÖÉÁ¥†ÁöÑ f*/ int head=1,tail=0; static int q[N]; for(int i=l;i&lt;=mid;++i) &#123; /*Â§ÑÁêÜÂá∫Â∑¶ËæπÊâÄÊúâÂÖÉÁ¥†ÁªÑÊàêÁöÑ‰∏ãÂá∏Â£≥*/ while(head&lt;tail&amp;&amp;slope(q[tail-1],q[tail])&gt;slope(q[tail],i)) --tail; q[++tail]=i; &#125; for(int i=mid+1;i&lt;=r;++i) &#123; /*ËÆ°ÁÆóÂ∑¶ËæπÂÖÉÁ¥†ÂØπÂè≥ËæπÂÖÉÁ¥†‰∫ßÁîüÁöÑË¥°ÁåÆ*/ while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&lt;2*a[i].x) ++head; /*Áª¥Êä§ÈòüÂàó*/ int x=a[i].id,y=a[q[head]].id; f[x]=min(f[x],f[y]+s[x-1]-s[y]+S(a[i].x-a[q[head]].x)); /*ÂèØËÉΩËÆ°ÁÆóÂ§öÊ¨°ÊâÄ‰ª•Ë¶ÅÂèñmin*/ &#125; CDQ(mid+1,r); for(int i=l,c1=l,c2=mid+1;i&lt;=r;++i) /*ËøòÂéüaÊï∞ÁªÑËá≥ÂàùÂßãÁä∂ÊÄÅ*/ if(c2&gt;r||(c1&lt;=mid&amp;&amp;a[c1].x&lt;a[c2].x)) b[i]=a[c1++]; else b[i]=a[c2++]; for(int i=l;i&lt;=r;++i) a[i]=b[i]; return;&#125;//mainÂáΩÊï∞‰∏≠sort(a+1,a+1+n,cmp),CDQ(1,n); /*ÊéíÂ∫èÂêéCDQÂºÄÂßã*/printf("%lld\n",f[n]); /*ËæìÂá∫*/ ÊúÄÂêéÂõ†‰∏∫Â≠òÂú® $0$ ÔºåÂú®ËÆ°ÁÆóÊñúÁéáÁöÑÊó∂ÂÄôÈúÄË¶ÅÁâπÂà§‰∏Ä‰∏ã„ÄÇËøòÈúÄË¶ÅÊ≥®ÊÑè‰∏Ä‰∏ã $long\ long$ ÁöÑÈóÆÈ¢òÔºåËÆ∞ÂæóÂ∞Ü $f$ Êï∞ÁªÑÂàùÂßãÂåñ„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const ll inf=1e18+9;struct point &#123;int x,id;ll y;&#125;a[N],b[N];ll s[N],w[N],f[N];int n;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;ll S(ll x) &#123;return x*x;&#125;bool cmp(point x,point y) &#123;return x.x&lt;y.x;&#125;double slope(int i,int j) &#123; if(a[i].x==a[j].x) &#123; return a[i].y&lt;a[j].y?inf:-inf; &#125;return double(a[i].y-a[j].y)/double(a[i].x-a[j].x);&#125;void CDQ(int l,int r) &#123; if(l==r) &#123;a[l].y=f[a[l].id]-s[a[l].id]+S(a[l].x);return;&#125; int mid=(l+r)&gt;&gt;1; for(int i=l,c1=l,c2=mid+1;i&lt;=r;++i) if(a[i].id&lt;=mid) b[c1++]=a[i]; else b[c2++]=a[i]; for(int i=l;i&lt;=r;++i) a[i]=b[i]; CDQ(l,mid); int head=1,tail=0; static int q[N]; for(int i=l;i&lt;=mid;++i) &#123; while(head&lt;tail&amp;&amp;slope(q[tail-1],q[tail])&gt;slope(q[tail],i)) --tail; q[++tail]=i; &#125; for(int i=mid+1;i&lt;=r;++i) &#123; while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&lt;2*a[i].x) ++head; int x=a[i].id,y=a[q[head]].id; f[x]=min(f[x],f[y]+s[x-1]-s[y]+S(a[i].x-a[q[head]].x)); &#125; CDQ(mid+1,r); for(int i=l,c1=l,c2=mid+1;i&lt;=r;++i) if(c2&gt;r||(c1&lt;=mid&amp;&amp;a[c1].x&lt;a[c2].x)) b[i]=a[c1++]; else b[i]=a[c2++]; for(int i=l;i&lt;=r;++i) a[i]=b[i]; return;&#125;int main() &#123; IN(n); for(int i=1;i&lt;=n;++i) IN(a[i].x),a[i].id=i,f[i]=inf; f[1]=0; for(int i=1;i&lt;=n;++i) IN(w[i]),s[i]=s[i-1]+w[i]; sort(a+1,a+1+n,cmp),CDQ(1,n); printf("%lld\n",f[n]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>ÊñúÁéá‰ºòÂåñ</tag>
        <tag>È¢òËß£</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [APIO2010]ÁâπÂà´Ë°åÂä®Èòü ÊñúÁéá‰ºòÂåñDP luoguP3628]]></title>
    <url>%2F2019%2F04%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3628%2F</url>
    <content type="text"><![CDATA[‰æùÊóßÊòØÊñúÁéá‰ºòÂåñÁöÑÂ•óË∑Ø„ÄÇ ËÆæ $f_i$ Ë°®Á§∫Ââç $i$ ‰∏™Â£´ÂÖµÁöÑÊúÄÂ§ßË¥°ÁåÆÔºåËΩ¨ÁßªÊòæÁÑ∂ÊòØÊûö‰∏æ‰∏Ä‰∏™ $j$ ÔºåÂ∞Ü $j+1$ Âà∞ $i$ Ëøô‰∫õÂ£´ÂÖµÁªÑÊàêÁâπÂà´Ë°åÂä®ÈòüÁÆóË¥°ÁåÆÔºö f_i=\max\{f_j+a(s_i-s_j)^2+b(s_i-s_j)+c\}‚ÄãÂÖ∂‰∏≠ $s_i$ ‰∏∫ÊàòÊñóÂäõÁöÑÂâçÁºÄÂíå„ÄÇËøô‰∏™ÊñπÁ®ãÊòØ $O(n^2)$ ÁöÑÔºåÈúÄË¶Å‰ºòÂåñ„ÄÇÂèëÁé∞Ëøô‰∏™ËΩ¨ÁßªÂºèË≤å‰ºº‰∏çÊª°Ë∂≥ÂçïË∞ÉÈòüÂàó‰ºòÂåñÁöÑÊù°‰ª∂Ôºå‰∫éÊòØÂ∞Ü‰∏≠Èó¥ÁöÑÂºèÂ≠êÊãÜÂºÄÁúãÁúãÂèØ‰∏çÂèØ‰ª•ÊñúÁéá‰ºòÂåñ„ÄÇ f_i=\max\{f_j+a(s_i^2+s_j^2-2s_is_j)+b\cdot s_i-b\cdot s_j+c\}\\f_i=\max\{f_j+a\cdot s_i^2+a\cdot s_j^2-2a\cdot s_is_j)+b\cdot s_i-b\cdot s_j+c\}\\f_i=f_j+a\cdot s_i^2+a\cdot s_j^2-2a\cdot s_is_j+b\cdot s_i-b\cdot s_j+c\\f_j+a\cdot s_i^2+a\cdot s_j^2+b\cdot s_i-b\cdot s_j+c=2a\cdot s_i\cdot s_j +f_i‚ÄãËØ∂ÔºåÊòØ $y=kx+b$ ÁöÑÂΩ¢ÂºèÔºåËÄå‰∏îÊª°Ë∂≥ÊñúÁéá‰ºòÂåñÁöÑÊù°‰ª∂ËØ∂„ÄÇÁªßÁª≠Â∞Ü $x,y$ ÊâæÂá∫Êù•ÊîæÂà∞ÂùêÊ†áÁ≥ª‰∏ä( $x=s_j$,$y=f_j+a\cdot s_j^2-b\cdot s_j$) „ÄÇ Âõ†‰∏∫ÊòØ $\max‚Äã$ ÔºåÊâÄ‰ª•Áî®ÂçïË∞ÉÈòüÂàóÁª¥Êä§‰∏Ä‰∏ã‰∏äÂá∏Â£≥ÁÑ∂ÂêéËΩ¨ÁßªÂç≥ÂèØÔºåÂ§çÊùÇÂ∫¶ $O(n)‚Äã$ „ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;#include &lt;iostream&gt;#define S(x) ((x)*(x))using namespace std;const int N=1e6+2;int n,a,b,c,head,tail;long long s[N],f[N],q[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;double X(int i) &#123;return s[i];&#125;double Y(int i) &#123;return f[i]+1ll*S(s[i])*a-1ll*s[i]*b;&#125;double slope(int i,int j) &#123;return (Y(j)-Y(i))/(X(j)-X(i));&#125;inline void calc(int i,int j) &#123; f[i]=f[j]+1ll*S(s[i]-s[j])*a+1ll*(s[i]-s[j])*b+c;&#125;int main() &#123; IN(n),IN(a),IN(b),IN(c); for(int i=1;i&lt;=n;++i) IN(s[i]),s[i]+=s[i-1]; for(int i=1;i&lt;=n;++i) &#123; while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&gt;2*a*s[i]) ++head; calc(i,q[head]); while(head&lt;tail&amp;&amp;slope(q[tail],i)&gt;slope(q[tail],q[tail-1])) --tail; q[++tail]=i; &#125; printf("%lld\n",f[n]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>ÊñúÁéá‰ºòÂåñ</tag>
        <tag>È¢òËß£</tag>
        <tag>ÂÜ≥Á≠ñÂçïË∞ÉÊÄß</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HNOI2008]Áé©ÂÖ∑Ë£ÖÁÆ±TOY ÊñúÁéá‰ºòÂåñDP luoguP3195]]></title>
    <url>%2F2019%2F04%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3195%2F</url>
    <content type="text"><![CDATA[Â∑Æ‰∏çÂ§öÊêûÊáÇ‰∫ÜÊñúÁéá‰ºòÂåñÂêß‚Ä¶‚Ä¶ËØ¥ÂÆûËØùÁΩë‰∏äÁöÑÊñáÁ´†ÈÉΩÂÜôÂæóÂæàËø∑ÔºåËøòÂ•ΩÊâæÂà∞‰∫Ü‰∏Ä‰∏™‰∏çÈîôÁöÑÊñáÁ´†ÔºöËΩ¨ÈÄÅÈó®Êà≥Êàë(Ôø£‚ñΩÔø£)~* „ÄÇ(‰∏∫‰ªÄ‰πàÁ™ÅÁÑ∂ÂèëÁé∞ËøôÈÅìÈ¢òÂíåËØó‰∫∫Â∞èGÂæàÂÉèÂë¢) Ëøô‰∏™ $\texttt{DP}$ ÊñπÁ®ãË∞ÅÈÉΩ‰ºöËÆæÔºöËÆæ $f_i$ Ë°®Á§∫Ââç $i$ ‰∏™Áé©ÂÖ∑ÁöÑÊúÄÂ∞èË¥πÁî®ÔºåËΩ¨ÁßªÊòæÁÑ∂Â¶Ç‰∏ãÔºö f_i=\min\limits_{j=1}^{i-1}\{f_j+(sum_i-sum_j+i-j-l)^2\}(ÂÖ∂‰∏≠ $sum$ ÊòØÂâçÁºÄÂíå)„ÄÇËøô‰∏™Â§çÊùÇÂ∫¶ÊòØ $O(n^2)$ ÁöÑÔºåËøá‰∏çÂéª‚Ä¶‚Ä¶ ÁªßÁª≠Êé®ÂºèÂ≠êÔºö f_i=\min\limits_{j=1}^{i-1}\{f_j+[(sum_i+i)-(sum_j+j)-l]^2\}ËÆæ $s_i=sum_i+i$ ÔºåÊàë‰ª¨ÂÅáËÆæ $j$ ‰∏∫ÊúÄ‰ºòÂÜ≥Á≠ñÔºåÂ∞Ü $\min$ ÂéªÊéâ„ÄÇ f_i=f_j+(s_i-s_j-l)^2\\f_i=f_j+s_i^2+(s_j+l)^2-2\cdot s_i\cdot(s_j+l)\\f_j+s_i^2+(s_j+l)^2=2\cdot s_i\cdot(s_j+l)+f_i‚Äã‰∫éÊòØ‰∏äÈù¢ÁöÑÂºèÂ≠êÂèòÊàê‰∫Ü $y=kx+b$ ÁöÑÂΩ¢ÂºèÔºåÂÖ∂‰∏≠ $y=f_j+s_i^2+(s_j+l)^2$ Ôºå$k=2\cdot s_i$ Ôºå$x=s_j+l$ Ôºå$b=f_i$ „ÄÇ ÁÑ∂ÂêéÂ∞Ü $x,y$ ‰∏§‰∏™ÂÄº‰Ωú‰∏∫ÁÇπ $(x,y)$ ÊîæÂà∞Âπ≥Èù¢‰∏äÂç≥ÂèØÔºåÂõ†‰∏∫ÊúÄÁªàÁ≠îÊ°àÊòØÂèñ $min$ ÔºåÊâÄ‰ª•Êàë‰ª¨ÈúÄË¶ÅÁª¥Êä§ÁöÑÊòØ‰∏ãÂá∏Â£≥„ÄÇÊúâ‰∏ÄÁÇπÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºåÊàë‰ª¨ÁÆóÊñúÁéáÁöÑÊó∂ÂÄôÂèØ‰ª•Â∞ÜÊØè‰∏™ÁÇπÁöÑÂ∏∏Êï∞È°πÊàñËÄÖÂè™Âíå $i$ ÊúâÂÖ≥ÁöÑÈ°πÂéªÊéâÔºåÂõ†‰∏∫ÁÆóÊñúÁéáÊòØÁõ∏ÂáèÁöÑÔºåÂáèÁöÑÊó∂ÂÄôËøô‰∫õÈ°πÂêåÊ†∑‰πüÊ≤°‰∫Ü„ÄÇ ‰∏äÈù¢ÁöÑ $x$ ‰∏≠ÁöÑ $l$ ÊòØÂ∏∏Êï∞È°π‰∫éÊòØÂèØ‰ª•ÁúÅÁï•Ôºå$y$ ‰∏≠ÁöÑ $s_i^2$ Âè™Âíå $i$ ÊúâÂÖ≥Ôºå‰∫éÊòØ‰πüÁúÅÁï•Êéâ„ÄÇ Code:1234567891011121314151617181920212223#include &lt;cstdio&gt;#include &lt;iostream&gt;#define S(x) ((x)*(x))using namespace std;const int N=1e5+2;int n,l,head,tail;long long f[N],s[N],q[N];double X(int i) &#123;return s[i];&#125;/*ÊØè‰∏™ÁÇπÁöÑxÂùêÊ†á*/double Y(int i) &#123;return f[i]+S(s[i]+l);&#125;/*ÊØè‰∏™ÁÇπÁöÑyÂùêÊ†á*/double slope(int i,int j) &#123;return (Y(j)-Y(i))/(X(j)-X(i));&#125;/*ÁÆóÊñúÁéá*/int main() &#123; scanf("%d%d",&amp;n,&amp;l); for(int i=1;i&lt;=n;++i) scanf("%lld",&amp;s[i]),s[i]+=s[i-1]; for(int i=1;i&lt;=n;++i) s[i]+=i; for(int i=1;i&lt;=n;++i) &#123; while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&lt;2*s[i]) ++head; f[i]=f[q[head]]+S(s[i]-s[q[head]]-l-1);/*ËΩ¨Áßª*/ while(head&lt;tail&amp;&amp;slope(q[tail],i)&lt;slope(q[tail],q[tail-1])) --tail; q[++tail]=i; &#125; printf("%lld\n",f[n]); return 0;&#125; ‰∏ãÈù¢Êù•Ëß£Èáä‰∏Ä‰∫õÈóÆÈ¢ò„ÄÇ 1.‰∏∫‰ªÄ‰πàË¶ÅÁª¥Êä§‰∏ãÂá∏Â£≥Âõ†‰∏∫Êàë‰ª¨ÁöÑ $\texttt{DP}$ ÊñπÁ®ãÊòØÂú®Âèñ $\min$ ÔºåÂ¶ÇÊûúÊòØ $\max$ ÁöÑËØùÂàôÁª¥Êä§‰∏äÂá∏Â£≥„ÄÇËÄå‰∏îÁª¥Êä§‰∏ãÂá∏Â£≥ÊòæÁÑ∂ÊòØËÆ© $f_i$ Êõ¥Â∞è„ÄÇ ‰ª•‰∏äÈù¢‰∏∫‰æãÔºåÊàë‰ª¨Áî® $y=kx+b‚Äã$ ÁöÑÁõ¥Á∫ø‰ªé‰∏ãÈù¢ÁΩë‰∏äÊâ´ÔºåÊ≥®ÊÑèËøôÊù°Áõ¥Á∫øÁöÑÊñúÁéáÂ∞±ÊòØ $k‚Äã$ „ÄÇÂæàÊòæÁÑ∂Â¶ÇÊûúÊàë‰ª¨‰ªé‰∏ãÂæÄ‰∏äËøôÊ†∑Êâ´Ë∂äÂæÄ‰∏äÊâ´ $b‚Äã$ Ë∂äÂ§ß(‰∏çÊòéÁôΩÁöÑÁîªÁîªÂõæ)Ôºå‰ΩÜÊòØÊàë‰ª¨ÁöÑÁõÆÁöÑÊòØ‰ΩøÂæó $b‚Äã$ ÊúÄÂ∞è( $b‚Äã$ Â∞±ÊòØ $f_i‚Äã$ ) „ÄÇ‰∏ãÂá∏Â£≥ÂåÖÂê´‰∫ÜÊúÄ‰∏ãÈù¢ÁöÑÊâÄÊúâÁÇπÔºåÊòæÁÑ∂‰∏çÊòØ‰∏ãÂá∏Â£≥‰∏äÁöÑÁÇπ‰∏ÄÂÆö‰∏çËÉΩÊàê‰∏∫ÊúÄ‰ºòÁöÑ„ÄÇ 2.Áª¥Êä§ÈòüÂàóÁöÑËøáÁ®ãÊòØ‰ªÄ‰πàÈ¨ºÊìç‰ΩúÈ¶ñÂÖàÁ¨¨‰∏Ä‰∏™ËøáÁ®ãÔºå‰πüÂ∞±ÊòØ‰∏ãÈù¢ÁöÑ‰ª£Á†ÅÔºö 1while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&lt;2*s[i]) ++head; ‰∏äÈù¢ËÆ≤‰∫ÜÊàë‰ª¨ÈúÄË¶Å‰ΩøÂæó $b‚Äã$ ÊúÄÂ∞èÔºåÈÇ£‰πàÊúÄ‰ºòÁöÑÂÜ≥Á≠ñÁÇπÂú®Áõ¥Á∫ø‰ªé‰∏ãÂæÄ‰∏äÊâ´ÁöÑËøáÁ®ã‰∏≠ËÇØÂÆöÊòØÊúÄÂÖàÊâ´Âà∞ÁöÑÔºåÂõ†‰∏∫ÈÇ£Ê†∑ÂèØ‰ª•‰øùËØÅ $f_i‚Äã$ ÊúÄÂ∞è„ÄÇÂÅáËÆæÊúÄ‰ºòÁöÑÁÇπ‰∏∫ $i‚Äã$ Ôºå‰∏ä‰∏Ä‰∏™ÁÇπ‰∏∫ $j‚Äã$ Ôºå‰∏ã‰∏Ä‰∏™ÁÇπ‰∏∫ $k‚Äã$ ÔºåÈÇ£‰πà $i‚Äã$ ‰∏ÄÂÆö‰øùËØÅ $j‚Äã$ Âà∞ $i‚Äã$ ÁöÑÊñúÁéáÂ∞è‰∫éÁõ¥Á∫øÊñúÁéáÂπ∂‰∏î $i‚Äã$ Âà∞ $k‚Äã$ ÁöÑÊñúÁéáÂ§ß‰∫éÁõ¥Á∫øÊñúÁéá„ÄÇ ÁÑ∂ÂêéÊàë‰ª¨‰ºöÂèëÁé∞ÂØπ‰∫éÂçïË∞É‰∏äÂ¢ûÁöÑÈúÄË¶ÅÊõ¥Êñ∞ÁöÑ $i‚Äã$ ÔºåÂÖ∂Áõ¥Á∫øÁöÑÊñúÁéá $k‚Äã$ ‰∏ÄÂÆöÊòØÂçïË∞É‰∏äÂ¢ûÁöÑÔºåÂõ†‰∏∫ÂâçÁºÄÂíåÊòØÂçïË∞É‰∏äÂ¢ûÁöÑ„ÄÇ ÊâÄ‰ª•ÂØπ‰∫éÊñúÁéáÂ∑≤Áªè‰∏çÊª°Ë∂≥Ë¶ÅÊ±ÇÁöÑÁÇπÁõ¥Êé•Ë∏¢Âá∫ÈòüÂ∞±Â•Ω‰∫Ü„ÄÇ ÁÑ∂ÂêéÂ∫∑Â∫∑Âá∫ÈòüÁöÑËøáÁ®ã„ÄÇÂ¶ÇÊûúÂú®Á∫∏‰∏äÁîªÁîª‰ºöÂèëÁé∞ÔºåÂ¶ÇÊûúÊª°Ë∂≥ slope(q[tail],i)&lt;slope(q[tail],q[tail-1]) ÔºåÈÇ£‰πàËØ¥Êòé $q[tail]$ Â∑≤Áªè‰∏çÂÜç‰∏ãÂá∏Â£≥‰∏≠‰∫ÜÔºÅÊ≤°ÈîôÂêßÔºüÈÇ£‰πàËøô‰∏™Êó∂ÂÄô $q[tail]$ Ê∞∏Ëøú‰πü‰∏çÂèØËÉΩÊàê‰∏∫ÊúÄ‰ºòÁöÑËΩ¨ÁßªÁÇπ‰∫ÜÔºåÁõ¥Êé•‰∏¢ÊéâÂç≥ÂèØ„ÄÇ ÊúÄÂêéÊúâ‰∏Ä‰∫õÊñúÁéá‰ºòÂåñÁöÑÂ•óË∑ØÊÄªÁªì(Ëá™Â∑±ÊÄªÁªìÂá∫Êù•ÁöÑ)Ôºö $\texttt{DP}$ ÊñπÁ®ãÂèñ $\min$ Â∞±Áª¥Êä§‰∏ãÂá∏Â£≥ÔºåÂèñ $\max$ Â∞±Áª¥Êä§‰∏äÂá∏Â£≥ $y=kx+b‚Äã$ ‰∏≠ÁöÑ $k‚Äã$ ‰∏ÄÂÆöË¶ÅÊòØÂ∏∏ÈáèÊàñËÄÖÊòØÂÆåÂÖ®ÊòØ $i‚Äã$ ÁöÑÈáè(‰æãÂ¶Ç $s_i,2\cdot g_i^2‚Äã$ Á≠â)Ôºå$b‚Äã$ ‰∏ÄÂÆöÊòØ‰Ω†ÈúÄË¶ÅËΩ¨ÁßªÁöÑÂØπË±°(Â∞±ÊòØ $f_i‚Äã$ )Ôºå$x‚Äã$ Âíå $y‚Äã$ ‰∏§‰∏™ÂÄº‰∏ÄÂÆöË¶ÅÂåÖÂê´Âíå $j‚Äã$ ÊúâÂÖ≥ÁöÑÂÄºÔºåË¶ÅÈöè $j‚Äã$ ÁöÑÂèòÂåñËÄåÂèòÂåñ„ÄÇ ÊèêÁÇºÂá∫Êù•ÁöÑ $x,y$ ÊîæÂà∞ÂùêÊ†áÁ≥ª‰∏ä‰πãÂâçËÆ∞ÂæóÂéªÊéâÊ≤°Áî®ÁöÑÂÄº„ÄÇ Â∑Æ‰∏çÂ§öÂ∞±Ëøô‰∫õÂêßÔºå‰πü‰∏çÁü•ÈÅìÊòØ‰∏çÊòØÂÆåÂÖ®Ê≠£Á°ÆÔºåËá≥Â∞ëËøô‰∏™Â•óË∑ØËøòÊòØËøá‰∫ÜÂá†ÈÅìÈ¢òÁõÆÁöÑ„ÄÇ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>ÊñúÁéá‰ºòÂåñ</tag>
        <tag>È¢òËß£</tag>
        <tag>ÂÜ≥Á≠ñÂçïË∞ÉÊÄß</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SCOI2008]Â•ñÂä±ÂÖ≥ Áä∂ÂéãDP luoguP2473]]></title>
    <url>%2F2019%2F04%2F23%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2473%2F</url>
    <content type="text"><![CDATA[ÂèëÁé∞Êï∞ÊçÆËåÉÂõ¥ÂæàÂ∞èÔºåÂπ∂‰∏îÊ∂âÂèäÂà∞‚ÄùÈõÜÂêà‚ÄùÔºåÂæàÂÆπÊòìÂèØ‰ª•ÊÉ≥Âà∞Áî®Áä∂Âéã $\texttt{DP}$ „ÄÇ ËÆæ $f[i][j]$ Ë°®Á§∫Â∑≤ÁªèÊäõÂá∫‰∫Ü $i$ Ê¨°ÂÆùÁâ©ÔºåËé∑ÂæóÁöÑÂÆùÁâ©ÈõÜÂêà‰∏∫ $j$ Êó∂ÁöÑÊúÄ‰ºòÂàÜÂÄº„ÄÇÈÇ£‰πàËΩ¨ÁßªÁöÑÊó∂ÂÄôÊûö‰∏æÊØè‰∏Ä‰∏™ÂÆùÁâ©ÔºåÂàÜ‰∏§ÁßçÊÉÖÂÜµÂç≥ÂèØ‚Äî‚ÄîÈÄâÂΩìÂâçÂÆùÁâ©ÊàñËÄÖ‰∏çÈÄâ„ÄÇÊ≥®ÊÑèÈÄâÂΩìÂâçÂÆùÁâ©ÁöÑÂâçÊèêÊòØÂøÖÈ°ªÊª°Ë∂≥ÂâçÊèêÔºåÊåâÁÖßÊúÄ‰ºòÊÉÖÂÜµÈÄâÂèñÂç≥ÂèØ„ÄÇÊ≥®ÊÑèÊúÄÂêéÂ∞ÜÊâÄÊúâÁöÑÂÆùÁâ©ÁöÑË¥°ÁåÆÂä†‰∏äÂêéËøòÈúÄË¶Å$/n$ ÔºåÂõ†‰∏∫È¢òÁõÆË¶ÅÊ±ÇÁöÑÊòØ‚ÄùÂπ≥Âùá‚Äù„ÄÇ Code:12345678910111213141516171819202122232425#include &lt;cstdio&gt;#include &lt;iostream&gt;using namespace std;double f[101][65540];int p[18],d[18],v[18],N,K;int main() &#123; for(int i=1;i&lt;=16;++i) p[i]=1&lt;&lt;(i-1); scanf("%d%d",&amp;K,&amp;N); for(int i=1;i&lt;=N;++i) &#123; int x;scanf("%d%d",&amp;v[i],&amp;x); while(x) &#123;d[i]|=p[x];scanf("%d",&amp;x);&#125; &#125; for(int i=K;i;--i) /*ÂÄíÁùÄÊûö‰∏æ‰ºöÂ•Ω‰∫õ*/ for(int j=0;j&lt;=p[N+1]-1;++j) &#123; /*‰∏äÈù¢‰∏§ÈáçÂæ™ÁéØÊûö‰∏æÁä∂ÊÄÅ*/ for(int k=1;k&lt;=N;++k)/*Êûö‰∏æÊâÄÊúâÂÆùÁâ©Âπ∂ËÆ°ÁÆóË¥°ÁåÆ*/ if((d[k]&amp;j)==d[k]) /*ÂèØ‰ª•ÈÄâÂèñÂΩìÂâçÂÆùÁâ©*/ f[i][j]+=max(f[i+1][j],f[i+1][j|p[k]]+v[k]); /*ÊåâÁÖßÊúÄ‰ºòÈÄâÂèñ*/ else f[i][j]+=f[i+1][j]; /*‰∏çËÉΩÈÄâÂèñÁõ¥Êé•ËΩ¨Áßª*/ f[i][j]/=N;/*ÊâÄË∞ì"Âπ≥Âùá"*/ &#125; printf("%.6f\n",f[1][0]);/*ÊúÄÁªàÁ≠îÊ°à*/ return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Áä∂ÂéãDP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2011]NoiÂòâÂπ¥Âçé ÂÜ≥Á≠ñÂçïË∞ÉÊÄß‰ºòÂåñDP luoguP1973]]></title>
    <url>%2F2019%2F04%2F22%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1973%2F</url>
    <content type="text"><![CDATA[ËøôÈÅìÈ¢ò‰∏ÄÂÖ±Êúâ‰∏§ÈóÆÔºåÁ¨¨‰∏ÄÈóÆÁûéÊêû $\texttt{DP}$ ÔºåÁ¨¨‰∫åÈóÆÂ¶ÇÊûúÁõ¥Êé• $\texttt{DP}$ ÁöÑËØùÂ§çÊùÇÂ∫¶ÊòØ $O(n^4)$ ÁöÑËøá‰∏çÂéªÔºåËøô‰∏™Êó∂ÂÄôÈúÄË¶ÅÁî®Âà∞ÂÜ≥Á≠ñÂçïË∞ÉÊÄß‰ºòÂåñÂ§çÊùÇÂ∫¶Â∞±ÂèØ‰ª•Èôç‰ΩéËá≥ $O(n^3)$ ÔºåËøôÊ†∑Â∞±Ëøá‰∫Ü„ÄÇÊàë‰ª¨ÂÖàÊù•ËÆ®ËÆ∫‰∏Ä‰∏ãÁ¨¨‰∏ÄÈóÆÁöÑÂÅöÊ≥ï„ÄÇ Êó∂Èó¥ÁöÑËåÉÂõ¥Â§™Â§ß‰∫ÜÔºåÊàë‰ª¨ÈúÄË¶ÅÁ¶ªÊï£Âåñ‰∏Ä‰∏ã„ÄÇÁ¶ªÊï£ÂåñÂêéÊó∂Èó¥Â∞±ÊéßÂà∂Âú® $0$ Âà∞ $2n$ ÁöÑËåÉÂõ¥ÂÜÖ‰∫Ü„ÄÇ È¶ñÂÖàÂèØ‰ª•ÂèëÁé∞ÊúÄÁªàÁöÑÁ≠îÊ°à‰∏ÄÂÆöÂ∞±ÊòØ‰∏ÄÊÆµ‰∏ÄÊÆµÊó∂Èó¥ÔºåÊØè‰∏ÄÊÆµÊó∂Èó¥ÂÜÖÁöÑÊ¥ªÂä®ÈÉΩÊòØÂú®Âêå‰∏Ä‰∏™‰ºöÂú∫‰∏æË°å„ÄÇÊàë‰ª¨ÂèØ‰ª•È¢ÑÂ§ÑÁêÜ‰∏Ä‰∏™ $tot_{l,r}$ Ë°®Á§∫ÂÆåÂÖ®Âú®Êó∂Èó¥ $l,r$ ‰πãÂÜÖÁöÑÊ¥ªÂä®ÊúâÂ§öÂ∞ë‰∏™„ÄÇËÆ°ÁÆóÁõ¥Êé•Êö¥ÂäõÔºåÈ¢ÑÂ§ÑÁêÜÁöÑÂ§çÊùÇÂ∫¶‰∏∫ $O(n^3)$ „ÄÇ ÁÑ∂ÂêéËÆæ‰∏Ä‰∏™ $pre_{i,j}‚Äã$ Ë°®Á§∫ $1‚Äã$ Âà∞ $i‚Äã$ ÁöÑÊó∂Èó¥‰∏Ä‰∏™‰ºöÂú∫ÁöÑÊ¥ªÂä®Êï∞‰∏∫ $j‚Äã$ Êó∂Âè¶‰∏Ä‰∏™‰ºöÂú∫ÁöÑÊúÄÂ§ßÊ¥ªÂä®Êï∞„ÄÇÈÇ£‰πàËΩ¨ÁßªÁöÑËØùÊàë‰ª¨Êûö‰∏æ‰∏Ä‰∏™Êó∂Èó¥ $k‚Äã$ ÔºåÁÑ∂ÂêéËÄÉËôë $k‚Äã$ Âà∞ $i‚Äã$ ËøôÊÆµÊó∂Èó¥‰∏≠ÁöÑÊâÄÊúâÊ¥ªÂä®ÂàÜÈÖçÁªôÂì™‰∏™‰ºöÂú∫Âç≥ÂèØ„ÄÇÂèØ‰ª•ÂæóÂà∞ËΩ¨ÁßªÊñπÁ®ãÔºö pre_{i,j}=\max\limits_{k=1}^{i}\{pre_{k,j}+tot_{k,i},pre_{k,j-tot_{k,i}}\}‚ÄãËøôÈáåÊàë‰ª¨ $pre$ ÊñπÁ®ãÁöÑÂÆö‰πâ‰∏≠‚Äù‰∏Ä‰∏™‰ºöÂú∫‚ÄùÂ∞±ÊòØ‰∏ÄÂè∑‰ºöÂú∫Ôºå‚ÄùÂè¶‰∏Ä‰∏™‰ºöÂú∫‚ÄùÂ∞±ÊòØ‰∫åÂè∑‰ºöÂú∫$„ÄÇpre_{k,j}+tot_{k,i}$ Â∞±ÊòØÂ∞Ü $k$ Âà∞ $i$ ËøôÊÆµÊó∂Èó¥‰∏≠ÊâÄÊúâÊ¥ªÂä®ÈÉΩÂàÜÈÖçÁªô‰∫Ü‰∫åÂè∑‰ºöÂú∫Ôºå$pre_{k,j-tot_{k,i}}$ ÂæàÊòæÁÑ∂Â∞±ÊòØÂàÜÈÖçÁªô‰∫Ü‰∏ÄÂè∑‰ºöÂú∫„ÄÇËÆ°ÁÆóÊó∂Êûö‰∏æ $i,j,k$ ÔºåÂ§çÊùÇÂ∫¶ÊòØ $O(n^3)$ „ÄÇ(ÂÖ∂ÂÆûÂáÜÁ°ÆÁöÑÂ§çÊùÇÂ∫¶Â∏¶‰∏™Â∏∏Êï∞ÔºåÂõ†‰∏∫ $i$ Êûö‰∏æÁöÑÊòØÊó∂Èó¥ÔºåËÄåÊó∂Èó¥ÊúÄÂ§ßÊòØ $2n$ ÁöÑ) „ÄÇ Êàë‰ª¨ËÆæÁ¶ªÊï£ÂåñÂêéÊó∂Èó¥ÊÄªÈïø‰∏∫ $m$ ÔºåÈÇ£‰πàÁ≠îÊ°àÊòæÁÑ∂‰∏∫ $\max\limits_{i=1}^m\{\min(pre_{m,i},i)\}$ „ÄÇÊé•‰∏ãÊù•Êàë‰ª¨Ëß£ÂÜ≥Á¨¨‰∫åÈóÆ„ÄÇ Êàë‰ª¨ÁöÑ $tot_{l,r}$ ÁªüËÆ°ÁöÑÂ∞±ÊòØÂÆåÂÖ®Âú®Êó∂Èó¥ $l,r$ ÁöÑÂå∫Èó¥ÊúâÂ§öÂ∞ë‰∏™„ÄÇÈÇ£‰πàÂØπ‰∫éÁ¨¨ $i$ ‰∏™Ê¥ªÂä®ÔºåËÆæËØ•Ê¥ªÂä®ÁöÑËµ∑ÂßãÊó∂Èó¥‰∏éÁªàÊ≠¢Êó∂Èó¥ÂàÜÂà´‰∏∫ $s_i,t_i$ ÔºåÈÇ£‰πàÊàë‰ª¨ÂÜçËÄÉËôë‰∏ÄÂØπ $x,y \ \ (x\leq s_i,t_i\leq y)$ ÔºåÈÇ£‰πàÂ¶ÇÊûúÊàë‰ª¨Â∞ÜÁ≠îÊ°àËÆ°ÁÆó‰∏ä $tot_{x,y}$ ÔºåÈÇ£‰πà‰πüÂ∞±ÈÄâÊã©‰∫ÜÁ¨¨ $i$ ‰∏™Ê¥ªÂä®‰∫Ü„ÄÇ Êàë‰ª¨ËÆæ $f_{i,j}$ Ë°®Á§∫‰∏ÄÂè∑‰ºöÂú∫Âº∫Âà∂ÈÄâÊã© $i$ Âà∞ $j$ Êó∂Èó¥‰∏≠ÁöÑÊâÄÊúâÊ¥ªÂä®Êó∂ÁöÑÊúÄ‰ºòÁ≠îÊ°à„ÄÇ(Ê≥®ÊÑèËøôÈáåÁöÑÊúÄ‰ºòÁ≠îÊ°àÂ∞±ÊòØ‰∏§‰∏™‰ºöÂú∫‰∏≠Ê¥ªÂä®Â∞ëÁöÑ‰∏ÄÊñπÁöÑÊúÄÂ§ßÂÄºÔºåÊàë‰ª¨Âè™ÊòØËÄÉËôëÂú®‰∏ÄÂè∑‰ºöÂú∫Âº∫Âà∂ÈÄâÊã© $i$ Âà∞ $j‚Äã$ ‰∏≠ÁöÑÊâÄÊúâÊ¥ªÂä®ÁöÑÊÉÖÂÜµ‰∏ãËÄÉËôëÊúÄ‰ºòÁöÑÂÖ®Â±ÄÁ≠îÊ°à) „ÄÇ ÁªßÁª≠ÁúãÂêë‰∏ÄÂè∑‰ºöÂú∫ÔºåÂÅáËÆæÂú® $i$ ÂâçÈù¢ÁöÑÊó∂Èó¥‰∏≠‰∏ÄÂè∑‰ºöÂú∫Â∑≤ÁªèÂêàÊ≥ï‰∏æÂäû‰∫Ü $x$ Âú∫Ê¥ªÂä®ÔºåÂú® $j$ ÂêéÈù¢ÁöÑÊó∂Èó¥‰∏≠‰πüÂêàÊ≥ï‰∏æÂäû‰∫Ü $y$ Âú∫Ê¥ªÂä®„ÄÇÈÇ£‰πàÊàë‰ª¨Êûö‰∏æ $i,j,x,y$ ‰πüÂèØ‰ª•ÂæóÂà∞‰∫åÂè∑‰ºöÂú∫ÁöÑÊ¥ªÂä®Êï∞Ôºö$i$ ÂâçÈù¢ÁöÑÊó∂Èó¥ÁßçÊúâ $pre_{i,x}$ Âú∫Ê¥ªÂä®Ôºå$j$ ÂêéÈù¢ÁöÑÊó∂Èó¥‰∏≠Êúâ‚Ä¶‚Ä¶ËØ∂ËøôÈáåÁî® $pre$ Ë≤å‰ºº‰∏çÊòØÂæàÂ•ΩË°®Á§∫ËØ∂Ôºå‰∫éÊòØÊàë‰ª¨Êñ∞ÂÆö‰πâ‰∏Ä‰∏™ $suf$ Ôºå$suf_{i,j}$ Ë°®Á§∫ $i$ Âà∞ $m$ ÁöÑÊó∂Èó¥‰∏Ä‰∏™‰ºöÂú∫ÁöÑÊ¥ªÂä®Êï∞‰∏∫ $j$ Êó∂Âè¶‰∏Ä‰∏™‰ºöÂú∫ÁöÑÊúÄÂ§ßÊ¥ªÂä®Êï∞Ôºå$suf$ ÁöÑÁä∂ÊÄÅËΩ¨ÁßªÊñπÁ®ãÂíå $pre$ ÁöÑÂêåÁêÜ„ÄÇ Êûö‰∏æ $i,j,x,y$ ÂêéÂ∞±ÂèØ‰ª•ÂæóÂà∞‰∏§‰∏™‰ºöÂú∫ÁöÑÊ¥ªÂä®‰∏™Êï∞ÔºåÈÇ£‰πàÂ∞±ÂèØ‰ª•Áõ¥Êé•ÁÆóÁ≠îÊ°à‰∫ÜÔºö f_{i,j}=\max\limits_{x=1}^{m}\max\limits_{y=1}^{m}\{\min(x+tot_{i,j}+y,pre_{i,x}+suf_{j,y})\}‚Äã‰ΩÜÊòØËøôÊ†∑Â≠êÁöÑÂ§çÊùÇÂ∫¶ÊòØ $O(n^4)‚Äã$ ÁöÑÔºåËøá‰∏ç‰∫Ü„ÄÇ ‰∏çËøáÔºåÊàë‰ª¨‰ºöÂèëÁé∞ÔºåÂØπ‰∫éÂçïË∞ÉÈÄíÂ¢ûÁöÑ $x$ ÔºåÂØπÂ∫îÁöÑÊúÄ‰ºòÁöÑ $y$ ‰∏ÄÂÆöÊòØÂçïË∞ÉÈÄíÂáèÁöÑ „ÄÇ‰∏∫‰ªÄ‰πàÂë¢ÔºüÈ¶ñÂÖàÂØπ‰∫é‰∏Ä‰∏™ÂçïË∞ÉÈÄíÂ¢ûÁöÑ $i$ Ôºå$pre_{?_i},suf_{?_i}$ ‰∏ÄÂÆöÊòØÂçïË∞ÉÈÄíÂáèÁöÑ( $?$ ‰∏∫‰ªªÊÑèÊï∞) „ÄÇÈÇ£‰πàÂ¶ÇÊûúÂØπ‰∫éÂçïË∞ÉÈÄíÂ¢ûÁöÑ $x$ Ôºå$pre_{i,x}$ ‰∏ÄÂÆöÊòØÂçïË∞ÉÈÄíÂáèÁöÑÔºåËøô‰∏™Êó∂ÂÄôÂ¶ÇÊûú $y$ ÂçïË∞ÉÈÄíÂ¢û‰πüÂ∞±ÊÑèÂë≥ÁùÄ $suf_{j,y}$ ‰ºöÂçïË∞ÉÈÄíÂáèÔºåÈÇ£‰πà $x+tot_{i,j}+y$ Âíå $pre_{i,x}+suf_{j,y}$ Â∞Ü‰ºöË∂äÊãâË∂äÂ§ßÔºåÂØπ‰∫éÁ≠îÊ°àÊòæÁÑ∂ÊòØ‰∏çÂà©ÁöÑ„ÄÇÂèçËøáÊù•ÔºåÂ¶ÇÊûú $y$ ÊòØÂçïË∞ÉÈÄíÂáèÁöÑÔºåÈÇ£‰πàÂ∞±‰ºöÁõ∏ÂØπÊØîËæÉÂùáË°°„ÄÇ(ÊÑüÊÄßÁêÜËß£ÁêÜËß£‚Ä¶‚Ä¶) ÈÇ£‰πàÊàë‰ª¨Â∞±‰∏çÈúÄË¶ÅÊûö‰∏æ $y$ ‰∫ÜÔºåÂè™ÈúÄË¶ÅÊâ´‰∏ÄÊâ´Â∞±Â•Ω‰∫ÜÔºåÊúÄÁªàËÆ°ÁÆó $f$ ÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶‰∏∫ $O(n^3)$ „ÄÇ ÊúÄÁªàÁªüËÆ°Á≠îÊ°àÁöÑÊó∂ÂÄôÔºåÂØπ‰∫é‰∏Ä‰∏™Ê¥ªÂä® $i$ ÔºåÊàë‰ª¨ÁöÑÁ≠îÊ°àÊòæÁÑ∂‰∏∫ $\max\limits_{x=1}^{s_i}\max\limits_{y=t_i}^{m}f_{x,y}$ „ÄÇÂøÖÈ°ªÊª°Ë∂≥ $x\leq s_i,t_i\leq y$ ÔºåÂõ†‰∏∫ËøôÊ†∑Â∞±‰ºöÊª°Ë∂≥‰∏ÄÂÆö‰ºöÈÄâÊã©Á¨¨ $i$ ‰∏™Ê¥ªÂä®„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;#define F(i,j,k) for((i)=(j);(i)&lt;=(k);++i)#define R(i,j,k) for((i)=(j);(i)&gt;=(k);--i)const int N=4e2+9;const int inf=1e9+9;int n,m,i,j,k,l,r,s[N],t[N],b[N];int tot[N][N],pre[N][N],suf[N][N],f[N][N];inline int IN() &#123; char ch;bool flag=0;int x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;return x;&#125;inline int calc(int x,int y) &#123;return min(x+tot[l][r]+y,pre[l][x]+suf[r][y]);&#125; int main() &#123; n=IN(); F(i,1,n) b[++m]=s[i]=IN(),b[++m]=t[i]=IN()+s[i]; sort(b+1,b+1+m), m=unique(b+1,b+1+m)-b-1;/*Á¶ªÊï£ÂåñÂéªÈáç*/ F(i,1,n) &#123; s[i]=lower_bound(b+1,b+1+m,s[i])-b; t[i]=lower_bound(b+1,b+1+m,t[i])-b; F(l,1,s[i]) R(r,m,t[i]) ++tot[l][r];/*ËÆ°ÁÆóÂá∫tot*/ &#125; F(i,1,m) F(j,1,n) pre[i][j]=suf[i][j]=-inf;/*ÂàùÂßãÂåñ*/ /*----------ËÆ°ÁÆóÂá∫preÂíåsuf----------*/ F(i,1,m) F(j,0,tot[1][i]) F(k,1,i) &#123; pre[i][j]=max(pre[i][j],pre[k][j]+tot[k][i]); if(j&gt;=tot[k][i]) pre[i][j]=max(pre[i][j],pre[k][j-tot[k][i]]); &#125; R(i,m,1) F(j,0,tot[i][m]) F(k,i,m) &#123; suf[i][j]=max(suf[i][j],suf[k][j]+tot[i][k]); if(j&gt;=tot[i][k]) suf[i][j]=max(suf[i][j],suf[k][j-tot[i][k]]); &#125; /*ËÆ°ÁÆóf*/ F(l,1,m) F(r,l+1,m) for(int y=n,x=0;x&lt;=n;++x) &#123;/*yÂΩìÂÅöÊåáÈíàÊâ´‰∏ÄÈÅç*/ int old_calc=calc(x,y),new_calc; while(y&amp;&amp;old_calc&lt;=(new_calc=calc(x,y-1))) --y,old_calc=new_calc; f[l][r]=max(f[l][r],calc(x,y));/*ËΩ¨Áßª*/ &#125; /*ËæìÂá∫Á≠îÊ°à*/ int ans=0; F(i,1,n) ans=max(ans,min(pre[m][i],i)); printf("%d\n",ans);/*Á¨¨‰∏ÄÈóÆ*/ F(i,1,n) &#123; ans=0; F(l,1,s[i]) R(r,m,t[i]) ans=max(ans,f[l][r]); printf("%d\n",ans);/*Á¨¨‰∫åÈóÆ*/ &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>ÂÜ≥Á≠ñÂçïË∞ÉÊÄß</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë„ÄêÊ®°Êùø„ÄëÂä®ÊÄÅDP LCT+DP+Áü©Èòµ luoguP4751]]></title>
    <url>%2F2019%2F04%2F19%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4751%2F</url>
    <content type="text"><![CDATA[ÁúãÊáÇ‰∫ÜÂêéÂèëÁé∞ $\texttt{DDP}$ ÂÖ∂ÂÆû‰∏çÈöæÂë¢‚Ä¶‚Ä¶ ÂÖ∂ÂÆû‰∏ªË¶ÅÊÄùÊÉ≥Â∞±ÊòØÂ∞Ü $\texttt{DP}$ ËΩ¨ÁßªÂºèÊêûÂà∞Áü©Èòµ‰∏äÔºåÁÑ∂ÂêéÂ¶ÇÊûúÊòØÊ†ëÂΩ¢ $\texttt{DP}$ ÁöÑËØùÂ∞±ÂèØ‰ª•Áõ¥Êé•‰∏äÊ†ëÂâñÊàñËÄÖÊòØ $LCT$ ËøõË°åÁª¥Êä§ÔºåÂΩìÁÑ∂ËøòÂèØ‰ª•Áî®ÂÖ®Â±ÄÂπ≥Ë°°‰∫åÂèâÊ†ë(‰∏çË¥π) „ÄÇÂ¶ÇÊûúÂè™ÊòØÁ∫øÊÄßÁöÑËØùÂèØ‰ª•Áõ¥Êé•Áî®Á∫øÊÆµÊ†ëÁ≠âÊï∞ÊçÆÁªìÊûÑËøõË°åÁª¥Êä§‰∫Ü„ÄÇ Ê≥®ÊÑèËøôÈÅìÊ®°ÊùøÊ†ëÂâñÁöÑÂ§çÊùÇÂ∫¶ÊòØ $O(nlog^2n)$ ÔºåËÄå $LCT$ ÁöÑÂ§çÊùÇÂ∫¶‰∏∫ $O(nlogn)$ Ôºå‰∫éÊòØÁ™ùÈÄâÊã©‰∫Ü $LCT$ ÔºåË∑ëÁöÑËøòÊå∫Âø´„ÄÇ ÂºÄÂßãÂàÜÊûêÈ¢òÁõÆÔºåÂ¶ÇÊûúÊ≤°Êúâ‚ÄùÂä®ÊÄÅ‚ÄùÈôêÂà∂ÁöÑËØùÂ∞±ÊòØ‰∏Ä‰∏™Ë£∏ÁöÑ‚ÄùÊ≤°Êúâ‰∏äÂè∏ÁöÑËàû‰ºö‚ÄùÔºåËß£Ê≥ïÊòæÁÑ∂ÊòØËÆæ $f[u][0/1]‚Äã$ Ë°®Á§∫ $u‚Äã$ ‰∏çÈÄâ/ÈÄâ ÁöÑÊó∂ÂÄôÂÖ∂Â≠êÊ†ëÁöÑÊúÄÂ§ß‰ª∑ÂÄºÔºåËΩ¨ÁßªÊòæÁÑ∂‰∏∫Ôºö f[u][0]=\sum \max(f[v][0],f[v][1])\\f[u][1]=val[u]+\sum f[v][0]ÂØπ‰∫éÊ†ë‰∏≠ÁöÑ‰∏Ä‰∏™ËäÇÁÇπ $u$ ÁöÑÊâÄÊúâÂÑøÂ≠ê‰∏≠Êúâ‰∏™ÈáçÂÑøÂ≠êÔºåÂÖ∂‰ªñÁöÑÂÑøÂ≠êÂ∞±ÊòØËΩªÂÑøÂ≠êÔºåÊàë‰ª¨Â∞ÜÈáçÂÑøÂ≠êÂíåËΩªÂÑøÂ≠êÁöÑË¥°ÁåÆÂàÜÂºÄÁÆó„ÄÇËÆæ‰∏Ä‰∏™ $g[u][0/1]$ ÔºåÂÖ∂ÂÄº‰∏∫Ôºö g[u][0]=\sum\max(f[v][0],f[v][1])\\g[u][1]=val[u]+\sum f[v][0]Ê≥®ÊÑè‰∏äÂºè‰∏≠ÁöÑ $v$ Âè™ÁöÑÊòØËΩªÂÑøÂ≠êÔºåÁÑ∂Âêé $f$ ÁöÑËΩ¨ÁßªÂ∞±ÂèòÊàê‰∫Ü‰ª•‰∏ãÂΩ¢Âºè( $x$ ‰∏∫ÈáçÂÑøÂ≠ê)Ôºö f[u][0]=\max(f[x][0],f[x][1])+g[u][0]\\f[u][1]=g[u][1]+f[x][0]ÂÖ∂ÂÆûËøôÈáåÁöÑ $g$ ÂæàÂ•ΩÁª¥Êä§ÔºåÊàë‰ª¨Âú® $Access$ ÁöÑÊó∂ÂÄôÂè™Ë¶ÅËÆ°ÁÆóÂÑøÂ≠êÂèòÂåñÊó∂ÁöÑË¥°ÁåÆÂ∞±Â•Ω‰∫Ü„ÄÇ Êé•ÁùÄÊàë‰ª¨ÊûÑÈÄ†Âá∫ËΩ¨ÁßªÁü©ÈòµÔºö \begin{bmatrix}g[u][0] & g[u][0]\\g[u][1] & -inf\end{bmatrix}\cdot\begin{bmatrix}f[x][0] \\f[x][1]\end{bmatrix}=\begin{bmatrix}f[u][0]\\f[u][1]\end{bmatrix}ËøôÊ†∑Â≠êÂ∞±ÂèØ‰ª•Áõ¥Êé•Êõ¥Êñ∞‰∫ÜÔºåÂØπ‰∫éÊØè‰∏™ËäÇÁÇπÊàë‰ª¨Âè™ÈúÄË¶ÅÁª¥Êä§‰∏§‰∏™Áü©ÈòµÂç≥ÂèØÔºå‰∏Ä‰∏™Â∞±ÊòØ‰∏äÈù¢‰πòÊ≥ï‰∏≠ÁöÑ $g$ Áü©ÈòµÔºå‰∏Ä‰∏™Â∞±ÊòØ‰∏äÈù¢‰πòÊ≥ï‰∏≠ÁöÑ $f$ Áü©Èòµ„ÄÇ ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØËøôÊòØÂπø‰πâÁü©Èòµ‰πòÊ≥ïÔºå‰πüÂ∞±ÊòØËØ¥Ëøô‰∏™Áü©Èòµ‰πòÊ≥ïÁöÑËøêÁÆóËßÑÂàô‰∏∫Ôºö c[i][j]=max(c[i][j],a[i][k]+b[k][j])ÂæàÂÉè $floyd$ ÔºåÂèØ‰ª•Áõ¥Êé•ÁÆó‰∫Ü„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;struct matrix &#123;int c[2][2];matrix()&#123;c[0][0]=c[0][1]=c[1][0]=c[1][1]=-inf;&#125;&#125;;matrix operator * (matrix&amp;a,matrix&amp;b) &#123; matrix ret; for(int i=0;i&lt;2;++i)for(int j=0;j&lt;2;++j)for(int k=0;k&lt;2;++k) ret.c[i][j]=max(ret.c[i][j],a.c[i][k]+b.c[k][j]); return ret;&#125;int v[N],dp[N][2],head[N],nxt[N&lt;&lt;1],to[N&lt;&lt;1],cnt;void add(int u,int v) &#123;nxt[++cnt]=head[u],to[cnt]=v,head[u]=cnt;&#125;struct link_cut_tree &#123; matrix f[N],g[N]; int ch[N][2],fa[N]; inline bool isroot(int x) &#123;return !((ch[fa[x]][0]==x)||(ch[fa[x]][1]==x));&#125; inline void pushup(int x) &#123; f[x]=g[x]; if(ch[x][0]) f[x]=f[ch[x][0]]*f[x];if(ch[x][1]) f[x]=f[x]*f[ch[x][1]]; &#125; inline void rotate(int x) &#123; int y=fa[x],z=fa[y],k=ch[y][1]==x,v=ch[x][!k]; if(!isroot(y)) ch[z][ch[z][1]==y]=x;ch[x][!k]=y,ch[y][k]=v; if(v) fa[v]=y;fa[y]=x,fa[x]=z;pushup(y); &#125; inline void Splay(int x) &#123; while(!isroot(x)) &#123; if(!isroot(fa[x])) rotate((ch[fa[x]][0]==x)^(ch[fa[fa[x]]][0]==fa[x])?x:fa[x]); rotate(x); &#125;pushup(x);return; &#125; inline void Access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; Splay(x); if(ch[x][1]) &#123; g[x].c[0][0]+=max(f[ch[x][1]].c[0][0],f[ch[x][1]].c[1][0]); g[x].c[1][0]+=f[ch[x][1]].c[0][0]; &#125; if(y) &#123; g[x].c[0][0]-=max(f[y].c[0][0],f[y].c[1][0]); g[x].c[1][0]-=f[y].c[0][0]; &#125; g[x].c[0][1]=g[x].c[0][0]; ch[x][1]=y,pushup(x); &#125;return; &#125; inline void change(int x,int y) &#123; Access(x),Splay(x),g[x].c[1][0]-=v[x]-y; pushup(x),v[x]=y;return; &#125; inline void build(int u) &#123; dp[u][1]=v[u]; for(int i=head[u];i;i=nxt[i]) &#123; int v=to[i];if(v!=fa[u]) &#123; fa[v]=u,build(v); dp[u][0]+=max(dp[v][0],dp[v][1]); dp[u][1]+=dp[v][0]; &#125; &#125; g[u].c[0][0]=g[u].c[0][1]=dp[u][0]; g[u].c[1][0]=dp[u][1];f[u]=g[u]; &#125;&#125;T;int main() &#123; int n,m;IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(v[i]); for(int i=1,u,v;i&lt;n;++i)IN(u),IN(v),add(u,v),add(v,u); T.build(1); while(m--) &#123; int x,y;IN(x),IN(y); T.change(x,y),T.Splay(1); printf("%d\n",max(T.f[1].c[0][0],T.f[1].c[1][0])); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>LCT</tag>
        <tag>Áü©Èòµ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [ÂçÅ‰∫åÁúÅËÅîËÄÉ2019]ÂºÇÊàñÁ≤ΩÂ≠ê ÂèØÊåÅ‰πÖÂåñTrieÊ†ë luoguP5283]]></title>
    <url>%2F2019%2F04%2F19%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5283%2F</url>
    <content type="text"><![CDATA[Ë¶ÅÊòØÊàë‰∏çÊòØ $\texttt{HN}‚Äã$ ÁöÑËØ•Â§öÂ•ΩÔºå‰ªäÂπ¥ÂçÅ‰∫åÁúÅËÅîËÄÉ‰∏§ÈÅìÂÇªÈÄºÈ¢òÔºå‰∏ÄÈÅìÂºÇÊàñÁ≤ΩÂ≠êÔºå‰∏ÄÈÅìÂçÅ‰∫åÂìç‚Ä¶‚Ä¶ [ÂçÅ‰∫åÁúÅËÅîËÄÉ2019]ÂºÇÊàñÁ≤ΩÂ≠êÔºåÂèØÊåÅ‰πÖÂåñ $trie‚Äã$ Ê†ëÁöÑÊùøÂ≠êÈ¢òÔºåÊØîÊúÄÂ§ßÂºÇÊàñÂíåËøòË¶ÅÊùøÂ≠ê‰∫õ„ÄÇÁõ∏‰ø° $60‚Äã$ ÂàÜÂÖ•Èó®ËÄÖÈÉΩ‰ºöÂÅöÔºåÈÇ£‰πà $100‚Äã$ ÂàÜÁöÑËØùÊàë‰ª¨‰∏äÂèØÊåÅ‰πÖÂåñ $trie‚Äã$ Ê†ëÁª¥Êä§ÂâçÁºÄÂºÇÊàñÂíåÔºåÂóØÊ≤°ÈîôÂ∞±ÂÉè‰∏ªÂ∏≠Ê†ëÈÇ£Ê†∑„ÄÇÁÑ∂ÂêéÂØπ‰∫éÊØè‰∏™ËäÇÁÇπÁöÑÂèØÊåÅ‰πÖÂåñ $trie‚Äã$ Ê†ëÊàë‰ª¨Â∞ÜÂÖ∂ÂΩìÊàêÂå∫Èó¥Âè≥Á´ØÁÇπÔºåÁÑ∂ÂêéÂú®Ê≠§‰ΩçÁΩÆ‰∏äÁöÑ $trie‚Äã$ Ê†ë‰∏≠Ë¥™ÂøÉÂØªÊâæÂ∑¶Á´ØÁÇπÂç≥ÂèØ„ÄÇ ÂØªÊâæÂâç $K$ Â§ßÂå∫Èó¥ÁöÑÂÖ∑‰ΩìÊìç‰ΩúÂ¶Ç‰∏ãÔºö 12345678910for(ll i=1;i&lt;=n;++i) q.push(MKP(T.query(T.root[i],sum[i],qrank[i]=1),i));/*ÂØπ‰∫éÊØè‰∏Ä‰∏™Âè≥Á´ØÁÇπÔºåÊâæ‰∏Ä‰∏™Á¨¨‰∏ÄÂ§ß(ÊúÄ‰ºò)ÁöÑÂ∑¶Á´ØÁÇπÊîæÂÖ•‰ºòÂÖàÈòüÂàó*/ll ans=0;while(k--) &#123; ll i=q.top().second;/*ÂèñÂá∫ÂΩìÂâçÊúÄ‰ºòÂÖÉÁ¥†*/ ans+=q.top().first;q.pop(); if(qrank[i]!=i) q.push(MKP(T.query(T.root[i],sum[i],++qrank[i]),i)); /*Êõ¥Êñ∞ÈòüÂàóÂÖÉÁ¥†*/&#125; Â§çÊùÇÂ∫¶Â§ßÁ∫¶ÊòØ $O(nlogn)‚Äã$ Á∫ßÂà´„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;#define MKP make_pairconst ll N=5e5+2;const ll logN=33;const ll inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;ll n,k,sum[N],qrank[N];priority_queue&lt;pair&lt;ll,ll&gt; &gt; q;struct Trie &#123; ll ch[N*logN][2],sum[N*logN],root[N],tot; ll newnode(ll x) &#123; ++tot,ch[tot][0]=ch[x][0],ch[tot][1]=ch[x][1]; sum[tot]=sum[x];return tot; &#125; void Insert(ll&amp;rt,ll val) &#123; rt=newnode(rt),++sum[rt]; ll now=rt; for(ll i=31;~i;--i) &#123; bool son=(val&gt;&gt;i)&amp;1; ch[now][son]=newnode(ch[now][son]); now=ch[now][son],++sum[now]; &#125;return; &#125; ll query(ll now,ll val,ll k) &#123; ll ans=0; for(ll i=31;~i;--i) &#123; bool son=!((val&gt;&gt;i)&amp;1); if(k&lt;=sum[ch[now][son]]) now=ch[now][son],ans|=(1u&lt;&lt;i); else k-=sum[ch[now][son]],now=ch[now][!son]; &#125;return ans; &#125;&#125;T;int main()&#123; IN(n),IN(k); for(ll i=1,x;i&lt;=n;++i) IN(x),sum[i]=sum[i-1]^x; for(ll i=0;i&lt;=n;++i) &#123; if(i) T.root[i]=T.root[i-1]; T.Insert(T.root[i],sum[i]); &#125; for(ll i=1;i&lt;=n;++i) q.push(MKP(T.query(T.root[i],sum[i],qrank[i]=1),i)); ll ans=0; while(k--) &#123; ll i=q.top().second; ans+=q.top().first;q.pop(); if(qrank[i]!=i) q.push(MKP(T.query(T.root[i],sum[i],++qrank[i]),i)); &#125; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÂèØÊåÅ‰πÖÂåñTrieÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [ÂçÅ‰∫åÁúÅËÅîËÄÉ2019]Êò•ËäÇÂçÅ‰∫åÂìç Â†Ü+ÂêØÂèëÂºèÂêàÂπ∂ luoguP5290]]></title>
    <url>%2F2019%2F04%2F19%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5290%2F</url>
    <content type="text"><![CDATA[Ë¶ÅÊòØÊàë‰∏çÊòØ $\texttt{HN}$ ÁöÑËØ•Â§öÂ•ΩÔºå‰ªäÂπ¥ÂçÅ‰∫åÁúÅËÅîËÄÉ‰∏§ÈÅìÂÇªÈÄºÈ¢òÔºå‰∏ÄÈÅìÂºÇÊàñÁ≤ΩÂ≠êÔºå‰∏ÄÈÅìÂçÅ‰∫åÂìç‚Ä¶‚Ä¶ [ÂçÅ‰∫åÁúÅËÅîËÄÉ2019]Êò•ËäÇÂçÅ‰∫åÂìçÔºåÂêØÂèëÂºèÂêàÂπ∂Ë£∏È¢ò„ÄÇÂØπ‰∫éÊ†ë‰∏≠ÁöÑ‰∏Ä‰∏™ËäÇÁÇπ $u$ Ôºå‰ªéÂÖ∂Â≠êÊ†ë‰∏≠ÈÄâÊã©‰∏ÄÊÆµÁöÑÊñπÂºèÊòæÁÑ∂Âè™ËÉΩÊòØ‰ªé $u$ ÁöÑÊâÄÊúâÂ≠êÊ†ë‰∏≠ÂêÑÈÄâÂá∫‰∏Ä‰∏™ËäÇÁÇπ„ÄÇ‰∫éÊòØÊàë‰ª¨ÊØè‰∏Ä‰∏™ËäÇÁÇπÂºÄ‰∏Ä‰∏™Â†ÜÔºåÂ≠òÁöÑÂ∞±ÊòØÂÖ∂Â≠êÊ†ë‰∏≠(ÂåÖÊã¨Ëá™Â∑±)ÁöÑÊâÄÊúâÊÆµÁöÑÂÜÖÂ≠ò„ÄÇ ÁÑ∂Âêé‰ªé‰∏ãÂæÄ‰∏äÂêØÂèëÂºèÂêàÂπ∂Âç≥ÂèØÔºåÂ§çÊùÇÂ∫¶Â§ßÁ∫¶ÊòØ $O(nlogn)$ „ÄÇ ÂêØÂèëÂºèÂêàÂπ∂ÁöÑÂÖ∑‰Ωì‰ª£Á†ÅÂÆûÁé∞Â¶Ç‰∏ãÔºö 12345678910111213141516void merge(int x, int y) &#123; if(q[x].size()&lt;q[y].size()) swap(q[x],q[y]); while(!q[y].empty()) &#123; hep.push_back(max(q[x].top(),q[y].top())); q[x].pop(),q[y].pop(); /*Ë¥™ÂøÉÈÄâÂèñ*/ &#125; while(hep.size()) q[x].push(hep.back()),hep.pop_back(); /*Êõ¥Êñ∞ËäÇÁÇπ*/&#125;void solve(int x) &#123; for(int i=0,sz=G[x].size();i&lt;sz;++i) solve(G[x][i]),merge(x,G[x][i]);/*Â∞ÜÂΩìÂâçÂ≠êÊ†ë‰∏é‰πãÂâçÊûö‰∏æËøáÁöÑÂ≠êÊ†ëÂêàÂπ∂*/ q[x].push(s[x]);&#125; ÊúÄÂêéÁöÑÊÄª‰ª£Á†ÅÈïøÂ∫¶‰∏çË∂ÖËøá $40$ Ë°å„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=2e5+7;int n,f,s[N];vector&lt;int&gt; hep,G[N];priority_queue&lt;int&gt; q[N];void merge(int x, int y) &#123; if(q[x].size()&lt;q[y].size()) swap(q[x],q[y]); while(!q[y].empty()) &#123; hep.push_back(max(q[x].top(),q[y].top())); q[x].pop(),q[y].pop(); &#125; while(hep.size()) q[x].push(hep.back()),hep.pop_back();&#125;void solve(int x) &#123; for(int i=0,sz=G[x].size();i&lt;sz;++i) solve(G[x][i]),merge(x,G[x][i]); q[x].push(s[x]);&#125;int main() &#123; scanf("%d",&amp;n); for(int i=1;i&lt;=n;++i) scanf("%d",&amp;s[i]); for(int i=2;i&lt;=n;++i) scanf("%d",&amp;f),G[f].push_back(i); solve(1); long long ans=0; while(!q[1].empty()) ans+=q[1].top(),q[1].pop(); printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Â†Ü</tag>
        <tag>ÂêØÂèëÂºèÂêàÂπ∂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë[HNOI2019]ÁôΩÂÖî‰πãËàû Âçï‰ΩçÊ†πÂèçÊºî+MTT luoguP5293]]></title>
    <url>%2F2019%2F04%2F17%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5293%2F</url>
    <content type="text"><![CDATA[Âçï‰ΩçÊ†πÂèçÊºî‰∏ç‰ºöÂïäÊÄé‰πàÊêû $FFT$ ÂêßÔºåËøòÊòØ‰∫ÜËß£‰∫ÜÂçï‰ΩçÊ†πÂèçÊºîÂêéÊâçÂèØ‰ª•ÊêûÁöÑÂ•ΩÂêß‚Ä¶‚Ä¶Â±ÖÁÑ∂Êúâ‰∫∫ÂêêÊßΩÊàëËØ¥ÊàëÂ≠¶‰∫Ü $FFT‚Äã$ ‰ΩÜÊòØ‰∏ç‰ºöËøêÁî®ÔºüÔºÅÔºåÂò§Âò§Âò§ÊâìÂáªÊúâ‰∫õÂ§ß‚Ä¶‚Ä¶ ÂÆûÈôÖ‰∏äÊâÄË∞ìÁöÑÂçï‰ΩçÊ†πÂèçÊºîÂ∞±ÊòØËøô‰∏™‰∏úË•øÔºö \frac{1}{n}\sum_{i=0}^{n-1}(\omega_n^d)^i=[n|d] ÂõûÂà∞È¢òÁõÆÔºåÊàë‰ª¨ÂÖàËÄÉËôëÊ≠£Ëß£ÁöÑÁÆÄÂåñÁâà‚Äî‚Äî $n=1$ ÁöÑÁâàÊú¨ÔºåÊàë‰ª¨ÂÖàÂÆö‰πâ $W=w[1][1]$ „ÄÇ Áé∞Âú®ÂØπ‰∫éÊØè‰∏Ä‰∏™ $t$ ÁöÑÁ≠îÊ°àÊòæÁÑ∂‰∏∫ $\sum_{i=0}^{L}[i\% k=t] W^i (^L_i)$ Ëøô‰∏™ÂºèÂ≠êÊòæÁÑ∂Á≠â‰∫é $\sum_{i=0}^{L}[k|(i-t)] w^i (^L_i)$ „ÄÇ‰ºöÂèëÁé∞ $[k|(i-t)]$ Âíå‰∏äÈù¢Âçï‰ΩçÊ†πÂèçÊºîÁöÑ $[n|d]$ ‰∏ÄÊ†∑Ôºå‰∫éÊòØÊàë‰ª¨Â∞ùËØïÂ∞ÜÂçï‰ΩçÊ†πÂèçÊºîÁöÑÂºèÂ≠êÂ∏¶ËøõÂéª„ÄÇ =\sum_{i=0}^{L}\frac{1}{k}\sum_{j=0}^{k-1}(\omega_k^{i-t})^j W^i \binom{L}{i}\\\\ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}\sum_{i=0}^{L} \omega_k^{ij} W^i \binom{L}{i}\\\\ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}\sum_{i=0}^{L} \binom{L}{i}(\omega_k^{j} W)^i\\\\ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}\sum_{i=0}^{L} \binom{L}{i}(\omega_k^{j} W)^i 1^{n-i}\\\\ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}(\omega_k^{j} W+1)^LÂêéÈù¢ÁöÑ $(\omega_k^{j} W+1)^L$ ÊòæÁÑ∂ÂèØ‰ª•È¢ÑÂ§ÑÁêÜÔºåËÆ∞‰∏∫ $num_j$ „ÄÇ ÁÑ∂ÂêéÂèëÁé∞ $-tj=\binom{t}{2}+\binom{j}{2}-\binom{t+j}{2}$ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{\binom{t}{2}+\binom{j}{2}-\binom{t+j}{2}}num_j\\\\ =\frac{1}{k}\omega_k^{\binom{t}{2}}\sum_{j=0}^{k-1}num_j\omega_k^{\binom{j}{2}}\cdot\omega_k^{-\binom{t+j}{2}}ÂêéÈù¢ÁöÑÂºèÂ≠êÂèØ‰ª•Áî® $FFT$ Âä†ÈÄüÔºå‰ΩÜÊòØÂÄºÂüüÂ§™Â§ßËøôÈáåÈúÄË¶ÅÁî®Âà∞ $MTT$ „ÄÇÁé∞Âú®Â∞±Êúâ $40$ ÂàÜ‰∫ÜÔºåÊé•‰∏ãÊù•ËÄÉËôë $n&gt;1$ ÁöÑÊÉÖÂÜµ„ÄÇ Êàë‰ª¨Âª∫Áü©ÈòµÔºåÁÑ∂Âêé‰ºöÂèëÁé∞ $n&gt;1$ ‰ªÖ‰ºöÂØπ $num_j$ ÁöÑËÆ°ÁÆóÊñπÂºèÊúâÂèòÂåñ„ÄÇ Êàë‰ª¨ÂÆö‰πâ‰∏Ä‰∏™ $begin$ Áü©ÈòµÔºåËØ•Áü©ÈòµÂè™Êúâ $(0,x)$ ‰ΩçÁΩÆ‰∏äÊúâÂÄº‰∏îÂÄº‰∏∫ $1$ Ôºå‰πüÂ∞±ÊòØËØ¥ËøôÊòØÁôΩÂÖîÁöÑËµ∑ÁÇπ„ÄÇÈÇ£‰πàÊúÄÂêéÊàë‰ª¨ÈúÄË¶ÅÁïô‰∏ãÊù•ÁöÑ‰πüÂ∞±ÊòØÁü©ÈòµÁöÑ $(0,y)$ ÔºåÂõ†‰∏∫Âè™ÊúâÂú®Á¨¨‰∫åÁª¥‰∏∫ $y$ ÊòØÊâç‰ºöËÆ°ÂÖ•Á≠îÊ°à„ÄÇ ÂóØÔºåÂ∑Æ‰∏çÂ§öÂèØ‰ª•ËøôÊ†∑ÂÜôÔºö 12345begin.c[0][x]=1;for(int i=0;i&lt;k;++i) num[i]=(begin*pow(w*num[i]+I,n)).c[0][y]%MOD;/*wÂ∞±ÊòØ‰∏äÊñá‰∏≠ÁöÑWÔºå‰∏çËøáËøôÈáåÊòØÁü©Èòµ*//*IÊòØÁü©Èòµ‰∏≠ÁöÑÂçï‰Ωç'1'*/ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=65536;const double PI=acos(-1); int m,k,n,x,y,MOD,G,num[N],A[N&lt;&lt;2],B[N&lt;&lt;2];namespace OI &#123; #define F(x,i,j) for((x)=(i);(x)&lt;=(j);++(x)) inline ll IN() &#123; char ch;bool flag=0;ll x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;return x; &#125; struct matrix &#123;int c[3][3];matrix()&#123;memset(c,0,sizeof(c));&#125;&#125;; matrix operator + (const matrix&amp;a,const matrix&amp;b) &#123; matrix ans;int i,j;F(i,0,2)F(j,0,2) &#123; ans.c[i][j]=a.c[i][j]+b.c[i][j]; if(ans.c[i][j]&gt;=MOD) ans.c[i][j]-=MOD; &#125;return ans; &#125; matrix operator * (const matrix&amp;a,const matrix&amp;b) &#123; matrix ans;int i,j,k;F(i,0,2)F(j,0,2)F(k,0,2) ans.c[i][k]=(ans.c[i][k]+1ll*a.c[i][j]*b.c[j][k])%MOD; return ans; &#125; matrix operator * (const matrix&amp;a,const int&amp;b) &#123; matrix ans;int i,j;F(i,0,2)F(j,0,2)ans.c[i][j]=1ll*a.c[i][j]*b%MOD; return ans; &#125; struct complex&#123;complex(long double a=0,long double b=0)&#123;x=a,y=b;&#125;long double x,y;&#125;; complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125; complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125; complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125; matrix I; inline int pow(int x,int y) &#123; int res=1;for(;y;y&gt;&gt;=1,x=1ll*x*x%MOD) if(y&amp;1) res=1ll*res*x%MOD; return res%MOD; &#125; inline matrix pow(matrix x,int y) &#123; matrix res=I;for(;y;y&gt;&gt;=1,x=x*x) if(y&amp;1) res=res*x; return res; &#125;&#125;using namespace OI;namespace MTT &#123; #define BLOCK 32768 int limit=1,cnt=0,filp[N&lt;&lt;2],Ans[N&lt;&lt;2]; complex A1[N&lt;&lt;2],B1[N&lt;&lt;2],A2[N&lt;&lt;2],B2[N&lt;&lt;2],X[N&lt;&lt;2],omg[N&lt;&lt;2]; inline void fft(complex *f,short inv)&#123; for(int i=0;i&lt;limit;++i)if(i&lt;filp[i])std::swap(f[i],f[filp[i]]); for(int p=1;p&lt;limit;p&lt;&lt;=1) for(complex *a=f;a!=f+limit;a+=(p&lt;&lt;1)) for(int l=0;l&lt;p;++l)&#123; complex t=a[l+p]*omg[limit/(p&lt;&lt;1)*l]; a[l+p]=a[l]-t,a[l]=a[l]+t; &#125; &#125; inline void mtt(int *A,int *B)&#123; while(limit&lt;(k*3+5)) limit&lt;&lt;=1,++cnt; for(int i=0;i&lt;limit;++i) filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(cnt-1)); for(int i=0;i&lt;limit;++i) A1[i].x=A[i]&amp;(BLOCK-1),A2[i].x=A[i]&gt;&gt;15; for(int i=0;i&lt;limit;++i) B1[i].x=B[i]&amp;(BLOCK-1),B2[i].x=B[i]&gt;&gt;15; for(int i=0;i&lt;limit;++i) omg[i]=(complex)&#123;cos(i*PI*2/limit),sin(i*PI*2/limit)&#125;; fft(A1,1),fft(B1,1);fft(A2,1),fft(B2,1); for(int i=0;i&lt;limit;++i)&#123; complex a1=A1[i],a2=A2[i],b1=B1[i],b2=B2[i]; A1[i]=a1*b1,A2[i]=a2*b2,B1[i]=a1*b2,B2[i]=a2*b1; &#125; for(int i=0;i&lt;limit;++i) omg[i]=(complex)&#123;cos(i*PI*2/limit),-sin(i*PI*2/limit)&#125;; fft(A1,-1),fft(B1,-1);fft(A2,-1),fft(B2,-1); for(int i=0;i&lt;limit;++i) A1[i].x/=limit,A2[i].x/=limit,B1[i].x/=limit,B2[i].x/=limit; for(int i=0;i&lt;limit;++i) Ans[i]=((ll)(A1[i].x+0.5)%MOD+1073741824ll*((ll)(A2[i].x+0.5)%MOD)%MOD+ 32768ll*((ll)(B1[i].x+0.5)%MOD)%MOD+32768ll*((ll)(B2[i].x+0.5)%MOD)%MOD)%MOD; &#125;&#125;using namespace MTT;int divisor[105],tot;inline int get_G() &#123;/*Ëé∑ÂèñÂéüÊ†π*/ for(int i=2,S=MOD-1;i&lt;=S;++i) if(S%i==0) &#123;divisor[++tot]=i;while(!(S%i)) S/=i;&#125; for(int g=2;;++g) &#123; bool ok=true; for(int j=1;j&lt;=tot;++j) if(pow(g,(MOD-1)/divisor[j])==1) &#123;ok=false;break;&#125; if(ok) return g; &#125;&#125;matrix w,s;int main() &#123; I.c[0][0]=I.c[1][1]=I.c[2][2]=1; m=IN(),k=IN(),n=IN(),x=IN(),y=IN(),MOD=IN();--x,--y; /*numÂÖ∂ÂÆûÂ∞±ÊòØ‰∏äÊñá‰∏≠ÁöÑÂçï‰ΩçÊ†πÔºåËøôÈáåÈ¢ÑÂ§ÑÁêÜ‰∏Ä‰∏ãËÆ°ÁÆóÊñπ‰æø‰∫õ*/ num[0]=1,num[1]=pow(G=get_G(),(MOD-1)/k); for(int i=2;i&lt;k;++i) num[i]=1ll*num[1]*num[i-1]%MOD; for(int i=0;i&lt;m;++i) for(int j=0;j&lt;m;++j) w.c[i][j]=IN(); for(int i=0;i&lt;(k&lt;&lt;1|1);++i) A[i]=num[(k-1ll*i*(i-1)/2%k)%k]; s.c[0][x]=1; for(int i=0;i&lt;k;++i) B[i]=1ll*num[1ll*i*(i-1)/2%k]*(s*pow(w*num[i]+I,n)).c[0][y]%MOD; /*ËÆ°ÁÆóÂêéÈù¢‰∏§‰∏™Â§öÈ°πÂºèÁöÑÂÄº*/ reverse(B,B+k+1),mtt(A,B); int invk=pow(k,MOD-2); for(int i=0;i&lt;k;++i) printf("%lld\n",1ll*Ans[i+k]*invk%MOD*num[1ll*i*(i-1)/2%k]%MOD); /*ËÆ°ÁÆóÁ≠îÊ°à*/ return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>FFT</tag>
        <tag>Âçï‰ΩçÊ†πÂèçÊºî</tag>
        <tag>MTT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HNOI2019]Ê†°Âõ≠ÊóÖË°å ÁîüÊàêÊ†ë+DP luoguP5292]]></title>
    <url>%2F2019%2F04%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5292%2F</url>
    <content type="text"><![CDATA[$myy$ Âá∫ÁöÑÁ•ûÈ¢ò‚Ä¶‚Ä¶Ë≤å‰ººÊ≠£Ëß£Âπ∂‰∏çÈöæ‰ΩÜÊòØÊ≤°Êúâ‰∫∫Âàá‚Ä¶‚Ä¶ $30$ ÂàÜÂèØ‰ª•Áî® $DP$ ÔºåËÆæ $f[i][j]$ Ë°®Á§∫ $i$ Âà∞ $j$ ÊòØÂê¶Êúâ‰∏ÄÊù°Êª°Ë∂≥Êù°‰ª∂ÁöÑË∑ØÂæÑ„ÄÇÂØπ‰∫éÊúâ‰∏ÄÊù°Êª°Ë∂≥Êù°‰ª∂ÁöÑË∑ØÂæÑÁöÑ $i,j$ ÔºåÊàë‰ª¨Êûö‰∏æËøûÊé• $i$ ÁöÑÁÇπÂíåËøûÊé• $j$ ÁöÑÁÇπÔºåÂ¶ÇÊûúËøô‰∏§‰∏™ÁÇπÁöÑÊ†áËÆ∞Áõ∏ÂêåÔºåÈÇ£‰πàÊó¢ÁÑ∂ $i,j‚Äã$ ÂêàÊ≥ïÔºåËøô‰∏§‰∏™ÁÇπ‰πü‰∏ÄÂÆöÂêàÊ≥ï„ÄÇ ‰∏çËøáËøôÊ†∑ÁöÑÂ§çÊùÇÂ∫¶ÊòØ $O(m^2)$ ÁöÑÔºåÊâÄ‰ª•Âè™ËÉΩËøá $30$ ÂàÜ„ÄÇ ÁÑ∂ÂêéËÄÉËôë‰ºòÂåñÔºåÊàë‰ª¨ÂèëÁé∞ÊâÄÊúâÁöÑËæπ‰πüÂ∞±Âè™Êúâ‰∏âÁßçÔºö ËØ•ËæπËøûÊé•ÁöÑ‰∏§‰∏™ÁÇπÁöÑÊ†áËÆ∞Áõ∏Âêå ‰∏§‰∏™ÁÇπÁöÑÊ†áËÆ∞ÈÉΩ‰∏∫ $1$ ‰∏§‰∏™ÁÇπÁöÑÊ†áËÆ∞ÈÉΩ‰∏∫ $0‚Äã$ ÊîπËæπËøûÊé•ÁöÑ‰∏§‰∏™ÁÇπÁöÑÊ†áËÆ∞‰∏çÂêå ÁÑ∂ÂêéÊàë‰ª¨ÂºÄ $3$ ‰∏™ÂõæÔºåÂØπ‰∫éÊØè‰∏ÄÊù°ËØªÂÖ•ËøõÊù•ÁöÑËæπÔºåÂ¶ÇÊûúÂ±û‰∫éÁ¨¨‰∏ÄÁßçÂ∞±ÊèíÂÖ•Âà∞Á¨¨‰∏Ä‰∏™Âõæ‰∏≠ÔºåÂÖ∂‰ªñÂêåÁêÜ„ÄÇ ÁÑ∂Âêé‰ºöÂèëÁé∞Ëøô‰∏â‰∏™ÂõæÈÉΩÊòØÊúâËã•Âπ≤‰∏™ËøûÈÄöÂùóÁªÑÊàêÁöÑÔºåÂèØ‰ª•Áü•ÈÅìÔºåÂ¶ÇÊûúÊàë‰ª¨Áïô‰∏ãÊù•ÁöÑ‰ªÖÊòØËØ•ËøûÈÄöÂùóÁöÑÁîüÊàêÊ†ë‰πü‰∏ç‰ºöÂØπÁ≠îÊ°à‰∫ßÁîüÂΩ±ÂìçÔºå‰ΩÜÊòØËæπÊï∞Âç¥Â§ßÂ§ßÂáèÂ∞ëÔºÅ ‰ΩÜÊòØÁõ¥Êé•ÂØπÊØè‰∏™ËøûÈÄöÂùóÊ±ÇÁîüÊàêÊ†ëÊòØ‰∏çÂØπÁöÑÔºåÂõ†‰∏∫ÁîüÊàêÊ†ë‰∏ä‰ªªÊÑè‰∏§‰∏™ÁÇπ‰πãÈó¥ÁöÑË∑ØÂæÑÁªèËøáÁöÑËæπÁöÑÊù°Êï∞ÁöÑÂ•áÂÅ∂ÊòØÁ°ÆÂÆöÁöÑÔºåÂπ∂‰∏îÂè™Êúâ‰∫åÂàÜÂõæÊª°Ë∂≥ËØ•Êù°‰ª∂Ôºå‰∏çËøáÊàë‰ª¨Êó†Ê≥ï‰øùËØÅËøûÈÄöÂùóÊòØ‰∫åÂàÜÂõæÔºå‰πüÂ∞±ÊòØËØ¥ÔºåËøûÈÄöÂùó‰∏≠ÁöÑ‰ªªÊÑè‰∏§‰∏™ÁÇπ‰πãÈó¥ÁöÑË∑ØÂæÑÁªèËøáÁöÑËæπÁöÑÊù°Êï∞ÁöÑÂ•áÂÅ∂ÊòØ‰∏çÁ°ÆÂÆöÁöÑ„ÄÇ ÈÇ£‰πàÊàë‰ª¨Áé∞Âú®ÈúÄË¶ÅÂÅöÁöÑÂ∞±ÊòØÔºåÂ¶Ç‰Ωï‰ΩøÂæó‰∏çÊòØ‰∫åÂàÜÂõæÁöÑËøûÈÄöÂùóÊâÄÊ±ÇÂá∫ÁöÑÁîüÊàêÊ†ëÂèØ‰ª•Êª°Ë∂≥‚Äî‚Äî‰ªªÊÑè‰∏§‰∏™ÁÇπ‰πãÈó¥ÁöÑË∑ØÂæÑÁªèËøáÁöÑËæπÁöÑÊù°Êï∞ÁöÑÂ•áÂÅ∂ÊòØ‰∏çÁ°ÆÂÆöÁöÑ„ÄÇ ‰ªîÁªÜÊÉ≥ÊÉ≥ÂêéÂèëÁé∞Âπ∂‰∏çÈöæÔºåÊàë‰ª¨Âè™ÈúÄË¶ÅÂú®ÁîüÊàêÊ†ë‰∏äÂä†‰∏ä‰∏Ä‰∏™Â•áÁéØÂ∞±Â•Ω‰∫ÜÔºåÂΩìÁÑ∂‰πüÁ≠â‰ª∑‰∫éÂú®ÁîüÊàêÊ†ë‰∏äÁöÑÊüê‰∏Ä‰∏™ÁÇπ‰∏äÂä†‰∏™Ëá™ÁéØ„ÄÇ ËøôÂ∞±ÂæàÂ•ΩÂäû‰∫ÜÔºåÁé∞Âú®Êàë‰ª¨ÁöÑËæπÊï∞Â∑≤ÁªèÂ§ßÂ§ßÂáèÂ∞ë‰∫ÜÔºåËøô‰∏™Êó∂ÂÄôÂÜçË∑ëÂéüÂÖàÁöÑ $30$ ÂàÜÁÆóÊ≥ïÂ∞±ÂèØ‰ª•Ëøá‰∫Ü„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;#define MKP make_pairconst int N=5e3+7;const int M=5e5+7;int n,m,q,s[N],vis[N],f[N][N];int flag,sta[N],top;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;struct Graph &#123; int head[N],nxt[M&lt;&lt;1],to[M&lt;&lt;1],from[N],cnt; void ins(int u,int v) &#123; ++cnt,nxt[cnt]=head[u],to[cnt]=v,head[u]=cnt; ++cnt,nxt[cnt]=head[v],to[cnt]=u,head[v]=cnt; &#125; void check(int u,int col) &#123; vis[u]=col,sta[++top]=u; for(int i=head[u];i;i=nxt[i]) if(!vis[to[i]]) from[to[i]]=u,check(to[i],3-col); else flag|=(vis[to[i]]!=3-col); &#125; void solve() &#123; queue&lt;pair&lt;int,int&gt; &gt; q; while(!q.empty()) q.pop(); for(int i=1;i&lt;=n;++i) f[i][i]=1,q.push(MKP(i,i)); for(int i=1;i&lt;=n;++i) for(int j=head[i];j;j=nxt[j]) if(s[i]==s[to[j]]) f[i][to[j]]=1,q.push(MKP(i,to[j])); while(!q.empty()) &#123; int x=q.front().first,y=q.front().second,u,v; q.pop(); for(int i=head[x];i;i=nxt[i]) for(int j=head[y];j;j=nxt[j]) if(!f[u=to[i]][v=to[j]]&amp;&amp;s[u]==s[v]) f[u][v]=f[v][u]=1,q.push(MKP(u,v)); &#125;return; &#125;&#125;G[3],t;char str[N];int main() &#123; IN(n),IN(m),IN(q); scanf("%s",str); for(int i=0;i&lt;n;++i) s[i+1]=str[i]-'0'; for(int i=1;i&lt;=m;++i) &#123; int x,y;IN(x),IN(y); if(s[x]==s[y]) &#123; if(s[x]) G[0].ins(x,y); else G[1].ins(x,y); &#125; else G[2].ins(x,y); &#125; for(int k=0;k&lt;=2;++k) &#123; memset(vis,0,sizeof(vis)); for(int i=1;i&lt;=n;++i) if(!vis[i]) &#123; flag=top=0,G[k].check(i,1); while(top) &#123; int x=sta[top]; if(G[k].from[x]) t.ins(G[k].from[x],x); --top; &#125;if(flag) t.ins(i,i); &#125; &#125; t.solve(); for(int i=1,x,y;i&lt;=q;++i) IN(x),IN(y),printf(f[x][y]?"YES\n":"NO\n"); return 0;&#125; È¢ù‚Ä¶‚Ä¶ÂÖ∂ÂÆûËøô‰ªΩ‰ª£Á†ÅÂú® $luogu$ ‰∏ä‰ºöË¢´Âç°Êàê $70$ Ôºå‰∏çËøáÈÇ£ÊòØÂú®Ê≤°ÂºÄ $O2$ ÁöÑÊÉÖÂÜµ‰∏ãÁöÑÔºåÂºÄ‰∫Ü $O2$ È°øÊó∂È£ûËµ∑ÔºÅ(Âπ∏Â•ΩËøôÈ¢òÂú®ËÄÉÂú∫‰∏äÂ∞±ÊòØÂºÄ $O2$ ÁöÑ)„ÄÇ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>ÁîüÊàêÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2012]È≠îÂπªÊ£ãÁõò ‰∫åÁª¥Á∫øÊÆµÊ†ë+Â∑ÆÂàÜ luoguP2086/bzoj2788]]></title>
    <url>%2F2019%2F04%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2086%2F</url>
    <content type="text"><![CDATA[ÁªÜËäÇËØ∏Â§ö‚Ä¶‚Ä¶‚Ä¶‚Ä¶ $gcd$ ÊòæÁÑ∂ÂèØ‰ª•Áî®Á∫øÊÆµÊ†ëÁª¥Êä§Ôºå‰ΩÜÊòØÂ¶ÇÊûúÊòØÂå∫Èó¥‰øÆÊîπÁöÑËØùÂ∞±‰∏çÂ•ΩÂäû‰∫Ü„ÄÇËøô‰∏™Êó∂ÂÄôÊàë‰ª¨ÈúÄË¶ÅÂ∞ÜÂéüÁü©Èòµ‰ª•Ê£ãÁõòÂÆàÊä§ËÄÖÁöÑ‰ΩçÁΩÆ‰∏∫‰∏≠ÂøÉËøõË°åÂ∑ÆÂàÜÔºåÈÇ£‰πàÂå∫Èó¥‰øÆÊîπÂ∞±Âèò‰∏∫ÂçïÁÇπ‰øÆÊîπ‰∫ÜÔºå$gcd$ Ëá™ÁÑ∂Â•ΩÁª¥Êä§Â§ö‰∫Ü„ÄÇ ‰ΩÜÊòØÂΩìÊàë‰ª¨Êï¥‰ΩìÂä†ÁöÑÊó∂ÂÄôÔºåÂõ†‰∏∫Êàë‰ª¨ÂØπÂéüÁü©ÈòµËøõË°å‰∫ÜÊãÜÂàÜÔºåÊâÄ‰ª•ÂØπ‰∫éÊØè‰∏™ÁÇπÊòØÂä†ÊòØÂáèËøòÊòØ‰∏çÂä®ÁöÑËØùÈúÄË¶ÅÂàÜÁ±ªËÆ®ËÆ∫‰∏ÄÁï™„ÄÇ ÁªèËøáËßÇÂØüÊàë‰ª¨‰ºöÂèëÁé∞ÔºåÊúâ‰∏âÁßçÊÉÖÂÜµ(Ê£ãÁõòÂÆàÊä§ËÄÖÁöÑ‰ΩçÁΩÆ‰∏∫ $(X,Y)$ ËØ¢ÈóÆÁü©Èòµ‰∏çÂåÖÊã¨ $(X,Y)$ ËØ¢ÈóÆÁü©ÈòµÂåÖÂê´Ê£ãÁõòÂÆàÊä§ËÄÖÊâÄÂú®ÁöÑ $X$ ËΩ¥ÊàñÊòØ $Y$ ËΩ¥„ÄÇ ËØ¢ÈóÆÁü©Èòµ‰∏çÂåÖÂê´Ê£ãÁõòÂÆàÊä§ËÄÖÊâÄÂú®ÁöÑ $X$ ËΩ¥ÊàñÊòØ $Y$ ËΩ¥„ÄÇ ËØ¢ÈóÆÁü©ÈòµÂåÖÊã¨ $(X,Y)$ Ëøô‰∏™Êó∂ÂÄôÊàë‰ª¨ÂèØ‰ª•Ëá™Â∑±Êõ¥ÊîπÂéüÁü©ÈòµÔºåÁÑ∂ÂêéËæìÂá∫ÂÖ∂Â∑ÆÂàÜÁü©ÈòµÂØªÊâæËßÑÂæã‰∫Ü„ÄÇÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÂà§Êñ≠ÁöÑÊó∂ÂÄôÁöÑËæπÁïåÊÉÖÂÜµ‰ª•ÂèäËá™Â∑±‰øÆÊîπÁöÑÁÇπÁöÑ‰ΩçÁΩÆÊòØÂê¶Ê≠£Á°Æ„ÄÇÁªÜËäÇÂæàÂ§öÔºåÈúÄË¶ÅÊ≥®ÊÑè„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;#define F(i,x,y) for((i)=(x);(i)&lt;=(y);++(i))#define R(i,x,y) for((i)=(x);(i)&gt;=(y);--(i)) const int N=5e5+7;const int inf=1e9+9; int n,m;LL a[N],b[N];int id(int x,int y) &#123;return (x-1)*m+y;&#125; namespace OI &#123; LL abs(LL x) &#123;return x&gt;=0?x:-x;&#125; LL gcd(LL x,LL y) &#123;return y?gcd(y,x%y):abs(x);&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI; namespace _2D_Segment_tree &#123;/*ÂõõÂàÜÁ∫øÊÆµÊ†ë*/ #define midl ((x1+x2)&gt;&gt;1) #define midr ((y1+y2)&gt;&gt;1) int tot,root; struct Node &#123;LL v;int ll,lr,rl,rr;&#125;t[N&lt;&lt;4]; void pushup(int x) &#123; LL vl=gcd(t[t[x].ll].v,t[t[x].lr].v); LL vr=gcd(t[t[x].rl].v,t[t[x].rr].v); t[x].v=gcd(vl,vr);return; &#125; void build(int&amp;x,int x1,int y1,int x2,int y2) &#123; if(x1&gt;x2||y1&gt;y2) return;x=++tot; if(x1==x2&amp;&amp;y1==y2) &#123;t[x].v=a[id(x1,y1)];return;&#125; build(t[x].ll,x1,y1,midl,midr); build(t[x].lr,midl+1,y1,x2,midr); build(t[x].rl,x1,midr+1,midl,y2); build(t[x].rr,midl+1,midr+1,x2,y2); pushup(x);return; &#125; void change(int x,int x1,int y1,int x2,int y2,int X,int Y,LL val) &#123; if(x1&gt;X||X&gt;x2||y1&gt;Y||Y&gt;y2) return; if(x1==x2&amp;&amp;y1==y2) &#123;t[x].v+=val;return;&#125; change(t[x].ll,x1,y1,midl,midr,X,Y,val); change(t[x].lr,midl+1,y1,x2,midr,X,Y,val); change(t[x].rl,x1,midr+1,midl,y2,X,Y,val); change(t[x].rr,midl+1,midr+1,x2,y2,X,Y,val); pushup(x);return; &#125; LL query(int x,int x1,int y1,int x2,int y2,int X1,int Y1,int X2,int Y2) &#123; if(x1&gt;X2||x2&lt;X1||y1&gt;Y2||y2&lt;Y1) return 0; if(X1&lt;=x1&amp;&amp;Y1&lt;=y1&amp;&amp;x2&lt;=X2&amp;&amp;y2&lt;=Y2) return t[x].v; LL vll=query(t[x].ll,x1,y1,midl,midr,X1,Y1,X2,Y2); LL vlr=query(t[x].lr,midl+1,y1,x2,midr,X1,Y1,X2,Y2); LL vrl=query(t[x].rl,x1,midr+1,midl,y2,X1,Y1,X2,Y2); LL vrr=query(t[x].rr,midl+1,midr+1,x2,y2,X1,Y1,X2,Y2); return gcd(vll,gcd(vlr,gcd(vrl,vrr))); &#125;&#125;using namespace _2D_Segment_tree; int main() &#123; IN(n),IN(m); int X,Y,T,i,j;IN(X),IN(Y),IN(T); for(int i=1;i&lt;=n*m;++i) IN(a[i]); /*-------ÂØπÂéüÁü©ÈòµËøõË°åÂ∑ÆÂàÜ-------*/ for(int i=1;i&lt;=n*m;++i)&#123; if((i-1)%m+1&lt;Y) b[i]=a[i]-a[i+1]; else if((i-1)%m+1&gt;Y) b[i]=a[i]-a[i-1]; else b[i]=a[i]; &#125; for(int i=1;i&lt;=n*m;++i) &#123; if((i-1)/m+1&lt;X) a[i]=b[i]-b[i+m]; else if((i-1)/m+1&gt;X) a[i]=b[i]-b[i-m]; else a[i]=b[i]; &#125; /*----------------------------*/ build(root,1,1,n,m); while(T--) &#123; int op,x1,y1,x2,y2;IN(op),IN(x1),IN(y1),IN(x2),IN(y2); if(!op) printf("%lld\n",query(1,1,1,n,m,X-x1,Y-y1,X+x2,Y+y2)); else &#123; LL val;IN(val); if(x1&lt;=X&amp;&amp;x2&gt;=X&amp;&amp;y1&lt;=Y&amp;&amp;y2&gt;=Y) &#123;/*ÂåÖÂê´‰∫Ü(X,Y)*/ change(1,1,1,n,m,X,Y,val); if(y1-1&gt;=1) change(1,1,1,n,m,X,y1-1,-val); if(y2+1&lt;=m) change(1,1,1,n,m,X,y2+1,-val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,Y,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,Y,-val); if(x1-1&gt;=1&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x1-1,y1-1,val); if(x1-1&gt;=1&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x1-1,y2+1,val); if(x2+1&lt;=n&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x2+1,y1-1,val); if(x2+1&lt;=n&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x2+1,y2+1,val); &#125; else if(y1&lt;=Y&amp;&amp;Y&lt;=y2) &#123;/*ÂåÖÂê´YËΩ¥*/ if(x1&lt;X&amp;&amp;x2&lt;X) &#123;/*Âú®‰∏äÈù¢*/ change(1,1,1,n,m,x2,Y,val); if(y1-1&gt;=1) change(1,1,1,n,m,x2,y1-1,-val); if(y2+1&lt;=m) change(1,1,1,n,m,x2,y2+1,-val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,Y,-val); if(x1-1&gt;=1&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x1-1,y1-1,val); if(x1-1&gt;=1&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x1-1,y2+1,val); &#125; else if(x1&gt;X&amp;&amp;x2&gt;X) &#123;/*Âú®‰∏ãÈù¢*/ change(1,1,1,n,m,x1,Y,val); if(y1-1&gt;=1) change(1,1,1,n,m,x1,y1-1,-val); if(y2+1&lt;=m) change(1,1,1,n,m,x1,y2+1,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,Y,-val); if(x2+1&lt;=n&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x2+1,y1-1,val); if(x2+1&lt;=n&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x2+1,y2+1,val); &#125; &#125; else if(x1&lt;=X&amp;&amp;X&lt;=x2) &#123;/*ÂåÖÂê´XËΩ¥*/ if(y1&lt;Y&amp;&amp;y2&lt;Y) &#123;/*Âú®Â∑¶Ëæπ*/ change(1,1,1,n,m,X,y2,val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,y2,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,y2,-val); if(y1-1&gt;=1) change(1,1,1,n,m,X,y1-1,-val); if(y1-1&gt;=1&amp;&amp;x1-1&gt;=1) change(1,1,1,n,m,x1-1,y1-1,val); if(y1-1&gt;=1&amp;&amp;x2+1&lt;=n) change(1,1,1,n,m,x2+1,y1-1,val); &#125; else if(y1&gt;Y&amp;&amp;y2&gt;Y) &#123;/*Âú®Âè≥Ëæπ*/ change(1,1,1,n,m,X,y1,val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,y1,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,y1,-val); if(y2+1&lt;=m) change(1,1,1,n,m,X,y2+1,-val); if(y2+1&lt;=m&amp;&amp;x1-1&gt;=1) change(1,1,1,n,m,x1-1,y2+1,val); if(y2+1&lt;=m&amp;&amp;x2+1&lt;=n) change(1,1,1,n,m,x2+1,y2+1,val); &#125; &#125; else &#123;//Ââ©‰∏ãÁöÑÂà§Êñ≠Âõõ‰∏™Ëßí if(x2&lt;X&amp;&amp;y2&lt;Y) &#123;//Â∑¶‰∏äËßí change(1,1,1,n,m,x2,y2,val); if(y1-1&gt;=1) change(1,1,1,n,m,x2,y1-1,-val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,y2,-val); if(x1-1&gt;=1&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x1-1,y1-1,val); &#125; else if(x2&lt;X&amp;&amp;y1&gt;Y) &#123;/*Âè≥‰∏äËßí*/ change(1,1,1,n,m,x2,y1,val); if(y2+1&lt;=m) change(1,1,1,n,m,x2,y2+1,-val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,y1,-val); if(x1-1&gt;=1&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x1-1,y2+1,val); &#125; else if(x1&gt;X&amp;&amp;y2&lt;Y) &#123;/*Â∑¶‰∏ãËßí*/ change(1,1,1,n,m,x1,y2,val); if(y1-1&gt;=1) change(1,1,1,n,m,x1,y1-1,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,y2,-val); if(x2+1&lt;=n&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x2+1,y1-1,val); &#125; else if(x1&gt;X&amp;&amp;y1&gt;Y) &#123;/*Âè≥‰∏ãËßí*/ change(1,1,1,n,m,x1,y1,val); if(y2+1&lt;=m) change(1,1,1,n,m,x1,y2+1,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,y1,-val); if(x2+1&lt;=n&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x2+1,y2+1,val); &#125; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Á∫øÊÆµÊ†ë</tag>
        <tag>‰∫åÁª¥Á∫øÊÆµÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HNOI2019]Â§öËæπÂΩ¢ ÁªÑÂêàÊï∞Â≠¶ luoguP5288]]></title>
    <url>%2F2019%2F04%2F12%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5288%2F</url>
    <content type="text"><![CDATA[$\texttt{HNOI2019}$ Áªà‰∫éÊîπÂá∫Êù•‰∏ÄÈÅìÈ¢òÁõÆ‰∫Ü‚Ä¶‚Ä¶ÊÑüË∞¢ $JerryC$ Ë∑üÊàë‰∏ÄËµ∑ËÆ®ËÆ∫Ôºå‰∏çÁÑ∂Êàë‰πüÁúã‰∏çÊáÇÈ¢òËß£„ÄÇËøôÈ¢òÁúüÁöÑÊòØ $\texttt{HNOI2019}$ ÊúÄÂèØÂÅöÁöÑÈ¢òÂïäÔºåÂèØÊÉ≥ËÄåÁü• $\texttt{HNOI2019}$ ÊúâÂ§ö‰πàÊØíÁò§‰∫Ü„ÄÇ $orz yyb$ ÔºåÊÑüË∞¢ $yyb$ Â§ß‰Ω¨ÁöÑÈ¢òËß£„ÄÇ Ëøô‰∏ÄÈ¢ò‰∏ÄÂÖ±Êúâ‰∏§ÈóÆÔºåÂπ∂‰∏îÈÉ®ÂàÜÂàÜ‰πüÊØîËæÉÂ§öÔºåÊé•‰∏ãÊù•Êàë‰ª¨‰∏ÄËµ∑Êù•ÈÄê‰∏ÄÊîªÁ†¥Ëøô‰∫õÁâπÊÆäÊù°‰ª∂„ÄÇ 1.Âè™ÊúâÁ¨¨‰∏ÄÈóÆ‰∏î $m=0$ ÁöÑÊÉÖÂÜµÂÖ∂ÂÆûËøô‰∏™Êó∂ÂÄôÊàë‰ª¨ÂèØ‰ª•ÂèëÁé∞ÔºåÊúÄÁªàÁöÑÁ≠îÊ°àÊòØË¶ÅÊª°Ë∂≥ÊâÄÊúâÁöÑÁÇπÈÉΩËøûÂêë $n$ „ÄÇ ÂØπ‰∫éÊØè‰∏ÄÊ¨°ÊóãËΩ¨Êìç‰ΩúÔºåÂèØ‰ª•ËÆ© ‰∏Ä‰∏™Ê≤°ÊúâËøûÂêë $n$ ÁöÑÁÇπËøûÂêë $n$ ÔºåÂπ∂‰∏î‰∏ÄÊ¨°ÊóãËΩ¨Êìç‰Ωú‰πüÊúÄÂ§öÂèØ‰ª•‰ΩøÂæó‰∏Ä‰∏™Ê≤°ÊúâËøûÂêë $n$ ÁöÑÁÇπËøûÂêë $n$ „ÄÇÊó¢ÁÑ∂Ë¶ÅÊ±ÇÊúÄÂ∞ëÊ≠•Êï∞ÔºåÊàë‰ª¨ËÄÉËôëÊúÄ‰ºòÊÉÖÂÜµÔºöÊØè‰∏ÄÊ¨°ÊóãËΩ¨ÈÉΩÊúâ‰∏Ä‰∏™Êñ∞ÁöÑÁÇπËøûÂêë $n$ „ÄÇËøô‰∏™Êó∂ÂÄôÊúÄÁªàÈúÄË¶ÅÁöÑÊúÄÂ∞ëÊ≠•Êï∞ÊòæÁÑ∂Â∞±ÊòØ $n-1-$Â∑≤Áªè‰∏é $n$ ËøûÊé•‰∫ÜÁöÑÁÇπÊï∞Ôºå‰∏∫‰ªÄ‰πà $-1$ ÔºüÂõ†‰∏∫ÊúÄÁªàÈúÄË¶ÅËøûÂêë $n$ ÁöÑÁÇπ‰∏çÂåÖÊã¨ $n$ „ÄÇ(psÔºöËøôÈáåÊåáÁöÑÂ∑≤Áªè‰∏é $n$ ËøûÊé•‰∫ÜÁöÑÁÇπÊï∞ÂÖ∂ÂÆûÂåÖÊã¨ $1$ ‰∏é $n-1$) „ÄÇ Ëá≥‰∫é‰ª£Á†ÅÂÆûÁé∞ÁöÑËØùÔºåÊàë‰ª¨Áî®‰∏™ $vector$ Êù•Â≠òËøûÊé•ÁöÑÁÇπÔºåÊúÄÂêéÁªüËÆ°‰∏Ä‰∏ã $size$ Âç≥ÂèØ„ÄÇ 2.Êúâ‰∏§ÈóÆ‰∏î $m=0$ ÁöÑÊÉÖÂÜµÂàùÂßãÂ±ÄÈù¢ÁöÑÁ¨¨‰∏ÄÈóÆÊàë‰ª¨Â∑≤ÁªèËß£ÂÜ≥‰∫ÜÔºåÁé∞Âú®Êàë‰ª¨Êù•ÁúãÁúãÊÄé‰πàËß£ÂÜ≥ÂàùÂßãÂ±ÄÈù¢ÁöÑÁ¨¨‰∫åÈóÆ„ÄÇ ÂÅáËÆæÂΩìÂâç‰∏é $n$ ËøûÊé•‰∫ÜÁöÑÁÇπÁöÑÈõÜÂêà‰∏∫ $S=\{a_1,a_2,\cdots ,a_s\}$ ÔºåËøô‰∏™Êó∂ÂÄôÊàë‰ª¨Â∞Ü $1$ Âà∞ $n$ ÂàÜÊàêËã•Âπ≤‰∏™Âå∫Èó¥Ôºö$[1,a_1],[a_1,a_2],\cdots,[a_{s-1},a_s],[a_s,n-1]$ ÔºåÊàë‰ª¨‰ºöÂèëÁé∞ÔºåÊØè‰∏ÄÊ¨°ÊóãËΩ¨Êìç‰ΩúÁöÑÂõõ‰∏™ÁÇπ‰∏ÄÂÆöÂ±û‰∫éÂêå‰∏Ä‰∏™Âå∫Èó¥ „ÄÇÂú®ÊúÄÁªàÁä∂ÊÄÅÔºåÊØè‰∏Ä‰∏™Âå∫Èó¥‰∏≠ÁöÑÊâÄÊúâÁöÑÁÇπÈÉΩÊòØËøûÂêë $n$ ÁöÑ„ÄÇ ÈÇ£‰πàÊàë‰ª¨ËÄÉËôëËÆ°ÁÆóÊØè‰∏Ä‰∏™Âå∫Èó¥ÁöÑÊìç‰ΩúÂ∫èÂàóÔºåÊàë‰ª¨ËÆæ $[a_i,a_{i+1}]$ Âå∫Èó¥ÁöÑÊìç‰ΩúÂ∫èÂàóÈïøÂ∫¶‰∏∫ $sz(a_i)$ „ÄÇÊ≥®ÊÑèËøô‰∏™Êìç‰ΩúÂ∫èÂàóÊåáÁöÑÂ∞±ÊòØ‰∏Ä‰∏™Âå∫Èó¥‰ªéÂàùÂßãÁä∂ÊÄÅÂà∞ÊúÄÁªàÁä∂ÊÄÅÁöÑÊâÄÊúâÊóãËΩ¨Êìç‰ΩúÁªÑÊàêÁöÑÂ∫èÂàó„ÄÇ Êàë‰ª¨Áé∞Âú®ËÄÉËôëÊñπÊ°àÊï∞ÔºåÂÅáËÆæÊàë‰ª¨Áü•ÈÅì‰∫Ü $sz(a_i),sz(a_{i+1})$ Ôºå‰πüÂ∞±ÊòØÂå∫Èó¥ $[a_i,a_{i+1}]$ ÂíåÂå∫Èó¥ $[a_{i+1},a_{i+2}]$ ÁöÑÊìç‰ΩúÂ∫èÂàóÁöÑÈïøÂ∫¶„ÄÇÈÇ£‰πà‰ΩøÂæóËøô‰∏§‰∏™Âå∫Èó¥ÈÉΩÂà∞ËææÊúÄÁªàÁä∂ÊÄÅÁöÑÊñπÊ°àÊï∞ÊòæÁÑ∂‰∏∫ $C_{sz(a_i)+sz(a_{i+1})}^{sz(a_i)}$ÔºåÂΩìÁÑ∂‰πüÊòØ $C_{sz(a_i)+sz(a_{i+1})}^{sz(a_{i+1})}$ „ÄÇ Ëøô‰∏ãÂ≠êËÆ°ÁÆóÂ∞±ÂèòÂæóÁÆÄÂçïÂ§ö‰∫ÜÔºå‰ΩÜÊòØÊàë‰ª¨ÊÄé‰πàÊ±ÇÂá∫‰ΩøÂæóÂçï‰∏™Âå∫Èó¥Âèò‰∏∫ÊúÄÁªàÁä∂ÊÄÅÁöÑÊñπÊ°àÊï∞‰ª•ÂèäÂΩì‰∏™Âå∫Èó¥ÁöÑÊìç‰ΩúÂ∫èÂàóÈïøÂ∫¶Âë¢ÔºüËøô‰∏™Êó∂ÂÄôÊàë‰ª¨ÂèØ‰ª•Â∞ÜÊØè‰∏Ä‰∏™Âå∫Èó¥ $[a_i,a_{i+1}]$ Âª∫Êàê‰∏ÄÊ£µ‰∫åÂèâÊ†ëÔºåÊØè‰∏ÄÊ¨°Â∞Ü $[a_i,a_{i+1}]$ ÊãÜÊàê $[a_i,p],[p,a_{i+1}]$ ÔºåÂú®Ê†ë‰∏≠Ëøô‰∏§‰∏™Â≠êÂå∫Èó¥Â∞±ÊòØ $[a_i,a_{i+1}]$ ÁöÑ‰∏§‰∏™ÂÑøÂ≠ê„ÄÇ Ëøô‰∏ãÂ≠ê‰ΩøÂæó $[a_i,a_{i+1}]$ Âèò‰∏∫ÊúÄÁªàÁä∂ÊÄÅÁöÑÊñπÊ°àÊï∞ÊòæÁÑ∂ÂèØ‰ª•‰ªéÂÖ∂Ê†ë‰∏≠ÁöÑ‰∏§‰∏™ÂÑøÂ≠êÂæóÂá∫‰∫ÜÔºåËÆ°ÁÆóÁöÑÊñπÊ≥ïÂíå‰∏äÈù¢ÂêåÁêÜ„ÄÇ Ëá≥‰∫éËøô‰∏™ $p$ ÔºåÂÅáËÆæÂΩìÂâçÂå∫Èó¥‰∏∫ $l,r$ ÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄâÊã© Á¨¨‰∏Ä‰∏™ÊØî $l+1$ Â§ß‰∏î‰∏é $r$ Ëøû‰∫ÜËæπÁöÑÁÇπ ÔºåÈÇ£‰πàËøô‰∏™Êó∂ÂÄôÂèØ‰ª•ÁêÜËß£‰∏∫ ÊãÜÊéâ $p,r$ ËøôÊù°ËæπÔºåÁÑ∂ÂêéËøûËµ∑Êù• $p,n$ ËøôÊù°Ëæπ Ôºå‰∫éÊòØ $l,p$ ÂèØ‰ª•‰Ωú‰∏∫‰∏Ä‰∏™Âå∫Èó¥‰∫ÜÔºå$p,r$ ‰πüÂèØ‰ª•‰Ωú‰∏∫‰∏Ä‰∏™Âå∫Èó¥‰∫Ü„ÄÇ ‰∏∫‰ªÄ‰πà‰∏ÄÂÆöË¶ÅÈÄâÊã©Á¨¨‰∏Ä‰∏™ÊØî $l+1$ Â§ß‰∏î‰∏é $r$ Ëøû‰∫ÜËæπÁöÑÁÇπÂë¢ÔºüÊàë‰ª¨ËÄÉËôë‰∏§‰∏™ÁÇπ $a$ Âíå $b$ ÔºåÂÖ∂‰∏≠ $a$ Â∞±ÊòØÁ¨¨‰∏Ä‰∏™ÊØî $l+1$ Â§ß‰∏î‰∏é $r$ Ëøû‰∫ÜËæπÁöÑÁÇπÔºå$b$ ÂàôÊòØ‰∏Ä‰∏™Â∞è‰∫é $r$ Â§ß‰∫é $a$ Âπ∂‰∏îÂíå $r$ Ëøû‰∫ÜËæπÁöÑÁÇπ „ÄÇÂ¶ÇÊûúËøô‰∏™Êó∂ÂÄôÈÄâÊã©Â∞Ü $b,r$ Êñ≠ÂºÄËøûÊé• $b,n$ ÁöÑËØùÔºåÁ∫øÊÆµ $a,r$ ÂíåÁ∫øÊÆµ $b,n$ ÊòæÁÑ∂‰ºö‰∫§Âèâ ÔºåÈÇ£‰πàÂ∞±‰∏çÂêàÊ≥ï‰∫Ü„ÄÇÊâÄ‰ª•Êàë‰ª¨ÈÄâÊã©Á¨¨‰∏Ä‰∏™ÊØî $l+1$ Â§ß‰∏î‰∏é $r$ Ëøû‰∫ÜËæπÁöÑÁÇπÔºåËøôÊ†∑Ëá≥Â∞ëÊòØÂêàÊ≥ïÁöÑ„ÄÇÂΩìÁÑ∂Â¶ÇÊûúËøô‰∏™ÁÇπÂ§ß‰∫é $r$ ‰∫ÜÂ∞±Ê≤°ÂäûÊ≥ï‰∫Ü„ÄÇ ‰ª£Á†ÅÁöÑËØù‰∏Ä‰∏™ $dfs$ ÂèØ‰ª•ÊêûÂÆö„ÄÇ 3.$m&gt;0$ ‰∏îÂè™ÊúâÁ¨¨‰∏ÄÈóÆÁöÑÊÉÖÂÜµÈ¶ñÂÖàÊàë‰ª¨‰ºöÂèëÁé∞ÔºåÁ¨¨‰∏ÄÈóÆÁöÑÁ≠îÊ°àÂÖ∂ÂÆûÂ∞±ÊòØÊàë‰ª¨ÁöÑÊ†ëÁöÑÁªìÁÇπ‰∏™Êï∞„ÄÇ ÁÑ∂ÂêéËÄÉËôëËøô‰∏™ÊóãËΩ¨Êìç‰ΩúÔºåÁé∞Âú®Êúâ $a&lt;b&lt;c&lt;d‚Äã$ ÔºåÊàë‰ª¨ÈúÄË¶ÅÊ±ÇÂá∫ÁöÑÂ∞±ÊòØ $(a,c)‚Äã$ ÊóãËΩ¨ÂØπÁ¨¨‰∏ÄÈóÆÂ∏¶Êù•ÁöÑÂèòÂåñ„ÄÇ Êó¢ÁÑ∂ $a,c$ ÊòØËøû‰∫ÜËæπÁöÑÔºåÈÇ£‰πàÂú®Ê†ë‰∏≠‰πü‰∏ÄÂÆöÊúâ‰∏Ä‰∏™ËäÇÁÇπ‰ª£Ë°® $[a,c]$ Âå∫Èó¥ÔºåÊàë‰ª¨ÂÖàÂú®Ê†ë‰∏≠ÊâæÂà∞Ëøô‰∏™ËäÇÁÇπÔºåÁÑ∂ÂêéÂÜçÂàÜ‰∏§ÁßçÊÉÖÂÜµÊù•ËÆ®ËÆ∫„ÄÇ ‰∏Ä.ËØ•ËäÇÁÇπÂú®Ê†ë‰∏≠ÊúâÁà∂ËäÇÁÇπÊàë‰ª¨Â∞ÜÂõæÁîªÂá∫Êù•Ôºö ÔºàÂ∑¶ËæπÁöÑÊòØÂéüÊù•ÁöÑÔºåÂè≥ËæπÁöÑÊòØÁªèËøá‰∫Ü $(a,c)$ ÊóãËΩ¨ÁöÑÔºâ ÂèØ‰ª•ÂèëÁé∞ÔºåÊóãËΩ¨‰πãÂêéÊàë‰ª¨ÊçüÂ§±‰∫Ü $(a,c)$ ËäÇÁÇπÔºå‰ΩÜÊòØÂ§ö‰∫Ü‰∏™ $(b,d)$ ËäÇÁÇπÔºåÊàë‰ª¨ÁöÑËäÇÁÇπÊï∞ÂÆûÈôÖ‰∏äÊòØÊ≤°ÊúâÂèòÁöÑ„ÄÇ‰πüÂ∞±ÊòØËØ¥Êàë‰ª¨Á¨¨‰∏ÄÈóÆÁöÑÁ≠îÊ°àÊ≤°ÊúâÂèò„ÄÇ ‰∫å.ËØ•ËäÇÁÇπÂú®Ê†ë‰∏≠Ê≤°ÊúâÁà∂ËäÇÁÇπËøô‰∏™Êó∂ÂÄô $a,c$ ËÇØÂÆöÈÉΩÊòØÂ∑≤ÁªèËøûÂêë‰∫Ü $n$ ÁöÑÔºå‰∏çÁÑ∂‰∏çÂèØËÉΩÊ≤°ÊúâÁà∂ËäÇÁÇπ„ÄÇÈÇ£‰πàËøô‰∏™Êó∂ÂÄô $d$ Ë¶Å‰∏çÊòØ $n$ Ë¶Å‰∏çÊòØÂÖ∂‰ªñÂå∫Èó¥ÁöÑÁÇπ‰∫Ü„ÄÇ‰∏äÊñáÂ∑≤ÁªèËÆ≤‰∫ÜÔºåÊóãËΩ¨Êìç‰ΩúÂè™ÂèØËÉΩÂú®‰∏Ä‰∏™Âå∫Èó¥ÂÜÖËøõË°åÔºå‰πüÂ∞±ÊòØËØ¥ $d$ Âè™ËÉΩÁ≠â‰∫é $n$ „ÄÇ ÈÇ£‰πà $d=n$ ÁöÑËØùÊ†ë‰ºöÊÄé‰πàÂèòÊç¢Âë¢ÔºüÂæàÊòæÁÑ∂Ôºå$(a,c)$ ‰ºöÊ∂àÂ§±ÔºåÂâ©‰∏ãÁöÑÂ∞±ÊòØ $(a,b)$ Âíå $(b,c)$ „ÄÇËøô‰∏™Êó∂ÂÄôÊòØÂ∞ë‰∫Ü‰∏Ä‰∏™ÁÇπÁöÑÔºåÈÇ£‰πàÁ¨¨‰∏ÄÈóÆÁöÑÁ≠îÊ°àÂ∞±Ë¶ÅÂáè‰∏Ä‰∫Ü„ÄÇ Â¶ÇÊûú‰ªéÂ§öËæπÂΩ¢ÁöÑËßíÂ∫¶ÁêÜËß£ÁöÑËØùÔºå‰ºöÂèëÁé∞Â§ö‰∫Ü‰∏Ä‰∏™ËøûÊé•‰∫Ü $n$ ÁöÑÁÇπÔºåÈÇ£‰πàÁ¨¨‰∏ÄÈóÆÁöÑÁ≠îÊ°àËá™ÁÑ∂Â∞±Â∞ë‰∫Ü‰∏Ä„ÄÇ Ëøô‰∏™‰ª£Á†ÅÂÆûÁé∞Â∞±‰∏çËÆ≤‰∫Ü„ÄÇ 4.$m&gt;0$ ‰∏î‰∏§ÈóÆÈÉΩÊúâÁöÑÊÉÖÂÜµËß£ÂÜ≥‰∫ÜËøô‰∏™ÊÉÖÂÜµÊàë‰ª¨Â∞±ËÉúÂà©‰∫Ü„ÄÇ ‰πüÂ∞±ÊòØËØ¥Áé∞Âú®Êàë‰ª¨ÈúÄË¶ÅËß£ÂÜ≥ $m&gt;0$ Êó∂Á¨¨‰∫åÈóÆÊÄé‰πàÂèòÂåñ„ÄÇ ÊåâÁÖß‰∏äÈù¢ÁöÑÊù•Â∞±Ë°å‰∫Ü„ÄÇ ‰∏Ä.ËØ•ËäÇÁÇπÂú®Ê†ë‰∏≠ÊúâÁà∂ËäÇÁÇπÊåâÁÖß‰∏äÈù¢ÁöÑÂõæÔºåÊàë‰ª¨ÂèØ‰ª•ÂÖàÂ∞ÜËøô‰∫õËäÇÁÇπÁöÑË¥°ÁåÆÂéªÊéâ„ÄÇÁÑ∂ÂêéÂÜçÂä†‰∏äÊñ∞ÁöÑË¥°ÁåÆÂç≥ÂèØ„ÄÇ ‰∫å.ËØ•ËäÇÁÇπÂú®Ê†ë‰∏≠Ê≤°ÊúâÁà∂ËäÇÁÇπÊàë‰ª¨Áõ¥Êé•ÂéªÊéâ $(a,c)$ ÁöÑË¥°ÁåÆÔºåÁÑ∂ÂêéÂä†‰∏ä $(a,b),(b,c)$ ÁöÑË¥°ÁåÆÂç≥ÂèØ„ÄÇ Ëøô‰∏ÄÈÉ®ÂàÜÂèØ‰ª•ÂèÇÁÖß‰ª£Á†Å‰∫Ü„ÄÇ Áªº‰∏äÔºåÊàë‰ª¨Ëß£ÂÜ≥‰∫ÜÊâÄÊúâÁöÑÈóÆÈ¢òÔºåÊé•‰∏ãÊù•Ë¥¥Âá∫‰ª£Á†Å $QwQ$ „ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include &lt;map&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const int MOD=1e9+7;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int W,n,Ans1,Ans2=1;vector&lt;int&gt; G[N];/*G[i]Ë°®Á§∫‰∏éiÁõ∏ËøûÊé•ÁöÑÁÇπÁöÑÈõÜÂêà*/map&lt;pair&lt;int,int&gt;,int&gt; vis;/*Ëøô‰∏™ÊòØ‰∏∫‰∫ÜÊñπ‰æøÂø´ÈÄüÊâæÂà∞‰ª£Ë°®(a,c)ËäÇÁÇπÊâÄÁî®ÁöÑmap*/inline void solve() &#123;//ÂàùÂßãÂåñ for(int i=2;i&lt;n;++i) G[i].push_back(i+1),G[i].push_back(i-1); G[1].push_back(n),G[1].push_back(2); G[n].push_back(n-1),G[n].push_back(1); for(int i=1;i&lt;=n;++i) sort(G[i].begin(),G[i].end());&#125;int inv[N&lt;&lt;1],fct[N&lt;&lt;1],fci[N&lt;&lt;1];/*ÂàÜÂà´ÂØπÂ∫îÈÄÜÂÖÉÔºåÈò∂‰πòÔºåÈÄÜÂÖÉÁöÑÈò∂‰πò„ÄÇ‰∏ªË¶ÅÁî®‰∫éËÆ°ÁÆóÁªÑÂêàÊï∞*/inline int C(int n,int m) &#123; if(n&lt;0||m&lt;0||n&lt;m) return 0; return 1ll*fct[n]*fci[m]%MOD*fci[n-m]%MOD;&#125;inline int Inv_C(int n,int m) &#123; if(n&lt;0||m&lt;0||n&lt;m) return 0; return 1ll*fci[n]*fct[m]%MOD*fct[n-m]%MOD;&#125;inline int calc(int n,int m) &#123;return C(n+m,n);&#125;inline int Inv_calc(int n,int m) &#123;return Inv_C(n+m,n);&#125;/*‰∏äÈù¢ÁöÑÁªÑÂêàÊï∞‰∏çÂÜçËµòËø∞......*/int root[N],fa[N&lt;&lt;1],sz[N&lt;&lt;1],ch[N&lt;&lt;1][2],tot;/*root[i]Â∞±ÊòØSÈõÜÂêà‰∏≠ÁöÑÂå∫Èó¥ai,ai+1Âú®Ê†ë‰∏≠ÁöÑËäÇÁÇπÁöÑÁºñÂè∑*//*faË°®Á§∫Áà∂ËäÇÁÇπÔºåszË°®Á§∫ËäÇÁÇπÂ≠êÊ†ëÂ§ßÂ∞èÔºåchË°®Á§∫ËäÇÁÇπÁöÑÂ∑¶Âè≥ÂÑøÂ≠ê*/void dfs(int&amp;x,int f,int l,int r) &#123; if(r-l&lt;=1) return; x=++tot,sz[x]=1,fa[x]=f; int p=lower_bound(G[r].begin(),G[r].end(),l+1)-G[r].begin(); /*ÊâæÂà∞Ëøô‰∏™p*/ p=G[r][p],vis[make_pair(l,r)]=x; /*ÊâæÂà∞pÂú®ÂéüÂ§öËæπÂΩ¢‰∏≠ÂØπÂ∫îÁöÑÁÇπÔºåÂπ∂ËÆ∞ÂΩïl,rÂú®Ê†ë‰∏≠ÁöÑÁÇπÁöÑÁºñÂè∑*/ dfs(ch[x][0],x,l,p),dfs(ch[x][1],x,p,r);/*Âêë‰∏ãËÆ°ÁÆóÂ≠êÊ†ë*/ sz[x]+=sz[ch[x][0]]+sz[ch[x][1]];/*ÁªüËÆ°Â≠êÊ†ëÂ§ßÂ∞è*/ Ans2=1ll*Ans2*calc(sz[ch[x][0]],sz[ch[x][1]])%MOD;/*ËÆ°ÁÆóË¥°ÁåÆ*/&#125;int main() &#123; IN(W),IN(n); inv[0]=inv[1]=fct[0]=fci[0]=1; for(int i=2;i&lt;=n+n;++i) inv[i]=1ll*(MOD-MOD/i)*inv[MOD%i]%MOD; for(int i=1;i&lt;=n+n;++i) fct[i]=1ll*fct[i-1]*i%MOD; for(int i=1;i&lt;=n+n;++i) fci[i]=1ll*fci[i-1]*inv[i]%MOD; /*‰ª•‰∏ä‰∏∫ÂàùÂßãÂåñÈÄÜÂÖÉÔºåÈò∂‰πòÔºåÈÄÜÂÖÉÁöÑÈò∂‰πò*/ for(int i=1;i&lt;=n-3;++i) &#123; int x,y;IN(x),IN(y); G[x].push_back(y),G[y].push_back(x); &#125; solve(),Ans1=n-1-G[n].size(); for(int i=0,len=G[n].size();i&lt;len-1;++i) dfs(root[i],0,G[n][i],G[n][i+1]);/*ËÆ°ÁÆóÊØè‰∏™Âå∫Èó¥ai,ai+1ÁöÑÊ†ë*/ int Size=0; for(int i=0,len=G[n].size();i&lt;len-1;++i) Ans2=1ll*Ans2*calc(Size,sz[root[i]])%MOD,Size+=sz[root[i]]; /*ÁªüËÆ°Á≠îÊ°à*/ if(!W) printf("%d\n",Ans1); else printf("%d %d\n",Ans1,Ans2); int q;IN(q); while(q--) &#123; int a,b;IN(a),IN(b); if(a&gt;b) a^=b^=a^=b; int x=vis[make_pair(a,b)];/*ÊâæÂà∞Âú®ÂéüÊ†ë‰∏≠a,bÊâÄ‰ª£Ë°®ÁöÑËäÇÁÇπ*/ if(!W) &#123;printf("%d\n",Ans1-(fa[x]?0:1));continue;&#125; else &#123; int nowans1=Ans2; if(fa[x]) &#123; int y=fa[x],k=ch[y][1]==x; nowans1=1ll*nowans1*Inv_calc(sz[ch[x][0]],sz[ch[x][1]])%MOD; nowans1=1ll*nowans1*Inv_calc(sz[ch[y][0]],sz[ch[y][1]])%MOD; nowans1=1ll*nowans1*calc(sz[ch[x][!k]],sz[ch[y][!k]])%MOD; nowans1=1ll*nowans1*calc(1+sz[ch[y][!k]]+sz[ch[x][!k]],sz[ch[x][k]])%MOD; /*Èô§ÊéâË¥°ÁåÆ‰∏éÂ¢ûÂä†Ë¥°ÁåÆ*/ &#125; else &#123; nowans1=1ll*nowans1*Inv_calc(sz[ch[x][0]],sz[ch[x][1]])%MOD; nowans1=1ll*nowans1*Inv_calc(Size-sz[x],sz[x])%MOD; nowans1=1ll*nowans1*calc(Size-sz[x],sz[ch[x][0]])%MOD; nowans1=1ll*nowans1*calc(Size-sz[x]+sz[ch[x][0]],sz[ch[x][1]])%MOD; /*Èô§ÊéâË¥°ÁåÆ‰∏éÂ¢ûÂä†Ë¥°ÁåÆ*/ &#125; printf("%d %d\n",Ans1-(fa[x]?0:1),nowans1);/*ËæìÂá∫Á≠îÊ°à*/ &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁªÑÂêàÊï∞Â≠¶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë[SDOI2017]Êï∞Â≠óË°®Ê†º Ëé´ÊØî‰πåÊñØÂèçÊºî luoguP3704]]></title>
    <url>%2F2019%2F04%2F10%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3704%2F</url>
    <content type="text"><![CDATA[Êàë‰ª¨ËÆæ $n \leq m‚Äã$ ÔºåÁÑ∂ÂêéÂºÄÂßãÊé®ÂºèÂ≠êÔºåÊàë‰ª¨Â∞Ü $gcd(i,j)‚Äã$ ÁöÑÂÄº‰Ωú‰∏∫ ‚Äú$d‚Äã$‚Äù ÊèêÂá∫Êù•Ôºö \prod_{d=1}^{n}\prod_{i=1}^{n}\prod_{j=1}^{m}if(gcd(i,j)=d) f[d]=\prod_{d=1}^{n}\prod_{i=1}^{n}\prod_{j=1}^{m}if(gcd(i,j)=d) f[d]=\prod_{d=1}^{n}\prod_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\prod_{j=1}^{ \lfloor\frac{m}{d}\rfloor }if(gcd(i,j)=1) f[d]=\prod_{d=1}^{n} f[d]^{\sum_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]} $\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]‚Äã$ ÊòØ‰∏™ÁÜüÊÇâÁöÑÂºèÂ≠êÔºåÊàë‰ª¨‰ªéËøô‰∏™ÂºèÂ≠êÁªßÁª≠ÂºÄÂàÄÔºö \sum_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{ \lfloor\frac{m}{d}\rfloor }[gcd(i,j)=1]‚Äã=\sum_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{ \lfloor\frac{m}{d}\rfloor }\sum_{x|gcd(i,j)} \mu(x)‚Äã=\sum_{x=1}^{n}\mu(x)\lfloor\frac{n}{dx}\rfloor\lfloor\frac{m}{dx}\rfloor‚Äã‰∫éÊòØÂéüÊù•ÁöÑÂºèÂ≠êÂèòÊàê‰∫ÜÔºö \prod_{d=1}^{n} f[d]^{\sum_{x=1}^{n}\mu(x)\lfloor\frac{n}{dx}\rfloor\lfloor\frac{m}{dx}\rfloor}‚ÄãËÆæ $T=dx$ ÔºåÂπ∂Â∞Ü $T$ ÊèêÂá∫Êù•Êûö‰∏æÔºö \prod_{d=1}^{n} f[d]^{\sum_{x=1}^{n}\mu(x)\lfloor\frac{n}{dx}\rfloor\lfloor\frac{m}{dx}\rfloor}‚Äã=\prod_{T=1}^{n}\prod_{d|T} f[d]^{\mu( \lfloor\frac{T}{d}\rfloor )\lfloor\frac{n}{T}\rfloor\lfloor\frac{m}{T}\rfloor}=\prod_{T=1}^{n}(\prod_{d|T} f[d]^{\mu( \lfloor\frac{T}{d}\rfloor )})^{\lfloor\frac{n}{T}{\rfloor\lfloor\frac{m}{T}\rfloor}}Ëøô‰∏™Ê†∑Â≠êÂ§öÂ•ΩÂïäÔºåÊàë‰ª¨ÂèØ‰ª•Â∞ÜÂèØÁà±ÁöÑ $(\prod_{d|T} f[d]^{\mu( \lfloor\frac{T}{d}\rfloor )})$ È¢ÑÂ§ÑÁêÜÔºå‰πüÂ∞±ÊòØÊûö‰∏æÊØè‰∏Ä‰∏™ $d$ ÔºåÁÑ∂ÂêéÂ∞ÜÂèØ‰ª•Êï¥Èô§ $d$ ÁöÑÊØè‰∏Ä‰∏™ $T$ ÈÉΩÁÆó‰∏ä $d$ Â∏¶Êù•ÁöÑË¥°ÁåÆÂç≥ÂèØ„ÄÇÊúÄÂêéÁöÑÊó∂ÂÄôÂèØ‰ª•Êï¥Èô§ÂàÜÂùó„ÄÇÊúÄÁªàÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶‰∏∫ $O(\sqrt{n})$ ÔºåÂΩìÁÑ∂‰∏çÁÆó‰∏äÈ¢ÑÂ§ÑÁêÜÊó∂ÂÄôÁöÑÂ§çÊùÇÂ∫¶ÔºåÂ¶ÇÊûúÂä†‰∏äÈ¢ÑÂ§ÑÁêÜÁöÑÂ§çÊùÇÂ∫¶ÔºåÊúÄÁªàÁöÑÂ§çÊùÇÂ∫¶Â∫îËØ•‰∏∫ $O(N(log\ N+log\ mod)+T(\sqrt{n} \ log\ mod))$ Ôºå$log\ mod$ Â∞±ÊòØÁÆóÈÄÜÂÖÉÁöÑÂ§çÊùÇÂ∫¶„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e6+2;#define MOD 1000000007template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;bool vis[N+15];int mui[N+15],inv[N+15],fib[N+15],sum[N+15],prime[N],cnt;inline int pow(int x,int y) &#123; int res=1; for(;y;y&gt;&gt;=1,x=1ll*x*x%MOD) if(y&amp;1) res=1ll*res*x%MOD; return res%MOD;&#125;inline void pre() &#123; fib[1]=inv[1]=sum[0]=sum[1]=1; vis[1]=true,mui[1]=1; for(int i=2;i&lt;=N;++i) &#123; fib[i]=(fib[i-1]+fib[i-2])%MOD; inv[i]=pow(fib[i],MOD-2),sum[i]=1; if(!vis[i]) prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=N;++j) &#123; vis[i*prime[j]]=1; if(!(i%prime[j])) break; else mui[i*prime[j]]=-mui[i]; &#125; &#125; for(int d=1;d&lt;=N;++d) &#123; if(!mui[d]) continue; for(int T=d;T&lt;=N;T+=d) sum[T]=1ll*sum[T]*(mui[d]==1?fib[T/d]:inv[T/d])%MOD; &#125; for(int i=2;i&lt;=N;++i) sum[i]=1ll*sum[i]*sum[i-1]%MOD; return;&#125;int T,n,m;int main() &#123; pre(),IN(T); while(T--) &#123; IN(n),IN(m); if(n&gt;m) swap(n,m); int ans=1,res,num; for(int l=1,r=0;l&lt;=n;l=r+1) &#123; r=min(n/(n/l),m/(m/l)); num=1ll*(n/l)*(m/l)%(MOD-1); res=1ll*sum[r]*pow(sum[l-1],MOD-2)%MOD; ans=1ll*ans*pow(res,num)%MOD; &#125; printf("%d\n",(ans+MOD)%MOD); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ëé´ÊØî‰πåÊñØÂèçÊºî</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë ‰∏çÂêåÂ≠ê‰∏≤‰∏™Êï∞ ÂêéÁºÄÊï∞ÁªÑ.SA luoguP2408]]></title>
    <url>%2F2019%2F04%2F10%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2408%2F</url>
    <content type="text"><![CDATA[ÂêéÁºÄÊï∞ÁªÑ„ÄÇ ÂÅáËÆæÊàë‰ª¨Áé∞Âú®Â∑≤ÁªèÊ±ÇÂá∫‰∫Ü $height$ Êï∞ÁªÑÔºåÊàë‰ª¨ÂèëÁé∞ÔºåÂØπ‰∏§‰∏™ÂêéÁºÄÔºåÂÖ∂ÈáçÂ§ç‰∫ÜÁöÑÂ≠ó‰∏≤ÁöÑ‰∏™Êï∞Â∞±ÊòØ $height$ Êï∞ÁªÑÊâÄËÆ∞ÂΩïÁöÑÊï∞„ÄÇÊàë‰ª¨‰∏æ‰∏™‰æãÂ≠êÔºö ÂêéÁºÄ$sa[i-1]$: $aaabbdbs$ÂêéÁºÄ$sa[i]$ : $aabbdbs$ ‰ºöÂèëÁé∞ÔºåÊúÄÂâçÈù¢ÁöÑ‚Äù$aa$‚ÄùÊòØ‰∏§‰∏™‰∏≤ÈÉΩÊúâÁöÑÔºå‚Äù$aa$‚Äù‰∏≠ÂåÖÂê´ÁöÑ‚Äù$a$‚Äù‰πüÊòØ‰∏§‰∏™‰∏≤ÈÉΩÊúâÁöÑÔºåËøôÊ†∑Â≠êÂ∞±Êúâ‰∏§‰∏™ÈáçÂ§çÁöÑ‰∫ÜÔºåÂèØ‰ª•ÂèëÁé∞Ëøô‰∏™ÈáçÂ§ç‰∏™Êï∞Ê≠£Â•ΩÊòØ $height[i]$ ÁöÑÂÄº„ÄÇ ‰ΩÜÊòØÂêéÈù¢ËøòÊòØÊúâÈáçÂ§çÁöÑÂïäÔºüÊ≤°ÂÖ≥Á≥ªÔºåÂõ†‰∏∫Êàë‰ª¨ÊúâÊâÄÊúâÁöÑÂêéÁºÄÔºåÊâÄ‰ª•Êï¥‰∏™‰∏≤‰∏≠ÊâÄÊúâÁöÑÈáçÂ§çÁöÑ‰∏≤ÈÉΩ‰ºöË¢´ÁªüËÆ°ËøõÊù•„ÄÇÊâÄ‰ª•Ëøô‰∏ãÂ≠êÊàë‰ª¨ÂèØ‰ª•ÂæàÂÆπÊòìÁöÑÊ±ÇÂá∫Êï¥‰∏™‰∏≤‰∏≠ÈáçÂ§çÁöÑ‰∏≤ÁöÑ‰∏™Êï∞‰∫ÜÔºåÂ∞±ÊòØ $\sum_{i=1}^{n}height[i]$ „ÄÇ Â≠ê‰∏≤ÁöÑ‰∏™Êï∞ÊòæÁÑ∂ÊòØ $\frac{n(n+1)}{2}$ ÔºåËøô‰∏§È°πÁõ∏ÂáèÂ∞±ÊòØÊàë‰ª¨ÈúÄË¶ÅÁöÑÁ≠îÊ°à‰∫ÜÔºåËÆ∞ÂæóÂºÄ $longlong$ „ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const int inf=1e9+9;namespace Suffix_array &#123; char s[N]; int sa[N],x[N],y[N],hep[N],height[N],n,m; void Sort() &#123; for(int i=0;i&lt;=m;++i) hep[i]=0; for(int i=1;i&lt;=n;++i) ++hep[x[i]]; for(int i=1;i&lt;=m;++i) hep[i]+=hep[i-1]; for(int i=n;i&gt;=1;--i) sa[hep[x[y[i]]]--]=y[i]; &#125; void Pre_sa() &#123; for(int i=1;i&lt;=n;++i) x[i]=s[i],y[i]=i; m=129;Sort(); for(int w=1,p=0;m=p,p&lt;n;w&lt;&lt;=1) &#123; p=0; for(int i=1;i&lt;=w;++i) y[++p]=n-w+i; for(int i=1;i&lt;=n;++i) if(sa[i]&gt;w) y[++p]=sa[i]-w; Sort(),swap(x,y),x[sa[1]]=p=1; for(int i=2;i&lt;=n;++i) x[sa[i]]=(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+w]==y[sa[i-1]+w])?p:++p; &#125;return; &#125; ll Pre_height() &#123; for(int i=1;i&lt;=n;++i) x[sa[i]]=i; int k=0,res=0; for(int i=1;i&lt;=n;++i) &#123; k-=k&gt;0; int j=sa[x[i]-1]; while(i+k&lt;=n&amp;&amp;j+k&lt;=n&amp;&amp;s[i+k]==s[j+k]) ++k; height[x[i]]=k,res+=k; &#125;return res;//Áõ¥Êé•ËøîÂõûheightÊï∞ÁªÑÁöÑÂíå &#125;&#125;using namespace Suffix_array;int main() &#123; scanf("%d\n",&amp;n); scanf("%s",s+1); Pre_sa(); ll ans=1ll*n*(n+1)/2; ans-=Pre_height(); printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÂêéÁºÄÊï∞ÁªÑ.SA</tag>
        <tag>È¢òËß£</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÊ∏∏ËÆ∞„Äë HNOI2019ÈÖ±Ê≤πËÆ∞]]></title>
    <url>%2F2019%2F04%2F08%2F%5B%E6%B8%B8%E8%AE%B0%5DHNOI2019%2F</url>
    <content type="text"><![CDATA[ÂÜçÊ≠§ËæìÂÖ•‰Ω†ÁöÑÂØÜÁ†Å‰ª•‰æøÈòÖËØªÂÖ®Êñá Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>Ê∏∏ËÆ∞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HNOI2012]Ê∞∏Êó†‰π° Á∫øÊÆµÊ†ë+ÂêØÂèëÂºèÂêàÂπ∂ luoguP3224]]></title>
    <url>%2F2019%2F04%2F04%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3224%2F</url>
    <content type="text"><![CDATA[ÂÆûÈôÖ‰∏äÂèØ‰ª•Áî®Âπ≥Ë°°Ê†ëÂÅöÁöÑ‰ΩÜÊòØ‰∏çÂñúÊ¨¢Âπ≥Ë°°Ê†ë„ÄÇ ËøòÊòØÂñúÊ¨¢ÂèØÁà±ÁöÑÁ∫øÊÆµÊ†ëÔºå‰∫éÊòØÊâì‰∫Ü‰∏ÄÂèëÁ∫øÊÆµÊ†ëÂêàÂπ∂„ÄÇÂæà‰πÖÊ≤°ÊúâËøôÊ†∑Â≠êÁöÑÂÅöÈ¢òÊÑüËßâ‰∫ÜÔºåÁúüÊòØÁæéÂ¶ôÔºåÊÄùË∑ØÊ∏ÖÊô∞Ôºå‰∫§‰∏äÂéª‰∏ÄÈÅçËøá(Á™ù‰∏ç‰ºöÂëäËØâÊ≥•ËêåÁ™ùÁ¨¨‰∏ÄÊ¨°‰∫§ÁöÑÊó∂ÂÄôÂøòÂÖ≥Êñá‰ª∂=„ÄÇ=)„ÄÇ Êàë‰ª¨ÂØπ‰∫éÊØè‰∏Ä‰∏™ÁÇπÁª¥Êä§‰∏Ä‰∏™ÊùÉÂÄºÁ∫øÊÆµÊ†ëÔºåÁÑ∂ÂêéÁî®Âπ∂Êü•ÈõÜÁª¥Êä§ÁÇπ‰∏éÁÇπ‰πãÈó¥ÁöÑËÅîÈÄöÂÖ≥Á≥ª„ÄÇÂØπ‰∫é‰∏Ä‰∏™ËøûÈÄöÂùóÔºåËØ•ËøûÈÄöÂùóÁöÑÊâÄÊúâÁªìÁÇπ‰ø°ÊÅØÈÉΩ‰øùÁïôÂú®ËØ•ËøûÈÄöÂùóÁöÑ $root$ ‰∏ä„ÄÇ ËøôÊ†∑Â≠êÊàë‰ª¨ÂêàÂπ∂‰∏§‰∏™Â≤õÁöÑÊó∂ÂÄô $x,y$ ÔºåÂèØ‰ª•Áõ¥Êé•Â∞Ü $x$ ÊâÄÂú®ËøûÈÄöÂùóÁöÑ $root$ (ÁÆÄÁß∞ $fx$ ) Âíå $y$ ÊâÄÂú®ËøûÈÄöÂùóÁöÑ $root$ (ÁÆÄÁß∞ $fy$ ) ÂêàÂπ∂Ëµ∑Êù•Ôºå‰πüÂ∞±ÊòØÂ∞Ü $fy$ ÁöÑÁ∫øÊÆµÊ†ëÂπ∂Âà∞ $fx$ ‰∏äÂéª„ÄÇËøôÊ†∑Â≠ê $fx$ Â∞±Áª¥Êä§‰∫ÜËøô‰∏§‰∏™ËøûÈÄöÂùóÁöÑ‰ø°ÊÅØ‰∫ÜÔºåÊúÄÂêéÊàë‰ª¨ÊåâÁÖßÂπ∂Êü•ÈõÜÁöÑÂ•óË∑ØÂ∞Ü $fy$ ÁöÑÁà∂‰∫≤ËÆæ‰∏∫ $fx$ Âç≥ÂèØ„ÄÇ ËØ¢ÈóÆÂ∞±ÊòØÂü∫Á°ÄÊìç‰ΩúÔºåÊùÉÂÄºÁ∫øÊÆµÊ†ëÂ∞±ÂÉè‰∏ªÂ∏≠Ê†ëÈÇ£Ê†∑ËØ¢ÈóÆÂç≥ÂèØ„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N=1e5+7;const int Max=N*650;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;struct Seg_Tree &#123; #define mid ((l+r)&gt;&gt;1) int cnt,rt[N],val[Max],lc[Max],rc[Max]; inline void pushup(int x) &#123; val[x]=val[lc[x]]+val[rc[x]]; &#125; void update(int&amp;x,int l,int r,int pos) &#123; if(!x) x=++cnt; if(l==r) &#123;++val[x];return;&#125; if(pos&lt;=mid) update(lc[x],l,mid,pos); else update(rc[x],mid+1,r,pos); pushup(x); &#125; int query(int x,int l,int r,int k) &#123; if(l==r) return l; int th=val[lc[x]]; if(k&lt;=th) query(lc[x],l,mid,k); else return query(rc[x],mid+1,r,k-th); &#125; int merge(int x,int y,int l,int r) &#123; if(!x||!y) return x+y; if(l==r) &#123;val[x]+=val[y];return x;&#125; lc[x]=merge(lc[x],lc[y],l,mid), rc[x]=merge(rc[x],rc[y],mid+1,r); pushup(x);return x; &#125;&#125;T;int fa[N],pos[N],n,m,q;int find(int x) &#123;return fa[x]==x?x:fa[x]=find(fa[x]);&#125;int main() &#123; IN(n),IN(m); for(int i=1,x;i&lt;=n;++i) fa[i]=i,IN(x),pos[x]=i,T.update(T.rt[i],1,n,x); for(int i=1;i&lt;=m;++i) &#123; int u,v;IN(u),IN(v); int fu=find(u),fv=find(v); if(fu!=fv) T.merge(T.rt[fu],T.rt[fv],1,n),fa[fv]=fu; &#125; IN(q); for(int i=1;i&lt;=q;++i) &#123; char op[2];int x,y,k; scanf("%s",op); if(op[0]=='B') &#123; IN(x),IN(y); int fx=find(x),fy=find(y); if(fx!=fy) T.merge(T.rt[fx],T.rt[fy],1,n),fa[fy]=fx; &#125; else if(op[0]=='Q') &#123; IN(x),IN(k); int fx=find(x); if(T.val[T.rt[fx]]&lt;k) printf("-1\n"); else printf("%d\n",pos[T.query(T.rt[fx],1,n,k)]); /*Êàë‰ª¨queryÂà∞ÁöÑÊòØÁ¨¨KÂ§ßÁöÑÊùÉÂÄºËÄåÈùûÂ≤õÂ±øÁöÑÁºñÂè∑*/ /*‰∫éÊòØÂä†‰∏™posÊï∞ÁªÑÂ∞±Â•Ω‰∫Ü*/ &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Á∫øÊÆµÊ†ë</tag>
        <tag>ÂêØÂèëÂºèÂêàÂπ∂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêËÄÉËØïÊÄªÁªì„Äë Test-2019.4.3 HNOI2019Ê®°Êãü]]></title>
    <url>%2F2019%2F04%2F03%2F%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190403%2F</url>
    <content type="text"><![CDATA[‰∏âÈÅìÈ¢òÁõÆÔºå‰∏ÄÁúºÂá∫ÁÆóÊ≥ï„ÄÇ Á¨¨‰∏ÄÈÅìÈ¢òÁõÆÊòæÁÑ∂ÊòØÂêéÁºÄËá™Âä®Êú∫ÔºåÁ¨¨‰∫åÈÅìÈ¢òÁõÆÊòæÁÑ∂ÊòØËé´ÊØî‰πåÊñØÂèçÊºîÂä†‰∏äÊùúÊïôÁ≠õ„ÄÇÁ¨¨‰∏âÈÅìÈ¢òÁõÆÊòæÁÑ∂ÊòØÁΩëÁªúÊµÅ„ÄÇ ÁÑ∂ËÄåËÄÉÂú∫‰∏äÈÉΩÊ≤°ÂÅöÂá∫Êù•‚Ä¶‚Ä¶Ëá™Èó≠‰∫Ü„ÄÇ ÁúüÁöÑÔºåÁé∞Âú®Â∑≤ÁªèÊòØÂÇçÊôö‰∫ÜÔºåÂ§ßÂêéÂ§©Â∞±ÊòØÊØíÁò§ÁöÑÁúÅÈÄâ‰∫Ü‚Ä¶‚Ä¶Â∞èÂ≠¶‰∏≠Áé∞Âú®Ê≠£Âú®‰∏æÂäûËøêÂä®‰ºöÔºåÁè≠Á∫ßÁæ§‰∏≠‰∏ÄÁæ§‰∫∫Âú®ÈÇ£Èáå‰∏Ä‰∏™Âä≤ÁöÑÂñäÂä†Ê≤πÔºå‰ΩÜÊòØÔºåÁè≠‰∏äÊúâ‰∫∫ÁªôÊàëÂä†Ê≤πÂêóÔºüÈô§‰∫ÜÂá†‰∏™Â•ΩÊúãÂèã‰πãÂ§ñ‚Ä¶‚Ä¶ È¢òÁõÆÂéãÁº©ÂåÖÊà≥Êàë!!!~\(‚âß‚ñΩ‚â¶)/~(ÊúâÊó∂ÈìæÊé•ÂèØËÉΩ‰ºöÂ¥©ÔºåÂ¶ÇÊûúÂ¥©‰∫ÜÁöÑËØùËØ∑Á®çÂêéÂ∞ùËØïQwQ) T1 ÊúüÊúõÂæóÂàÜÔºö40ÂàÜÂÆûÈôÖÂæóÂàÜÔºö40ÂàÜÊ≠£Ëß£ÔºöÂêéÁºÄËá™Âä®Êú∫(SAM)+FFTÁ™ùÁöÑËß£Ê≥ïÔºöÂìàÂ∏å È¢òËß£ÂóØÂêéÁºÄËá™Âä®Êú∫ÊòØ‰ºöÁöÑ‰ΩÜÊòØÊÑüËßâ‰∏çÂ•ΩÂÅö„ÄÇ ‰∫éÊòØÂºÑ‰∫Ü‰∏™ÂìàÂ∏å‰∏äÂéªÈ™óÂàÜÔºåÊö¥ÂäõÊûö‰∏æÂ≠ó‰∏≤ÁÑ∂ÂêéÁéÑÂ≠¶ÂìàÂ∏åÂç≥ÂèØ„ÄÇ ‰∏ç‰ºöÊ≠£Ëß£„ÄÇ„ÄÇ„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;map&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=666;const int inf=1e9+9;const int MOD=100000007;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int k,m,cnt,res[N*N],ans;char s[N],c[N];map&lt;int,int&gt; hash;void dfs(int step,int sum) &#123; if(step==k+1&amp;&amp;sum==m) &#123;++ans;return;&#125; if(step==k+1) return; if(sum&gt;m) return; for(int i=1;i&lt;=cnt;++i) dfs(step+1,sum+res[i]); return;&#125;int main() &#123; freopen("tele.in","r",stdin); freopen("tele.out","w",stdout); IN(k),IN(m); scanf("%s",s+1); int n=strlen(s+1); for(int i=1;i&lt;=n;++i) for(int j=i;j&lt;=n;++j) &#123; int tot=0; for(int k=i;k&lt;=j;++k) tot=(1ll*tot*27%MOD+s[k]-'a'+1)%MOD; /*Â§ßÂäõÁéÑÂ≠¶ÂìàÂ∏å+mapÂà§Èáç*/ hash[tot]++; &#125; for(int i=1;i&lt;=n;++i) for(int j=i;j&lt;=n;++j) &#123; int tot=0; for(int k=i;k&lt;=j;++k) tot=(1ll*tot*27%MOD+s[k]-'a'+1)%MOD; res[++cnt]=hash[tot]; &#125; dfs(1,0); /*ÁÅµÊú∫‰∏ÄÂä®ËøôÊ†∑ÂÜôÔºåÈÇ£‰πàkÊâì‰∫é2ÁöÑÊó∂ÂÄôÂ¶ÇÊûúÊï∞ÊçÆÂ∞èÂèØ‰ª•Â§öÊãø‰∏Ä‰∫õÂàÜ*/ /*ÂÆûÈ™åËØÅÊòéËøôÊ†∑Â∏ÉÊòü*/ printf("%d\n",ans); return 0;&#125; T2 ÊúüÊúõÂæóÂàÜÔºö60ÂàÜÂÆûÈôÖÂæóÂàÜÔºö40ÂàÜÊ≠£Ëß£ÔºöËé´ÊØî‰πåÊñØÂèçÊºî+ÊùúÊïôÁ≠õÁ™ùÁöÑËß£Ê≥ïÔºöËé´ÊØî‰πåÊñØÂèçÊºî È¢òËß£ËÄÉÂú∫‰∏äÂøòËÆ∞‰∫ÜÊùúÊïôÁ≠õÔºå‰∫éÊòØGG„ÄÇ Êú¨Êù•ÊúâÂÖ≠ÂçÅÂàÜÁöÑ‚Ä¶‚Ä¶ËÑëÊäΩÁöÑÁ™ùÔºåÈ¢ÑÂ§ÑÁêÜ $\sum_{i=1}^{T}\lfloor\frac{T}{i}\rfloor$ Â±ÖÁÑ∂Áî® $O(n\sqrt{n})$ Êù•Ëß£ÂÜ≥‚Ä¶‚Ä¶ÂÆûÈôÖ‰∏äÊîπ‰∏§‰∏™Â≠óÁ¨¶Â∞±ÂèòÊàê $O(n)$ ÁöÑÂ§çÊùÇÂ∫¶‰∫ÜÔºåÂ∞±Êúâ $60$ ÂàÜ‰∫Ü‚Ä¶‚Ä¶ ÂóØÁÑ∂ÂêéÁ≠õ $\mu$ ÁöÑÊó∂ÂÄôÂèØ‰ª•Êêû‰∏™ÊùúÊïôÁ≠õÂä†ÈÄüÔºåËøôÊ†∑Â≠êÁöÑËØù $\mu$ ÂáΩÊï∞ÁöÑÂâçÁºÄÂíåÂ∞±ÂèØ‰ª• $O(n^{\frac{2}{3}})$ Á≠õÂá∫„ÄÇ‰∏çËøá‰º∞ËÆ°ÊòØÊ†áÁ®ãË¥®Èáè‰∏çË°åÔºåÈ¢òÁõÆËåÉÂõ¥Âè™Êúâ $10^9$ ‚Ä¶‚Ä¶ÊùúÊïôÁ≠õÂèØ‰ª•Ëß£ÂÜ≥ $O(10^{11})$ Â∑¶Âè≥ÁöÑÈóÆÈ¢ò‚Ä¶‚Ä¶Âêß? Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;map&gt;#include &lt;cstdio&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=4e6;const int inf=1e9+9;const int MOD=1000000007;bitset&lt;N+7&gt; vis;int n,mui[N+7],prime[N],cnt;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;inline void pre() &#123; mui[1]=1; for(int i=2;i&lt;N;++i) &#123; if(!vis[i]) prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt&amp;&amp;i*prime[j]&lt;N;++j) &#123; vis[i*prime[j]]=1; if(!(i%prime[j])) &#123;mui[i*prime[j]]=0;break;&#125; else mui[i*prime[j]]=-mui[i]; &#125; &#125;for(int i=1;i&lt;N;++i) mui[i]+=mui[i-1]; return;&#125;ll S(int MX) &#123; ll sum=0; for(int l=1,r;l&lt;=MX;l=r+1) &#123; r=MX/(MX/l); sum=(sum+1ll*(r-l+1)*(MX/l)%MOD)%MOD; &#125;return sum;&#125;map&lt;int,int&gt; MU;int Sum(int x) &#123;/*ÊùúÊïôÁ≠õ*/ if(x&lt;N) return mui[x]; else if(MU.count(x)) return MU[x]; else if(!x) return 0; else &#123; int s=1; for(int l=2,r;l&lt;=x;l=r+1) &#123; r=x/(x/l); s-=(r-l+1)*Sum(x/l); &#125;return MU[x]=s; &#125;&#125;int main() &#123; freopen("math.in","r",stdin); freopen("math.out","w",stdout); scanf("%d",&amp;n); pre(); ll res=0; for(int l=1,r;l&lt;=n;l=r+1) &#123; r=n/(n/l); ll num=S(n/l); res=(res+1ll*(Sum(r)-Sum(l-1))*num*num%MOD+MOD)%MOD; &#125; printf("%lld\n",(res+MOD)%MOD); return 0;&#125; ÂóØÂÆûÈôÖËøôÈ¢òÁ™ùËßâÂæóÊòØ‰∏ÄÈÅìËé´ÂèçÊùøÂ≠êÈ¢òÔºå‰ΩÜÊòØÊ≤°ÂÅöÂá∫Êù•ÔºåÁúãÊù•ÊùúÊïôÁ≠õËøòÊòØ‰∏ç‰ºö‚Ä¶‚Ä¶ T3 ÊúüÊúõÂæóÂàÜÔºö50ÂàÜÂÆûÈôÖÂæóÂàÜÔºö0ÂàÜÊ≠£Ëß£ÔºöÊúÄÂ∞èÂâ≤Á™ùÁöÑËß£Ê≥ïÔºöÊúÄÂ∞èÂâ≤+ÁàÜÊêú È¢òËß£ÁúãÂÆåÈ¢òÁõÆÂêéÔºåÁ™ùÂÜ≥ÂÆöÁ¨¨‰∏Ä‰∏™ÁúãËøôÈÅìÈ¢ò„ÄÇ ÂìáÔºå‰∏ÄÁúºÁΩëÁªúÊµÅÈ¢òÁõÆÊ¨∏ÔºÅ Âí¶ËøôÈ¢òÂ•ΩÂÉèÂ∞è$M$ÁöÑ‰ΩúÁâ©Ê¨∏Ôºå‰ΩÜÊòØÁ¨¨‰∫å‰∏™Êìç‰ΩúÂèà‰∏çÂØπÂä≤‰∫Ü‚Ä¶‚Ä¶(ÂÆûÈôÖ‰∏äÁ¨¨‰∫å‰∏™Êìç‰ΩúÂ∞±ÊòØÊñáÁêÜÂàÜÁßëÈÇ£È¢òÔºå‰ΩÜÊòØÁ™ùÊ≤°ÂÅöÈÇ£È¢ò)„ÄÇ ÂóØÔºåÈúÄË¶ÅËä±Ë¥πÁöÑ‰ªÄ‰πàË¥πÁî®‚Ä¶‚Ä¶Ë¥πÁî®ÊµÅÔºüÔºÅÁÑ∂ÂêéÊâãÁîª‰∫Ü‰∏Ä‰∏ãÂõæ‚Ä¶‚Ä¶Ëá™Â∑±Ê®°Êãü‰∏Ä‰∏ãÂèëÁé∞Ê†πÊú¨‰∏çÂ•ΩÊ®°ÊãüÔºåÊÉ≥ÁùÄË¥πÁî®ÊµÅÊùøÂ≠ê‰πüÂ∞± $10$ ÂàÜÈíüÁöÑ‰∫ãÔºå‰∫éÊòØÊâì‰∫Ü‰∏™Ë¥πÁî®ÊµÅÁÖßÁùÄÁ™ù‰πãÂâçÁöÑÊÉ≥Ê≥ïÂª∫‰∏Ä‰∏ãËæπÔºåË∑ë‰∏Ä‰∏ãÂêéÂèëÁé∞Èîô‰∫Ü‚Ä¶‚Ä¶ ÁÑ∂ÂêéËã¶Ëã¶ÊÄùÁ¥¢‚Ä¶‚Ä¶ËΩ¨ÁúºÈó¥ $30$ ÂàÜÈíüËøáÂéª‰∫Ü„ÄÇÂèëÁé∞Êó∂Èó¥ËøáÂæóÊØîËæÉÂø´Ôºå‰∫éÊòØÂÜ≥ÂÆöÂÖàÂ∞ÜÊö¥Âäõ $30$ ÊâìÂ•ΩÂÜçÊÉ≥‚Ä¶‚Ä¶ÂóØÁàÜÊêú‰∏Ä‰∏ãÊïëËøá‰∫ÜÊ†∑‰æã(‰∏çËøáÁ™ùÁöÑÁàÜÊêúÂèàÊâìÈîô‰∫Ü‰ª•Ëá≥‰∫éÁ™ùÊ≤°ÊãøÂà∞ÂàÜÔºüÔºÅ) ÂóØËøô‰∏™Êó∂ÂÄôÊÑüËßâÂâç $30$ ÂàÜÁ®≥‰∫ÜÔºå‰∫éÊòØËßÇÂØüÈÉ®ÂàÜÂàÜÔºåÂèëÁé∞Êúâ $\%20$ ÁöÑÊï∞ÊçÆ‰∏çÂåÖÂê´Á¨¨‰∫å‰∏™Êìç‰ΩúÔºåÁõ¥Êé•‰∏äÂ∞è$M$ÁöÑ‰ΩúÁâ©ÂèëÁé∞Ëá™Â∑±Âøò‰∫ÜÔºåÊ≤°ÂäûÊ≥ïÂè™Â•ΩËá™Â∑±Áûé $YY$ ‰∏ÄÈÄö„ÄÇÊúÄÂêéÁöÑÁªìÊûúÂèëÁé∞ÊòØÊúÄÂ∞èÂâ≤ÔºåÁÑ∂ÂêéÊãÜÁÇπÔºåÊãÜÊàêÁâõÁæä‰∏§‰∏™ÁÇπÔºåÊ∫êÁÇπËøûÁâõÁÇπÔºåËæπÊùÉËá™ÁÑ∂ÊòØÂÖ∂Êî∂ÁõäÔºåÁæäÁÇπÂêåÁêÜ„ÄÇÁÑ∂Âêé‰∏≠Èó¥Ëøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $inf$ ÁöÑËæπÔºåË°®Á§∫Ëøô‰∏™Ë¶Å‰∏çÂúàÁâõË¶Å‰∏çÂúàÁæäÂè™ËÉΩÂúà‰∏Ä‰∏™„ÄÇ ÂóØÔºåÂèëÁé∞ËøòÊå∫ÊúâÈÅìÁêÜÁöÑ„ÄÇÂØπ‰∫éÔºåÂØπ‰∫éÈôêÂà∂ÁöÑËØùÊàë‰ª¨Âè™ÈúÄË¶ÅÂÜçÈôêÂà∂ÁöÑ‰∏§‰∏™ÁâõÁæäÁÇπ‰πãÈó¥Ëøû‰∏ä‰∏ÄÊù°ËæπÊùÉ‰∏∫ $inf$ ÁöÑËæπÂç≥ÂèØ„ÄÇ ‰∏ÄÈÅçËøáÊ†∑‰æãÔºåÁæéÊªãÊªãÂú∞ÂºÄÂßãÈÄ†Êï∞ÊçÆÊãçÔºåÂóØÁ¨¨‰∏ÄÊ¨°ÂíåÁàÜÊêúÊãçÂæóÊå∫È°∫Âà© $500$ ÁªÑÊï∞ÊçÆÂÖ®Ëøá‰∫Ü„ÄÇ Ê≤°ËøáÁòæÔºåÂÜçÊù•‰∏ÄÁªÑÔºåÁªìÊûúÁ¨¨‰∫åÁªÑ $500$ Êï∞ÊçÆÔºåÊãçÂà∞‰∏âÁôæÂ§ö‰∏™Â∞± $WA$ ‰∫Ü‚Ä¶‚Ä¶ ÂêéÈù¢Ê≤°ÊúâÊÉ≥Âá∫Êù•Ôºå‰∫éÊòØÂºÉÁñó‰∫Ü„ÄÇ Êé•‰∏ãÊù•ËÆ≤‰∏ÄËÆ≤Ê≠£Ëß£ÊÄé‰πàÂÅö Â∞è$M$ÁöÑ‰ΩúÁâ©Ëá™ÁÑ∂‰∏çÁî®ËÆ≤ÔºåÊàë‰ª¨Êù•ËÆ≤ËÆ≤ÊñáÁêÜÂàÜÁßëÊÄé‰πàÂÅö„ÄÇ ÂØπ‰∫éÊú¨È¢òÁöÑÁ¨¨‰∫å‰∏™Êìç‰ΩúÔºåÊàë‰ª¨ÈúÄË¶ÅÊñ∞Âª∫‰∏Ä‰∏™ÁªìÁÇπ $p‚Äã$ ÔºåÁÑ∂ÂêéÂ¶ÇÊûúËøô‰∏™Êìç‰ΩúÁöÑ $a‚Äã$ ÊòØ $0‚Äã$ Êàë‰ª¨Â∞±‰ªéÊ∫êÁÇπÂêëÂÖ∂Ëøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $b‚Äã$ ÁöÑËæπÔºå$a‚Äã$ ÊòØ $1‚Äã$ ÁöÑÊÉÖÂÜµÂêåÁêÜ„ÄÇ ÁÑ∂ÂêéÂë¢ÔºåÂØπ‰∫é $S$ ‰∏≠ÁöÑÊØè‰∏™ÁÇπÔºåÂ¶ÇÊûú $a$ ‰∏∫ $0$ Âàô‰ªé $p$ ÂêëËØ•ÁÇπËøûËæπÔºå$a$ ÊòØ $1$ ÁöÑÊÉÖÂÜµÂêåÁêÜ„ÄÇ ÂóØÔºåÁÑ∂ÂêéÂ∞±ÊòØ‰∏çÈúÄË¶ÅÊãÜÁÇπ„ÄÇÁÑ∂ÂêéÂ∞±Â∑Æ‰∏çÂ§ö‰∫Ü„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e5+2;const int inf=1e9+9;int n,m,k,a[N],b[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;namespace Dinic&#123; queue&lt;int&gt; q; int s,t,head[N],dep[N],cnt=1; struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;1]; inline void add(int u,int v,int w) &#123; G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,0&#125;,head[v]=cnt; &#125; int bfs() &#123; memset(dep,0,sizeof(dep)); dep[s]=1,q.push(s); while(!q.empty()) &#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt) &#123; int v=G[i].to; if(!dep[v]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125; &#125;return dep[t]; &#125; int dfs(int u,int flow) &#123; if(u==t||!flow) return flow; int used=0,rlow; for(int i=head[u];i;i=G[i].nxt) &#123; int v=G[i].to; if(dep[v]==dep[u]+1&amp;&amp;G[i].val&gt;0) &#123; used+=(rlow=dfs(v,min(flow-used,G[i].val))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used) dep[u]=-1; return used; &#125;&#125;using namespace Dinic;int main() &#123; freopen("work.in","r",stdin); freopen("work.out","w",stdout); IN(n),IN(m),IN(k); int sum=0,nodetot=n+1;s=0,t=n+1; for(int i=1;i&lt;=n;++i) IN(a[i]),sum+=a[i]; for(int i=1;i&lt;=n;++i) IN(b[i]); for(int i=1;i&lt;=m;++i) &#123; int x,y,z;IN(x),IN(y),IN(z); add(x,y,z),add(y,x,z); &#125; for(int i=1;i&lt;=k;++i) &#123; int size,x,y; IN(size),IN(x),IN(y); sum+=y,++nodetot; x?add(nodetot,t,y):add(s,nodetot,y); for(int j=1;j&lt;=size;++j) &#123; int c;IN(c); x?add(c,nodetot,inf):add(nodetot,c,inf); &#125; &#125; for(int i=1;i&lt;=n;++i) &#123; if(a[i]&gt;=b[i]) add(s,i,a[i]-b[i]); else add(i,t,b[i]-a[i]),sum+=b[i]-a[i]; &#125; int maxflow=0; while(bfs()) maxflow+=dfs(s,inf); printf("%d\n",sum-maxflow); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ËÄÉËØïÊÄªÁªì</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2005]Áª¥Êä§Êï∞Âàó Splay luoguP2042]]></title>
    <url>%2F2019%2F04%2F02%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2042%2F</url>
    <content type="text"><![CDATA[Á•ûÂ•áÁöÑÈ¢òÁõÆ„ÄÇ ÁΩë‰∏äËØ¥‰ªÄ‰πàÂÅö‰∫ÜËøôÈÅìÈ¢ò $Splay$ Â∞±Â∑Æ‰∏çÂ§ö‰∫ÜÔºåÂóØÂØπÁ™ù‰πüËøô‰πàËßâÂæó„ÄÇ‰∫éÊòØÁªà‰∫éÁ†ÅÊéâ‰∫Ü„ÄÇ ‰∏ªË¶ÅÊ∂âÂèäÁöÑÊìç‰ΩúËøòÊòØÊèêÂèñÂå∫Èó¥ÔºåÊàë‰ª¨ÁªÑÈúÄË¶ÅÂ∞Ü $l-1$ ÊèêÂèñËá≥ $root$ Ôºå ÁÑ∂ÂêéÂ∞Ü $r+1$ ÊèêÂèñËá≥ $l-1$ ÁöÑ‰∏ãÊñπÔºåÊúÄÁªàËØ¢ÈóÆÁöÑ $l,r$ Âå∫Èó¥ÁöÑ $Splay$ Â∞±ÊòØ $r+1$ ÁöÑÂ∑¶Â≠©Â≠ê„ÄÇ Ëøô‰∏™Êó∂ÂÄôËØ•ËæìÂá∫ÁöÑÂ∞±ËæìÂá∫ÔºåËØ•ÊâìÊ†áËÆ∞ÁöÑÂ∞±ÊâìÊ†áËÆ∞Â∞±Â•Ω‰∫Ü„ÄÇ Ëá≥‰∫éÊèíÂÖ•ÁöÑËØùÊàë‰ª¨ÂèØ‰ª•ÂÖàÂ∞ÜÊâÄÊúâÈúÄË¶ÅÊèíÂÖ•ÁöÑÁªìÁÇπ $build$ Êàê‰∏ÄÊ£µÊ†ëÔºåÁÑ∂ÂêéÁõ¥Êé•ÊåÇÂà∞ $r+1$ ÁöÑÂ∑¶Â≠©Â≠êÂç≥ÂèØ„ÄÇ ‰ΩÜÊòØÊØíÁò§Âá∫È¢ò‰∫∫Âç°Á©∫Èó¥Ôºå‰∫éÊòØÊàë‰ª¨ÈúÄË¶ÅÂ∞ÜÂà†Èô§ÁöÑÁªìÁÇπÂÖ®ÈÉ®ÈáçÊñ∞Â∫îÁî®ÔºåÂ∞±ÂÉèÂûÉÂúæÂõûÊî∂ÈÇ£Ê†∑ÔºåÊêû‰∏™Ê†àÂ∞±Ë°å‰∫Ü„ÄÇ ÊúÄÂêéÂõ†‰∏∫ÊÄï $l-1$ Âíå $r+1$ Âá∫ÁïåÊàë‰ª¨ËøòÈúÄË¶ÅÊñ∞Â¢û‰∏§‰∏™‚ÄùÂì®ÂÖµÁªìÁÇπ‚ÄùÔºåËøôÊ†∑Â≠êÁöÑËØùÈúÄË¶ÅÊèêÂèñÁöÑÁªìÁÇπÈÉΩÂä†‰∏ä‰∫Ü $1$ ÔºåÊèêÂèñÂå∫Èó¥ÂèòÂä®ÁöÑ‰∏§‰∏™ËäÇÁÇπÂ∞±ÂèòÊàê $l$ Âíå $r+2$ ‰∫Ü„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=5.5e5+7;const int inf=1e8;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;struct Splay &#123; int root,cnt; int ch[N][2],sz[N],fa[N],val[N],tag[N],rev[N]; int sum[N],lmax[N],rmax[N],smax[N]; int date[N],trash[N],top; Splay()&#123;root=cnt=top=0;&#125; bool chk(int x) &#123;return ch[fa[x]][1]==x;&#125; void clear(int node) &#123; ch[node][0]=ch[node][0]=sz[node]=fa[node]=val[node]=0, rev[node]=sum[node]=lmax[node]=rmax[node]=smax[node]=0; tag[node]=inf; &#125; int MKN() &#123; int node; node=top?trash[top--]:++cnt; clear(node);return node; &#125; void pushup(int x) &#123; int l=ch[x][0],r=ch[x][1]; sz[x]=sz[l]+sz[r]+1; sum[x]=sum[l]+sum[r]+val[x]; lmax[x]=max(lmax[l],sum[l]+val[x]+lmax[r]); rmax[x]=max(rmax[r],sum[r]+val[x]+rmax[l]); smax[x]=max(rmax[l]+lmax[r]+val[x],max(smax[l],smax[r])); &#125; void pushdown(int x) &#123; int l=ch[x][0],r=ch[x][1]; if(tag[x]!=inf) &#123; if(l) val[l]=tag[l]=tag[x],sum[l]=tag[x]*sz[l]; if(r) val[r]=tag[r]=tag[x],sum[r]=tag[x]*sz[r]; if(tag[x]&gt;=0) &#123; if(l) lmax[l]=rmax[l]=smax[l]=sum[l]; if(r) lmax[r]=rmax[r]=smax[r]=sum[r]; &#125; else if(tag[x]&lt;0) &#123; if(l) lmax[l]=rmax[l]=0,smax[l]=tag[x]; if(r) lmax[r]=rmax[r]=0,smax[r]=tag[x]; &#125; tag[x]=inf; &#125; if(rev[x]) &#123; if(l) swap(ch[l][0],ch[l][1]),swap(lmax[l],rmax[l]),rev[l]^=1; if(r) swap(ch[r][0],ch[r][1]),swap(lmax[r],rmax[r]),rev[r]^=1; rev[x]=0; &#125; &#125; void rotate(int x) &#123; int y=fa[x],z=fa[y]; pushdown(y),pushdown(x); int k=chk(x),v=ch[x][k^1]; ch[z][chk(y)]=x,fa[x]=z,ch[y][k]=v,fa[v]=y, ch[x][k^1]=y,fa[y]=x;pushup(y),pushup(x); &#125; void splay(int x,int gola=0) &#123; while(fa[x]!=gola) &#123; if(fa[fa[x]]!=gola) rotate(chk(x)^chk(fa[x])?x:fa[x]); rotate(x); &#125;if(!gola) root=x; &#125; int kth(int x) &#123; int pos=root; while(pos) &#123; pushdown(pos); if(x&lt;=sz[ch[pos][0]]) pos=ch[pos][0]; else &#123; x-=sz[ch[pos][0]]+1; if(!x) return pos; pos=ch[pos][1]; &#125; &#125;return 0; &#125; int build(int l,int r,int f) &#123; if(l&gt;r) return 0; int x=MKN(),mid=(l+r)&gt;&gt;1; ch[x][0]=build(l,mid-1,x),ch[x][1]=build(mid+1,r,x); val[x]=date[mid],fa[x]=f,pushup(x); return x; &#125; void trashcan_node(int x) &#123; if(!x) return; trash[++top]=x,trashcan_node(ch[x][0]),trashcan_node(ch[x][1]); &#125; int split(int&amp;l,int&amp;r,int pos,int tot) &#123; l=kth(pos),r=kth(pos+tot+1);splay(l),splay(r,l); &#125; void work_insert() &#123; int pos,tot,l,r; IN(pos),IN(tot); for(int i=1;i&lt;=tot;++i) IN(date[i]); split(l,r,pos+1,0); ch[r][0]=build(1,tot,r),pushup(r),pushup(root); &#125; void work_delete() &#123; int pos,tot,l,r; IN(pos),IN(tot),split(l,r,pos,tot); trashcan_node(ch[r][0]),ch[r][0]=0,pushup(r),pushup(root); &#125; void work_same() &#123; int pos,tot,c,l,r; IN(pos),IN(tot),IN(c),split(l,r,pos,tot); int p=ch[r][0]; if(p) &#123; val[p]=tag[p]=c,sum[p]=c*sz[p]; if(c&gt;=0) lmax[p]=rmax[p]=smax[p]=sum[p]; else if(c&lt;0) lmax[p]=rmax[p]=0,smax[p]=c; &#125;pushup(r),pushup(root); &#125; void work_rev() &#123; int pos,tot,l,r; IN(pos),IN(tot),split(l,r,pos,tot); if(ch[r][0]) &#123; swap(ch[ch[r][0]][0],ch[ch[r][0]][1]); swap(lmax[ch[r][0]],rmax[ch[r][0]]); rev[ch[r][0]]^=1; &#125;pushup(r),pushup(root); &#125; void work_sum() &#123; int pos,tot,l,r; IN(pos),IN(tot),split(l,r,pos,tot); printf("%d\n",sum[ch[r][0]]); &#125; void work_max() &#123; int l=kth(1),r=kth(sz[root]);splay(l),splay(r,l); printf("%d\n",smax[ch[r][0]]); &#125;&#125;T;int n,m;char op[25];int main() &#123; // freopen("testdata.in","r",stdin); // freopen("myout.out","w",stdout); IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(T.date[i+1]); T.smax[0]=T.date[1]=-inf,T.date[n+2]=inf; T.root=T.build(1,n+2,0); while(m--) &#123; scanf("%s",op); if(op[0]=='M') &#123; if(op[3]=='E') T.work_same(); else T.work_max(); &#125; else if(op[0]=='I') T.work_insert(); else if(op[0]=='D') T.work_delete(); else if(op[0]=='R') T.work_rev(); else if(op[0]=='G') T.work_sum(); &#125; return 0;&#125; ÂìéÁ¶ª $HNOI2019$ ‰∏çËøú‰∫ÜÔºåÊÑüËßâÂ§öÂ§öÊõ¥ÂçöÂ¢ûÂä† $RP$ ‚Ä¶‚Ä¶ $QwQ$]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>splay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [VaniÊúâÁ∫¶‰ºö]Èõ®Â§©ÁöÑÂ∞æÂ∑¥ Á∫øÊÆµÊ†ë+ÂêØÂèëÂºèÂêàÂπ∂ luoguP4556]]></title>
    <url>%2F2019%2F04%2F02%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4556%2F</url>
    <content type="text"><![CDATA[ÊØíÁò§Âá∫È¢ò‰∫∫ÔºåÂç°Êó∂Èó¥Âç°Á©∫Èó¥ÔºÅ ÂóØÔºåÂ¶ÇÊûúËøô‰∏ÄÈ¢ò‰∏çÊòØÂú®Ê†ë‰∏äÁöÑËØùË≤å‰ººÂèØ‰ª•Áõ¥Êé•ÊùÉÂÄºÁ∫øÊÆµÊ†ëÁª¥Êä§Ôºü‰∏çËøáÂà∞‰∫ÜÊ†ë‰∏äÁöÑËØùÈöæÈÅìÂèØ‰ª•ÊùÉÂÄºÁ∫øÊÆµÊ†ë+Ê†ëÈìæÂâñÂàÜÔºåË°®Á§∫‰∏çÊòéÁôΩ„ÄÇ‰∫éÊòØÂ∞ùËØï‰∫Ü‰∏ÄÂèëÁ∫øÊÆµÊ†ëÂêàÂπ∂Ôºå‰ΩÜÊòØÊàë‰ª¨ÁöÑÁ∫øÊÆµÊ†ëÊòØÊùÉÂÄºÁ∫øÊÆµÊ†ë„ÄÇ Êàë‰ª¨ÁöÑÊùÉÂÄºÁ∫øÊÆµÊ†ëÊòØÁî®Êù•Â≠òÂéüÊ†ë‰∏≠ $x$ ÁªìÁÇπ‰ª•ÂèäÂÖ∂Â≠êÊ†ë‰∏≠ÁöÑÊØèÁßçÊïëÊµéÁ≤ÆÁöÑ‰∏™Êï∞„ÄÇ ÊÄé‰πà‰∏™ÂêàÂπ∂Ê≥ïÂë¢ÔºåÂÖ∂ÂÆûÁâπÂà´ÁÆÄÂçïÔºå‰∏§‰∏™Á∫øÊÆµÊ†ëÂêåÊó∂ËøõË°åÔºåÂèëÁé∞Âà∞‰∫Ü‰∏Ä‰∏™ËäÇÁÇπÁöÑÊó∂ÂÄô‰∏Ä‰∏™Á∫øÊÆµÊ†ëÊúâËøô‰∏™ÁªìÁÇπÂè¶‰∏Ä‰∏™Ê≤°ÊúâËøô‰∏™ËäÇÁÇπÔºåÈÇ£‰πàËøô‰∏™ËäÇÁÇπ‰ª•ÂèäÂÖ∂‰∏ãÈù¢ÁöÑÁªìÁÇπÁöÑ‰ø°ÊÅØÈÉΩÂèØ‰ª•Áõ¥Êé•‰Ωú‰∏∫Êñ∞Á∫øÊÆµÊ†ëÁöÑËøô‰∏™ËäÇÁÇπÁöÑ‰ø°ÊÅØ„ÄÇ ÂΩìÁÑ∂Â¶ÇÊûúÂà∞‰∫Ü‰∏Ä‰∏™Âè∂Â≠êËäÇÁÇπÔºåÁõ¥Êé•Â∞Ü‰∏§‰∏™Á∫øÊÆµÊ†ëÁöÑËøô‰∏™‰ΩçÁΩÆÁöÑÊïëÊµéÁ≤ÆÁöÑ‰∏™Êï∞Âä†Ëµ∑Êù•Âç≥ÂèØ„ÄÇ ÂóØÔºåÊØè‰∏™Á∫øÊÆµÊ†ëÂÜçÁª¥Êä§‰∏Ä‰∏™ÂÄºÂ≠òÂá∫Áé∞ÊúÄÂ§öÊ¨°Êï∞ÁöÑÊïëÊµéÁ≤ÆÊòØ‰ªÄ‰πàÔºåËøôÊ†∑Â∞±ÂèØ‰ª•ÂæóÂà∞Á≠îÊ°à‰∫Ü„ÄÇ‰ΩÜÊòØ‰∏∫‰∫ÜÈÅøÂÖç‰∏Ä‰∫õÁªìÁÇπ‰∏éÂÖ∂Â≠êÊ†ëÂéãÊ†πÂ∞±Ê≤°ÊúâÊïëÊµéÁ≤ÆÁöÑÊÉÖÂÜµÔºåÊàë‰ª¨ÈúÄË¶ÅÂà§Êñ≠‰∏Ä‰∏ãËøô‰∏™ËäÇÁÇπ‰∏éÂÖ∂Â≠êÊ†ëÊòØÂê¶ÊúâÊïëÊµéÁ≤ÆÂç≥ÂèØ„ÄÇ ÁÑ∂ÂêéÁõ¥Êé•‰∏ÄÈÅç $dfs$ ÔºåÈÅçÂéÜ $u$ ÁöÑÊâÄÊúâÂ≠©Â≠êÁÑ∂ÂêéÊãø $u$ ÁöÑÁ∫øÊÆµÊ†ë‰æùÊ¨°ÂéªÂíå $u$ ÁöÑÂÑøÂ≠êÁöÑÁ∫øÊÆµÊ†ëÂêàÂπ∂„ÄÇÊúÄÁªàÂêàÂπ∂ÂÆåÁöÑÁ∫øÊÆµÊ†ëÂ≠òÂÇ®ÁöÑÂ∞±ÊòØ $u$ ‰ª•ÂèäÂÖ∂Â≠êÊ†ëÁöÑ‰ø°ÊÅØ‰∫Ü„ÄÇÁÑ∂ÂêéÂ∞±ÂèØ‰ª•Ëé∑ÂæóÁ≠îÊ°à‰∫Ü„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e5+7;const int LogN=27;const int M=6e6+7;int n,m,q,X[N],Y[N],Z[N],Ans[N],head[N],cnt;struct Edge &#123;int nxt,to;&#125;G[N&lt;&lt;1];inline void add(int u,int v) &#123; G[++cnt]=(Edge)&#123;head[u],v&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u&#125;,head[v]=cnt;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=--x;&#125;namespace Lca &#123; int dep[N],fa[N][LogN+4]; void dfs(int u,int f) &#123; fa[u][0]=f,dep[u]=dep[f]+1; for(int i=1;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i-1]][i-1]; for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) dfs(G[i].to,u); &#125; int lca(int x,int y) &#123; if(x==y)return x; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=LogN;i&gt;=0;--i) if(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i]; if(x==y)return x; for(int i=LogN;i&gt;=0;--i) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0]; &#125;&#125;using namespace Lca;struct Segment_Tree &#123; #define mid ((l+r)&gt;&gt;1) int rt[N],lc[M],rc[M],d[M],t[M],tot; void pushup(int x) &#123; if(d[lc[x]]&gt;=d[rc[x]]) d[x]=d[lc[x]],t[x]=t[lc[x]]; else d[x]=d[rc[x]],t[x]=t[rc[x]]; &#125; int update(int x,int l,int r,int pos,int val) &#123; if(!x) x=++tot; if(l==r) &#123;d[x]+=val;t[x]=l;return x;&#125; if(pos&lt;=mid) lc[x]=update(lc[x],l,mid,pos,val); else rc[x]=update(rc[x],mid+1,r,pos,val); pushup(x);return x; &#125; int merge(int x,int y,int l,int r) &#123; if(!x) return y; if(!y) return x; if(l==r) &#123;d[x]+=d[y];t[x]=l;return x;&#125; lc[x]=merge(lc[x],lc[y],l,mid); rc[x]=merge(rc[x],rc[y],mid+1,r); pushup(x);return x; &#125;&#125;T;void calc(int u,int f) &#123; for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) calc(G[i].to,u), T.rt[u]=T.merge(T.rt[u],T.rt[G[i].to],1,m); if(T.d[T.rt[u]]) Ans[u]=T.t[T.rt[u]];&#125;int main() &#123; IN(n),IN(q); for(int i=1,x,y;i&lt;n;++i) IN(x),IN(y),add(x,y); for(int i=1;i&lt;=q;++i) IN(X[i]),IN(Y[i]),IN(Z[i]),m=max(m,Z[i]); //ÊùÉÂÄºÁ∫øÊÆµÊ†ëÁ¶ªÁ∫øÂ§ÑÁêÜ dfs(1,0); for(int i=1;i&lt;=q;++i) &#123; int lca_xy=lca(X[i],Y[i]); T.rt[X[i]]=T.update(T.rt[X[i]],1,m,Z[i],1); T.rt[Y[i]]=T.update(T.rt[Y[i]],1,m,Z[i],1); T.rt[lca_xy]=T.update(T.rt[lca_xy],1,m,Z[i],-1); if(fa[lca_xy][0]) T.rt[fa[lca_xy][0]]=T.update(T.rt[fa[lca_xy][0]],1,m,Z[i],-1); &#125; calc(1,0); for(int i=1;i&lt;=n;++i) printf("%d\n",Ans[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Á∫øÊÆµÊ†ë</tag>
        <tag>ÂêØÂèëÂºèÂêàÂπ∂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÁÆóÊ≥ï„Äë ËôöÊ†ëÂÖ•Èó®]]></title>
    <url>%2F2019%2F04%2F01%2F%5B%E7%AE%97%E6%B3%95%5D%E8%99%9A%E6%A0%91%2F</url>
    <content type="text"><![CDATA[ÂÜçÊ≠§ËæìÂÖ•‰Ω†ÁöÑÂØÜÁ†Å‰ª•‰æøÈòÖËØªÂÖ®Êñá Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>Â≠¶‰π†Á¨îËÆ∞</tag>
        <tag>ËôöÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SDOI2011]Ê∂àËÄóÊàò ËôöÊ†ë+Ê†ëÂΩ¢DP luoguP2495]]></title>
    <url>%2F2019%2F03%2F31%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2495%2F</url>
    <content type="text"><![CDATA[Âéª $Mina!$ ‰∏ä‰∫ÜËß£‰∫Ü‰∏ÄÊ≥¢ËôöÊ†ëÔºå$\%\%\% XZY$ Â≠¶ÈïøÂ§™Âº∫Ëæ£ÔºÅ ËøôÊ¨°ÊÄªÁÆóÊòéÁôΩ‰∫Ü‰∫õËôöÊ†ëÔºåÁÑ∂Âêé $XZY$ Â§ß‰Ω¨ÁöÑ‰æãÈ¢òÂ∞±ÊòØÊ∂àËÄóÊàò„ÄÇ ‰∫éÊòØÁúã‰∫ÜËøáÊù•„ÄÇ È¶ñÂÖàÔºåËÄÉËôëÊôÆÈÄöÁöÑÊ†ëÂΩ¢ $DP$ ÔºåËÆæ $dp[u]$ Ë°®Á§∫Âú® $u$ ‰∏∫Ê†πÁöÑÂ≠êÊ†ë‰∏≠Êª°Ë∂≥ÁõÆÊ†áÊâÄËä±Ë¥πÁöÑÊúÄÂ∞è‰ª£‰ª∑ ÔºåÈÇ£‰πàËΩ¨ÁßªÊñπÁ®ã‰πü‰∏çÊòØÂæàÈöæÔºåÊàë‰ª¨Êûö‰∏æ $u$ ÁöÑÂ≠©Â≠ê $v$ „ÄÇÂ¶ÇÊûú $v$ Êú¨Ë∫´Â∞±ÊòØ‚ÄùËÉΩÊ∫ê‰∏∞ÂØåÁöÑÂ≤õÂ±ø‚ÄùÈÇ£‰πà $dp[u]+=G[i].val$ ÔºåÂÖ∂‰∏≠ $G[i].val$ Ë°®Á§∫ $u$ Âà∞ $v$ ÁöÑËæπÁöÑËæπÊùÉ„ÄÇ‰∏∫‰ªÄ‰πàËøôÊ†∑ËΩ¨ÁßªÂë¢ÔºüÂõ†‰∏∫ $v$ ÂøÖÈ°ªÂàáÊñ≠„ÄÇ ÈÇ£‰πàÊ≤°ÊúâÂøÖË¶ÅÂàáÊñ≠ÁöÑÂ≤õÂ±øÂë¢ÔºüÂ∞±ÂàÜÂàá/‰∏çÂàá‰∏§ÁßçÊÉÖÂÜµ‰∫ÜÔºö dp[u]+=min(G.val[i],dp[G.to[i]]);Ëøô‰∏™‰πüÂæàÂ•ΩÊáÇ„ÄÇ Ëøô‰∏™Êó∂ÂÄôÊàë‰ª¨ÊâìÂÆå‰ª£Á†Å‰∫§‰∏ÄÂèëÂèëÁé∞Âè™Êúâ $40$ ÂàÜ‚Ä¶‚Ä¶ÂæÄ‰∏ãÁúãÔºåÂèØ‰ª•ÁúãÂà∞ $n$ Âà∞ÊúÄÂêéÁöÑÈ°∂Â∞ñÊï∞ÊçÆÊúâ $250000$ ‚Ä¶‚Ä¶ ‰ΩÜÊòØÊàë‰ª¨ÂèØ‰ª•ËßÇÂØüÂà∞Ôºå$\sum k_i \leq 5*10^5$ ÔºåÂèëÁé∞ÊÄªÂÖ±ÁöÑ $k$ ‰πü‰∏çËøáËøô‰πàÂ§ßÔºåËøô‰∏™Êó∂ÂÄôÊàë‰ª¨ÂèØ‰ª•Áî®ËôöÊ†ëÊù•Ëß£ÂÜ≥„ÄÇ $Qiuly$ ÔºöÊúâÂÖ≥ËôöÊ†ëÁöÑÊñáÁ´†ÂÖàÂíï‰∏Ä‰∏ãËõ§ÔºåÊúÄËøëÊúâÁÇπÂøô„ÄÇ Âª∫Â•ΩËôöÊ†ëÂêéÁõ¥Êé•Áî®‰∏äÈù¢ÁöÑËΩ¨ÁßªÊñπÁ®ãÂÅöÂ∞±Âæó‰∫Ü„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=2.5e5+7;const int LogN=27;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct graph &#123; int head[N],nxt[N&lt;&lt;1],to[N&lt;&lt;1],val[N&lt;&lt;1],cnt; void init() &#123;memset(head,-1,sizeof(head));cnt=0;&#125; graph() &#123;init();&#125; void add(int u,int v,int w) &#123; nxt[cnt]=head[u],to[cnt]=v,val[cnt]=w,head[u]=cnt++; &#125;&#125;G;int n,m,point[N],stack[N],top;ll dp[N];bool vis[N];namespace LCA &#123; int dep[N],fa[N][LogN+3],num[N][LogN+3]; int id[N],dfn,Edge_Mx; void _Pre_Lca(int u,int f) &#123; fa[u][0]=f,dep[u]=dep[f]+1,id[u]=++dfn; for(int i=1;i&lt;=LogN;++i) &#123; fa[u][i]=fa[fa[u][i-1]][i-1]; num[u][i]=min(num[u][i-1],num[fa[u][i-1]][i-1]); &#125; for(int i=G.head[u];~i;i=G.nxt[i]) if(G.to[i]!=f)num[G.to[i]][0]=G.val[i],_Pre_Lca(G.to[i],u); &#125; int lca(int x,int y) &#123; Edge_Mx=inf; if(x==y)return x; if(dep[x]&lt;dep[y])swap(x,y); for(int i=LogN;i&gt;=0;--i) if(dep[fa[x][i]]&gt;=dep[y]) Edge_Mx=min(Edge_Mx,num[x][i]),x=fa[x][i]; if(x==y)return x; for(int i=LogN;i&gt;=0;--i) if(fa[x][i]!=fa[y][i]) Edge_Mx=min(Edge_Mx,min(num[x][i],num[y][i])), x=fa[x][i],y=fa[y][i]; return fa[x][0]; &#125;&#125;using namespace LCA;bool cmp(int x,int y) &#123;return id[x]&lt;id[y];&#125;void solve(int u) &#123;//DPËøáÁ®ã dp[u]=0; for(int i=G.head[u];~i;i=G.nxt[i]) &#123; solve(G.to[i]); if(vis[G.to[i]])dp[u]+=G.val[i]; else dp[u]+=min((ll)G.val[i],dp[G.to[i]]); &#125;return;&#125;void build(int k) &#123;//Âª∫Á´ãËôöÊ†ë sort(point+1,point+1+k,cmp); stack[top=1]=1,G.cnt=0,G.head[1]=-1; for(int i=1;i&lt;=k;++i) if(point[i]!=1) &#123; int l=lca(stack[top],point[i]); if(l!=stack[top]) &#123; while(id[l]&lt;id[stack[top-1]]) &#123; lca(stack[top-1],stack[top]); G.add(stack[top-1],stack[top],Edge_Mx); --top; &#125; if(id[l]&gt;id[stack[top-1]]) &#123; G.head[l]=-1,lca(l,stack[top]); G.add(l,stack[top],Edge_Mx),stack[top]=l; &#125; else lca(l,stack[top]),G.add(l,stack[top],Edge_Mx),--top; &#125; G.head[point[i]]=-1,stack[++top]=point[i]; &#125; for(int i=1;i&lt;top;++i) lca(stack[i],stack[i+1]),G.add(stack[i],stack[i+1],Edge_Mx);&#125;int main() &#123; IN(n); for(int i=1;i&lt;n;++i) &#123; int u,v,w;IN(u),IN(v),IN(w); G.add(u,v,w),G.add(v,u,w); &#125; _Pre_Lca(1,0),IN(m); while(m--) &#123; int k;IN(k); for(int i=1;i&lt;=k;++i)IN(point[i]),vis[point[i]]=true; build(k); solve(1),printf("%lld\n",dp[1]); for(int i=1;i&lt;=k;++i)vis[point[i]]=false; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>ËôöÊ†ë</tag>
        <tag>Ê†ëÂΩ¢DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HAOI2012]È´òÈÄüÂÖ¨Ë∑Ø Á∫øÊÆµÊ†ë luoguP2221]]></title>
    <url>%2F2019%2F03%2F31%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2221%2F</url>
    <content type="text"><![CDATA[$3$ Êúà‰ªΩÁöÑÊúÄÂêé‰∏ÄÁØáÈ¢òËß£‰∫ÜÂë¢‚Ä¶‚Ä¶ÊòéÂ§©Â∞±Â±û‰∫é $4$ Êúà‰∫ÜÔºåÁ¶ªÁúÅÈÄâ‰∏çËøú‰∫Ü‚Ä¶$QwQ$‚Ä¶ ÂèëÁé∞Á™ùÁúüÁöÑÂæàÂà∂ÊùñÔºåÊàë‰ª¨ÂÖàÊù•ËÅäËÅäÂàöÂºÄÂßãÁ™ùÁöÑÊÉ≥Ê≥ï„ÄÇ ÊàëÁîª‰∫ÜÁîªÂõæÔºåÁÑ∂ÂêéÂèëÁé∞ÔºåÂØπ‰∫éÊúÄÂêéÁ≠îÊ°àÁöÑÂàÜÊØç(‰∏çÊòØÊúÄÁÆÄ)ÔºåÊòØËøô‰∏™Â∫èÂàó‰∏≠Ëøô‰∫õÊï∞ÁöÑÂÄº(Â∫üËØù)ÔºåÁÑ∂ÂêéÂèëÁé∞‰∫ÜÊØè‰∏™ÁÇπÁöÑÂá∫Áé∞Ê¨°Êï∞ÔºåÁÑ∂ÂêéÁ∫øÊÆµÊ†ëÁª¥Êä§Ê±ÇÂíå„ÄÇÂèëÁé∞ÊïàÁéáÂæà‰Ωé‰∫éÊòØËØïÂõæÂ∞ÜÂá∫Áé∞Ê¨°Êï∞Ëà¨Âà∞‰∫åÁª¥Âπ≥Èù¢‰∏äÔºåÁÑ∂ÂêéÊõºÂìàÈ°øË∑ùÁ¶ªËΩ¨ÂàáÊØîÈõ™Â§´Ë∑ùÁ¶ªÁÑ∂Âêé‰∫åÁª¥Ê†ëÁä∂Êï∞ÁªÑÁª¥Êä§ÁÑ∂Âêé $WA$ ‰∫ÜÁÑ∂ÂêéÂºÉÁñó„ÄÇ ‰Ω†ÂèØËÉΩËÆ§‰∏∫Á™ùÂæàÂÇªÂØπÂêßÔºü ÂóØÂØπÁ™ùÊòØÊå∫ÂÇªÁöÑ„ÄÇ Ê≠£Ëß£ÊòØÁ∫øÊÆµÊ†ëÔºåÊ≤°ÁåúÈîôÔºå‰ΩÜÊòØÂíå‰ªÄ‰πà‰∫åÁª¥Ê†ëÁä∂Êï∞ÁªÑÊúâ‰ªÄ‰πàÂÖ≥Á≥ª Êàë‰ª¨ËÄÉËôëÂå∫Èó¥‰∏≠ÁöÑ‰∏Ä‰∏™ÁÇπ $i$ ÔºåÊùÉÂÄº‰∏∫ $v_i$ „ÄÇÁÑ∂ÂêéÊàë‰ª¨ËßÇÂØüÂΩìÂâçËØ¢ÈóÆÂå∫Èó¥‰∏≠ÊúâÂ§öÂ∞ëÂ≠êÂå∫Èó¥ÂåÖÂê´‰∫Ü $v_i$ ÔºåËøô‰∏™‰∏™Êï∞Â∞±ÊòØÁÇπ $i$ ÂÅöÂá∫ÁöÑË¥°ÁåÆ„ÄÇÁé∞Âú®Êàë‰ª¨Êù•ËÄÉËôëÊÄé‰πàËÆ°ÁÆóËøô‰∏™ÂåÖÂê´‰∫Ü $i$ ÁöÑÂ≠êÂå∫Èó¥‰∏™Êï∞„ÄÇ ÂèØ‰ª•ÂèëÁé∞ÔºåÊàë‰ª¨‰ªé $i$ ÂêëÂ∑¶Êâ©Â±ïËã•Âπ≤‰∏™ÁÇπÔºåÁÑ∂ÂêéÂèàÂêëÂè≥Êâ©Â±ïËã•Âπ≤‰∏™ÁÇπÔºåËøôÊ†∑Â≠ê‰∏ÄÊù•Â∞±Êàê‰∫Ü‰∏Ä‰∏™ÂåÖÂê´‰∫Ü $i$ Â≠êÂå∫Èó¥„ÄÇËøô‰∏™Â∞±ÂæàÂ•ΩËÆ°ÁÆó‰∫ÜÔºåÁ≠îÊ°àÊòæÁÑ∂‰∏∫ $(i-l)\times(r-i)$ „ÄÇÁÑ∂ÂêéËøòË¶ÅÁÆóËøõÊ≤°ÊúâÂêëÂ∑¶/Âè≥Êâ©Â±ïÁöÑÊÉÖÂÜµÔºåÂπ∂‰∏îÁÆó‰∏äÊùÉÂÄºÔºåÊúÄÁªà $i$ ÈÄ†ÊàêÁöÑË¥°ÁåÆÊòæÁÑ∂‰∏∫Ôºö v_i\times(i-l+1)\times (r-i+1)ÈÇ£‰πàÊàë‰ª¨Â∞ÜÂºèÂ≠êÊãÜÂºÄÂèØ‰ª•ÂæóÂà∞Ôºö v_i\times [i\times (r-i+1)-l\times(r-i+1)+(r-i+1)]v_i\times [i\times r-i\times i+i-l\times r+l\times i-l+r-i+1]v_i\times [i(r+l)-i^2-lr-l+r+1]v_i i(r+l)-v_ii^2-v_ilr+v_i(r-l)+v_iÂÖ∂‰∏≠ $l,r$ ‰∏∫ÂΩìÂâçËØ¢ÈóÆÂå∫Èó¥ÔºåËøô‰∏™ÊòØÂèØ‰ª•Áõ¥Êé•ÁÆóÂá∫ÁöÑ„ÄÇÊàë‰ª¨ÂèëÁé∞Êàë‰ª¨ÈúÄË¶ÅÁª¥Êä§ÁöÑÂ∞±ÊòØ $v_i\ ,\ v_ii\ ,\ v_ii^2$ ‰∏â‰∏™ÂÄºÔºåÁî®Á∫øÊÆµÊ†ëÁª¥Êä§Âç≥ÂèØ„ÄÇ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const int inf=1e9+9;int n,m;char op[2];namespace OI &#123; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x; &#125; template &lt;typename _Tp&gt; _Tp gcd(_Tp x,_Tp y) &#123; return y?gcd(y,x%y):x; &#125;&#125;using namespace OI;struct Segment_Tree &#123; #define mid ((l+r)&gt;&gt;1) #define LS(x) ((x)&lt;&lt;1) #define RS(x) ((x)&lt;&lt;1|1) ll ans1,ans2,ans3; ll sum1[N&lt;&lt;2],sum2[N&lt;&lt;2],sum3[N&lt;&lt;2]; ll tag[N&lt;&lt;2],suq[N&lt;&lt;2],rle[N&lt;&lt;2],len[N&lt;&lt;2]; void build(ll x,ll l,ll r) &#123; if(l==r) &#123; len[x]=1,suq[x]=l,rle[x]=l*l; return; &#125; build(LS(x),l,mid),build(RS(x),mid+1,r); len[x]=len[LS(x)]+len[RS(x)]; suq[x]=suq[LS(x)]+suq[RS(x)], rle[x]=rle[LS(x)]+rle[RS(x)]; &#125; void pushdown(ll x,ll l,ll r) &#123; ll k=tag[x];tag[x]=0; sum1[LS(x)]+=len[LS(x)]*k,sum1[RS(x)]+=len[RS(x)]*k; sum2[LS(x)]+=suq[LS(x)]*k,sum2[RS(x)]+=suq[RS(x)]*k; sum3[LS(x)]+=rle[LS(x)]*k,sum3[RS(x)]+=rle[RS(x)]*k; tag[LS(x)]+=k,tag[RS(x)]+=k; &#125; void update(ll x,ll l,ll r,ll L,ll R,ll v) &#123; if(L&lt;=l&amp;&amp;r&lt;=R) &#123; tag[x]+=v; sum1[x]+=len[x]*v; sum2[x]+=suq[x]*v; sum3[x]+=rle[x]*v; return; &#125; if(tag[x])pushdown(x,l,r); if(L&lt;=mid)update(LS(x),l,mid,L,R,v); if(R&gt;mid)update(RS(x),mid+1,r,L,R,v); sum1[x]=sum1[LS(x)]+sum1[RS(x)]; sum2[x]=sum2[LS(x)]+sum2[RS(x)]; sum3[x]=sum3[LS(x)]+sum3[RS(x)]; &#125; void query(ll x,ll l,ll r,ll L,ll R) &#123; if(L&lt;=l&amp;&amp;r&lt;=R) &#123; ans1+=sum1[x],ans2+=sum2[x],ans3+=sum3[x]; return; &#125; if(tag[x])pushdown(x,l,r); if(L&lt;=mid)query(LS(x),l,mid,L,R); if(R&gt;mid)query(RS(x),mid+1,r,L,R); &#125; &#125;T;int main() &#123; IN(n),IN(m); T.build(1,1,n); for(int i=1;i&lt;=m;++i) &#123; scanf("%s",op); ll l,r;IN(l),IN(r);--r; ll v; if(op[0]=='C') IN(v),T.update(1,1,n,l,r,v); else if(op[0]=='Q') &#123; T.ans1=T.ans2=T.ans3=0; T.query(1,1,n,l,r); ll res1=T.ans1,res2=T.ans2,res3=T.ans3; ll ans=(r-l+1-l*r)*res1+(r+l)*res2-res3; ll len=(r-l+1)*(r-l+2)/2; ll esw=gcd(ans,len); printf("%lld/%lld\n",ans/esw,len/esw); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Á∫øÊÆµÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [AHOI2013]Â∑ÆÂºÇ ÂêéÁºÄËá™Âä®Êú∫.SAM luoguP4248]]></title>
    <url>%2F2019%2F03%2F30%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4248%2F</url>
    <content type="text"><![CDATA[ÂàöÂºÄÂßãÂèëÁé∞ $SA$ ÂæàÂèØÂÅöÔºå‰∏çËøáÂΩìÊó∂Ê≤°ÊúâÁúãËåÉÂõ¥ÔºåÂøÉÊÉ≥ÁæéÊªãÊªã‰∫ÜËøô‰∏™Â∞±ÊòØ $SA$ ÁöÑÊùøÂ≠êÔºåÁÑ∂Âêé‰∏ÄÁúãËåÉÂõ¥ÂøÉÂ∞±Âáâ‰∫Ü„ÄÇ ‰∏çËøáÂèØ‰ª•Áî® $SAM$ ÔºåÊàë‰ª¨Áü•ÈÅìÔºåÂØπ‰∫é‰∏§‰∏™‰∏≤ÔºåÂÆÉ‰ª¨ÁöÑÊúÄÈïøÂÖ¨ÂÖ±Â≠ê‰∏≤Â∞±ÊòØÂÆÉ‰ª¨Âú®ÂâçÁºÄÊ†ë‰∏äÁöÑ $Lca$ „ÄÇËøôÊòØÊòæÁÑ∂ÁöÑÔºå‰∏çÊòéÁôΩÁöÑÂêåÂ≠¶ÂèØ‰ª•Â∫∑Â∫∑ $Qiuly$ ÈÖ±‰πãÂâçÂÜôÁöÑ $SAM$ ÔºåÂèØ‰ª•ËßÇÂØüËßÇÂØüÂõæÁâá„ÄÇ Êàë‰ª¨ËßÇÂØüÂºèÂ≠êÔºåÂèëÁé∞ $\sum_{1\leq i&lt;j\leq n} len(T_i)+len(T_j)$ ÊòØÁ≠â‰∫é $\frac{(n-1)\times n\times(n+1)}{2}$ ÁöÑÔºåËøô‰∏™ÂèØ‰ª• $O(1)$ ÁÆóÂá∫„ÄÇ ÈÇ£‰πà $2\times lcp(T_i,T_j)$ ÊÄé‰πàÊ±ÇÂë¢Ôºü ÈÇ£‰πàÂØπ‰∫é‰∏Ä‰∏™ÁªìÁÇπ $x$ ÔºåÊàë‰ª¨‰æùÊ¨°ÁªüËÆ° $x$ ÁöÑÂÑøÂ≠êÔºåÂπ∂‰æùÊ¨°Êõ¥Êñ∞ $x$ ÁöÑ $size$ ÔºåÂØπ‰∫é‰∏Ä‰∏™ $x$ ÁöÑÂÑøÂ≠ê $y$ ÔºåÊûö‰∏æÁöÑÊó∂ÂÄôÂÆÉÂØπÁ≠îÊ°àÁöÑË¥°ÁåÆÊòæÁÑ∂ÊòØ $size[x]\times len[x]\times size[y]$ ÔºåÂõ†‰∏∫ $y$ ÁöÑÂ≠êÊ†ë‰∏≠ÁöÑ‰ªªÊÑè‰∏ÄÁªìÁÇπ(ÂåÖÊã¨ $y$ ) Ôºå‰∏é $x$ ‰πãÂâçÊûö‰∏æËøáÁöÑÊâÄÊúâÂÑøÂ≠êÁöÑÂ≠êÊ†ë‰∏≠ÁöÑÊâÄÊúâÁªìÁÇπÁöÑ $Lca$ ÈÉΩÊòØ $x$ „ÄÇÂπ∂‰∏îÂØπ‰∫é‰∏Ä‰∏™ $x$ ÔºåÂÆÉÊâÄÈÄ†ÊàêÁöÑË¥°ÁåÆÂ∞±ÊòØ $Len[x]$ „ÄÇ ÊúÄÂêéÁªüËÆ°Âá∫Êù•ÁöÑÁ≠îÊ°àÂÜç‰πò‰∏ä $2$ Â∞±ÊòØÂêéÈù¢ÈÇ£‰∏™ÂºèÂ≠êÂï¶~\(‚âß‚ñΩ‚â¶)/~ „ÄÇ ‰∏çËøáË¶ÅÊ≥®ÊÑè‰∏ÄÁÇπÔºåÂêéÁºÄËá™Âä®Êú∫ÊòØ‰ºöÂ§çÂà∂ÁªìÁÇπÁöÑÔºåËøô‰∫õÂ§çÂà∂ÁöÑÁªìÁÇπ‰∏çÂ±û‰∫éÂéü‰∏≤Âõ†Ê≠§‰∏çËÉΩËÆ°ÁÆóË¥°ÁåÆ„ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØ‰ª£Á†ÅÁöÑÈóÆÈ¢ò‰∫Ü„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e6+7;struct SAM &#123; int last,cnt; int ch[N][26],fa[N],len[N],sz[N],hep[N],tot[N]; SAM() &#123;last=cnt=1;&#125; inline void ins(int c) &#123; int p=last,np=++cnt; last=np,len[np]=len[p]+1,sz[np]=1; while(p&amp;&amp;!ch[p][c]) ch[p][c]=np,p=fa[p]; if(!p)fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1)fa[np]=q; else &#123; int nq=++cnt;len[nq]=len[p]+1; memcpy(ch[nq],ch[q],sizeof(ch[q])); fa[nq]=fa[q],fa[q]=fa[np]=nq; while(p&amp;&amp;ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125;return; &#125; inline ll calc() &#123; ll res=0; for(int i=1;i&lt;=cnt;++i) hep[len[i]]++; for(int i=1;i&lt;=cnt;++i) hep[i]+=hep[i-1]; for(int i=1;i&lt;=cnt;++i) tot[hep[len[i]]--]=i; for(int i=cnt;i&gt;=1;--i) &#123; int node=tot[i]; res+=(ll)sz[fa[node]]*sz[node]*len[fa[node]]; sz[fa[node]]+=sz[node]; &#125;return res; &#125;&#125;T;char s[N];int main() &#123; scanf("%s",s); int n=strlen(s); for(int i=0;i&lt;n;++i)T.ins(s[i]-'a'); printf("%lld\n",(ll)(n-1)*n*(n+1)/2-2*T.calc()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÂêéÁºÄËá™Âä®Êú∫.SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [CQOI2011]Âä®ÊÄÅÈÄÜÂ∫èÂØπ CDQÂàÜÊ≤ª luoguP3157]]></title>
    <url>%2F2019%2F03%2F30%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3157%2F</url>
    <content type="text"><![CDATA[‰∏Ä‰∏™ÂèØÁà±ÁöÑ $CDQ$ ÔºåÊàë‰ª¨Â∞ÜÂéüÂßãÂ∫èÂàóÁúãÊàê‰∏Ä‰∏™‰∏Ä‰∏™Âä†ÂÖ•ÔºåÁÑ∂ÂêéÂêéÈù¢ÁöÑÊìç‰ΩúÂ∞±ÊòØ‰∏Ä‰∏™‰∏Ä‰∏™Âà†Èô§ÔºåËøô‰πà‰∏Ä‰∏™‰∏Ä‰∏™Êìç‰ΩúÊàë‰ª¨ÈÉΩËÆ∞‰∏ãÊù•ÔºåÁÑ∂ÂêéÊØè‰∏™Êìç‰ΩúËÆ∞‰∏Ä‰∏™ $id$ Ë°®Á§∫ÂÆÉÂ∞Ü‰∏∫Á¨¨Âá†‰∏™Êó∂Èó¥ÁÇπÂÅöÂá∫Ë¥°ÁåÆ„ÄÇ ÂΩìÁÑ∂ÂØπ‰∫éÂéüÂßãÂ∫èÂàóÁöÑ‰∏Ä‰∏™‰∏Ä‰∏™ÊèíÂÖ•ÁöÑÊìç‰ΩúËøôÈáåÁöÑË¥°ÁåÆÊòØ $1$ ÔºåÂà†Èô§Êìç‰ΩúÁöÑË¥°ÁåÆËá™ÁÑ∂ÊòØ $-1$ „ÄÇ ÊØè‰∏™Êó∂Èó¥ÁÇπÁªüËÆ°Á≠îÊ°àÔºåÊúÄÂêéËæìÂá∫ÂâçÂÅö‰∏Ä‰∏™ÂâçÁºÄÂíåÁÑ∂Âêé‰æùÊ¨°ËæìÂá∫Â∞±Â•Ω‰∫Ü„ÄÇ ËøôÊòØÂÖ∑‰ΩìÁöÑÊ°ÜÊû∂Ôºå‰ΩÜÊòØÁªüËÆ° $ans$ Êï∞ÁªÑÂÖ∑‰ΩìÊÄé‰πàÂÅöÂë¢Ôºü ÂèØ‰ª•Áü•ÈÅìÂØπ‰∫é‰∏Ä‰∏™‰ΩçÁΩÆ $i$ Ôºå‰ΩçÁΩÆ‰∏äÁöÑÂÖÉÁ¥†ÊòØ $a_i$ „ÄÇÂØπ‰∫é‰∏Ä‰∏™ $j$ Êª°Ë∂≥ $j\leq i$ ÔºåÂπ∂‰∏î $a_i\leq a_j$ ÔºåËÄå‰∏îËøòË¶Å‰øùËØÅ $id_j\leq id_i$ ÔºåÈÇ£‰πà $j$ Â∞±ÂèØ‰ª•ÂØπ $i$ ÂÅöÂá∫Ë¥°ÁåÆ„ÄÇËøô‰∏™Â∞±ÊòØÂú® $i$ ÂâçÈù¢ÁöÑÂÖÉÁ¥†ÂèØ‰ª•ÂÅöÂá∫ÁöÑË¥°ÁåÆ„ÄÇ$i$ ÂêéÈù¢ÁöÑÂÖÉÁ¥†ÂÅöÂá∫ÁöÑË¥°ÁåÆÂêåÁêÜ„ÄÇ ËøôÂ∞±ÊòØ‰∏Ä‰∏™ÂæàÊôÆÈÄöÁöÑ‰∏â‰ΩçÂÅèÂ∫è‰∫ÜÔºåÊ≥®ÊÑèË¶ÅÂºÄ $long\ long$ „ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=2e5+2;template &lt;typename _Tp&gt; inline void IN(_Tp &amp;x)&#123; x=0;int flag=0;char ch; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int n,m,cnt,pos[N],a[N];long long ans[N];struct Query&#123;int r,v,d,id;&#125;Q[N];bool cmp(Query a,Query b) &#123;return a.d&lt;b.d;&#125;int C[N];#define lowbit(x) ((x)&amp;(-(x)))void add(int x,int v) &#123;for(;x&lt;=n;x+=lowbit(x))C[x]+=v;&#125;int sum(int x) &#123;int res=0;for(;x;x-=lowbit(x))res+=C[x];return res;&#125;inline void CDQ(int l,int r) &#123; if(l==r)return; int mid=(l+r)&gt;&gt;1; CDQ(l,mid),CDQ(mid+1,r); sort(Q+l,Q+mid+1,cmp),sort(Q+mid+1,Q+r+1,cmp); int j=l; for(int i=mid+1;i&lt;=r;++i) &#123; while(j&lt;=mid&amp;&amp;Q[j].d&lt;=Q[i].d) add(Q[j].v,Q[j].r),++j; ans[Q[i].id]+=Q[i].r*(sum(n)-sum(Q[i].v)); &#125; for(int i=l;i&lt;j;++i) add(Q[i].v,-Q[i].r); j=mid; for(int i=r;i&gt;mid;--i) &#123; while(j&gt;=l&amp;&amp;Q[j].d&gt;=Q[i].d) add(Q[j].v,Q[j].r),--j; ans[Q[i].id]+=Q[i].r*sum(Q[i].v-1); &#125; for(int i=mid;i&gt;j;--i) add(Q[i].v,-Q[i].r);&#125;int main()&#123; IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(a[i]),pos[a[i]]=i,Q[++cnt]=(Query)&#123;1,a[i],i,0&#125;; for(int i=1;i&lt;=m;++i) &#123; int x;IN(x); Q[++cnt]=(Query)&#123;-1,x,pos[x],i&#125;; &#125; CDQ(1,cnt); for(int i=1;i&lt;=m;++i) ans[i]+=ans[i-1]; for(int i=0;i&lt;m;++i) printf("%lld\n",ans[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>CDQÂàÜÊ≤ª</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SDOI2013]Ê£ÆÊûó ‰∏ªÂ∏≠Ê†ë+ÂêØÂèëÂºèÂêàÂπ∂ luoguP3302]]></title>
    <url>%2F2019%2F03%2F29%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3302%2F</url>
    <content type="text"><![CDATA[ÂàùÁúãÈ¢òÈù¢ÔºåÁúãÂà∞ $K$ Â§ßÊàë‰ª¨ÂèØ‰ª•ÊÉ≥Âà∞‰∏ªÂ∏≠Ê†ëÔºå‰ΩÜÊòØËøûËæπÂç¥ÂèàÁ¨¶Âêà $LCT$ Ôºå‰ΩÜÊòØÊØïÁ´ü $LCT$ ÊòØ‰∏çËÉΩÊîØÊåÅ $K$ Â§ßÁöÑÔºåÂõ†‰∏∫ $Splay$ ËæÖÂä©Ê†ë‰∏çÊòØ‰∫åÂèâÊü•ÊâæÊ†ë„ÄÇ ‰∏çËøá‰∏ªÂ∏≠Ê†ëÊàë‰ª¨ÂèØ‰ª•Â§ßÂäõÂêØÂèëÂºèÂêàÂπ∂ÔºåÂêàÂπ∂ÁöÑÊó∂ÂÄôÈáçÂª∫ËäÇÁÇπÁöÑÂÄçÂ¢ûÊï∞ÁªÑÂπ∂‰∏îÈáçÊñ∞Âª∫Á´ãËäÇÁÇπÁöÑÊùÉÂÄºÁ∫øÊÆµÊ†ë„ÄÇËøôÊ†∑Â≠êÊØè‰∏™ËäÇÁÇπË¶ÅË¢´‰øÆÊîπÁöÑÊúüÊúõÊ¨°Êï∞‰∏∫ $logn‚Äã$ Ê¨°ÔºåÈÇ£‰πàÊó∂Èó¥Â§çÊùÇÂ∫¶Â∞±ÊòØ $O(nlog^2n)‚Äã$ (Ë≤å‰ººÊòØÁöÑ)ÔºåËøôË∂≥‰ª•ËÆ©Êàë‰ª¨ËøáËøôÈÅìÈ¢ò‰∫Ü„ÄÇ 1.‰∏ªÂ∏≠Ê†ëÂ¶Ç‰Ωï‰∏äÊ†ë‰∏äÊ†ë[ÊâãÂä®ÊªëÁ®Ω]‚Ä¶‚Ä¶ È¶ñÂÖàÔºåÂØπ‰∫éËäÇÁÇπ $u$ ÁöÑÊùÉÂÄºÁ∫øÊÆµÊ†ëÔºå$ta$ ÊòØÁî± $fa[u]$ ÁöÑÊùÉÂÄºÁ∫øÊÆµÊ†ëÁªßÊâøËøáÊù•ÁöÑÔºåÂõ†‰∏∫Âè™ÊòØÂ§ö‰∫Ü‰∏Ä‰∏™ $u$ ÔºåÊâÄ‰ª•‰∏ªÂ∏≠Ê†ëÂè™ÊòØÂ§öÂ¢ûÂä†‰∫Ü $logn$ ‰∏™ËäÇÁÇπ„ÄÇ Êó¢ÁÑ∂ÊòØ‰ªéÁà∂‰∫≤ËäÇÁÇπÁªßÊâøËøáÊù•ÁöÑËØùÔºåÈÇ£‰πàÂæàÊòæÁÑ∂Êàë‰ª¨ÂèØ‰ª•Âú®È¢ÑÂ§ÑÁêÜÂÄçÂ¢ûÊï∞ÁªÑÁöÑÊó∂ÂÄôÈ°∫‰æøÂ∞Ü‰∏ªÂ∏≠Ê†ëÂª∫Â•Ω„ÄÇ Code-builld:1234567void dfs(int u,int f) &#123; update(root[u],root[f],1,tmp,S(a[u])); fa[u][0]=f,dep[u]=dep[f]+1; for(int i=1;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i-1]][i-1]; for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) dfs(G[i].to,u);&#125; Ëøô‰∏™ÂæàÂÆπÊòìÁêÜËß£ÔºåÈÇ£‰πàÊàë‰ª¨ÊÄé‰πàÊö¥ÂäõÂêàÂπ∂‰∏§È¢óÊ†ëÂë¢Ôºü ÂØπ‰∫éË¶ÅÂêàÂπ∂ÁöÑ‰∏§È¢óÊ†ëÔºåÊàë‰ª¨ÈÄâÊã©Â∞Ü $size$ Â∞èÁöÑÂæÄ $size$ Â§ßÁöÑÂπ∂ÔºåÂØπ‰∫éÁªôÂá∫ÁöÑ $x,y$ ÔºåÊàë‰ª¨ÂÖàÁªô $x,y$ ËøûÂ•ΩËæπÔºåÁÑ∂ÂêéÂ∞Ü $y$ ÁöÑÊùÉÂÄºÁ∫øÊÆµÊ†ë‰ªé $x$ Êõ¥Êñ∞Ôºå‰∏¢Êéâ‰ª•ÂâçÁöÑ„ÄÇÊúÄÂêéÈÅçÂéÜ $y$ ÁöÑÂ≠êÊ†ëÔºåÊõ¥Êñ∞ÂÖ∂ÂÄçÂ¢ûÊï∞ÁªÑÂíåÊùÉÂÄºÁ∫øÊÆµÊ†ëÂç≥ÂèØ„ÄÇ Ëá≥‰∫é $size$ ÁöÑÁª¥Êä§ÁöÑËØùÔºåÊàë‰ª¨ÂèØ‰ª•ÊâæÂà∞ $x,y$ ÊâÄÂú®ÁöÑÊ†ëÁöÑÊ†π„ÄÇËøô‰∏™Ê†∑Â≠ê $size$ Ë∞ÅÂ§ßË∞ÅÂ∞èÂè™ÈúÄË¶ÅÂà§Êñ≠ $x,y$ ÊâÄÂú®ÁöÑÊ†ëÁöÑÊ†πÁöÑ $size$ Ë∞ÅÂ§ßË∞ÅÂ∞èÂç≥ÂèØ„ÄÇÊàë‰ª¨Âú®ÁΩë‰∏ãÈÅçÂéÜ $y$ ÁöÑÂ≠êÊ†ëÊó∂ÊØèÊ¨°ÈÉΩÂ∞Ü$x$ ÊâÄÂú®Ê†ëÁöÑÊ†πÁöÑ $size$ Âä†‰∏ÄÂç≥ÂèØ„ÄÇ Code-merge:12345678910111213void merge(int rt,int u,int f) &#123; /*rt:xÊâÄÂú®Ê†ëÁöÑÊ†πÔºåu:ÂΩìÂâçÈúÄË¶ÅÈáçÊûÑÁöÑËäÇÁÇπ,ÂàöËøõÂÖ•ÂáΩÊï∞ÁöÑÊó∂ÂÄô‰∏∫y*/ /*f:ÂΩìÂâçÈúÄË¶ÅÈáçÊûÑÁöÑËäÇÁÇπÁöÑÁà∂ËäÇÁÇπÔºåÂàöËøõÂÖ•ÂáΩÊï∞ÁöÑÊó∂ÂÄô‰∏∫x*/ fa[u][0]=f,dep[u]=dep[f]+1;//Êõ¥Êñ∞Ê∑±Â∫¶ for(int i=1;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i-1]][i-1]; /*Êõ¥Êñ∞ÂÄçÂ¢ûÊï∞ÁªÑ*/ size[rt]++,//Êõ¥Êñ∞size sta[u]=f,//ËÆ∞ÂΩïÁà∂‰∫≤(‰∏çÊòØÂÄçÂ¢ûÊï∞ÁªÑ,ËøôÊòØÁî®Êù•Êü•ËØ¢ÊâÄÂú®Ê†ëÁöÑÊ†πÁöÑ) vis[u]=true;//ËÆ∞ÂΩï‰∏Ä‰∏ã update(root[u],root[f],1,tmp,S(a[u]));//ÈáçÂª∫ for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) merge(rt,G[i].to,u);//ÈÅçÂéÜÂ≠êÊ†ë&#125; ÁÑ∂ÂêéÂ∑Æ‰∏çÂ§ö‰∫ÜÔºåËá≥‰∫é $sta$ ÁöÑËØùÔºåÂõ†‰∏∫Ë¶ÅÊü•ËØ¢ÊâÄÂú®Ê†ëÁöÑÊ†πÔºå‰∏∫‰∫ÜÊèêÈ´òÊïàÁéáÊàë‰ª¨ÂèØ‰ª•Â∞ÜÂÖ∂‰Ωú‰∏∫Âπ∂Êü•ÈõÜÁöÑÂΩ¢Âºè„ÄÇ ËøòÊúâ‰∏ÄÁÇπÔºåÂØπ‰∫é $vis$ Êï∞ÁªÑÔºåÂÆûÈôÖ‰∏äÊàë‰ª¨Âª∫Ê†ëÁöÑÊó∂ÂÄôÂ∞±Áõ¥Êé•Áî® $merge$ Â•Ω‰∫ÜÔºå$vis$ Âè™ÊòØÁî®Êù•Âà§ÈáçËÄåÂ∑≤ÔºåÂõ†‰∏∫ÊòØÊ£ÆÊûóÔºåÊúâÂæàÂ§öÊ†ë„ÄÇÊâÄ‰ª•ËØ¥Êàë‰ª¨ÂèØ‰ª•‰∏çÁî® $dfs$ Â∞±Â∞ÜÂàùÂßãÂΩ¢ÊÄÅÁöÑÊ†ëÂª∫Â•Ω„ÄÇ Code-pre:12for(int i=1;i&lt;=n;++i) if(!vis[i]) &#123;merge(i,i,0);sta[i]=i;&#125; ÊúÄÂêéÈúÄË¶ÅÊ≥®ÊÑèÁöÑÂ∞±ÊòØ‰∏ªÂ∏≠Ê†ëÁöÑÁ©∫Èó¥Ë¶ÅÂºÄÂæàÂ§ßÔºåÂ∑Æ‰∏çÂ§öÊòØ $nlog^2n$ ÔºåÂõ†‰∏∫ÊúâÂæàÂ§öÁªìÁÇπ„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=8e4+7;const int LogN=22;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int testcase,lastans,n,m,T,a[N],b[N],tmp,head[N],cnt;int size[N],sta[N],vis[N];struct Edge &#123;int nxt,to;&#125;G[N&lt;&lt;2];inline int S(int x) &#123;return lower_bound(b+1,b+1+tmp,x)-b;&#125;inline void add(int u,int v) &#123; G[++cnt]=&#123;head[u],v&#125;,head[u]=cnt; G[++cnt]=&#123;head[v],u&#125;,head[v]=cnt;&#125;namespace Segment_Tree &#123; #define mid ((l+r)&gt;&gt;1) int root[N],tot; struct tree &#123;int l,r,v;&#125;t[N*601]; void update(int&amp;now,int last,int l,int r,int pos) &#123; now=++tot,t[now]=t[last],t[now].v++; if(l==r) return; if(pos&lt;=mid) update(t[now].l,t[last].l,l,mid,pos); else update(t[now].r,t[last].r,mid+1,r,pos); &#125; int query(int r1,int r2,int r3,int r4,int l,int r,int k) &#123; if(l==r) return l; int th=t[t[r1].l].v+t[t[r2].l].v-t[t[r3].l].v-t[t[r4].l].v; if(k&lt;=th) return query(t[r1].l,t[r2].l,t[r3].l,t[r4].l,l,mid,k); else return query(t[r1].r,t[r2].r,t[r3].r,t[r4].r,mid+1,r,k-th); &#125; #undef mid&#125;using namespace Segment_Tree;int dep[N],fa[N][LogN+4];int lca(int x,int y) &#123; if(x==y)return x; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=LogN;i&gt;=0;--i) if(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i]; if(x==y)return x; for(int i=LogN;i&gt;=0;--i) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0];&#125;void merge(int rt,int u,int f) &#123; fa[u][0]=f,dep[u]=dep[f]+1; for(int i=1;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i-1]][i-1]; size[rt]++, sta[u]=f, vis[u]=true; update(root[u],root[f],1,tmp,S(a[u])); for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) merge(rt,G[i].to,u);&#125;int find(int u) &#123;return u==sta[u]?u:sta[u]=find(sta[u]);&#125;int main() &#123; IN(testcase); IN(n),IN(m),IN(T); for(int i=1;i&lt;=n;++i) IN(a[i]),b[i]=a[i],sta[i]=i; sort(b+1,b+1+n); for(int i=1;i&lt;=n;++i) if(b[i]!=b[i-1])b[++tmp]=b[i]; for(int i=1;i&lt;=m;++i) &#123; int x,y;IN(x),IN(y);add(x,y); &#125; for(int i=1;i&lt;=n;++i) if(!vis[i]) &#123;merge(i,i,0);sta[i]=i;&#125; for(int i=1;i&lt;=T;++i) &#123; char op[2];int x,y,k; scanf("%s",op);IN(x),IN(y); if(op[0]=='L') &#123; x^=lastans,y^=lastans; add(x,y); int a=find(x),b=find(y); if(size[a]&lt;size[b])swap(x,y),swap(a,b); merge(a,y,x); &#125; else &#123; IN(k); x^=lastans,y^=lastans,k^=lastans; int lca_xy=lca(x,y); lastans=b[query(root[x],root[y], root[lca_xy],root[fa[lca_xy][0]],1,tmp,k)]; printf("%d\n",lastans); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>‰∏ªÂ∏≠Ê†ë</tag>
        <tag>ÂêØÂèëÂºèÂêàÂπ∂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêËÄÉËØïÊÄªÁªì„Äë Test-2019.3.28 HNOI2019Ê®°Êãü]]></title>
    <url>%2F2019%2F03%2F28%2F%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190328%2F</url>
    <content type="text"><![CDATA[‰ªäÂ§©ÁöÑÈ¢òÁõÆË≤å‰ººÊö¥ÂäõÂàÜÂ•ΩÊãøÂÜôÊ¨∏ÔºåÁÑ∂ËÄå‚Ä¶‚Ä¶Á™ùÂè™Êúâ $70$ Ôºü‰∏çËøáÊéíÂêçÊØîÊò®Â§©‰∏äÂçá‰∫Ü‰ªÄ‰πàÈ¨º„ÄÇ $QwQ$ È¢òÁõÆÁöÑÁ°ÆÂæàÈöæÊáÇÔºåÊâÄ‰ª•Á™ùÂê¨‰∫ÜËÆ≤Ëß£Âêé‰πüÊ≤°Âê¨ÊáÇÂ§öÂ∞ëÔºå‰∏çËøáËøòÊòØÊîπÂá∫‰∫ÜÁ¨¨‰∏ÄÈ¢ò(Á¨¨‰∏ÄÈ¢òÊòØ‰∫∫Â∞±ÊîπÁöÑÂá∫Â•ΩÂêßo(‚âßÂè£‚â¶)o)„ÄÇ È¢òÁõÆÂéãÁº©ÂåÖÊà≥Êàë!!!~\(‚âß‚ñΩ‚â¶)/~(ÊúâÊó∂ÈìæÊé•ÂèØËÉΩ‰ºöÂ¥©ÔºåÂ¶ÇÊûúÂ¥©‰∫ÜÁöÑËØùËØ∑Á®çÂêéÂ∞ùËØïQwQ) T1 ÊúüÊúõÂæóÂàÜÔºö30ÂàÜÂÆûÈôÖÂæóÂàÜÔºö30ÂàÜÊ≠£Ëß£ÔºöÊâæËßÑÂæã??Á™ùÁöÑËß£Ê≥ïÔºöÊö¥ÂäõÊ®°ÊãüÈ¢òÊÑè È¢òËß£ÔºöÁ¨¨‰∏ÄÁúºÁúãÂà∞È¢òÁõÆÔºåÊ¨∏ÔºåÂ¶ÇÊûúÊåâÁÖßÈ¢òÈù¢Ê®°ÊãüÂ∞±Êúâ $30$ ÂàÜÔºÅÂá∫È¢ò‰∫∫ËâØÂøÉÂïä„ÄÇÁÑ∂ÂêéÁúãÊï∞ÊçÆËåÉÂõ¥Ôºå$100\%$ ÁöÑÊï∞ÊçÆÁöÑ $n\leq 3\times10^7$ ÔºåËøôÂ∫îËØ•ÊòØ $O(n)$ ÁÆóÊ≥ïÊâçË°åÂïäÔºå‰∫éÊòØÊÉ≥ÔºåÊàñËÆ∏ÊòØÁ∫øÊÄß $DP$ ÔºåÁÑ∂ÂêéÊé®ÂºèÂ≠êÔºåÊé®Âá∫Ëøô‰πà‰∏Ä‰∏™È¨ºÁé©ÊÑèÔºö f[i]=f[i-1]+sum(a[i])$sum(a[i])$ Â∞±ÊòØÂú® $1$ Âà∞ $i-1$ ‰∏≠Â§ß‰∫é $a[i]$ ÁöÑÊï∞ÁöÑ‰∏™Êï∞ÔºåÁÑ∂Âêé $f[i]$ Ë°®Á§∫Â∞ÜÂâç $i$ ‰∏™ÂÖÉÁ¥†ËøõË°åÂÜíÊ≥°ÈúÄË¶ÅÁöÑ‰∫§Êç¢Ê¨°Êï∞„ÄÇ ÂæàÊòæÁÑ∂ËøôÊòØÈîôÁöÑ„ÄÇ ÁÑ∂ÂêéÊàëÂ∞±ÊÉ≥Âà∞‰∫Ü $NOI$ ÂæÄÂπ¥ÁöÑÂÜíÊ≥°ÊéíÂ∫è(Ë≤å‰ººÊòØ $NOI$ ÁöÑ?)ÔºåÂÖ∂ÂÆû‰∏§ÈÅìÈ¢òÊ≤°‰ªÄ‰πàËÅîÁ≥ª„ÄÇ ÂìéÂ•ΩÂêßÂèëÁé∞Ëøá‰∏çÂéªÁõ¥Êé•‰∏äÊö¥ÂäõÂêßÔºåÈ¢òÁõÆËØ¥‰ªÄ‰πàÂ∞±ÂÅö‰ªÄ‰πàÔºå‰∫éÊòØÊääÊàëÁî®Êù•ÂØπÊãçÁöÑÊö¥ÂäõÁ®ãÂ∫èÊèê‰∫§‰∫Ü‰∏äÂéªÔºå$30$ ÂàÜ„ÄÇ Êé•‰∏ãÊù•ËÆ≤ËÆ≤Ê≠£Ëß£„ÄÇ ÂæàÊòæÁÑ∂ÔºåÂØπ‰∫é‰∏Ä‰∏™ÂÖÉÁ¥† $a_i$ ÔºåÂÆÉÊâÄÂú®ÁöÑ‰ΩçÁΩÆ‰∏∫ $i$ ÔºåÁÑ∂ËÄåÊúÄÂêéÊéíÂ•ΩÂ∫èÂêé $ta$ Â∫îËØ•ÂõûÂà∞ÁöÑ‰ΩçÁΩÆ‰∏∫ $a_i$ „ÄÇËßÇÂØüÂÜíÊ≥°ËøáÁ®ãÔºåÂèëÁé∞ÂØπ‰∫é‰∏Ä‰∏™ÂÖÉÁ¥†ÔºåÊØèÊ¨°ÂÜíÊ≥°ÊéíÂ∫èÈÉΩÊúÄÂ§ö‰ºöÂ∞Ü $ta$ ÂêëËá™Â∑±ÁöÑÁõÆÊ†á‰ΩçÁΩÆÁßªÂä®‰∏ÄÊ†º„ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØÔºåÊØîÂ¶ÇËØ¥ÂΩìÂâçÂ∫èÂàóÁöÑÊúÄÂ∞èÂÖÉÁ¥†ÔºåÂÅáËÆæÊúÄÂ∞èÂÖÉÁ¥†ÁöÑËµ∑ÁÇπ‰ΩçÁΩÆ‰∏∫ $s$ ,Êàë‰ª¨ÂèëÁé∞ÊØèÊ¨°ÂÜíÊ≥°ÊÄª‰ºöÂ∞Ü $ta$ ÂêëÂâçÁßª‰∏ÄÊ†ºÔºåÁÑ∂ÂêéÂú®Á¨¨ $s-1$ Ê¨°ÂÜíÊ≥°ÊéíÂ∫èÁöÑÊó∂ÂÄô $1$ ÂΩí‰Ωç‰∫Ü„ÄÇÁÑ∂ÂêéÂèëÁé∞ $1$ ÁöÑÁßªÂä®ÂØπ $2$ ÁöÑÁßªÂä®Ê¨°Êï∞Âπ∂Ê≤°Êúâ‰∫ßÁîüÂΩ±ÂìçÔºåËøô‰∏™Êó∂ÂÄôÂ∞Ü $1$ Âà†ÂéªÔºåÂèëÁé∞ $2$ ÂΩí‰ΩçÁöÑÁßªÂä®Ê¨°Êï∞ÂèòÊàê‰∫Ü $2$ ÁöÑÂàùÂßã‰ΩçÁΩÆ $-$ $1$ ÔºåÊîæÂú®ÂéüÂ∫èÂàó‰∏≠Â∞±ÊòØ $2$ ÁöÑÂàùÂßã‰ΩçÁΩÆ $-$ $2$ „ÄÇ ËøôËá≥Â∞ëËØ¥ÊòéÔºåÂØπ‰∫é‰ªªÊÑè‰∏Ä‰∏™ÂÖÉÁ¥† $i$ ÔºåÂÖ∂ÊâÄÈúÄË¶ÅÁöÑÁßªÂä®Ê¨°Êï∞‰∏∫ $i-a_i$ „ÄÇ ÈÇ£‰πàÔºåÂ¶ÇÊûúË¶Å‰ΩøÂ∫èÂàóÊúâÂ∫èÔºåÊâÄÈúÄË¶ÅÁöÑÊéíÂ∫èÊ¨°Êï∞Â∞±ÊòØ $max\{ i-a_i \}$ „ÄÇÁõ¥Êé•ËÆ°ÁÆóÁ≠îÊ°àÂç≥ÂèØ„ÄÇ (ÂÆûÈôÖ‰∏äÁ™ù‰πü‰∏çÊòØÂæàÊòéÁôΩ‚Ä¶..Ë≤å‰ººÊòØËøôÊ†∑ÁöÑÂêß $QwQ$ ) CodeÔºö12345678910111213141516171819#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int n,S,B,C,D,A[10006];int main() &#123; freopen("magician.in","r",stdin); freopen("magician.out","w",stdout); scanf("%d%d%d%d%d",&amp;n,&amp;S,&amp;B,&amp;C,&amp;D); for(int i=1;i&lt;=n;++i) &#123; A[i]=i; S=(S*B+C)%D; swap(A[i],A[(S%i)+1]); &#125; int counter=0; for(int i=1;i&lt;=n;++i)counter=max(counter,i-A[i]); printf("%d\n",counter); return 0;&#125; T2 ÊúüÊúõÂæóÂàÜÔºö30ÂàÜÂÆûÈôÖÂæóÂàÜÔºö0ÂàÜÊ≠£Ëß£ÔºöÂÆπÊñ•+ÊêúÁ¥¢+Ââ™ÊûùÁ™ùÁöÑËß£Ê≥ïÔºöÊö¥Êêú È¢òËß£Ôºö‰∏ç‰ºö‚Ä¶‚Ä¶‚Ä¶‚Ä¶.ÁÑ∂ÂêéÊö¥ÊêúÊâìÊåÇ‰∫ÜÊ≤°ÂæóÂàÜ„ÄÇ ÊâÄ‰ª•Ëøô‰∏çËÉΩËØ¥ÊòØÈ¢òËß£ÔºåÁïô‰∏™ÂùëÂêß„ÄÇ T3 ÊúüÊúõÂæóÂàÜÔºö40ÂàÜÂÆûÈôÖÂæóÂàÜÔºö40ÂàÜÊ≠£Ëß£ÔºöÂ∞ÜÊâÄÊúâÈ¢úËâ≤Áª¥Êä§ÊàêÈìæÔºåÁÑ∂ÂêéÂàÜÂùóÂä†ÈÄüÁ™ùÁöÑËß£Ê≥ïÔºöÁõ¥Êé•Áª¥Êä§ÊàêÈìæ ÂØπ‰∫é‰∏Ä‰∏™ $i$ ÔºåÂ¶ÇÊûú $a_i=k$ ÔºåÂπ∂‰∏î $a_j=k$ ÔºåËÄå‰∏î $i$ Âíå $j$ ÊòØÁ¶ªÂæóÊúÄËøëÁöÑÔºåÂàôÂ∞ÜÂÆÉ‰ª¨ÂêëÂâçÂêëÊòüÈÇ£Ê†∑ËøûËµ∑Êù•ÔºåÊúÄÂêéÂØπËØ¢ÈóÆÁöÑÂå∫Èó¥Áõ¥Êé•Êö¥ÂäõË∑≥Âç≥ÂèØ„ÄÇ CodeÔºö123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;map&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=5e5+7;const int LogN=27;vector&lt;int&gt; seq;map&lt;int,int&gt; hashs;int n,q,a[N],head[N],nxt[N],f[LogN+7][N],logs[N],ans;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline void pre_st()&#123; logs[0]=-1; for(int i=1;i&lt;=n;++i)logs[i]=logs[i&gt;&gt;1]+1; for(int i=1;i&lt;=n;++i)f[0][i]=a[i]; for(int t=1;t&lt;LogN;++t) for(int i=1;i&lt;=n;++i) if(i+(1&lt;&lt;t)-1&lt;=n) f[t][i]=max(f[t-1][i],f[t-1][i+(1&lt;&lt;(t-1))]);&#125; inline int query(int x,int y)&#123; int t=logs[y-x+1]; return max(f[t][x],f[t][y-(1&lt;&lt;t)+1]);&#125; inline void solve(int x,int lim) &#123; for(int now=x,last=nxt[x];last&gt;=lim;last=nxt[last]) &#123; while(now&gt;last&amp;&amp;query(last,now)&gt;a[last]) now=nxt[now]; ans=max(ans,now-last+1); &#125;&#125; inline void make_hashs() &#123; sort(seq.begin(),seq.end()); seq.erase(unique(seq.begin(),seq.end()),seq.end()); for(int i=0;i&lt;seq.size();++i) hashs[seq[i]]=i+1; for(int i=1;i&lt;=n;++i) a[i]=hashs[a[i]]; memset(head,-1,sizeof head);&#125;int main() &#123; freopen("spiral.in","r",stdin); freopen("spiral.out","w",stdout); IN(n),IN(q); for(int i=1;i&lt;=n;++i) IN(a[i]),seq.push_back(a[i]); make_hashs(); for(int i=1;i&lt;=n;++i) nxt[i]=head[a[i]],head[a[i]]=i; pre_st(); while(q--) &#123; ans=1; int x,y;IN(x),IN(y); for(int i=y;i&gt;=x;--i) solve(i,x); printf("%d\n",ans); &#125; return 0;&#125; Ê≠£Ëß£‰∏çË¥π‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ËÄÉËØïÊÄªÁªì</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SDOI2008]SandyÁöÑÂç°Áâá ÂêéÁºÄÊï∞ÁªÑ.SA luoguP2463]]></title>
    <url>%2F2019%2F03%2F28%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2463%2F</url>
    <content type="text"><![CDATA[ÂêéÁºÄÊï∞ÁªÑÔºåÊàë‰ª¨ÂèØ‰ª•ÂÖàÂ∞ÜÊâÄÊúâÁöÑÂç°ÁâáËøûÊàê‰∏Ä‰∏™‰∏≤ÔºåÊØè‰∏Ä‰∏™Âç°ÁâáÊï∞Âàó‰πãÈó¥Áî®‰∏Ä‰∏™ÊûÅÂ§ßÊï∞ÂàÜÂºÄ‰øùËØÅ‰∏çÂá∫ÈîÖ„ÄÇÁÑ∂ÂêéÁöÑËØùÔºåÂØπ‰∫éÁõ∏ÂêåÁöÑÂÆö‰πâÊúâ‰∫õÈ¨ºÔºå‰ΩøÂæóÊàë‰ª¨‰∏çËÉΩÁõ¥Êé•ÂÅö $SA$ ÔºåËøô‰∏™Êó∂ÂÄôÊàë‰ª¨Â∞ÜÊâÄÊúâÁöÑÂç°ÁâáÊï∞ÂàóÁöÑÂÄºÈÉΩËΩ¨Êç¢‰∏∫ÂΩìÂâç‰ΩçÁΩÆÂáèÂéª‰∏ä‰∏™‰ΩçÁΩÆÁöÑÂÄºÂç≥ÂèØ„ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØÁªüËÆ°Á≠îÊ°àÔºåÊàë‰ª¨‰∫åÂàÜËøô‰∏™ÊúÄÈïøÂÖ¨ÂÖ±Â≠êÂ∫èÂàóÁöÑÈïøÂ∫¶ÔºåÊØè‰∏ÄÊ¨°ÂéªÂà§Êñ≠ÊòØÂê¶ÂêàÊ≥ï„ÄÇÊÄé‰πàÂà§Êñ≠Âë¢ÔºüÈ¶ñÂÖàÂØπ‰∫é $height$ Êï∞ÁªÑÔºåÂ¶ÇÊûúË¶ÅÊª°Ë∂≥Ë¶ÅÊ±ÇÁöÑËØùÈÄâÂèñÁöÑËøô‰∏ÄÊÆµÁöÑ $height$ Êï∞ÁªÑÁöÑÂÄºÈÉΩ‰∏çËÉΩÂ∞è‰∫éÂΩìÂâçÁöÑ $mid$ ÔºåËøôÊòØÊòæÁÑ∂ÁöÑ„ÄÇ ÊÄé‰πàÁ°Æ‰øùÊàë‰ª¨Â∞ÜÊâÄÊúâÁöÑÂç°ÁâáÊï∞ÂàóÈÉΩÈÄâ‰∫ÜÂë¢ÔºüÁõ¥Êé•ÂºÄ‰∏Ä‰∏™ $vis‚Äã$ Êï∞ÁªÑÂç≥ÂèØÔºåÁÑ∂ÂêéÂú®Á¢∞Âà∞‰∏çÂêàÊ≥ïÁöÑÂú∞Êñπ(‰πüÂ∞±ÊòØ $height[i]‚Äã$ Â∞è‰∫é‰∫Ü $mid‚Äã$ )ÂÖ®ÈÉ®Ê∏ÖÁ©∫Âç≥ÂèØ„ÄÇ ÊúÄÂêéÂ¶Ç‰ΩïÂà§Êñ≠ÂΩìÂâçÁöÑ $mid$ ÊòØÂê¶ÂêàÊ≥ïÂë¢ÔºüÂæàÊòæÁÑ∂ÔºåÂè™ÊúâÂú®ÊâÄÊúâÁöÑÂç°ÁâáÊï∞ÂàóÈÉΩÊàêÂäüÈÄâÊã©ÁöÑÊÉÖÂÜµ‰∏ãÂ∞±ÂêàÊ≥ï‰∫Ü„ÄÇÊàë‰ª¨Áî®‰∏Ä‰∏™Ê†àÁª¥Êä§ $vis$ ÔºåÊ∏ÖÁ©∫Êñπ‰æøÔºåÁÑ∂ÂêéÂΩìÊ†àÈ°∂‰∏∫Âç°ÁâáÂ∫èÂàóÊï∞ÁöÑÊó∂ÂÄôÔºå‰πüÂ∞±ÊòØÊâÄÊúâÁöÑÂç°ÁâáÂ∫èÂàóÈÉΩÈÄâÊã©ÁöÑÊó∂ÂÄôÔºå$mid$ Â∞±ÂêàÊ≥ï‰∫Ü„ÄÇ ÁÑ∂ÂêéÊúâ‰∏™ÊÇ≤ÂÇ¨ÁöÑ‰∫ãÊÉÖÔºåÁ™ùÊâì‰∫åÂàÜÁöÑÊó∂ÂÄô‚Ä¶‚Ä¶ÊâìÊàê‰∫ÜËøôÊ†∑Ôºö 12345while(l&lt;=r) &#123; int mid=(l+r)&gt;&gt;1; if(check(mid)) ans=mid,l=mid+1; r=mid-1;&#125; ÂæàÊòæÁÑ∂Ôºå$r$ ÂâçÈù¢Â∫îËØ•Ë¶ÅÊúâ $else$ Ôºå‰ΩÜÊòØÁ™ùÁúã‰∫Ü‰∏ÄÊôö‰∏äÈÉΩÊ≤°ÁúãÂá∫Êù•‚Ä¶‚Ä¶. Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=2e6+7;const int M=5e2+7;const int G=5e3+7;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace SA &#123; int n,m,S[N],sa[N],height[N],x[N],y[N],hep[N]; inline void pre_sa() &#123; ++m; for(int i=1;i&lt;=n;++i) x[i]=S[i]; for(int i=1;i&lt;=n;++i) hep[x[i]]++; for(int i=1;i&lt;=m;++i) hep[i]+=hep[i-1]; for(int i=n;i&gt;=1;--i) sa[hep[x[i]]--]=i; for(int w=1,p=0;m=p,p&lt;n;w&lt;&lt;=1) &#123; p=0; for(int i=1;i&lt;=w;++i) y[++p]=n-w+i; for(int i=1;i&lt;=n;++i) if(sa[i]&gt;w) y[++p]=sa[i]-w; for(int i=0;i&lt;=m;++i) hep[i]=0; for(int i=1;i&lt;=n;++i) hep[x[i]]++; for(int i=1;i&lt;=m;++i) hep[i]+=hep[i-1]; for(int i=n;i&gt;=1;--i) sa[hep[x[y[i]]]--]=y[i]; swap(x,y); x[sa[1]]=p=1; for(int i=2;i&lt;=n;++i) x[sa[i]]=(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+w]==y[sa[i-1]+w])?p:++p; &#125;return; &#125; inline void pre_height()&#123; for(int i=1;i&lt;=n;++i)x[sa[i]]=i; int k=0; for(int i=1;i&lt;=n;++i)&#123; k-=k&gt;0; int j=sa[x[i]-1]; while(j+k&lt;=n&amp;&amp;i+k&lt;=n&amp;&amp;S[j+k]==S[i+k])++k; height[x[i]]=k; &#125;return; &#125;&#125;using namespace SA;int vis[G],stack[G],top;int num,len[G],id[N],a[G][M];inline bool check(int x) &#123; while(top) vis[stack[top--]]=0; for(int i=1;i&lt;=n;++i) &#123; if(height[i]&lt;x) &#123; while(top) vis[stack[top--]]=0; &#125; if(!vis[id[sa[i]]]) &#123; stack[++top]=id[sa[i]],vis[id[sa[i]]]=true; if(top==num) return true; &#125; &#125;return false;&#125;int main() &#123; IN(num); int mx=-inf,mi=inf,l=0,r=inf; for(int i=1;i&lt;=num;++i) &#123; IN(len[i]),r=min(r,len[i]-1); for(int j=1;j&lt;=len[i];++j) &#123; IN(a[i][j]); if(j!=1)mx=max(mx,a[i][j]-a[i][j-1]); &#125; &#125; for(int i=1;i&lt;=num;++i) &#123; for(int j=2;j&lt;=len[i];++j) S[++n]=a[i][j]-a[i][j-1],id[n]=i,mi=min(mi,S[n]); S[++n]=++mx; &#125; m=0; for(int i=1;i&lt;=n;++i) S[i]=S[i]-mi+1,m=max(m,S[i]); pre_sa(),pre_height(); int ans=0; while(l&lt;=r) &#123; int mid=(l+r)&gt;&gt;1; if(check(mid))ans=mid,l=mid+1; else r=mid-1; &#125; printf("%d\n",ans+1); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÂêéÁºÄÊï∞ÁªÑ.SA</tag>
        <tag>È¢òËß£</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêËÄÉËØïÊÄªÁªì„Äë Test-2019.3.27 HNOI2019Ê®°Êãü]]></title>
    <url>%2F2019%2F03%2F27%2F%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190327%2F</url>
    <content type="text"><![CDATA[‰ªäÂ§©ÂÖ®ÊòØÂéüÈ¢òÔºåÁÑ∂ËÄåÁ™ùÂá†‰πéÈÉΩÊ≤°ÂÅöËøáÔºå‰∫éÊòØÊåÇ‰∫Ü‚Ä¶‚Ä¶ ‰∏¢‰∫∫ÁöÑÊòØËÄÉÂú∫‰∏äÁªÑÂêàÊï∞ÁöÑÂºèÂ≠ê $C[i][j]$=$C[i$-$1][j]$+$C[i$-$1][j$-$1]$ ÂÜôÊàê‰∫Ü $C[i][j]$=$C[i][j$-$1]$+$C[i$-$1][j$-$1]$ ÔºåÁÑ∂ÂêéÁ¨¨‰∏ÄÈ¢òÂÖâËç£ÁàÜ $0‚Äã$ ‚Ä¶‚Ä¶TAT„ÄÇ Âê∏ÂèñÊïôËÆ≠ÔºÅ È¢òÁõÆÂéãÁº©ÂåÖÊà≥Êàë!!!~\(‚âß‚ñΩ‚â¶)/~(ÊúâÊó∂ÈìæÊé•ÂèØËÉΩ‰ºöÂ¥©ÔºåÂ¶ÇÊûúÂ¥©‰∫ÜÁöÑËØùËØ∑Á®çÂêéÂ∞ùËØïQwQ) T1 ÊúüÊúõÂæóÂàÜÔºö100ÂàÜÂÆûÈôÖÂæóÂàÜÔºö0ÂàÜÊ≠£Ëß£ÔºöPurfer+DP+ÁªÑÂêàÊï∞Â≠¶Á™ùÁöÑËß£Ê≥ïÔºöPurfer+DP+ÁªÑÂêàÊï∞Â≠¶ È¢òËß£ÔºöÂçÅÂπ¥OI‰∏ÄÂú∫Á©∫ÔºåÁªÑÂêàÊï∞ÊâìÈîôËßÅÁ•ñÂÆó„ÄÇ ‰∏äÈù¢ÁöÑÊ≠£Ëß£ÊúâËØØÔºåÂê¨ËØ¥ $DP$ ‰∏çÊòØÊ≠£Ëß£Ôºå‰∏çËøáÔºå$DP$ Â§çÊùÇÂ∫¶È´òËææ $O(n^4)$ ÔºåÊú¨Â∫îËØ• $T$ ÁöÑÔºåÂç¥‰ªóÁùÄÂ∞èÂ∏∏Êï∞‰∏ç‰ªÖ $AC$ ÔºåËøòÁàÜË∏©Ê†áÁ®ãÔºüËøôÁ©∂Á´üÊòØÈÅìÂæ∑ÁöÑÊ≤¶‰∏ßËøòÊòØ‰∫∫ÊÄßÁöÑÊâ≠Êõ≤Ôºü ‰∏ç‰∫Ü‰∏ç‰∫ÜÔºåÊ≠£Áªè‰∏ÄÁÇπ„ÄÇ‰ºóÊâÄÂë®Áü•ÔºåÊúâ‰∏™‰∏úË•øÂè´ $Purfer$ Â∫èÂàóÔºåÂØπ‰∫éÊØè‰∏Ä‰∏™‰∏çÂêåÁöÑÊ†ëÔºåÈÉΩÊúâ‰∏çÂêåÁöÑ $Purfer$ Â∫èÂàó„ÄÇÊâÄ‰ª•ÊØè‰∏™Ê†ëÈÉΩÂèØ‰ª•Áî®ÂÖ∂ $Purfer$ Â∫èÂàóÊù•Ë°®Á§∫ÔºåËøô‰∏™Ê†ë‰∏≠ÁöÑÊØè‰∏™ÁªìÁÇπÂú® $Purfer$ Â∫èÂàó‰∏≠ÁöÑÂá∫Áé∞Ê¨°Êï∞‰∏∫ÂÖ∂Â∫¶Êï∞Âáè‰∏Ä„ÄÇËá≥‰∫é$Purfer‚Äã$ Â∫èÂàóÂÖ∑‰ΩìÊòØ‰ªÄ‰πàÂ∞±‰∏çËµòËø∞‰∫Ü„ÄÇ ÈÇ£‰πà $DP‚Äã$ ÊñπÁ®ãÊÄé‰πàËÆæÔºü Êàë‰ª¨ËÆæ $f[i][j][k]$ Ë°®Á§∫ ‰ªéÂâç $i$ ‰∏™ÁªìÁÇπ‰∏≠ÈÄâÂá∫ $j$ ‰∏™ÁªìÁÇπÔºåÂπ∂‰∏îËøô $j$ ‰∏™ÁªìÁÇπÂÖ±Âú®ÂéüÊ†ëÁöÑ $Purfer$ Â∫èÂàóÂá∫Áé∞‰∫Ü $k$ Ê¨°ÁöÑÂêàÊ≥ï $Purfer$ Â∫èÂàóÁöÑÊï∞Èáè „ÄÇ ÈÇ£‰πàËΩ¨ÁßªÂë¢ÔºüÂæàÊòæÁÑ∂ÂàÜ‰∏∫‰∏§ÁßçÊÉÖÂÜµÔºö Ê≤°ÈÄâÁ¨¨ $i‚Äã$ ‰∏™ÁÇπ„ÄÇ ÈÄâ‰∫ÜÁ¨¨ $i‚Äã$ ‰∏™ÁÇπ„ÄÇ ÁÑ∂ÂêéÂàÜÂà´ËøõË°åËΩ¨ÁßªÔºåËøôÂ∞±ÂæàÁÆÄÂçï‰∫ÜÔºö Ê≤°ÈÄâÔºö$f[i][j][k]+=f[i-1][j][k]‚Äã$ ÈÄâ‰∫ÜÔºö$f[i][j][k]+=f[i-1][j-1][k-d]\times C[k][d]‚Äã$ ÂÖ∂‰∏≠ $d‚Äã$ ‰∏∫Êàë‰ª¨Ê≠£Âú®Êûö‰∏æÁöÑÁ¨¨ $i‚Äã$ ‰∏™ÁÇπÁöÑÂá∫Áé∞Ê¨°Êï∞ $(0‚Äã$ ~ $du[i]-1)‚Äã$ ÔºåÁÑ∂ÂêéÂ∞±ÊòØ‰∏ãÈù¢ÁöÑÁªÑÂêàÊï∞ÔºåÂ∞±ÊòØ‰ª£Ë°®ÁùÄÂú® $k-d‚Äã$ ÈïøÂ∫¶ÁöÑÂ∫èÂàó‰∏≠ÊèíÂÖ• $d‚Äã$ ‰∏™ $i‚Äã$ ÁöÑÊñπÊ°àÊï∞ „ÄÇÂΩìÁÑ∂‰πüÂèØ‰ª•Ëøô‰πàÂÜôÔºö f[i][j+1][d+k]+=C[d+k][d]\times f[i-1][j][k]‚Äã Êàë‰ª¨Áü•ÈÅì‰∏ÄÊ£µ $n‚Äã$ ‰∏™ÁªìÁÇπÁöÑÊ†ëÁöÑ $Purfer‚Äã$ Â∫èÂàóÁöÑÈïøÂ∫¶ÊòØ $n-2‚Äã$ ÁöÑÔºåÊâÄ‰ª•Êàë‰ª¨ÁöÑÁ≠îÊ°àÂ∫îËØ•Â∞±ÊòØ $f[n][i][i-2]‚Äã$ „ÄÇ ÊúÄÂêéÔºåËÆ∞ÂæóÈöèÊó∂ËÜúÊ®°ÔºÅ Code:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=57;const int MOD=1000000007;int du[N],n,T;ll C[N][N],f[N][N][N];int main() &#123; C[0][0]=1; for(int i=1;i&lt;=50;++i)&#123; C[i][0]=C[i][i]=1; for(int j=1;j&lt;i;++j) C[i][j]=(C[i-1][j]+C[i-1][j-1])%MOD;//Â∞±ÊòØËøôÂÑø! &#125; scanf("%d",&amp;T); while(T--)&#123; scanf("%d",&amp;n); for(int i=1;i&lt;=n;++i) scanf("%d",&amp;du[i]); memset(f,0,sizeof(f)); f[0][0][0]=1; for(int i=1;i&lt;=n;++i) for(int j=0;j&lt;i;++j) for(int k=0;k&lt;=n-2;++k) &#123; f[i][j][k]=(f[i][j][k]+f[i-1][j][k])%MOD; for(int d=0;d&lt;du[i]&amp;&amp;d+k&lt;=n-2;++d) f[i][j+1][d+k]=(f[i][j+1][d+k]+C[d+k][d]*f[i-1][j][k]%MOD)%MOD; &#125; printf("%d ",n); for(int i=2;i&lt;=n;++i)printf("%lld ",f[n][i][i-2]); printf("\n"); &#125; return 0;&#125; T2 ÊúüÊúõÂæóÂàÜÔºö5ÂàÜÂÆûÈôÖÂæóÂàÜÔºö30ÂàÜÊ≠£Ëß£Ôºö???Ê≤°Âèësol‚Ä¶‚Ä¶Á™ùÁöÑËß£Ê≥ïÔºöÊâãÁé©Â∞èÊï∞ÊçÆ+ÁûéÊêû È¢òËß£Ôºö‰∏ÄÁúãÂ∞±ÊòØÊáµÈÄºÈ¢ò‚Ä¶‚Ä¶‰ΩÜÊòØÁúãÂà∞ $30$ ÂàÜÁöÑÊï∞ÊçÆÂæàÂ∞èÔºåÂπ∂‰∏îËøòÊúâËèäËä±ÂõæÔºåÊâÄ‰ª•Êàë‰ª¨Êù•ÁûéÊêûÂêßÔºÅÂàöÂºÄÂßãÁöÑÊó∂ÂÄô‰ª•‰∏∫ÂâçÂÖ≠‰∏™ÁÇπÈÉΩÊòØËèäËä±ÂõæÔºåÁÑ∂ÂêéÈÉΩÊâãÁé©ÔºåÂà∞ÂêéÈù¢ÊâçÁúãÊ∏ÖÔºåÂè™ËÉΩËØ¥Êï∞ÊçÆÂ§™Âº±‰∫ÜÂïä„ÄÇ Ê≠£Ëß£Ë°®Á§∫‰∏çÊòéÁôΩ‚Ä¶‚Ä¶Ë¥¥‰∏ÄÂèëËÄÉÂú∫‰∏äÁöÑ‰ª£Á†ÅÔºö Code:123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123; freopen("b.in","r",stdin); freopen("b.out","w",stdout); int n,k; scanf("%d%d",&amp;n,&amp;k); int x,flag=0; for(int i=1;i&lt;n;++i)&#123; scanf("%d",&amp;x); if(x!=0)flag=1; &#125; if(k==0)&#123;printf("1\n");exit(0);&#125; if(!flag) &#123;//ËèäËä±ÂõæËæìÂá∫ÁûéÊêûÊâãÁé©Ôºü if(n==1&amp;&amp;k&gt;=0)&#123;printf("1\n"),exit(0);&#125; if(n==2&amp;&amp;k&gt;=0)&#123;printf("1\n"),exit(0);&#125; if(n==3&amp;&amp;k==0)&#123;printf("1\n"),exit(0);&#125; if(n==3&amp;&amp;k&gt;=1)&#123;printf("3\n"),exit(0);&#125; if(n==4&amp;&amp;k==0)&#123;printf("1\n"),exit(0);&#125; if(n==4&amp;&amp;k==1)&#123;printf("7\n"),exit(0);&#125; if(n==4&amp;&amp;k&gt;=2)&#123;printf("10\n"),exit(0);&#125; if(n==5&amp;&amp;k==0)&#123;printf("1\n"),exit(0);&#125; if(n==5&amp;&amp;k==1)&#123;printf("13\n"),exit(0);&#125; &#125; else &#123;//ÂÖ∂‰ªñÊÉÖÂÜµËæìÂá∫Ê†∑‰æãÔºüÔºü if(n==4)&#123;printf("8\n");exit(0);&#125; if(n==6)&#123;printf("28\n");exit(0);&#125; &#125; return 0;&#125; ÂÆûÈôÖ‰∏äÁé©Âà∞ $n‚Äã$=$5\&amp;\&amp;k‚Äã$=$2‚Äã$ ÁöÑÊó∂ÂÄôÊàëÂ∞±Â¥©‰∫ÜÔºåÁé©‰∏ç‰∏ãÂéª‰∫Ü„ÄÇ T3 ÊúüÊúõÂæóÂàÜÔºö0ÂàÜÂÆûÈôÖÂæóÂàÜÔºö0ÂàÜÊ≠£Ëß£ÔºöÊúÄÂ∞èÂâ≤Á™ùÁöÑËß£Ê≥ïÔºöÊ≤°ÂÅö‚Ä¶. È¢òËß£ÔºöÁúüÁöÑÁúã‰∏çÂá∫Êù•ÊòØÊúÄÂ∞èÂâ≤Âïä $QwQ$ Ôºå‰ª•‰∏∫ÊòØÊï∞ËÆ∫È¢òÔºåËøòÁúãÂà∞Ë¥®Âõ†Â≠ê‰∫ÜÊÑüËßâÂ∞±Êõ¥‰∏çÂÉèÊúÄÂ∞èÂâ≤‰∫Ü‚Ä¶‚Ä¶‰ΩÜÊòØÂú®ÊÉ≥È¢òÁõÆÁöÑÊó∂ÂÄôÊúÄÂ∞èÂâ≤ÁöÑÁ°ÆÂá∫Áé∞Âú®‰∫ÜÊàëÁöÑËÑëÊµ∑‰∏≠Ôºå‰ΩÜÊòØ‰∏ÄÈó™Â∞±Ëøá‰∫Ü‚Ä¶‚Ä¶ ‰∏Ä‰∏™ÊúâË∂£ÁöÑ‰∫ãÊÉÖÔºöËÄÉËØïÊúüÈó¥È´ò‰∫åÊú∫ÊàøÁ•û‰ªô‰∏ÄÂ∫¶ÊÄÄÁñëÊ≠§È¢ò‰∏∫Êï∞ËÆ∫È¢òÔºåËøô‰∏™Êó∂ÂÄô $chl$Á•û‰ªô ÂíåÂè¶‰∏Ä‰Ωç $Dalao$ Ëµ∞‰∫ÜÂá∫ÂéªÔºåÁ´ôÂú®Èó®Â§ñËÆ®ËÆ∫Ê≠§È¢ò‰∏≠ÁöÑ‚ÄùÁâ©ÁêÜ‚ÄùÔºåËØ¥‰ªÄ‰πàÈáçÂøÉÂíå‚ÄùÁâ©ÁêÜ‚ÄùÊúâÂÖ≥Âõ†Ê≠§Ê≠§È¢ò‰∏çÂèØÂÅöÔºåÁÑ∂ÂêéÊ†ëÁéãÁ•û‰ªôË°®Á§∫‰∏çÊáÇ‚ÄùÁâ©ÁêÜ‚Äù‰∏≠ÁöÑ‚ÄùÈáçÂøÉ‚ÄùÂáÜÂ§áÂºÉÁñóÔºåÁÑ∂ËÄåÊúÄÁªàÊ†ëÁéãÁ•û‰ªôËøòÊòØÈÄâÊã©‰∫ÜÁΩëÁªúÊµÅ‚Ä¶‚Ä¶ Â•ΩÂêß‰∏çÊâØÊ∑°‰∫ÜÔºåÊàë‰ª¨Êù•ËÆ®ËÆ∫‰∏Ä‰∏ãËøôÈ¢òÁöÑÁ≤óÁï•Ëß£Ê≥ï„ÄÇ ÂèØ‰ª•ÂèëÁé∞È¢òÁõÆÁªôÂá∫‰∫Ü‰∏Ä‰∏™ÈôêÂà∂Ôºö$N$ ÊúÄÂ§öÊúâ‰∏§‰∏™Ë¥®Âõ†Â≠ê„ÄÇËøô‰∏™ÈôêÂà∂Êúâ‰ªÄ‰πàÁî®Âë¢Ôºü ÂØπ‰∫é‰∏Ä‰∏™Êúâ $N$ ‰∏™ÊâáÂè∂ÁöÑÈ£éÊâáÔºåÊàë‰ª¨ËÄÉËôëÂπ≥Ë°°ÁöÑÂπ∂‰∏îÁã¨Á´ãÊâáÂè∂Âè™Êúâ‰∏Ä‰∏™ÁöÑÈ£éÊâáÔºö Â∑¶ËæπÁöÑÂ∞±ÊòØÊúâ $(N=8)$ ‰∏™ÊâáÂè∂ÁöÑÈ£éÊâáÔºåÂè≥ËæπÁöÑÂë¢Â∞±ÊòØÂú® $8$ ‰∏™ÊâáÂè∂‰∏≠Êúâ $2$ ‰∏™ÊâáÂè∂ÁöÑÈ£éÊâá ($(A_1,D_1,F_1),$$(A_1,H_1,B_1)$)ÔºåÂèØ‰ª•Áü•ÈÅìËøô‰∏™ $2$ ‰∏™ÊâáÂè∂ÁöÑÈ£éÊâáÊòØ‰∏ÄÂÆöÂπ≥Ë°°ÁöÑÔºåÂõ†‰∏∫ $2$ ÊòØ $8$ ÁöÑÂõ†Â≠ê„ÄÇ ÂèØ‰ª•Áü•ÈÅìÔºåÂØπ‰∫é $8$ ÁöÑÂÖ∂‰ªñÂõ†Â≠ê(‰æãÂ¶Ç $4$ )ÊòØÂèØ‰ª•Ë¢´Ë¥®Âõ†Â≠ê $2$ ÁªÑÊàêÁöÑÔºåÂõ†Ê≠§‰πüÊòØÂπ≥Ë°°ÁöÑÈ£éÊâá„ÄÇ ÈÇ£‰πàÂØπ‰∫é‰∏§‰∏™‰∏çÂêåÁöÑË¥®Âõ†Â≠êÔºåÂèØ‰ª•ÁªÑÊàê‰∏§‰∏™‰∏çÂêåÊ†∑ÂºèÁöÑ‰∏îÂπ≥Ë°°ÁöÑ $N$ ‰∏™ÊâáÂè∂ÁöÑÈ£éÊâáÁöÑÂ≠êÈ£éÊâá„ÄÇ ÂΩìÁÑ∂ËøòÊúâ‰ΩçÁΩÆ‰∏çÂêåÔºåÂØπ‰∫é‰∏äÂõæ‰∏≠ $2$ ‰∏™ÊâáÂè∂ÁöÑÂ≠êÈ£éÊâáÊ†πÊçÆ‰∏çÂêåÁöÑ‰ΩçÁΩÆÊúâÂæàÂ§ö‰∏™Ôºö Ëøô‰∏™Êó∂ÂÄôÊàë‰ª¨ÁöÑÈóÆÈ¢òÂ∞±ÂèØ‰ª•ËΩ¨ÂåñÂ¶Ç‰∏ã‰∫ÜÔºö Êúâ‰∏§ÁßçÁ±ªÂûãÁöÑÈ£éÊâá $p,q$ ÔºåÈ£éÊâáÁ±ªÂûãÁ≠â‰∫é $2$ ÁöÑÊ†∑Â≠êÂ¶Ç‰∏äÂõæÔºåÁé∞Âú®Êàë‰ª¨ÈúÄË¶ÅÁî®Ëøô‰∏§ÁßçÈ£éÊâáÊó†ÈáçÂè†ÁöÑË¶ÜÁõñÂ∞ΩÂèØËÉΩÂ§öÁöÑÂâ©‰∏ãÁöÑÊÆãÁº∫ÊâáÂè∂„ÄÇ Ëøô‰∏™Êó∂ÂÄôËÄÉËôëÂª∫ÂõæÔºåÊàë‰ª¨‰ªé $S$ ÂêëÊâÄÊúâ‰∏çÂêå‰ΩçÁΩÆÁöÑ $p$ Á±ªÈ£éÊâáËøû‰∏ÄÊù°ËæπÔºåËæπÊùÉ‰∏∫ $p$ ÔºåË°®Á§∫ÈÄâÊã©‰∫ÜËøô‰∏™È£éÊâáÂèØ‰ª•Â§öË¶ÜÁõñ‰∏ÄÂÖ± $p$ ‰∏™ÊâáÂè∂„ÄÇÊâÄÊúâ‰∏çÂêå‰ΩçÁΩÆÁöÑ $q$ Á±ªÈ£éÊâáÂêë $T$ ËøûËæπÔºåËæπÊùÉ‰∏∫ $q$ ÔºåÂíå‰∏äÈù¢ÂêåÁêÜ„ÄÇ ÁÑ∂ÂêéËøô‰∏™Êó∂ÂÄôÁöÑÊúÄÂ∞èÂâ≤ÊòØ‰ªÄ‰πàÂë¢ÔºüÂØπ‰∫é‰∏Ä‰∏™Ëµ∑ÁÇπ‰∏∫ $x$ ÁöÑ $p$ Á±ªÈ£éÊâáÔºåÊàë‰ª¨Â∞Ü $S$ ËøûÂêëTaÁöÑËæπÂàáÊñ≠ÔºåË°®Á§∫‰∏ç‰ΩøÁî®Ëµ∑ÁÇπ‰∏∫ $x$ ÁöÑ $p$ Á±ªÈ£éÊâáÔºå$q$ Á±ªÈ£éÊâáÂêåÁêÜ„ÄÇÂΩìÁÑ∂ÊòØ‰∏ç‰ΩøÁî®ÁöÑÈ£éÊâáË∂äÂ∞ëË∂äÂ•ΩÔºåÂâ©‰∏ãÁöÑÂèØÁî®ÁöÑÈ£éÊâáÂΩìÁÑ∂ÊòØË∂äÂ§öË∂äÂ•ΩÔºåÊâÄ‰ª•Êàê‰∫ÜÊúÄÂ∞èÂâ≤„ÄÇ ÈÇ£‰πàÊÄé‰πàË°®Á§∫Êó†ÈáçÂè†Âë¢Ôºü ÂèØ‰ª•Áü•ÈÅìÂêåÁ±ªÈ£éÊâáÊòØ‰∏çÂèØËÉΩÈáçÂè†ÁöÑÔºåÊàë‰ª¨ËÄÉËôëÂºÇÁ±ªÈ£éÊâá„ÄÇÊàë‰ª¨ÂØπ‰∫é‰∏Ä‰∏™ $p$ Á±ªÈ£éÊâáÂíå‰∏Ä‰∏™ $q$ Á±ªÈ£éÊâáÔºåÂ¶ÇÊûúÂÖ∂ÈáçÂè†‰∫ÜÔºåÈÇ£‰πàÂè™ËÉΩÈÄâÊã©ÂÖ∂‰∏≠‰∏Ä‰∏™Ôºå‰∫éÊòØÊàë‰ª¨Âú®Ëøô‰∏§‰∏™È£éÊâáÈó¥Ëøû‰∏ÄÊù°ËæπÔºåËæπÊùÉ‰∏∫ $inf$ ÔºåËøô‰∏™Êó∂ÂÄôË∑ëÊúÄÂ§ßÊµÅÁöÑÊó∂ÂÄôÂøÖÂÆöÊúâÊµÅÁªèËøáÊ≠§Âú∞Ôºå‰πüÂ∞±ÊòØËØ¥Ëøô‰∏§‰∏™È£éÊâáÂøÖÁÑ∂Ë¶ÅÂâ≤Êéâ‰∏Ä‰∏™ÊâçË°å„ÄÇ ÊâÄ‰ª•‰ªÄ‰πà‰∫ãÊÉÖÈÉΩËß£ÂÜ≥‰∫ÜÔºåÂ∞±Â∑Æ‰ª£Á†Å‰∫Ü„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;cmath&gt;#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=2e6+2;const int inf=2e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace Dinic &#123;//DinicÊùøÂ≠êÂ∞ÅË£Ö queue&lt;int&gt; Que; int s,t,sum,head[N&lt;&lt;1],cnt=1,dep[N&lt;&lt;1]; struct Edge &#123;int nxt,to,val;&#125;G[N&lt;&lt;2]; inline void add(int u,int v,int w) &#123; G[++cnt]=&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=&#123;head[v],u,0&#125;,head[v]=cnt; &#125; inline int bfs() &#123; memset(dep,0,sizeof(dep)); dep[s]=1,Que.push(s); while(!Que.empty()) &#123; int u=Que.front(),v;Que.pop(); for(int i=head[u];i;i=G[i].nxt) if(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,Que.push(v); &#125;return dep[t]; &#125; int dfs(int u,int flow) &#123; if(!flow||u==t) return flow; int used=0,rlow,v; for(int i=head[u];i;i=G[i].nxt) if(dep[v=G[i].to]==dep[u]+1&amp;&amp;G[i].val&gt;0) &#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; if(!used) dep[u]=-1; return used; &#125; inline void dinic() &#123; while(bfs()) sum-=dfs(s,inf); &#125;&#125;using namespace Dinic;int n,m,p,q,point,bock[N],vis[N],fan[N];inline void pre() &#123; for(int i=1;i&lt;=n/p;++i) if(!bock[i]) &#123;//Ëµ∑ÁÇπÊâáÂè∂Ê≤°ÊúâÊçüÂùè for(int j=i;j&lt;=n;j+=n/p) if(bock[j]) goto end1; //Êûö‰∏æÊØè‰∏™ÊâáÂè∂ÔºåÂ¶ÇÊûúÊçüÂùèÁöÑÈÇ£‰πàËØ•È£éÊâáÂ∞±‰∏çÂêàÊ≥ï ++point,add(s,point,p),sum+=p;//ËøûËæπ for(int j=i;j&lt;=n;j+=n/p) fan[j]=point;//Ê†áËÆ∞ end1:; &#125; for(int i=1;i&lt;=n/q;++i) if(!bock[i]) &#123; for(int j=i;j&lt;=n;j+=n/q) if(bock[j]) goto end2; ++point,add(point,t,q),sum+=q;//ËøûËæπ for(int j=i;j&lt;=n;j+=n/q) vis[fan[j]]=false; //Ê∏ÖÁêÜÊ†áËÆ∞ÔºåÈò≤Ê≠¢ÊúâÈ£éÊâáË¢´Ëøû‰∏§Ê¨°Ëæπ for(int j=i;j&lt;=n;j+=n/q) if(fan[j]&amp;&amp;!vis[fan[j]]) vis[fan[j]]=true,add(fan[j],point,inf);//ËøûËæπ end2:; &#125;return;&#125;int main() &#123; IN(n),IN(m);s=0,t=N-2; for(int i=1;i&lt;=m;++i) &#123;int x;IN(x),bock[x]=true;&#125; int copy=n,sqr=sqrt(n),first=0; for(int i=2;i&lt;=sqr;++i) &#123;/*ÂØªÊâæ‰∏§‰∏™Ë¥®Âõ†Â≠êpÂíåq*/ if(!(n%i)&amp;&amp;!first) &#123; first=true,p=i; while(!(n%p))n/=p; &#125; else if(!(n%i)) &#123; q=i; while(!(n%q))n/=q; break; &#125; &#125; if(n!=1)q=n;n=copy; pre(),dinic(); if(!sum)printf("-1"); else printf("%d\n",n-m-sum); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ËÄÉËØïÊÄªÁªì</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë „ÄåÁΩëÁªúÊµÅ24È¢ò„ÄçÊúÄÈïø‰∏ç‰∏ãÈôçÂ≠êÂ∫èÂàóÈóÆÈ¢ò ÁΩëÁªúÊµÅ luoguP2766]]></title>
    <url>%2F2019%2F03%2F26%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2766%2F</url>
    <content type="text"><![CDATA[Á¨¨‰∏ÄÈóÆÊòæÁÑ∂ÊòØ‰∏Ä‰∏™ÂæàÁÆÄÂçïÁöÑ $DP$ Ôºå‰ΩÜÊòØÁ¨¨‰∫åÈóÆÂíåÁ¨¨‰∏âÈóÆÂ∞±Ë¶ÅÁî®ÊúÄÂ§ßÊµÅÊù•Ê±Ç‰∫ÜÔºåÊÄé‰πàÊ±ÇÂë¢Ôºü È¶ñÂÖàÊàë‰ª¨ $DP$ Âá∫Êù•ÁöÑ $f$ Êï∞ÁªÑÔºå$f[i]$ Ë°®Á§∫‰ª•iÁªìÂ∞æÁöÑÊúÄÈïø‰∏ç‰∏ãÈôçÂ≠êÂ∫èÂàóÁöÑÈïøÂ∫¶ ÔºåÁÑ∂ÂêéÂ∞±ÊòØÁΩëÁªúÊµÅÁöÑËøûËæπ‰∫Ü„ÄÇÈ¶ñÂÖàÂõ†‰∏∫‰∏Ä‰∏™ÁÇπÂè™ËÉΩÁªèËøá‰∏§Ê¨°ÔºåÊàë‰ª¨ÈúÄË¶ÅÂ∞ÜÂÖ∂ÊãÜ‰∏∫ÂÖ•ÁÇπÂíåÂá∫ÁÇπÔºå‰∏≠Èó¥ËøûÁöÑËæπÁöÑËæπÊùÉËá™ÁÑ∂ÊòØ $1$ ÔºåÁÑ∂ÂêéÂØπ‰∫é‰∏Ä‰∏™ $i$ ÔºåÂ¶ÇÊûú $f[i]$ Á≠â‰∫éÊúÄÈïøÈïøÂ∫¶($s$)ÔºåÈÇ£‰πàÂæàÊòæÁÑ∂Ëøô‰∏™ $i$ Â∞±ÂèØ‰ª•ÁªôÁ≠îÊ°àÂÅöÂá∫‰∏Ä‰∏™Ë¥°ÁåÆÔºåËøô‰∏™Êó∂ÂÄô $i$ ÁöÑÂá∫ÁÇπÂêë $t$ Ëøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $1$ Ëæπ„ÄÇ Â¶ÇÊûú $i$ Á≠â‰∫é $1$ ÔºåÈÇ£‰πàËá™ÁÑ∂ $1$ ÊòØÂèØ‰ª•‰Ωú‰∏∫‰∏Ä‰∏™Ëµ∑ÁÇπÁöÑÔºåÈÇ£‰πà $s$ Âêë $i$ ÁöÑÂÖ•ÁÇπËøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $1$ ÁöÑËæπÂç≥ÂèØ„ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØÂâ©‰∏ãÁöÑÊÉÖÂÜµ‰∫ÜÔºåÂèØ‰ª•ÊÉ≥Âà∞ËÆ© $i$ Âêë $i$ ËÉΩÂ§üÊúÄ‰ºòËΩ¨ÁßªÁöÑ‰ΩçÁΩÆËøûËæπÔºå‰πüÂ∞±ÊòØËØ¥ÔºåÂ¶ÇÊûúÊúâ‰∏Ä‰∏™ $j$ Ôºå‰ΩøÂæó $f[j]=f[i]+1$ Âπ∂‰∏î $a[i]&lt;=a[j]$ ÔºåËøô‰∏™Êó∂ÂÄôÂ¶ÇÊûúÊòØÂú®ÊúÄ‰ºòÊñπÊ°à‰∏≠ $i$ ÊòØÂèØ‰ª•ËΩ¨ÁßªÂà∞ $j$ ÁöÑÔºåËøô‰∏™Êó∂ÂÄô‰ªé $i$ ÁöÑÂá∫ÁÇπÂêë $j$ ÁöÑÂÖ•ÁÇπËøû‰∏ÄÊù°ËæπÔºåËæπÊùÉ‰æùÊóßÊòØ $1$ „ÄÇ ÁÑ∂ÂêéÊàë‰ª¨Ëøô‰∏™Êó∂ÂÄôË∑ëÊúÄÂ§ßÊµÅÔºåÂ∞±ÊòØÁ¨¨‰∫åÈóÆÁöÑÁ≠îÊ°à„ÄÇ ÈÇ£‰πàÁ¨¨‰∏âÈóÆÂë¢Ôºü ÂæàÊòæÁÑ∂ÔºåÂØπ‰∫é $1$ ÔºåÂ¶ÇÊûúÂÆÉÊòØËøûÂêë $s$ ÁöÑÔºåÂàôÂ∞ÜÂÖ∂ËøûÂêë $s$ ÁöÑËæπÁöÑËæπÊùÉÊîπ‰∏∫ $inf$ ÔºåÂπ∂Â∞ÜÂÖ•ÁÇπËøûÂá∫ÁÇπÁöÑËæπÊùÉÊîπ‰∏∫ $inf$ ÔºåË°®Á§∫ÂèØ‰ª•ÂèñÊó†ÈôêÊ¨°„ÄÇÁÑ∂Âêé $n$ Â¶ÇÊûúËøûÂêë‰∫Ü $t$ Ôºå‰πüÂ∞ÜËæπÊùÉÊîπ‰∏∫ $inf$ ÔºåÂπ∂Â∞ÜÂÖ•ÁÇπËøûÂá∫ÁÇπÁöÑËæπÊùÉÊîπ‰∏∫ $inf$ ÔºåÂíå‰∏äÈù¢ÂêåÁêÜ„ÄÇËøô‰∏™Êó∂ÂÄôÂÜçË∑ë‰∏ÄÊ¨°ÊúÄÂ§ßÊµÅÂç≥ÂèØÔºåËøôÂ∞±ÊòØÁ¨¨‰∏âÈóÆÁöÑÁ≠îÊ°à‰∫Ü„ÄÇ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+7;const int M=5e2+7;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace Dinic &#123; queue&lt;int&gt; q; int s,t,head[N],cnt=1,dep[N]; struct Edge &#123;int nxt,to,val;&#125;G[N]; inline void add(int u,int v,int w) &#123; G[++cnt]=&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=&#123;head[v],u,0&#125;,head[v]=cnt; &#125; inline int bfs() &#123; memset(dep,0,sizeof(dep)); dep[s]=1,q.push(s); while(!q.empty()) &#123; int u=q.front(),v;q.pop(); for(int i=head[u];i;i=G[i].nxt) if(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125;return dep[t]; &#125; int dfs(int u,int flow) &#123; if(!flow||u==t) return flow; int used=0,rlow,v; for(int i=head[u];i;i=G[i].nxt) if(dep[v=G[i].to]==dep[u]+1&amp;&amp;G[i].val&gt;0) &#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; if(!used) dep[u]=-1; return used; &#125; inline int dinic() &#123; int maxflow=0; while(bfs()) maxflow+=dfs(s,inf); return maxflow; &#125;&#125;using namespace Dinic;int n,l,ans,a[N],f[N];inline int id(int type,int x) &#123; return type*n+x;&#125;int main() &#123; IN(n);s=0,t=2*n+1; for(int i=1;i&lt;=n;++i) &#123; IN(a[i]); for(int j=0;j&lt;i;++j) if(a[j]&lt;=a[i]) f[i]=max(f[i],f[j]+1); l=max(l,f[i]); &#125; printf("%d\n",l);/*Q1*/ for(int i=1;i&lt;=n;++i) &#123; add(id(0,i),id(1,i),1); if(f[i]==1) add(s,id(0,i),1); if(f[i]==l) add(id(1,i),t,1); for(int j=1;j&lt;i;++j) if(a[j]&lt;=a[i]&amp;&amp;f[i]==f[j]+1)add(id(1,j),id(0,i),1); &#125; ans=dinic(); printf("%d\n",ans);/*Q2*/ if(f[1]==1)add(s,id(0,1),inf),add(id(0,1),id(1,1),inf); if(f[n]==l)add(id(1,n),t,inf),add(id(0,n),id(1,n),inf); ans+=dinic(); printf("%d\n",ans);/*Q3*/ return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÁÆóÊ≥ï„Äë ÊµÖË∞àK-D Tree&Â≠¶‰π†Á¨îËÆ∞]]></title>
    <url>%2F2019%2F03%2F26%2F%5B%E7%AE%97%E6%B3%95%5DKD-Tree%2F</url>
    <content type="text"><![CDATA[ÂèàÊòØ‰∏Ä‰∏™Á•ûÂ•áÁöÑÊï∞ÊçÆÁªìÊûÑ‚Ä¶‚Ä¶ $K$-$D \ Tree$ ‰∏≠ $D$ ÊòØÁª¥Â∫¶($Dimension$)ÁöÑÁº©ÂÜôÔºåÊâÄ‰ª• $K$-$D \ Tree$ ÁöÑÂÆûÈôÖÊÑèÊÄùÂ∞±ÊòØ $K$ Áª¥Ê†ë„ÄÇÂΩìÁÑ∂ $K$-$D \ Tree $ ‰∏ÄËà¨Áî®‰∫éÁª¥Êä§‰∫åÁª¥Âπ≥Èù¢‰∏äÁöÑ‰ø°ÊÅØÔºåÊâÄ‰ª•Êàë‰ª¨Âπ≥Â∏∏Áî®ÁöÑ $K$-$D\ Tree$ ÂèàÂè´ $2$-$D \ Tree$ „ÄÇ ÂÅáËÆæÊàë‰ª¨Áé∞Âú®Êúâ‰∏Ä‰∏™‰∫åÁª¥Âπ≥Èù¢Ôºå‰∫åÁª¥Âπ≥Èù¢‰∏äÊúâËã•Âπ≤‰∏™ÁÇπ ÔºåÁé∞Âú®ÊÄé‰πàÁî® $2‚Äã$-$D \ Tree‚Äã$ Áª¥Êä§Ëøô‰∫õÁÇπÂë¢ÔºüÂæàÁÆÄÂçïÔºåÊàë‰ª¨Â∞ÜËøô‰∫õÁÇπÂª∫Êàê‰∏ÄÈ¢óÊ†ëÔºåÊúÄÂ•ΩÊòØ‰∏ÄÈ¢ó‰∫åÂèâÊêúÁ¥¢Ê†ëÔºå‰ΩÜÊòØÊÄé‰πàÂª∫Ê†ëÂë¢ÔºüÊàë‰ª¨Â∞±Êù•ÂàÜÂâ≤Ëøô‰∏™Âπ≥Èù¢ÔºåÊ®™ÁùÄ‰∏ÄÂàÄÔºåÁ´ñÁùÄ‰∏ÄÂàÄÔºåÊØèÊ¨°ÈÄâÂèñÊúÄ‰ºòÁöÑÁªìÁÇπÂΩìÊ†πÂç≥ÂèØ„ÄÇ ÂèØËÉΩÂæàÊäΩË±°ÔºåÊàë‰ª¨‰ª•‰∏ãÂõæ‰∏∫‰æãÔºåÂÅáËÆæÊàë‰ª¨ÈúÄË¶ÅÂ∞Ü‰∏ãÂõæÁöÑ $7$ ‰∏™ÁÇπÂª∫Êàê‰∫åÂèâÊêúÁ¥¢Ê†ëÔºö È¶ñÂÖàÊàë‰ª¨ÂáÜÂ§áÁ´ñÁùÄÂàáÔºåËøô‰∏™Á´ñÁùÄÂàáÂàáÂì™ÈáåÂë¢ÔºüÊàë‰ª¨‰ºöÂèëÁé∞ $D$ ÊòØÊúÄ‰∏≠Èó¥ÁöÑÁªìÁÇπÔºå‰∫éÊòØÊàë‰ª¨ÂØπÁùÄ $D$ Â∞±ÊòØ‰∏ÄÂàÄÔºåÁé∞Âú®ÁöÑÁü©ÈòµÂàÜÂâ≤Êàê‰∫Ü‰∏§ÂçäÔºåÈÇ£‰πàËá™ÁÑ∂ÁöÑ $A,B,C$ Â∞±ÊòØ $D$ ÁöÑÂ∑¶Â≠êÊ†ë‰∏≠ÁöÑÁªìÁÇπÔºå$E,F,G$ Â∞±ÊòØ $D$ ÁöÑÂè≥Â≠êÊ†ë‰∏≠ÁöÑÁªìÁÇπ„ÄÇ ÁÑ∂ÂêéÊàë‰ª¨ÂÖàÂª∫ $D$ ÁöÑÂ∑¶Â≠êÊ†ëÔºåÁî±‰∫é‰∏ä‰∏ÄÊ¨°ÊòØÁ´ñÁùÄÂàáÁöÑÔºåËøô‰∏ÄÊ¨°Êàë‰ª¨ÈúÄË¶ÅÊ®™ÁùÄÂàá„ÄÇÊàë‰ª¨ÈÄíÂΩí‰∏ãÂéªÔºåÂèëÁé∞ $A,B,C$ Ëøô‰∏ÄÂùó $B$ ÊòØÊúÄ‰∏≠Èó¥ÁöÑ(‰ª•Ê®™ÁùÄÁöÑËßÜËßíÔºåÂõ†‰∏∫ÈúÄË¶ÅÊ®™ÁùÄÂàáÂòõ)ÔºåÈÇ£‰πàÂæàÊòæÁÑ∂ $D$ ÁöÑÂ∑¶ÂÑøÂ≠êÂ∞±ÊòØ $B$ ‰∫ÜÔºå$A,C$ ÂàÜÂà´ÊòØ $B$ ÁöÑ‰∏§Â≠©Â≠êÔºåÁî±‰∫é $A,C$ Â∑≤ÁªèÂú® $B$ ÁöÑÂ∑¶Âè≥‰∫ÜÂπ∂‰∏îÂè™Êúâ‰∏Ä‰∏™ÁÇπ‰∫ÜÔºåÈÇ£‰πàÁêÜÊâÄÂΩìÁÑ∂ $C$ Â∞±ÊòØ $B$ ÁöÑÂ∑¶Â≠©Â≠êÔºå$A$ Â∞±ÊòØ $B$ ÁöÑÂè≥ÂÑøÂ≠ê(Ê®™ÁùÄÁúãÂ∞±Â•Ω‰∫Ü)„ÄÇ ÂêåÊ†∑ÁöÑÔºåÊàë‰ª¨ÂèëÁé∞ $G$ ÊòØ $D$ Â∑¶ËæπÊ®™ÁùÄÂàáÊó∂ÊúÄÂêàÈÄÇÁöÑÁªìÁÇπ(Âõ†‰∏∫Âú®Ê®™ÁùÄÁöÑËßÜËßí‰∏≠ $G$ ÊòØÊúÄ‰∏≠Èó¥ÁöÑ )Ôºå‰∫éÊòØÊàë‰ª¨Â∞Ü $D$ ÁöÑÂè≥ÂÑøÂ≠êÂÆö‰∏∫ $G$ ÔºåÂêåÊ†∑ÁöÑÔºå$F,E$ ‰∏∫ $G$ ÁöÑ‰∏§Â≠©Â≠ê„ÄÇ ÈÇ£‰πàËøôÊ†∑Â≠êÊàë‰ª¨ÁöÑÊ†ëÂ∞±Âª∫Â•Ω‰∫Ü„ÄÇ Code-build-kdt:123456789int build(int l,int r,int wd) &#123;//lr:ÂΩìÂâçÂØπÂ∫îÁöÑÁªìÁÇπÂå∫Èó¥,wd:ÂΩìÂâçÈúÄË¶ÅÂàáÁöÑÊñπÂêë if(l&gt;r) return 0; int x=new_node(),mid=(l+r)&gt;&gt;1;//Êñ∞Âª∫ÁªìÁÇπ WD=wd,nth_element(p+l,p+mid,p+r+1),//ÈáçËΩΩ‰∫ÜËøêÁÆóÁ¨¶ÔºåÊåâÁÖßÂΩìÂâçÂàáÁöÑÊñπÂêëÊéíÂ∫è tr[x].tp=p[mid];//ÊâæÂà∞ÊúÄÂêàÈÄÇÂàáÂâ≤ÁöÑÊúÄ‰∏≠Èó¥ÁöÑÁªìÁÇπ tr[x].l=build(l,mid-1,wd^1);//Âª∫Á´ãÂ∑¶Â≠êÊ†ë tr[x].r=build(mid+1,r,wd^1);//Âª∫Á´ãÂè≥Â≠êÊ†ë return pushup(x),x;//‰∏ä‰º†‰ø°ÊÅØ&#125; ‰ΩÜÊòØÊÄé‰πàÊü•ËØ¢Âë¢ÔºüÂÆûÈôÖ‰∏äÊü•ËØ¢Ë∑üÊôÆÈÄöÁöÑ‰∫åÂèâÊêúÁ¥¢Ê†ëÂ∑Æ‰∏çÂ§öÔºåÊåâÁÖßÊñπ‰ΩçÂùêÊ†áÊü•ÊâæÂç≥ÂèØ„ÄÇ ÂØπ‰∫é‰∏Ä‰∏™ÁªìÁÇπÁöÑ‰ø°ÊÅØÊòØËøôÊ†∑ÁöÑÔºö Code-node-kdt1234struct node &#123; int mi[2],mx[2],l,r,sz; point tp;&#125;tr[N]; l,r,sz Â∞±ÊòØÂ∑¶Âè≥ÂÑøÂ≠ê‰ª•ÂèäÂ≠êÊ†ëÂ§ßÂ∞èÔºåpoint ÊòæÁÑ∂ÊòØËØ•ÁªìÁÇπ‰ª£Ë°®ÁöÑ‰∫åÁª¥Âπ≥Èù¢‰∏äÁöÑÁÇπÔºå‰ΩÜÊòØ $mi,mx$ ÊòØÂπ≤‰ªÄ‰πàÁöÑÂë¢ÔºüÊàë‰ª¨Áî® $mi,mx$ ËÆ∞ÂΩïÁöÑÂ∞±ÊòØÂΩìÂâçÁªìÁÇπÂ∑≤ÁªèÂÆÉÁöÑÂ≠êÊ†ë‰∏≠ÁöÑÊâÄÊúâËäÇÁÇπ‰∏≠ÔºåÊúÄÂ§ß/ÊúÄÂ∞èÁöÑ $x$ ÂùêÊ†á‰ª•ÂèäÊúÄÂ§ß/ÊúÄÂ∞èÁöÑ $y$ ÂùêÊ†á„ÄÇ ËøôÊ†∑ËÆ∞ÂΩïÊúâ‰ªÄ‰πàÁî®Âë¢ÔºüÂÅáËÆæÊàë‰ª¨Â∞ÜËøô‰∏™ÁúãÊàê‰∏Ä‰∏™Áü©ÂΩ¢ÔºåÈÇ£‰πàÂØπ‰∫é‰∏Ä‰∏™Êàë‰ª¨ÈúÄË¶ÅÊêúÁ¥¢ÁöÑÂùêÊ†áÔºåÂ¶ÇÊûúËøô‰∏™ÈúÄË¶ÅÊêúÁ¥¢ÂùêÊ†á Â∑≤Áªè‰∏çÂ±û‰∫é $mi,mx$ Âõ¥ÂüéÁöÑÁü©Èòµ‰∏≠ÔºåÈÇ£‰πàËøô‰∏™ÈúÄË¶ÅÊêúÁ¥¢ÁöÑÂùêÊ†áÂ∞±Ë∑üÂΩìÂâçÂ≠êÊ†ëÊ≤°ÂÖ≥Á≥ª‰∫ÜÔºåËøô‰πüÂ∞±Áõ∏ÂΩì‰∫é‰∏Ä‰∏™Ââ™Êûù„ÄÇ Êàë‰ª¨ÁöÑ $pushup$ ‰∏ä‰º†Êó∂Â∞±ÊòØÂØπ $mi,mx$ ËøõË°åÊõ¥Êñ∞ÔºåÊâÄ‰ª• $pushup$ Â∫îËØ•ËøôÊ†∑ÂÜôÔºö Code-pushup-kdt1234567891011121314151617inline void pushup(int x) &#123; int l=tr[x].l,r=tr[x].r;//ÁÆÄÂÜôÂ∑¶Âè≥ÂÑøÂ≠ê tr[x].sz=tr[l].sz+tr[r].sz+1;//Êõ¥Êñ∞size for(int i=0;i&lt;=1;++i) &#123;//Êûö‰∏æÊñπÂêëÔºåËäÇÁúÅÁ†ÅÈáè /*---------Êõ¥Êñ∞mi[x],mx[x]---------*/ tr[x].mi[i]=tr[x].mx[i]=tr[x].tp.x[i]; if(l) &#123; tr[x].mi[i]=min(tr[x].mi[i],tr[l].mi[i]); tr[x].mx[i]=max(tr[x].mx[i],tr[l].mx[i]); &#125; if(r) &#123; tr[x].mi[i]=min(tr[x].mi[i],tr[r].mi[i]); tr[x].mx[i]=max(tr[x].mx[i],tr[r].mx[i]); &#125; /*---------Êõ¥Êñ∞mi[x],mx[x]---------*/ &#125;&#125; ÁÑ∂ÂêéÂë¢ÔºåËøôÈáå‰∏çÂæÖ‰øÆÊîπÁöÑÔºåÈÇ£‰πàÂ¶ÇÊûúËØ¥Ë¶ÅÂÖπÁ£ÅÊèíÂÖ•ËäÇÁÇπÊÄé‰πàÂäûÔºü ÈúÄË¶ÅÂÖπÁ£ÅÊèíÂÖ•ËäÇÁÇπÁöÑÈ¢òÁõÆÔºö[Violet]Â§©‰ΩøÁé©ÂÅ∂/SJYÊëÜÊ£ãÂ≠ê ËøôÈÅìÈ¢òÂõ†‰∏∫ÂÖÅËÆ∏Á¶ªÁ∫øÔºåÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî® $CDQ‚Äã$ Ôºå‰ΩÜÊòØÂ¶ÇÊûúÂº∫Âà∂Âú®Á∫øÁöÑËØùÂ∞±Âè™ËÉΩÁî® $K‚Äã$-$D \ Tree‚Äã$ ‰∫Ü„ÄÇÊàë‰ª¨Êù•ËÆ®ËÆ∫ $K‚Äã$-$D \ Tree‚Äã$ ÁöÑÂÅöÊ≥ï„ÄÇ ÂÆûÈôÖ‰∏ä $K‚Äã$-$D \ Tree‚Äã$ ÊèíÂÖ•ËäÇÁÇπÈùûÂ∏∏ÁÆÄÂçïÔºåÂ∞±ÂÉèÊôÆÈÄöÁöÑ‰∫åÂèâÊêúÁ¥¢Ê†ëÈÇ£Ê†∑Êâæ‰∏™‰ΩçÁΩÆÊèíÂ∞±Â•Ω‰∫Ü„ÄÇ Code-Insert-kdt12345678910void Insert(point tmp,int&amp;x,int wd) &#123;//tmp:ÂΩìÂâçÈúÄË¶ÅÊèíÂÖ•ÁöÑÁÇπ,x:ÂΩìÂâçÊ†ë‰∏≠ÁªìÁÇπ,wd:ÂΩìÂâçÂàáÂâ≤ÊñπÂêë if(!x) &#123;//ÊâæÂà∞Ë¶ÅÊèíÂÖ•ÁöÑ‰ΩçÁΩÆ‰∫Ü x=new_node();//Êñ∞Âª∫ÁªìÁÇπ tr[x].tp=tmp,tr[x].l=tr[x].r=0; pushup(x);return; &#125; if(tr[x].tp.x[wd]&lt;tmp.x[wd]) Insert(tmp,tr[x].r,wd^1);//Â∫îËØ•ÂæÄÂè≥Êèí else Insert(tmp,tr[x].l,wd^1); //Âê¶ÂàôÂæÄÂ∑¶Êèí pushup(x);//Êõ¥Êñ∞ÁªìÁÇπ‰ø°ÊÅØ&#125; ‰ΩÜÊòØÂë¢Ôºå‰Ω†‰ºöÂèëÁé∞Â∞±ÂÉè‰∏ÄËà¨ÁöÑ‰∫åÂèâÊêúÁ¥¢Ê†ë‰∏ÄÊ†∑ÔºåËøô‰∏™ÊèíÂÖ•ÂæàÂÆπÊòìË¢´Âç°ÔºåÂç°Êàê‰∏ÄÊù°ÈìæÔºåËøôÂ∞±Âæà‰∏çËàíÊúç‰∫Ü„ÄÇ‰∫éÊòØÊàë‰ª¨ÈúÄË¶Å‰∏Ä‰∫õÂπ≥Ë°°Ê†ëÁöÑÊÄùÊÉ≥Ôºå‰ΩøÂæó $K$-$D \ Tree$ ‰øùÊåÅÂπ≥Ë°°„ÄÇ ‚ÄúÊàë‰ºö $Splay$ ÔºÅÊàë‰ºö Êó†Êóã$Treap$ ÔºÅ‚Äù Âë∏Âë∏Âë∏Ôºå‰ªäÂ§©Êàë‰ª¨ËÆ≤ÁöÑÊòØÊõøÁΩ™ÁæäÊ†ëÔºåË∑ü‰Ω†‰ø©Ê≤°ÂÖ≥Á≥ª„ÄÇ Ê≤°ÈîôÔºåÂ∞±ÊòØÁî®ÊõøÁΩ™ÁæäÊ†ëÁöÑÊÄùÊÉ≥ÔºåÂ∞Ü $K‚Äã$-$D \ Tree‚Äã$ ÊãçÊâÅÈáçÂª∫„ÄÇÂ∑Æ‰∏çÂ§öÂ∞±ÊòØ $insert‚Äã$ ÁöÑÊó∂ÂÄôÔºåÂú® $insert‚Äã$ ÁöÑÊúÄÂêé $check‚Äã$ ‰∏Ä‰∏ãÂ≠êÊ†ëÊòØÂê¶Âπ≥Ë°°ÔºåÂ¶ÇÊûúÂΩìÂâçÁªìÁÇπÁöÑÂ≠êÊ†ëÂ∑≤Áªè‚Äù‰∏çÂπ≥Ë°°‚Äù‰∫ÜÔºåÈÇ£‰πàÊãçÊâÅËØ•ÁªìÁÇπ‰ª•ÂèäËØ•ÁªìÁÇπÂ≠êÊ†ëÔºåÈáçÂª∫„ÄÇ ËøôÈáåÁöÑ $\alpha$ ÁöÑÂÄº‰∏ÄËà¨ÂÆö‰∏∫ $0.75$ Â∑¶Âè≥Ôºå‰ΩÜÊòØ‰πü‰∏çËÉΩÁ°ÆÂÆöÔºåÂ¶ÇÊûúÂÆûÂú®Ë¶ÅÊéêÂæóÂáÜÁöÑËØùÂ∞±ÂæóÁúãÁúãËØ¢ÈóÆÂ§öËøòÊòØÊèíÂÖ•Â§ö‰∫Ü„ÄÇ‰∏çËøá‰∏ÄËà¨Áî® $0.75$ ÊòØÊ≤°ÈóÆÈ¢òÁöÑ„ÄÇ Code-check&amp;pia-kdt:123456789void pia(int x,int num) &#123;//Â∞±ÊòØÊãçÊâÅÁöÑÊÑèÊÄù,sto litble orz if(tr[x].l) pia(tr[x].l,num);//ÂÖàÊãçÂ∑¶Â≠êÊ†ë p[num+tr[tr[x].l].sz+1]=tr[x].tp,trh[++top]=x;//ÂÜçÊãçËá™Â∑± if(tr[x].r) pia(tr[x].r,num+tr[tr[x].l].sz+1);//ÁÑ∂ÂêéÊãçÂè≥Â≠êÊ†ë&#125;void check(int&amp;x,int wd) &#123;//Âà§Êñ≠xÁöÑÂ≠êÊ†ëÊòØÂê¶Êª°Ë∂≥"Âπ≥Ë°°",wdËÆ∞ÂΩïÂΩìÂâçÂàáÂâ≤ÊñπÂêë,Âª∫Ê†ëÁöÑÊó∂ÂÄôÊúâÁî® if(alph*tr[x].sz&lt;tr[tr[x].l].sz||alph*tr[x].sz&lt;tr[tr[x].r].sz)//Âà§Êñ≠ pia(x,0),x=build(1,tr[x].sz,wd);//ÊãçÊâÅ and ÈáçÊñ∞buildÂª∫Ê†ë&#125; ÁÑ∂ÂêéÂ∞±ÊòØÂ∫îÁî®‰∫ÜÔºåÂÄºÂæóÊ≥®ÊÑèÁöÑÊòØÔºåÂ¶ÇÊûúÁª¥Êä§ÁöÑ‰∏çÊòØÁÇπËÄåÊòØÁü©ÂΩ¢ÔºåÈÇ£‰πàÊúâ‰∫õÂú∞Êñπ(‰æãÂ¶ÇËæπÁïåÔºå$mi,mx‚Äã$ ÈÉΩË¶ÅÊ≥®ÊÑè)„ÄÇ Â∞±ÂÉèËøôÈÅìÈ¢òÔºö[APIO2018] Circle selection ÈÄâÂúÜÂúàÔºåÊ≥®ÊÑè‰∏Ä‰∏ãÁªÜËäÇÂ∞±Â•Ω„ÄÇ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>K-D Tree</tag>
        <tag>Â≠¶‰π†Á¨îËÆ∞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SCOI2010]ËÇ°Á•®‰∫§Êòì ÂçïË∞ÉÈòüÂàó‰ºòÂåñDP luoguP2569]]></title>
    <url>%2F2019%2F03%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2569%2F</url>
    <content type="text"><![CDATA[Êàë‰ª¨‰∏ÄËµ∑Êù•Êé®‰∏ÄÊé®„ÄÇ ËÆæ $f[i][j]$ Ë°®Á§∫ÔºöÁé∞Âú®ÊòØÁ¨¨ $i$ Â§©ÔºåÊâã‰∏äÊã•ÊúâÁöÑËÇ°Á•®Êï∞‰∏∫ $j$ Êó∂ËµöÂà∞ÁöÑÊúÄÂ§öÁöÑÈí± Êàë‰ª¨ËÄÉËôëËΩ¨ÁßªÂá†‰∏™ÊñπÂêëÔºöÁ©∫Êâã‰π∞Ôºå‰∏ç‰π∞‰∏çÂçñÔºå‰πãÂâç‰π∞Ëøá‰∫ÜÁé∞Âú®ÁªßÁª≠‰π∞Ôºå‰π∞ËøáÂêéÈúÄË¶ÅÂçñ Á©∫Êâã‰π∞Á©∫Êâã‰π∞Â∞±ÊòØÁ¨¨‰∏ÄÊ¨°‰π∞ÔºåÊòæÁÑ∂‰∏çË¶ÅËÄÉËôë ‚ÄúÈó¥Èöî $w$ Â§©‚Äù ÁöÑÈôêÂà∂ÔºåÁõ¥Êé•‰π∞Â∞±Â•Ω„ÄÇ ÈÇ£‰πàÂæàÂÆπÊòìÂæóÂà∞ËΩ¨ÁßªÂºèÔºö f[i][j]= - AP_i\times jÂõ†‰∏∫ÊòØ‰π∞ÂÖ•ÔºåÊâÄ‰ª•ÊòØË¥üÊï∞„ÄÇ ‰∏ç‰π∞‰∏çÂçñÂæàÊòæÁÑ∂ÂèØ‰ª•Áõ¥Êé•‰ªé $f[i-1][j]$ ËΩ¨ÁßªËøáÊù•„ÄÇ ËΩ¨ÁßªÂºèÔºö f[i][j]=f[i-1][j]‰πãÂâç‰π∞Ëøá‰∫ÜÁé∞Âú®ÁªßÁª≠‰π∞ÂæàÊòæÁÑ∂ËøôÊ¨°Êàë‰ª¨ÈúÄË¶ÅËÄÉËôë $w$ ÁöÑÈôêÂà∂‰∫ÜÔºå‰∏çËøáÊàë‰ª¨ÂèØ‰ª•Áõ¥Êé•‰ªé $i-w-1$ Â§©ËΩ¨Áßª„ÄÇ ÂÅáËÆæÊàë‰ª¨ÊòØ‰ªé $f[i-w-1][k]$ ËΩ¨ÁßªËøáÊù•ÁöÑÔºåÈÇ£‰πàËøôÊ¨°ËΩ¨ÁßªÊàë‰ª¨Â§ö‰π∞‰∫Ü $j-k$ Âº†ËÇ°Á•®ÔºåÂÆπÊòìÂæóÂà∞ËΩ¨ÁßªÂºèÔºö f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}ÂΩìÁÑ∂Âõ†‰∏∫ËßÑÂÆö‰∫Ü‰∏ÄÂ§©ÊúÄÂ§ö‰π∞ÂÖ• $AS_i$ ËÇ°Ôºå‰∏äÈù¢ÁöÑÂºèÂ≠êÂøÖÈ°ªÊª°Ë∂≥ $j-AS_i\leq k \leq j$ ‰π∞Ëøá‰πãÂêéÈúÄË¶ÅÂçñÂêåÊ†∑ÁöÑÊúâ $w$ ÁöÑÈôêÂà∂Ôºå‰ΩÜÊòØË∑ü‰∏äÈù¢ÁöÑÁ¨¨‰∏âÁßçÊÉÖÂÜµÊ≤°‰ªÄ‰πà‰∏§Ê†∑ÔºåËΩ¨ÁßªÂºèÔºö f[i][j]=max\{ f[i-w-1][k] + (k-j)\times BP_i\}Âõ†‰∏∫ $BS_i$ ÁöÑÈôêÂà∂Êù°‰ª∂Ôºå‰∏äÈù¢ÁöÑÂºèÂ≠êÂøÖÈ°ªÊª°Ë∂≥ $j\leq k \leq j+BS_i$ Êó∂Èó¥Â§çÊùÇÂ∫¶ÔºüÊûö‰∏æ $i,j$ Áä∂ÊÄÅÂ∞±ÈúÄË¶Å $n^2$ ÁöÑÂ§çÊùÇÂ∫¶ÔºåÂú®Ëøô‰∏™Âü∫Á°Ä‰∏äËΩ¨ÁßªÁöÑÂ§çÊùÇÂ∫¶‰∏∫Ôºö Á©∫Êâã‰π∞ Ôºö $O(1)$ ‰∏ç‰π∞‰∏çÂçñ Ôºö $O(1)$ ‰πãÂâç‰π∞Ëøá‰∫ÜÁé∞Âú®ÁªßÁª≠‰π∞ Ôºö$O(n)$ ‰π∞Ëøá‰πãÂêéÈúÄË¶ÅÂçñ Ôºö$O(n)$ ‰ºöÂèëÁé∞Â¶ÇÊûúÂä†‰∏äÊûö‰∏æÁä∂ÊÄÅÁöÑÂ§çÊùÇÂ∫¶ÔºåÂêéÈù¢‰∏§‰∏™ËΩ¨ÁßªÁöÑÊÄªÂ§çÊùÇÂ∫¶‰∏∫ $O(n^3)$ ÔºÅ ‰∫éÊòØËÄÉËôë‰ºòÂåñ„ÄÇ Êàë‰ª¨ËßÇÂØüÁ¨¨‰∏â‰∏™ËΩ¨ÁßªÂºèÔºö f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}ÂØπ‰∫éÂΩìÂâçÁöÑ $i,j$ ÔºåÂÅáËÆæÊúâ $a,b$ ‰Ωú‰∏∫ $k$ ÁöÑ‰∏§‰∏™ÈÄâÈ°πÂØπ $f[i][j]$ ËøõË°åËΩ¨ÁßªÔºåÊàë‰ª¨ÁÆó‰∏ÄÁÆó $a$ ÊØî $b$ ‰ºòÁöÑÊù°‰ª∂ÊòØ‰ªÄ‰πàÔºö f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}=max\{f[i-w-1][k]+k\times AP_i-j\times AP_i\}ËøôÈáåÊàë‰ª¨‰ºöÂèëÁé∞ $j\times AP_i$ Ë∑üÈáåÈù¢ÁöÑÂºèÂ≠êÊ≤°Êúâ‰ªª‰ΩïÂÖ≥Á≥ªÔºåÊèêÂá∫Êù•‰∏ç‰ºö‰∫ßÁîü‰ªçÂíåÂΩ±Âìç =max\{f[i-w-1][k]+k\times AP_i\}-j\times AP_i‚Äã‰∫éÊòØÊàë‰ª¨ÂèëÁé∞Êàë‰ª¨Âè™ÈúÄË¶ÅÂæóÂà∞ÊúÄÂ§ßÁöÑ $f[i-w-1][k]+k\times AP_i$ Â∞±Â•Ω‰∫ÜÔºåËøôÈáåÊàë‰ª¨ÂèØ‰ª•Áî®Âà∞ÂçïË∞ÉÈòüÂàó‰ºòÂåñDP „ÄÇ ÂÖ∑‰Ωì‰ª£Á†ÅÂÆûÁé∞Â¶Ç‰∏ãÔºö 1234567l=1,r=0;for(int j=0;j&lt;=MaxP;++j) &#123;/*Êûö‰∏æÊâÄÊúâÁöÑÂêàÊ≥ïÁöÑj*/ while(l&lt;=r&amp;&amp;q[l]&lt;j-AS) ++l;/*Ê∑òÊ±∞ÊéâËøáÊúüÁöÑÈòüÂ§¥*/ while(l&lt;=r&amp;&amp;f[i-W-1][q[r]]+q[r]*AP&lt;=f[i-W-1][j]+j*AP) --r;/*Ê∑òÊ±∞Êéâ‰∏çÂ¶ÇÂΩìÂâçÂÜ≥Á≠ñ‰ºòÁöÑÈòüÂ∞æ*/ q[++r]=j;/*ÂΩìÂâçÂÜ≥Á≠ñËøõÈòü*/ if(l&lt;=r) f[i][j]=max(f[i][j],f[i-W-1][q[l]]+q[l]*AP-j*AP);/*ËΩ¨Áßª*/&#125; Âõ†‰∏∫ÊØè‰∏Ä‰∏™Áä∂ÊÄÅÈÉΩÂè™ËøõÈòü/Âá∫Èòü‰∫Ü‰∏ÄÊ¨°ÔºåÊâÄ‰ª•ÂèØ‰ª•ËØÅÊòéÊó∂Èó¥Â§çÊùÇÂ∫¶Áé∞Âú®Âèò‰∏∫ $O(n^2)$ ‰∫Ü„ÄÇ Á¨¨Âõõ‰∏™Êìç‰Ωú‰∏ÄÊ†∑ÂèØ‰ª•ËøôÊ†∑‰ºòÂåñÔºåÂèØ‰ª•Â∞ùËØï‰∏Ä‰∏ãÔºå‰∏çË¥¥Ëß£Èáä‰∫Ü„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=2e3+2;const int inf=1e9+9;int T,MaxP,W,AP,BP,AS,BS,l,r;int q[N],f[N][N];int main() &#123; memset(f,128,sizeof(f));/*ËµãÊûÅÂ∞èÂÄº*/ scanf("%d%d%d",&amp;T,&amp;MaxP,&amp;W); for(int i=1;i&lt;=T;++i) &#123; scanf("%d%d%d%d",&amp;AP,&amp;BP,&amp;AS,&amp;BS); for(int j=0;j&lt;=AS;++j) f[i][j]=-AP*j; for(int j=0;j&lt;=MaxP;++j) f[i][j]=max(f[i][j],f[i-1][j]); if(i&lt;=W)continue; l=1,r=0; for(int j=0;j&lt;=MaxP;++j) &#123; while(l&lt;=r&amp;&amp;q[l]&lt;j-AS) ++l; while(l&lt;=r&amp;&amp;f[i-W-1][q[r]]+q[r]*AP&lt;=f[i-W-1][j]+j*AP) --r; q[++r]=j; if(l&lt;=r) f[i][j]=max(f[i][j],f[i-W-1][q[l]]+q[l]*AP-j*AP); &#125; l=1,r=0; for(int j=MaxP;j&gt;=0;--j) &#123; while(l&lt;=r&amp;&amp;q[l]&gt;j+BS) ++l; while(l&lt;=r&amp;&amp;f[i-W-1][q[r]]+q[r]*BP&lt;=f[i-W-1][j]+j*BP) --r; q[++r]=j; if(l&lt;=r) f[i][j]=max(f[i][j],f[i-W-1][q[l]]+q[l]*BP-j*BP); &#125; &#125; int ans=0; for(int i=0;i&lt;=MaxP;++i)ans=max(ans,f[T][i]); printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>ÂçïË∞ÉÈòüÂàó</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2009]Ê§çÁâ©Â§ßÊàòÂÉµÂ∞∏ ÁΩëÁªúÊµÅ luoguP2805]]></title>
    <url>%2F2019%2F03%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2805%2F</url>
    <content type="text"><![CDATA[ÂâçÁΩÆËäùÂ£´ÔºöÁΩëÁªúÊµÅ-ÊúÄÂ§ßÊùÉÈó≠ÂêàÂ≠êÂõæÂÆö‰πâÔºöÂØπ‰∫é‰∏Ä‰∏™ÂõæÁöÑÂ≠êÂõæÔºåÂΩì‰∏î‰ªÖÂΩìËøô‰∏™Â≠êÂõæ‰∏≠ÁöÑ‰ªªÊÑè‰∏ÄÁÇπÈÉΩ‰∏ç‰ºö‰∏éËØ•Â≠êÂõæÂ§ñÁöÑÁÇπËÅîÈÄöÊó∂ÔºåÁß∞Ëøô‰∏™Â≠êÂõæ‰∏∫ËØ•ÂõæÁöÑÈó≠ÂêàÂ≠êÂõæ„ÄÇÂú®ËØ•ÂõæÊâÄÊúâÁöÑÈó≠ÂêàÂ≠êÂõæ‰∏≠ÔºåÁÇπÊùÉÂíåÊúÄÂ§ßÁöÑÈÇ£‰∏™Êàë‰ª¨Áß∞‰ΩúÊúÄÂ§ßÊùÉÈó≠ÂêàÂ≠êÂõæ„ÄÇ ÈÇ£‰πàÊúÄÂ§ßÊùÉÈó≠ÂêàÂ≠êÂõæÊÄé‰πàÊ±ÇÂë¢Ôºü ÂØπ‰∫éÁªôÂá∫ÁöÑÂõæÔºåÂ¶ÇÊûúË¶ÅÊ±ÇÂ∞Ü $u,v$ Ëøû‰∏ÄÊù°ËæπÔºåÈÇ£‰πà‰ªé $u$ Âêë $v$ Ëøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $inf$ ÁöÑËæπ„ÄÇ ÁÑ∂ÂêéÂØπ‰∫éÊØè‰∏™ÁÇπÂ¶ÇÊûúËØ•ÁÇπÁöÑÁÇπÊùÉ‰∏∫Ê≠£ÔºåÈÇ£‰πà‰ªé $s$ ÂêëËØ•ÁÇπËøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ËØ•ÁÇπÁÇπÊùÉÁöÑËæπÔºåÂê¶Âàô‰ªéËØ•ÁÇπÂêë $t$ Ëøû‰∏ÄÊù°ËæπÊùÉ‰∏∫$-1\times$ËØ•ÁÇπÊùÉÁöÑËæπ„ÄÇ Ë∑ëÊúÄÂ∞èÂâ≤ÔºåËøô‰∏™Êó∂ÂÄôÊúÄÂ§ßÊùÉÈó≠ÂêàÂ≠êÂõæÁöÑ‚ÄùÊúÄÂ§ßÊùÉ‚Äù‰∏∫Ê≠£ÁÇπÁÇπÊùÉÂíå-ÊúÄÂ∞èÂâ≤„ÄÇ ÊúÄÂ§ßÊùÉÈó≠ÂêàÂ≠êÂõæË∑üËøô‰∏ÄÈ¢òÊúâ‰ªÄ‰πàÂÖ≥Á≥ªÂë¢Ôºü ÂèØ‰ª•ÂèëÁé∞ÔºåÂØπ‰∫é‰∏Ä‰∏™Ê§çÁâ©ÔºåÂÉµÂ∞∏ÂøÖÈ°ªÂÖàÂêÉÊéâÂÆÉÂè≥ËæπÁöÑÊ§çÁâ©Âíå‰øùÊä§ÂÆÉÁöÑÊ§çÁâ©ÊâçËÉΩÂêÉÂÆÉÔºåÈÇ£‰πàËøô‰∏™Ê§çÁâ©Â∞±ÂÉèÂÆÉÂè≥ËæπÁöÑÊ§çÁâ©‰∏é‰øùÊä§ÂÆÉÁöÑÊ§çÁâ©ËøûËæπÔºåËøô‰∏™ËøûÂ•ΩËæπÁöÑÂõæÁöÑÊúÄÂ§ßÊùÉÈó≠ÂêàÂ≠êÂõæÂ∞±ÊòØÁ≠îÊ°àÔºÅ ‰ΩÜÊòØÂÄºÂæóÊ≥®ÊÑèÁöÑ‰∏ÄÁÇπÊòØÔºåÂèØËÉΩÂ≠òÂú®‰∫íÁõ∏‰øùÊä§ÁöÑÂÖ≥Á≥ªÔºåÊØîÂ¶ÇËØ¥Ê†∑‰æã‰∏≠ÁöÑ $(2,0)$ ‰øùÊä§ $(2,1)$ Ôºå‰ΩÜÊòØ $(2,1)$ Âèà‰Ωú‰∏∫ $(2,0)$ Âè≥ËæπÁöÑÊ§çÁâ©‰øùÊä§ $(2,0)$ ÔºåÁÑ∂ÂêéËøôÂØπÂÖ≥Á≥ªÊÄé‰πàÈÉΩÊòØÊîª‰∏çÁ†¥ÁöÑÔºåËøôÊòØ‰∏Ä‰∏™ÁéØÔºÅ ‰∫éÊòØÊàë‰ª¨ÂèØ‰ª•ÂÖàÂª∫Â•ΩÂõæÂêéÊãìÊâë‰∏ÄËæπÔºåÁÑ∂ÂêéÂÜçÂú®ËÆøÈóÆËøáÁöÑÁÇπ‰πãÈó¥ËøûËæπ(ËØ•ÁÇπËÆøÈóÆËøáÊÑèÂë≥ÁùÄËØ•ÁÇπ‰∏çÂú®ÁéØÂÜÖ)ÔºåÊúÄÂêéÂÜçË∑ëÊúÄÂ∞èÂâ≤Âç≥ÂèØ„ÄÇ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include &lt;cmath&gt;#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e5+7;const int inf=1e9+9;int Score[N],n,m,s,t;#define id(x,y) (((x)-1)*m+(y))template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;namespace Dinic &#123; queue&lt;int&gt; q; int head[N],dep[N],cnt=1; struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;4]; inline void add(int u,int v,int w) &#123; G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,0&#125;,head[v]=cnt; &#125; inline int bfs() &#123; memset(dep,0,sizeof(dep)); dep[s]=1;q.push(s); while(!q.empty()) &#123; int u=q.front(),v;q.pop(); for(int i=head[u];i;i=G[i].nxt) if(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125;return dep[t]; &#125; int dfs(int u,int flow) &#123; if(!flow||u==t) return flow; int used=0,rlow; for(int i=head[u];i;i=G[i].nxt) &#123; int v=G[i].to; if(dep[v]==dep[u]+1&amp;&amp;G[i].val&gt;0) &#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[u]=-1; return used; &#125; inline int dinic() &#123; int maxflow=0; while(bfs()) maxflow+=dfs(s,inf); return maxflow; &#125;&#125;namespace Topology &#123; int vis[N],in[N]; vector&lt;int&gt; out[N]; queue&lt;int&gt; q; inline void topology()&#123; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) if(!in[id(i,j)]) q.push(id(i,j)),vis[id(i,j)]=true; while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=0;i&lt;out[u].size();++i) &#123; int v=out[u][i];--in[v]; if(!vis[v]&amp;&amp;!in[v]) &#123;vis[v]=true;q.push(v);&#125; &#125; &#125;return; &#125;&#125;using namespace Topology;using namespace Dinic;int main() &#123; // freopen("test.in","r",stdin); IN(n),IN(m);s=0,t=n*m+7; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) &#123; int tot,x,y; IN(Score[id(i,j)]),IN(tot); for(int k=1;k&lt;=tot;++k) &#123; IN(x),IN(y);++x,++y; out[id(i,j)].push_back(id(x,y)); ++in[id(x,y)]; &#125; if(j&lt;m) &#123; out[id(i,j+1)].push_back(id(i,j)); ++in[id(i,j)]; &#125; &#125; topology(); int sum=0; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) if(vis[id(i,j)])&#123; int u=id(i,j); if(Score[u]&lt;0) &#123;add(u,t,-Score[u]);&#125; else &#123;add(s,u,Score[u]);sum+=Score[u];&#125; for(int k=0;k&lt;out[u].size();++k) &#123; int v=out[u][k]; if(vis[v])add(v,u,inf); &#125; &#125; printf("%d\n",max(sum-dinic(),0)); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [Violet]Â§©‰ΩøÁé©ÂÅ∂/SJYÊëÜÊ£ãÂ≠ê K-D Tree luoguP4169/bzoj2648]]></title>
    <url>%2F2019%2F03%2F21%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4169%2F</url>
    <content type="text"><![CDATA[$KDT$ Â§ßÊ≥ïÂ•ΩÔºÅ Áõ¥Êé•Âª∫ $KDT$ Áª¥Êä§‰∏Ä‰∏ãÊâÄÊúâÁöÑÂèØËÉΩÂ≠òÂú®Áé©ÂÅ∂ÁöÑÁªìÁÇπÔºåËØ•ÊèíÂÖ•ÁöÑÊó∂ÂÄôÊèíÂÖ•ÔºåÊü•ËØ¢ÁöÑÊó∂ÂÄôÂè™ÈúÄË¶ÅÊ≤øÁùÄ $KDT$ ÂæÄ‰∏ãËµ∞ÔºåÁÑ∂ÂêéÈöèÊó∂ÂØπ $ans$ Âèñ $min$ Âç≥ÂèØ„ÄÇ Ê≥®ÊÑèËøôÈ¢òÊúâÊèíÂÖ•ÔºåËøôÊÑèÂë≥ÁùÄ $KDT$ Âà∞ÂêéÈù¢ÊàñËÆ∏‰ºö‰∏çÂπ≥Ë°°ÔºåËøô‰∏™Êó∂ÂÄôÊàë‰ª¨Â∞±ÈúÄË¶ÅÁî®ÊõøÁΩ™ÁæäÊ†ëÁöÑÊÄùÊÉ≥‚Äî‚ÄîÊãçÊâÅÈáçÂª∫Âç≥ÂèØ„ÄÇÊ≥®ÊÑèËøôÈáåÂà§Êñ≠ÊòØÂê¶Âπ≥Ë°°ÁöÑ $check$ ÂáΩÊï∞ÈúÄË¶ÅÊîæÂú® $insert$ ÁöÑÊúÄÂêéÔºå‰πüÂ∞±ÊòØËøòË¶ÅÂú® $pushup$ ‰ª•ÂêéÂÜç $check$ Âç≥ÂèØ„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e6+7;const int inf=1e9+9;#define alph (0.75)template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch=0;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int root,ans,WD,trh[N],top,cnt;struct point&#123;int x[2];&#125;p[N];struct node &#123; int mi[2],mx[2],l,r,sz; point tp;&#125;tr[N];int operator &lt; (point a,point b) &#123;return a.x[WD]&lt;b.x[WD];&#125;inline int new_node() &#123; if(top) return trh[top--]; else return ++cnt;&#125;inline void pushup(int x) &#123; int l=tr[x].l,r=tr[x].r; tr[x].sz=tr[l].sz+tr[r].sz+1; for(int i=0;i&lt;=1;++i) &#123; tr[x].mi[i]=tr[x].mx[i]=tr[x].tp.x[i]; if(l) &#123; tr[x].mi[i]=min(tr[x].mi[i],tr[l].mi[i]); tr[x].mx[i]=max(tr[x].mx[i],tr[l].mx[i]); &#125; if(r) &#123; tr[x].mi[i]=min(tr[x].mi[i],tr[r].mi[i]); tr[x].mx[i]=max(tr[x].mx[i],tr[r].mx[i]); &#125; &#125;&#125;int build(int l,int r,int wd) &#123; if(l&gt;r) return 0; int x=new_node(),mid=(l+r)&gt;&gt;1; WD=wd,nth_element(p+l,p+mid,p+r+1),tr[x].tp=p[mid]; tr[x].l=build(l,mid-1,wd^1); tr[x].r=build(mid+1,r,wd^1); return pushup(x),x;&#125;void pia(int x,int num) &#123; if(tr[x].l) pia(tr[x].l,num); p[num+tr[tr[x].l].sz+1]=tr[x].tp,trh[++top]=x; if(tr[x].r) pia(tr[x].r,num+tr[tr[x].l].sz+1);&#125;void check(int&amp;x,int wd) &#123; if(alph*tr[x].sz&lt;tr[tr[x].l].sz||alph*tr[x].sz&lt;tr[tr[x].r].sz) pia(x,0),x=build(1,tr[x].sz,wd);&#125;void Insert(point tmp,int&amp;x,int wd) &#123; if(!x) &#123; x=new_node(); tr[x].tp=tmp,tr[x].l=tr[x].r=0; pushup(x);return; &#125; if(tr[x].tp.x[wd]&lt;tmp.x[wd]) Insert(tmp,tr[x].r,wd^1); else Insert(tmp,tr[x].l,wd^1); pushup(x);check(x,wd);&#125;int getdist(point tmp,int x) &#123; int res=0; for(int i=0;i&lt;=1;++i) res+=max(0,tmp.x[i]-tr[x].mx[i])+max(0,tr[x].mi[i]-tmp.x[i]); return res;&#125;int dist(point a,point b) &#123; return abs(a.x[0]-b.x[0])+abs(a.x[1]-b.x[1]);&#125;void query(point tmp,int x) &#123; ans=min(ans,dist(tmp,tr[x].tp)); int disl=inf,disr=inf; if(tr[x].l) disl=getdist(tmp,tr[x].l); if(tr[x].r) disr=getdist(tmp,tr[x].r); if(disl&lt;disr) &#123; if(disl&lt;ans) query(tmp,tr[x].l); if(disr&lt;ans) query(tmp,tr[x].r); &#125; else &#123; if(disr&lt;ans) query(tmp,tr[x].r); if(disl&lt;ans) query(tmp,tr[x].l); &#125;&#125;int main() &#123; int n,m,op; IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(p[i].x[0]),IN(p[i].x[1]); root=build(1,n,0); for(int i=1;i&lt;=m;++i) &#123; point tmp; IN(op),IN(tmp.x[0]),IN(tmp.x[1]); if(op==1) Insert(tmp,root,0); else &#123; ans=inf;query(tmp,root); printf("%d\n",ans); &#125; &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>K-D Tree</tag>
        <tag>È¢òËß£</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [AH2017/HNOI2017]Â§ß‰Ω¨ ÊêúÁ¥¢+DP luoguP3724/bzoj4828]]></title>
    <url>%2F2019%2F03%2F21%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4828%2F</url>
    <content type="text"><![CDATA[È¶ñÂÖàÂèØ‰ª•ÂèëÁé∞ÔºåÂà∑Ê∞¥È¢òË∑üÊâì‰º§ÂÆ≥ÊòØÂèØ‰ª•ÂàÜÂºÄÂ§ÑÁêÜÁöÑ„ÄÇ Êàë‰ª¨ÂÖàÁî® $DP$ È¢ÑÂ§ÑÁêÜÂá∫ËÉΩÊâì‰º§ÂÆ≥ÁöÑÊúÄÂ§ßÂ§©Êï∞ÔºåÂÖ∂‰ΩôÁöÑÂ§©Êï∞ÈÉΩÂè™ËÉΩÁî®Âà∑Ê∞¥È¢òÁöÑÊñπÂºèÊÅ¢Â§ç„ÄÇ ‰∫éÊòØËÆæ $dp[i][j]$ Ë°®Á§∫Ââç $i$ Â§©Ôºå‰ø°ÂøÉÂÄºËøòÂâ© $j$ ÁöÑËÉΩÂ§üÊâì‰º§ÂÆ≥ÁöÑÊúÄÂ§ßÂ§©Êï∞„ÄÇ ÂèØ‰ª•Áü•ÈÅì‰∏ÄÂ§©Âè™Êúâ‰∏§ÁßçÊÉÖÂÜµÔºåÊàë‰ª¨Êûö‰∏æ $i,j‚Äã$ ÁÑ∂ÂêéËøõË°åËΩ¨ÁßªÔºö Â¶ÇÊûúÂèØ‰ª•ÂùöÊåÅÂà∞‰∏ã‰∏ÄÂ§©Ôºödp[i+1][j-a[i+1]]=max(dp[i+1][j-a[i+1]],dp[i][j]+1) Â¶ÇÊûúÊòØË¶ÅÂà∑Ê∞¥È¢òÔºödp[i+1][j-a[i+1]+w[i+1]]=max(dp[i+1][j-a[i+1]+w[i+1]],dp[i][j]) ÂΩìÁÑ∂ÔºåÂ¶ÇÊûúË¶ÅÂÅöÁ¨¨‰∏Ä‰∏™ËΩ¨ÁßªÁöÑËØùÂæóÂÖàÂà§Êñ≠‰∏Ä‰∏ã j-a[i+1] ÊòØÂê¶Ë∂Ö‰∫ÜÁïåÔºåË∂ÖÁïå‰∫ÜÁöÑËØùÂΩìÁÑ∂Â∞±‰∏çËÉΩËΩ¨Áßª‰∫Ü„ÄÇÁ¨¨‰∫å‰∏™ËΩ¨Áßª‰πüË¶ÅÊ≥®ÊÑèÔºåj-a[i+1]+w[i+1] ÂÖàË¶ÅË∑ü‰ø°ÂøÉ‰∏äÁïå($mc$) Âèñ $min$ „ÄÇ ÊúÄÂêéÂú®ÊâÄÊúâÁöÑÁä∂ÊÄÅ‰∏≠Âèñ‰∏Ä‰∏™ÊúÄÂ§ßÂÄºÂç≥ÂèØ„ÄÇ Code-DP12345678910111213141516inline void DP_maxday()&#123; memset(dp,-1,sizeof(dp));//ÂàùÂßãÂåñ dp[0][mc]=0; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;=mc;++j)&#123; if(dp[i][j]&lt;0)continue; int t1=j-a[i+1];if(t1&lt;0)continue; dp[i+1][t1]=max(dp[i+1][t1],dp[i][j]+1); int t2=min(t1+w[i+1],mc); dp[i+1][t2]=max(dp[i+1][t2],dp[i][j]); &#125; for(int i=1;i&lt;=n;++i) for(int j=0;j&lt;=mc;++j) d=max(d,dp[i][j]); return;&#125; Ëøô‰∏™ $d$ Â∞±ÊòØÊàë‰ª¨ËÉΩÂ§üÊâì‰º§ÂÆ≥ÁöÑÊúÄÂ§ßÂ§©Êï∞„ÄÇ ÁÑ∂ÂêéÊàë‰ª¨ÈúÄË¶ÅÈ¢ÑÂ§ÑÁêÜÂá∫ÊâìÂá∫‰º§ÂÆ≥ÁöÑÊâÄÊúâÁä∂ÊÄÅÔºåËøôÈáåÊàëÁî®ÂπøÊêú„ÄÇ ÈòüÂàóÁöÑÁªìÊûÑ‰Ωì $Node$ Áî±‰∏â‰∏™ÂÖÉÁ¥†ÁªÑÊàêÔºö$F,L,D$ ÔºåË°®Á§∫Âú®Á¨¨ $D$ Â§©Ôºå‰Ω†ÁöÑ $F$ ÁöÑÂÄº‰∏∫ $F$ Ôºå$L$ ÁöÑÂÄº‰∏∫ $L$ „ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØËΩ¨ÁßªÔºåËøôÈáå‰πüÊòØ‰∏§ÁßçÊÉÖÂÜµÔºö ‰ΩøËÆΩÂà∫ËÉΩÂäõ‰πò‰∏äÁ≠âÁ∫ßÔºöF,L,D -&gt; F*L,L,D+1 (L&gt;0) ‰ΩøÁ≠âÁ∫ßÂä†‰∏ÄÔºöF,L,D -&gt; F,L+1,D+1 Áõ¥Êé•ËøôÊ†∑ËΩ¨ÁßªÂ∞±Â•Ω‰∫ÜÔºåÊ≥®ÊÑèÊàë‰ª¨ÈúÄË¶ÅÂºÄ‰∏™Êï∞ÁªÑÂ∞ÜËøô‰∫õÊâìÂá∫‰º§ÂÆ≥ÁöÑÊñπÊ°àËÆ∞‰∏ãÊù•ÔºåÂΩìÁÑ∂ÔºåËÆ∞ÂΩïÁöÑÊó∂ÂÄô‰∏çÁî®ËÆ∞ $L$ ÔºåÂõ†‰∏∫ÂêéÈù¢Êâì‰º§ÂÆ≥ÁöÑÊó∂ÂÄô $L$ ÊòØÊ≤°Â§™Â§öÁî®ÁöÑ„ÄÇ ËøòÊúâÂ∞±ÊòØÊØèÊ¨°ÈúÄË¶ÅÂà§Êñ≠‰∏Ä‰∏ãÂΩìÂâçÁöÑÂ§©Êï∞ÔºåÂ¶ÇÊûúÂΩìÂâçÁä∂ÊÄÅÁöÑÂ§©Êï∞Â∑≤ÁªèÂ§ß‰∫é‰∫Ü $d$ ÈÇ£‰πàÂΩìÂâçÁä∂ÊÄÅÊòæÁÑ∂ÊòØ‰∏çÂêàÊ≥ïÁöÑ„ÄÇ ÊúÄÂêéÂ∞±ÊòØÈúÄË¶ÅÁî® $map$ Âà§‰∏™ÈáçÔºå‰∏çÁÑ∂ÁöÑËØù‰ºöÁàÜÁÇ∏ÔºåÂΩìÁÑ∂Âà§ÈáçÁöÑÊó∂ÂÄô‰πü‰∏çË¶ÅÂà§ $L$ „ÄÇ Code-Bfs1234567891011121314151617181920map&lt;pair&lt;int,int&gt;,int&gt; vis;inline void BFS_maxhurt()&#123; q.push((Node)&#123;1,0,1&#125;);//ÂàùÂßãÂåñ while(!q.empty())&#123; Node x=q.front();q.pop(); if(x.D&gt;d)continue; else if(x.D==d)&#123;T[++cnt]=(Data)&#123;x.F,x.D&#125;;continue;&#125; else T[++cnt]=(Data)&#123;x.F,x.D&#125;; /*Á¨¨‰∏ÄÁßçËΩ¨Áßª*/ if(x.L&amp;&amp;(ll)x.F*x.L&lt;=1e8&amp;&amp;!vis[pair&lt;int,int&gt;(x.F*x.L,x.L)])&#123; q.push((Node)&#123;x.F*x.L,x.L,x.D+1&#125;); vis[pair&lt;int,int&gt;(x.F*x.L,x.L)]=x.D;//Ê†áËÆ∞ &#125; /*Á¨¨‰∫åÁßçËΩ¨Áßª*/ if(!vis[pair&lt;int,int&gt;(x.F,x.L+1)])&#123; q.push((Node)&#123;x.F,x.L+1,x.D+1&#125;); vis[pair&lt;int,int&gt;(x.F,x.L+1)]=x.D;//Ê†áËÆ∞ &#125; &#125;return;&#125; Êä±Ê≠âÊàëÁöÑËã±ËØ≠ÁúüÁöÑ‰∏çÂ•Ω ÁÑ∂ÂêéÊàë‰ª¨Â∑≤ÁªèÂ∞ÜÊâÄÊúâÂèØË°åÁöÑÊâì‰º§ÂÆ≥ÁöÑÊñπÊ°àËÆ∞ÂΩïÂà∞ $T‚Äã$ Êï∞ÁªÑÈáåÈù¢‰∫ÜÔºåÊé•‰∏ãÊù•Â∞±ÊòØÁúãÁúãÊÄé‰πàÁî®Ëøô‰∫õÊñπÊ°àÊâìÂ§ß‰Ω¨‰∫Ü„ÄÇ È¶ñÂÖàËøòÂò¥ÊòØÂèØ‰ª•Áõ¥Êé•ÁÆóÁöÑÔºåËøô‰∏™ÊòØ‰∏çÁî®ËÄÉËôëÁöÑ„ÄÇÊàë‰ª¨ÂîØ‰∏ÄË¶ÅÂ§ÑÁêÜÁöÑÂ∞±ÊòØÊÄºÂ§ß‰Ω¨ÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄâÊã©ÊÄº‰∏ÄÊ¨°ËøòÊòØ‰∏§Ê¨°„ÄÇÂèØ‰ª•ÂèëÁé∞ÊÄº‰∏ÄÊ¨°ÁöÑËØùÁõ¥Êé•Êûö‰∏æ $T‚Äã$ Êï∞ÁªÑ‰∏≠ÁöÑÊñπÊ°àÂç≥ÂèØÔºåÁÆó‰∏äÂ§©Êï∞ÔºåÂâ©‰∏ãÁöÑÂ§©Êï∞ÂΩìÁÑ∂ÊòØÊØèÂ§©ËøòÂò¥ÔºåÁúãÁúãËøôÊ†∑ÂèØ‰∏çÂèØ‰ª•Âπ≤ÊéâÂ§ß‰Ω¨Ôºö 1if(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)return true; ( $C$ ‰∏∫ÂΩìÂâçÂ§ß‰Ω¨ÁöÑ‰ø°ÂøÉÂÄº) È¶ñÂÖàÔºåT[i].F&lt;=C ÊòØ‰∏∫‰∫Ü‰øùËØÅ‰Ω†‰∏çË¢´ËôêÈ£ûÔºåÁÑ∂Âêé T[i].D&lt;=d ÂΩìÁÑ∂Â∞±ÊòØ‰Ω†ÊúâË∂≥Â§üÁöÑÂ§©Êï∞Êù•ÂÆûÁé∞Ëøô‰∏™ÊñπÊ°àÔºåÊúÄÂêéÁöÑ C-T[i].F&lt;=d-T[i].D Â∞±ÊòØÁúãÁúãÊâìÂÆåËøô‰∏™ÊñπÊ°àÂêéÂâ©‰∏ãÁöÑÂ§©Êï∞ËÉΩÂê¶ÈÄöËøá‰ªÖÂâ©ÁöÑËøòÂò¥Êù•Âπ≤ÊéâÂ§ß‰Ω¨„ÄÇ ÈÇ£‰πàÂ¶ÇÊûúÊòØÊÄº‰∏§Ê¨°Â§ß‰Ω¨Âë¢Ôºü ÂèØ‰ª•ÂèëÁé∞ÂÖ∂ÂÆûË∑ü‰∏äÈù¢Â∑Æ‰∏çÂ§öÔºåËÆæ‰∏§Ê¨°‰∏≠‰∏ÄÊ¨°ÊòØÁ¨¨ $i$ Â•óÊñπÊ°àÔºå‰∏ÄÊ¨°ÊòØÁ¨¨ $j$ Â•óÊñπÊ°à„ÄÇÈÇ£‰πàÈ¶ñÂÖàËøô‰∏§Â•óÊñπÊ°àÁöÑ $F$ ÁöÑÂíå‰∏çËÉΩË∂ÖËøá $C$ ÔºåÁÑ∂ÂêéÂ∞±ÊòØË¶Å‰øùËØÅÂâ©‰∏ãÁöÑÂ§©Êï∞‰∏≠ÂèØ‰ª•ÈÄöËøáËøòÂò¥Âπ≤ÊéâÂ§ß‰Ω¨Ôºå‰∫éÊòØÊàë‰ª¨ÂèØ‰ª•ÂàóÂá∫ÂºèÂ≠êÔºö T[i].F+T[j].F \leq C \ , \ T[i].F+T[j].F+(d-T[i].D-T[j].D) \geq C‚ÄãÁÑ∂ÂêéÂâçÂºèÂæàÂÆπÊòìÊª°Ë∂≥ÔºåÊàë‰ª¨Êù•ÁúãÁúãÂêéÂºèÔºö T[i].F+T[j].F+d-T[i].D-T[j].D \geq CT[i].F-T[i].D+T[j].F-T[j].D+d \geq CÊàë‰ª¨Êûö‰∏æ‰∏Ä‰∏™ $i$ ÔºåÂØªÊâæ $j$ „ÄÇÊó¢ÁÑ∂ $i$ Â∑≤ÁªèÁ°ÆÂÆöÔºåÊúÄ‰ºòÁöÑ $j$ ‰∏ÄÂÆöÊª°Ë∂≥ $T[j].F-T[j].D$ ÊúÄÂ§ßÔºåÂèñ $max$ Â∞±Â•Ω„ÄÇ Ëá≥‰∫é‰ª£Á†ÅÁöÑÈóÆÈ¢òÔºåÊàë‰ª¨ÂÖàÂ∞Ü $T[i]$ ÊåâÁÖß $F$ ÊéíÂ∫èÔºåÁÑ∂ÂêéÊåâÈ°∫Â∫èÂØªÊâæ $j$ Ôºå‰ª£Á†ÅÂÆûÁé∞Â∞±‰∏çÊòØÂæàÈöæ‰∫Ü„ÄÇ Code-Solve:12345678910111213inline bool solve(int C)&#123; if(C&lt;=d)return true;//ÂèØ‰ª•ÂÖ®Á®ãÈ°∂Âò¥Âπ≤ÊéâÂ§ß‰Ω¨ÔºåÁõ¥Êé•retrun int l=0,mx=-inf;//ÂàùÂßãÂåñ for(int i=cnt;i&gt;=1;--i)&#123; /*Áî®Á¨¨iÊñπÊ°àÊÄº‰∏ÄÊ¨°ÂèØ‰ª•Âπ≤ÊéâÂ§ß‰Ω¨Ôºåreturn*/ if(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)return true; /*ÊåâÈ°∫Â∫èÊâ´ÊèèÊª°Ë∂≥Ë¶ÅÊ±ÇÁöÑ j*/ while(l&lt;cnt&amp;&amp;T[i].F+T[l+1].F&lt;=C) l++,mx=max(mx,T[l].F-T[l].D);//Âèñmax /*ÂèØ‰ª•ÊÄº‰∏§Ê¨°Âπ≤ÊéâÂ§ß‰Ω¨Ôºåreturn*/ if(T[i].F-T[i].D+mx+d&gt;=C)return true; &#125;return false;//Âπ≤‰∏çÊéâÂ§ß‰Ω¨‰∫Ü&#125; ÂΩìÁÑ∂Ëøô‰∏™Êó∂Èó¥Â§çÊùÇÂ∫¶ÂæàÁéÑÂ≠¶ÔºåÂ§ßÊ¶ÇÊòØ $O($Áä∂ÊÄÅÊï∞$)$ „ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;map&gt;#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1.5e2+2;const int S=1e7+5;const int inf=1e9+9;int n,m,mc,a[N],w[N];int d,dp[N][N],cnt;struct Node&#123;int F,L,D;&#125;;struct Data&#123; int F,D; bool operator &lt; (const Data&amp;x)const&#123;return F&lt;x.F;&#125;&#125;T[S];map&lt;pair&lt;int,int&gt;,int&gt; vis;queue&lt;Node&gt; q;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline void DP_maxday()&#123; memset(dp,-1,sizeof(dp)); dp[0][mc]=0; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;=mc;++j)&#123; if(dp[i][j]&lt;0)continue; int t1=j-a[i+1];if(t1&lt;0)continue; dp[i+1][t1]=max(dp[i+1][t1],dp[i][j]+1); int t2=min(t1+w[i+1],mc); dp[i+1][t2]=max(dp[i+1][t2],dp[i][j]); &#125; for(int i=1;i&lt;=n;++i) for(int j=0;j&lt;=mc;++j) d=max(d,dp[i][j]); return;&#125;inline void BFS_maxhurt()&#123; q.push((Node)&#123;1,0,1&#125;); while(!q.empty())&#123; Node x=q.front();q.pop(); if(x.D&gt;d)continue; else if(x.D==d)&#123;T[++cnt]=(Data)&#123;x.F,x.D&#125;;continue;&#125; else T[++cnt]=(Data)&#123;x.F,x.D&#125;; if(x.L&amp;&amp;(ll)x.F*x.L&lt;=1e8&amp;&amp;!vis[pair&lt;int,int&gt;(x.F*x.L,x.L)])&#123; q.push((Node)&#123;x.F*x.L,x.L,x.D+1&#125;); vis[pair&lt;int,int&gt;(x.F*x.L,x.L)]=x.D; &#125; if(!vis[pair&lt;int,int&gt;(x.F,x.L+1)])&#123; q.push((Node)&#123;x.F,x.L+1,x.D+1&#125;); vis[pair&lt;int,int&gt;(x.F,x.L+1)]=x.D; &#125; &#125;return;&#125;inline bool solve(int C)&#123; if(C&lt;=d)return true; int l=0,mx=-inf; for(int i=cnt;i&gt;=1;--i)&#123; if(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)return true; while(l&lt;cnt&amp;&amp;T[i].F+T[l+1].F&lt;=C) l++,mx=max(mx,T[l].F-T[l].D); if(T[i].F-T[i].D+mx+d&gt;=C)return true; &#125;return false;&#125;int main()&#123; IN(n),IN(m),IN(mc); for(int i=1;i&lt;=n;++i)IN(a[i]); for(int i=1;i&lt;=n;++i)IN(w[i]); DP_maxday(); BFS_maxhurt(); sort(T+1,T+cnt+1); for(int i=1;i&lt;=m;++i)&#123; int C;IN(C); if(solve(C))printf("1\n"); else printf("0\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>ÊêúÁ¥¢</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë ÂéÜÂè≤Á†îÁ©∂ ÂõûÊªöËé´Èòü luoguAT1219]]></title>
    <url>%2F2019%2F03%2F20%2F%5B%E9%A2%98%E8%A7%A3%5DluoguAT1219%2F</url>
    <content type="text"><![CDATA[ÂõûÊªöËé´ÈòüÊùøÂ≠êÈ¢òÔºåÂú®Ê≠§‰∏çÂÜçËµòËø∞„ÄÇ ÂÖ≥‰∫éÂõûÊªöËé´ÈòüÁöÑÊñáÁ´†Êà≥Ëøô $QwQ$ :[ÁÆóÊ≥ï]ÊµÖË∞à4ÁßçËé´ÈòüÂèä‰æãÈ¢ò ÂèØ‰ª•ÁÆó‰Ωú‰∏Ä‰∏™ÂõûÊªöËé´ÈòüÁöÑÊùøÂ≠êÊù•ÂèÇËÄÉ„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;typedef long long ll;using namespace std;const int N=1e5+2;const int inf=1e9+9;int n,m,block,a[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(flag)x=-x; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace MO&#123; ll ans,Ans[N]; int v[N],b[N],blo[N],cnt[N],hep[N]; struct Query&#123;int l,r,id;&#125;q[N]; bool cmp(Query x,Query y)&#123; return blo[x.l]==blo[y.l]?x.r&lt;y.r:blo[x.l]&lt;blo[y.l]; &#125; inline void roll(int pos)&#123;--cnt[b[pos]];&#125; inline void add(int pos)&#123; ++cnt[b[pos]]; ans=max(ans,1ll*a[pos]*cnt[b[pos]]); &#125; inline ll query(int l,int r)&#123; ll res=0; for(int i=l;i&lt;=r;++i)hep[b[i]]=0; for(int i=l;i&lt;=r;++i)&#123; ++hep[b[i]]; res=max(res,1ll*a[i]*hep[b[i]]); &#125;return res; &#125; inline int solve(int num,int bloid)&#123; int L=min(block*bloid,n); int i=num,l=L+1,r=l-1; for(int k=1;k&lt;=n;++k)cnt[k]=0; ans=0; for(;blo[q[i].l]==bloid;++i)&#123; if(blo[q[i].l]==blo[q[i].r])&#123; Ans[q[i].id]=query(q[i].l,q[i].r); continue; &#125; while(r&lt;q[i].r)add(++r); ll tmp=ans; while(l&gt;q[i].l)add(--l); Ans[q[i].id]=ans; while(l&lt;L+1)roll(l++); ans=tmp; &#125;return i; &#125; inline void Main()&#123; sort(v+1,v+1+n); int tot=unique(v+1,v+1+n)-(v+1); for(int i=1;i&lt;=n;++i) b[i]=lower_bound(v+1,v+1+tot,a[i])-v; sort(q+1,q+1+m,cmp); int num=1; for(int i=1;i&lt;=blo[n];++i)num=solve(num,i); for(int i=1;i&lt;=m;++i)printf("%lld\n",Ans[i]); return; &#125;&#125;using namespace MO;int main()&#123; IN(n),IN(m);block=sqrt(n); for(int i=1;i&lt;=n;++i)IN(a[i]),v[i]=a[i]; for(int i=1;i&lt;=n;++i)blo[i]=(i-1)/block+1; for(int i=1;i&lt;=m;++i)&#123; IN(q[i].l),IN(q[i].r); q[i].id=i; &#125;return Main(),0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ëé´Èòü</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HNOI/AHOI2018]ËΩ¨Áõò Á∫øÊÆµÊ†ë luoguP4425]]></title>
    <url>%2F2019%2F03%2F20%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4425%2F</url>
    <content type="text"><![CDATA[È¶ñÂÖàÂÜçÊù•ËÆ≤Êòé‰∏Ä‰∏ãÈ¢òÊÑèÔºö ÁªôÂÆö‰∏Ä‰∏™ÈïøÂ∫¶‰∏∫ $n$ ÁöÑÁéØÔºåÁéØ‰∏äÁöÑÊØè‰∏™ÁÇπÊúâ‰∏Ä‰∏™ÊùÉÂÄº $T_i$ ÔºåË¶ÅÊ±Ç‰Ω†‰ªéÁéØ‰∏äÈÄâ‰∏≠‰ªªÊÑè‰∏Ä‰∏™ÁÇπ‰∏∫Ëµ∑ÁÇπÂºÄÂßãÔºåÊØè‰∏™Êó∂Èó¥ÂèØ‰ª•È°∫Êó∂ÈíüÂà∞‰∏ã‰∏Ä‰∏™ÁÇπÔºåÊàñËÄÖÂÅúÁïô‰∏çÂä®„ÄÇÂØπ‰∫é‰∏Ä‰∏™ÁÇπÔºåÂ¶ÇÊûúÂà∞Ëøô‰∏™ÁÇπÁöÑÊó∂Èó¥Â§ß‰∫éÁ≠â‰∫é‰∫Ü $T_i$ ÔºåÈÇ£‰πàËøô‰∏™ÁÇπÂ∞ÜË¢´Ê†áËÆ∞ÔºåÈóÆÊúÄÂ∞ë‰ªÄ‰πàÊó∂ÂÄôÂèØ‰ª•ËÆ©ÊâÄÊúâÁâ©ÂìÅÈÉΩË¢´Ê†áËÆ∞„ÄÇ ÂèØ‰ª•ÂèëÁé∞ÔºåËøô‰∏™ÈóÆÈ¢òÁöÑÁ≠îÊ°àË∑ü‰ª•‰∏ãÈóÆÈ¢òÁöÑÁ≠îÊ°àÊòØÁ≠â‰ª∑ÁöÑÔºö ÁªôÂÆö‰∏Ä‰∏™ÈïøÂ∫¶‰∏∫ $n‚Äã$ ÁöÑÁéØÔºåÁéØ‰∏äÁöÑÊØè‰∏™ÁÇπÊúâ‰∏Ä‰∏™ÊùÉÂÄº $T_i‚Äã$ ÔºåË¶ÅÊ±Ç‰Ω†‰ªéÁéØ‰∏äÈÄâ‰∏≠‰ªªÊÑè‰∏Ä‰∏™ÁÇπ‰∏∫Ëµ∑ÁÇπÂºÄÂßãÔºåÔºåÂºÄÂßãÁöÑÊó∂Èó¥‰∏∫ $t‚Äã$ ÔºåÊØè‰∏™Êó∂Èó¥ÂèØ‰ª•ÈÄÜÊó∂ÈíàÂà∞‰∏ã‰∏Ä‰∏™ÁÇπÔºåÊàñËÄÖÂÅúÁïô‰∏çÂä®„ÄÇÂØπ‰∫é‰∏Ä‰∏™ÁÇπÔºåÂÆÉÂ∞ÜÂú® $T_i‚Äã$ Êó∂Èó¥ÊçüÂùè ÔºåÊ±Ç‰∏Ä‰∏™ÊúÄÂ∞èÁöÑ $t‚Äã$ ‰ΩøÂæóÊàë‰ª¨ËÉΩÂ§üÂú®Ê≤°ÊúâÁÇπÊçüÂùèÁöÑÊÉÖÂÜµ‰∏ãÈÅçÂéÜÊâÄÊúâÁÇπ„ÄÇ Êàë‰ª¨ÁÆó‰∏Ä‰∏ãÊØè‰∏Ä‰∏™ÁÇπÁ¶ªËµ∑ÁÇπÁöÑË∑ùÁ¶ªÔºåÈÇ£‰πàËøô‰∏™Êó∂ÂÄôÊàë‰ª¨Â∞±ÂèØ‰ª•Âú®Ëµ∑ÁÇπÁ≠âÔºåÁ≠â‰∏ÄÊÆµÊó∂Èó¥ÂêéÂÜçÂá∫ÂèëÔºåËøôÊ†∑Â≠êÊàë‰ª¨ËΩ¨‰∏ÄÂúàÂ∞±Â§ü‰∫ÜÔºåËøô‰∏™ÊñπÊ°àÊòæÁÑ∂ÊòØÊúÄ‰ºòÁöÑ„ÄÇ Êàë‰ª¨Êñ≠ÁéØ‰∏∫ÈìæÔºåÊûö‰∏æËµ∑ÁÇπ $s$ ÔºåÂØπ‰∫é‰∏Ä‰∏™ÁÇπ $i$ Ôºå$s$ Âà∞Ëææ $i$ ÁöÑËÄóÊó∂ÊòæÁÑ∂ÊòØ $(i-s)$ ÔºåÈÇ£‰πàÊàë‰ª¨Â¶ÇÊûúÊÉ≥Ë¶ÅÁ≠â‰∏ÄÊÆµÊó∂Èó¥Âá∫ÂèëÂêéÊ≠£Â•ΩÊ†áËÆ∞ËØ•ÁÇπÔºåËøô‰∏ÄÊÆµÁ≠âÂæÖÁöÑÊó∂Èó¥ÂΩìÁÑ∂Â∞±ÊòØ $T_i-(i-s)$ „ÄÇÊàë‰ª¨ÂØπÊâÄÊúâÁöÑÁÇπ $i$ ÁöÑ $T_i-(i-s)$ Âèñ $max$ ÔºåÊúÄÂêéÁöÑÁªìÊûúÂ∞±ÊòØÊàë‰ª¨Â∫îËØ•Âú® $s$ Á≠âÁöÑÊó∂Èó¥„ÄÇ ÈÇ£‰πàÂæàÊòæÁÑ∂Êàë‰ª¨ÁöÑÁ≠îÊ°à‰∏∫Ôºö Ans=min_{s \in [1,n]}\{ max_{i \in [s,s+n-1]}[T_i-(i-s)] \}+n-1$min_{s \in [1,n]}\{ max_{i \in [s,s+n-1]}[T_i-(i-s)] \}‚Äã$ ËøôÊòæÁÑ∂ÊòØÂú®ÈÄâÊã©‰∏Ä‰∏™ÊúÄ‰ºòÁöÑËµ∑ÁÇπ‰ΩøÂæóÁ≠âÂæÖÊó∂Èó¥ÊúÄÂ∞èÔºå$n-1‚Äã$ Â∞±ÊòØÁ≠âÂæÖÂÆåÂêéËΩ¨‰∏ÄÂúàÁöÑÊó∂Èó¥„ÄÇ Ëøô‰∏™Êó∂ÂÄôÊö¥ÂäõÊûö‰∏æÂ∞±ÂèØ‰ª•ÂæóÂà∞ $30$ ÂàÜ„ÄÇ ‰∏çËøáÊàë‰ª¨ÁªßÁª≠Ôºö Ans=min_{s \in [1,n]}\{ max_{i \in [s,s+n-1]}[T_i-i+s] \}+n-1Êàë‰ª¨ËÆæ $A_i$ ‰∏∫ $T_i-i$ „ÄÇ Ans=min_{s \in [1,n]}\{ max_{i \in [s,s+n-1]}[A_i+s] \}+n-1ÂÅáËÆæÁé∞Âú®Êúâ‰∏ÄÂØπ $A_i,A_{i+n}$ ÔºåÊàë‰ª¨ÂèØ‰ª•ÂèëÁé∞ $A_{i+1}$ ÊòØÂøÖÁÑ∂ÊØî $A_i$ Â∞èÁöÑÔºå‰πüÂ∞±ÊòØËØ¥ $A_{s+n}$ Âà∞ $A_{2n}$ Ëøô‰∏ÄÊÆµÊï∞Â∞±ÁÆóÁÆóËøõÊù•‰πüÈÄ†‰∏çÊàêÂΩ±Âìç„ÄÇ ‰πüÂ∞±ÊòØËØ¥ÂéüÂºèË∑üËøô‰∏™ÂºèÂ≠êÊòØÁ≠â‰ª∑ÁöÑÔºö Ans=min_{s \in [1,n]}\{ max_{i \in [s,2n]}[A_i+s] \}+n-1ÂèëÁé∞ $max$ ÈáåÈù¢ $s$ Âπ∂Ê≤°Êúâ‰ªÄ‰πàÂçµÁî®ÔºåÁõ¥Êé•ÊèêÂá∫Êù•„ÄÇ Ans=min_{s \in [1,n]}\{ max_{i \in [s,2n]}A_i +s\}+n-1‚ÄãËøô‰∏™ÁöÑËØù‚Ä¶‚Ä¶Âõ†‰∏∫ $A_i$ ÁöÑÂÄºË∑ü $s$ Ê≤°ÊúâÂÖ≥Á≥ª‚Ä¶‚Ä¶ÊâÄ‰ª•‚Ä¶‚Ä¶ÊâÄ‰ª•Êàë‰ª¨ÂèØ‰ª•È¢ÑÂ§ÑÁêÜ‰∏Ä‰∏™ $ST$ Ë°®‚Ä¶‚Ä¶ÂóØ‚Ä¶‚Ä¶ÁÑ∂ÂêéÊûö‰∏æ $s$ ‚Ä¶‚Ä¶ÁªìÊûúÊàë‰ª¨ÊòØ $O(n)$ ÊêûÂÆöÔºüÔºüÔºü Âì¶Âì¶Âì¶‰ΩúËÄÖËÑëÊäΩ‰∫ÜÔºåËøôÈ¢òÊòØÂæÖ‰øÆÊîπÁöÑ„ÄÇ ‰∏çËøáÊ≤°ÂÖ≥Á≥ªÔºåÊàë‰ª¨ËøòÊúâÂá∫Ë∑Ø„ÄÇ Áé∞Âú®ËÄÉËôëÁî®Á∫øÊÆµÊ†ëÊù•Áª¥Êä§ÔºåÂÅáËÆæÁªìÁÇπ $x$ ‰ª£Ë°®ÁöÑÂå∫Èó¥‰∏∫ $l,r$ ÔºåÁª¥Êä§‰∏Ä‰∏™ $val[x]$ Ë°®Á§∫Âå∫Èó¥ $[l,r]$ ‰∏≠ $A_i$ ÁöÑÊúÄÂ§ßÂÄºÔºåËøô‰∏™ÊòØÁ∫øÊÆµÊ†ëÂü∫Êú¨Êìç‰Ωú‰∏çÂÜçËµòËø∞ÔºåÁÑ∂ÂêéÂÜçÁª¥Êä§‰∏Ä‰∏™ $ans[x]$ Ë°®Á§∫Âå∫Èó¥ $min_{s \in [l,mid]}\{ max_{i \in [s,r]} \}$ „ÄÇ$1$ Âè∑ÁªìÁÇπÁöÑÂå∫Èó¥‰∏∫ $1,2n$ ÔºåÊàë‰ª¨ÁöÑÁ≠îÊ°àÂ∞±ÊòØ $ans[1]$ „ÄÇ ÈÇ£‰πàÊÄé‰πà‰∏ä‰º† $ans$ Âë¢„ÄÇ Êàë‰ª¨ÂØπ‰∫é $[mid,r]$ Âå∫Èó¥ÁöÑÊúÄÂ§ßÂÄº $A_x$ ÔºåËøô‰∏™ $A_x$ ÊòæÁÑ∂ÂèØ‰ª• $O(1)$ Ê±ÇÂá∫ÔºåÁÑ∂ÂêéÂÜçÊâæÂà∞‰∏Ä‰∏™ $A_y$ ÔºåË°®Á§∫ÂΩì $s$ ‰∏∫ $y$ ÁöÑÊó∂ÂÄôÔºåÊï¥‰∏™ $[s,r]$ ÁöÑ $A_i$ ÁöÑÊúÄÂ§ßÂÄº‰∏∫ $A_x$ „ÄÇÂú®ÂØªÊâæ $y$ ÁöÑÊó∂ÂÄôÈ°∫‰æøÊõ¥Êñ∞‰∏Ä‰∏ã $s\in [l,y-1]$ ÁöÑÂå∫Èó¥ÁöÑÁ≠îÊ°àÂ∞±Â•Ω„ÄÇ ÂΩì $s\in [y,r]‚Äã$ ÁöÑÊó∂ÂÄôÁ≠îÊ°àÊòéÊòæ‰∏∫ $A_x+s‚Äã$ ÔºåË¶ÅÊª°Ë∂≥ÊúÄÂ∞èÂòõ„ÄÇ ÊúâÂÖ≥Ëøô‰∏ÄÈÉ®ÂàÜÁöÑ‰ª£Á†ÅÂÆûÁé∞Ôºö 123456inline void calc(int k,int l,int r,int Ax)&#123; if(l==r)return l+max(val[k],Ax); int mid=(l+r)&gt;&gt;1; else if(val[k&lt;&lt;1|1]&gt;=Ax)return min(calc(k&lt;&lt;1|1,mid+1,r,Ax),ans[k&lt;&lt;1]); else return min(calc(k&lt;&lt;1,l,mid,Ax),(mid+1)+Ax);&#125; Êàë‰ª¨Êù•ÂâñÊûê‰∏Ä‰∏ã‰ª£Á†Å„ÄÇ 1inline void calc(int k,int l,int r,int Ax)&#123; Ëøô‰∏ÄÂè•Ë°®Á§∫ÂΩìÂâçÁöÑÁªìÁÇπ‰∏∫ $k$ Ôºå$k$ ‰ª£Ë°®ÁöÑÂå∫Èó¥‰∏∫ $l,r$ Ôºå$Ax$ ‰∏∫‰∏äÊñá‰∏≠ÁöÑ $A_x$ „ÄÇ 1if(l==r)return l+max(val[k],Ax); Ëøô‰∏™ÊòæÁÑ∂Â∞±ÊòØÊâæÂà∞‰∫Ü $y$ ÔºåËøô‰∏™Êó∂ÂÄôÁ≠îÊ°à‰∏∫ $A_x+s$ Ôºå‰∏äÊñá‰πüËÆ≤‰∫ÜÔºåËøôÈáåÁöÑ $s$ Â∞±ÊòØ $y$ ÁöÑ‰ΩçÁΩÆÔºå$A_x$ Â∑≤ÁªèÂú®ÂáΩÊï∞‰∏≠‰∫ÜÁõ¥Êé•Ë∞ÉÁî®Â∞±Â•Ω„ÄÇ‰ΩÜÊòØ‰∏∫‰ªÄ‰πàË¶ÅÂèñ $max$ Âë¢ÔºüÂõ†‰∏∫ÊÄï $A_y$ ÊòØÂ§ß‰∫é $A_x$ ÁöÑ! ÔºåÊâÄ‰ª•Âä†‰∏™ $max$ Â∞±Â•Ω„ÄÇ 1else if(val[k&lt;&lt;1|1]&gt;=Ax)return min(calc(k&lt;&lt;1|1,mid+1,r,Ax),ans[k&lt;&lt;1]); Ëøô‰∏™Â∞±ÊòØÂΩìÂâçÁªìÁÇπÁöÑÂè≥Âå∫Èó¥ÊúâÊØî $A_x$ Â§ßÁöÑÊï∞ÔºåÈÇ£‰πàËøô‰∏™Êó∂ÂÄô $y$ Â∞±‰∏çÂèØËÉΩÂà∞Â∑¶Âå∫Èó¥Âéª‰∫ÜÔºå‰∏çÁÑ∂ÁöÑËØù $[y,r]$ ‰∏≠ $max\{A_i\}$ Â∞±‰∏çÊòØ $A_x$ ‰∫ÜÔºåÊâÄ‰ª•Êàë‰ª¨ÂæÄÂè≥Â≠êÊ†ëËµ∞„ÄÇËøô‰∏™Êó∂ÂÄôÂèØ‰ª•ÂèëÁé∞ $s$ Â±û‰∫éÂ∑¶Âå∫Èó¥ÁöÑÊó∂ÂÄôÁöÑÁ≠îÊ°à‰∏∫ $ans[k&lt;&lt;1]$ ÔºåÈ°∫Â∏¶Êõ¥Êñ∞‰∏Ä‰∏ã„ÄÇ 1else return min(calc(k&lt;&lt;1,l,mid,Ax),(mid+1)+Ax); Ëøô‰∏™Êó∂ÂÄô $y$ Â∞±ÊòØÂú®Â∑¶Âå∫Èó¥‰∫ÜÔºåÈÇ£‰πàÊàë‰ª¨ÂæÄÂ∑¶Âå∫Èó¥Ëµ∞ÔºåÂè≥Âå∫Èó¥ÁöÑÁ≠îÊ°àÂë¢ÔºüÂè≥Âå∫Èó¥‰∏∫ $[mid,r]$ ÔºåÊòæÁÑ∂Ëøô‰∏ÄÊÆµÁöÑÊúÄÂ§ßÂÄºËÇØÂÆöÈÉΩ‰∏∫ $A_x$ ‚Äî‚ÄîÂåÖÊã¨ $mid+1$ ÔºåÊâÄ‰ª•‰∏çË¶ÅË∑ü $mid+1$ Âèñ‰∏Ä‰∏ã $max$ ‰∫Ü‚Äî‚ÄîÂ∞ΩÁÆ°Á¨¨‰∏ÄÂè•ÊòØ‰∏é $A_y$ Âèñ‰∫Ü $max$ ÁöÑ„ÄÇ Ëøô‰∏™Êó∂ÂÄôÂõ†‰∏∫Ë¶Å $s$ Â∞ΩÈáèÁöÑÂ∞èÔºåÊâÄ‰ª•Â∞±ÊòØÂè≥Âå∫Èó¥ÁöÑÂ∑¶Á´ØÁÇπ‚Äî‚Äî$mid+1$ ‰∫Ü„ÄÇ Ëøô‰∏™Êó∂ÂÄô $pushup$ Â∞±Â∫îËØ•Ëøô‰πàÂÜôÔºö 12345inline void pushup(int x,int l,int r)&#123; val[x]=max(val[x&lt;&lt;1],val[x&lt;&lt;1|1]); int mid=(l+r)&gt;&gt;1; ans[x]=calc(x&lt;&lt;1,l,mid,val[x&lt;&lt;1|1]);&#125; Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define min(x,y) ((x)&lt;(y)?(x):(y))#define max(x,y) ((x)&gt;(y)?(x):(y))typedef long long ll;const int N=4e5+2;const int inf=1e9+9;int n,m,p,lastans,a[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct Seg_Tree&#123; #define mid ((l+r)&gt;&gt;1) int ans[N&lt;&lt;2],val[N&lt;&lt;2]; int calc(int x,int l,int r,int Mx)&#123; if(l==r)return l+max(val[x],Mx); if(val[x&lt;&lt;1|1]&gt;=Mx)return min(calc(x&lt;&lt;1|1,mid+1,r,Mx),ans[x]); else return min(calc(x&lt;&lt;1,l,mid,Mx),mid+1+Mx); &#125; inline void pushup(int x,int l,int r)&#123; val[x]=max(val[x&lt;&lt;1],val[x&lt;&lt;1|1]); ans[x]=calc(x&lt;&lt;1,l,mid,val[x&lt;&lt;1|1]); &#125; inline void build(int x,int l,int r)&#123; if(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;return;&#125; build(x&lt;&lt;1,l,mid),build(x&lt;&lt;1|1,mid+1,r); pushup(x,l,r);return; &#125; inline void updata(int x,int l,int r,int pos)&#123; if(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;return;&#125; if(pos&lt;=mid)updata(x&lt;&lt;1,l,mid,pos); else if(pos&gt;mid)updata(x&lt;&lt;1|1,mid+1,r,pos); pushup(x,l,r); &#125;&#125;T;int main()&#123; IN(n),IN(m),IN(p); for(int i=1;i&lt;=n;++i)IN(a[i]),a[i+n]=a[i]; for(int i=1;i&lt;=(n&lt;&lt;1);++i)a[i]-=i; T.build(1,1,(n&lt;&lt;1)); lastans=T.ans[1]+n-1,printf("%d\n",lastans); for(int i=1;i&lt;=m;++i)&#123; int x,y;IN(x),IN(y); if(p)x^=lastans,y^=lastans; a[x]=y-x,a[x+n]=y-x-n; T.updata(1,1,(n&lt;&lt;1),x),T.updata(1,1,(n&lt;&lt;1),x+n); printf("%d\n",lastans=T.ans[1]+n-1); &#125; return 0;&#125; ‰ΩÜÊòØËøô‰ªΩ‰ª£Á†ÅÊòØ TLE ÁöÑ„ÄÇ ËøôÁé©ÊÑèÂùë‰∫ÜÊàëÂ•Ω‰πÖÔºå‰Ω†Áü•ÈÅì‰∏∫‰ªÄ‰πà TLE ÂêóÔºü Â∞±ÊòØËøô‰∏™È¨º‰∏úË•øÔºÅÔºö 12#define min(x,y) ((x)&lt;(y)?(x):(y))#define max(x,y) ((x)&gt;(y)?(x):(y)) ËøôÈáåÁöÑ $x$ Âíå $y$ ÊòØË∞ÉÁî®‰∫Ü‰∏§Ê¨°ÁöÑÔºåÁÑ∂ÂêéÊàë‰ª¨ÂèëÁé∞ $calc$ ÂáΩÊï∞‚Ä¶‚Ä¶ 12345int calc(int x,int l,int r,int Mx)&#123; if(l==r)return l+max(val[x],Mx); if(val[x&lt;&lt;1|1]&gt;=Mx)return min(calc(x&lt;&lt;1|1,mid+1,r,Mx),ans[x]); else return min(calc(x&lt;&lt;1,l,mid,Mx),mid+1+Mx);&#125; $min$ ÈáåÈù¢Êúâ $calc$ ÂáΩÊï∞‚Ä¶‚Ä¶‚Ä¶..ÁÑ∂Âêé $calc$ ÂáΩÊï∞Ë∞ÉÁî®‰∫Ü‰∏§Ê¨°‚Ä¶‚Ä¶‚Ä¶.ÁÑ∂Âêé‚Ä¶‚Ä¶‚Ä¶..ÁàÜÁÇ∏ÔºÅ ÊâÄ‰ª• $Qiuly$ ÊèêÈÜíÊÇ®Ôºö‰ª£Á†ÅÂçÉ‰∏áÊù°ÔºåÊó∂Èó¥Á¨¨‰∏ÄÊù°Ôºå$define$ ‰∏çËßÑËåÉÔºå$OIer$ ‰∏§Ë°åÊ≥™ „ÄÇ ËøòÊòØË∑üÁùÄ $std$ Ëµ∞Â•ΩÂòøÂòøÂòøÔºå$using\ namespace\ std$ ‰∏áÂ≤ÅÔºÅ ÊúÄÁªà $AC$ ÁöÑ‰ª£Á†Å„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;typedef long long ll;const int N=4e5+2;const int inf=1e9+9;int n,m,p,lastans,a[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct Seg_Tree&#123; #define mid ((l+r)&gt;&gt;1) int ans[N&lt;&lt;2],val[N&lt;&lt;2]; int calc(int x,int l,int r,int Mx)&#123; if(l==r)return l+max(val[x],Mx); if(val[x&lt;&lt;1|1]&gt;=Mx)return min(calc(x&lt;&lt;1|1,mid+1,r,Mx),ans[x]); else return min(calc(x&lt;&lt;1,l,mid,Mx),mid+1+Mx); &#125; inline void pushup(int x,int l,int r)&#123; val[x]=max(val[x&lt;&lt;1],val[x&lt;&lt;1|1]); ans[x]=calc(x&lt;&lt;1,l,mid,val[x&lt;&lt;1|1]); &#125; inline void build(int x,int l,int r)&#123; if(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;return;&#125; build(x&lt;&lt;1,l,mid),build(x&lt;&lt;1|1,mid+1,r); pushup(x,l,r);return; &#125; inline void updata(int x,int l,int r,int pos)&#123; if(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;return;&#125; if(pos&lt;=mid)updata(x&lt;&lt;1,l,mid,pos); else if(pos&gt;mid)updata(x&lt;&lt;1|1,mid+1,r,pos); pushup(x,l,r); &#125;&#125;T;int main()&#123; IN(n),IN(m),IN(p); for(int i=1;i&lt;=n;++i)IN(a[i]),a[i+n]=a[i]; for(int i=1;i&lt;=(n&lt;&lt;1);++i)a[i]-=i; T.build(1,1,(n&lt;&lt;1)); lastans=T.ans[1]+n-1,printf("%d\n",lastans); for(int i=1;i&lt;=m;++i)&#123; int x,y;IN(x),IN(y); if(p)x^=lastans,y^=lastans; a[x]=y-x,a[x+n]=y-x-n; T.updata(1,1,(n&lt;&lt;1),x),T.updata(1,1,(n&lt;&lt;1),x+n); printf("%d\n",lastans=T.ans[1]+n-1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Á∫øÊÆµÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [AH2017/HNOI2017]ÂΩ±È≠î Á∫øÊÆµÊ†ë luoguP3722/bzoj4826]]></title>
    <url>%2F2019%2F03%2F15%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4826%2F</url>
    <content type="text"><![CDATA[ÁúüÂøÉÂ∑ßÂ¶ôÔºå‰∏çÁúãÈ¢òËß£ÂáÜÂÅö‰∏çÂá∫(‰πãÂâçÈ¢òËß£ÈÉΩÁúã‰∏çÊáÇQwQ) ËøôÈÅìÈ¢òË≤å‰ººÊúâËÆ∏Â§öÁöÑÂÅöÊ≥ïÔºåÈÉΩ‰∏çË¥πÔºå‰∏ªÂ∏≠Ê†ëÁöÑËØù‰∏çÁü•ÈÅìÊÄé‰πàÊêûÔºå‰∫éÊòØÂª∫‰∫Ü $3$ Ê£µÁ∫øÊÆµÊ†ëÔºåÂÆûÊµãÊòØ‰∏ç‰ºöÁÇ∏ÁöÑ„ÄÇ 30ÂàÜÂÅöÊ≥ïÔºö Â∞èÂ≠¶ÁîüÈÉΩËÉΩËΩªÊòìÊÉ≥Âá∫Êù•ÁöÑËß£Ê≥ïÔºåÂØπ‰∫é‰∏Ä‰∏™ËØ¢ÈóÆÁöÑÂå∫Èó¥ÔºåÊö¥ÂäõÊûö‰∏æÂÖ∂Â≠êÂå∫Èó¥ÔºåÁÑ∂ÂêéÊåâÁÖßÈ¢òÈù¢ÁöÑË¶ÅÊ±ÇÁÆóË¥°ÁåÆÔºåÂå∫Èó¥ÊúÄÂ§ßÂÄºÂèØ‰ª•Áî® $ST$ Ë°®È¢ÑÂ§ÑÁêÜÔºåÂ§çÊùÇÂ∫¶ÁàÜÁÇ∏Ôºå‰ΩÜÊòØ‰ªçÁÑ∂ÂèØ‰ª•ÊãøÂà∞ $30$ Êö¥ÂäõÂàÜ„ÄÇ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e5+2;const int LogN=23;const int inf=1e9+9; int v[N],n,m,p1,p2;struct ST&#123; int logs[N],f[N][LogN+2]; inline void make()&#123; logs[0]=-1; for(int i=1;i&lt;=n;++i) f[i][0]=v[i],logs[i]=logs[i&gt;&gt;1]+1; for(int j=1;j&lt;=LogN;++j) for(int i=1;i+(1&lt;&lt;j)-1&lt;=n;++i) f[i][j]=max(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]); &#125; inline int query(int x,int y)&#123; int ans=logs[y-x+1]; return max(f[x][ans],f[y-(1&lt;&lt;ans)+1][ans]); &#125;&#125;T;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; int main()&#123; IN(n),IN(m),IN(p1),IN(p2); for(int i=1;i&lt;=n;++i)IN(v[i]); T.make(); for(int i=1;i&lt;=m;++i)&#123; int l,r,ans=0; IN(l),IN(r); for(int a=l;a&lt;=r;++a) for(int b=a+2;b&lt;=r;++b)&#123; int sum=T.query(a+1,b-1); if(v[a]&gt;=sum&amp;&amp;v[b]&gt;=sum)ans+=p1; if((v[a]&lt;sum&amp;&amp;sum&lt;v[b])||(v[b]&lt;sum&amp;&amp;sum&lt;v[a]))ans+=p2; &#125; printf("%d\n",ans+(r-l)*p1); &#125; return 0;&#125; 100ÂàÜÂÅöÊ≥ï ÂØπ‰∫é‰∏Ä‰∏™ÁÇπ $i$ ÔºåÊàë‰ª¨ËÆæ $lmax[i]$ ‰∏∫ $i$ ÂêëÂ∑¶Ëµ∞ÈÅáÂà∞ÁöÑÁ¨¨‰∏Ä‰∏™Â§ß‰∫éËá™Â∑±ÁöÑÊï∞(Ê≤°ÊúâÁöÑËØù‰∏∫ $0$) ÔºåÂêåÊ†∑ÁöÑÔºåËÆæ $rmax[i]$ ‰∏∫ $i$ ÂêëÂè≥Ëµ∞ÈÅáÂà∞ÁöÑÁ¨¨‰∏Ä‰∏™Â§ß‰∫éËá™Â∑±ÁöÑÊï∞(Ê≤°ÊúâÁöÑËØù‰∏∫ $n+1$) „ÄÇËøô‰∏§‰∏™Êï∞ÁªÑÊØîËæÉÂÆπÊòìÊ±ÇÂá∫ÔºåÊêû‰∏™ÂçïË∞ÉÊ†àÊ±ÇÂ∞±Â•Ω„ÄÇ 12345678910top=0,stack[0]=0;for(int i=1;i&lt;=n;++i)&#123; while(top&amp;&amp;k[stack[top]]&lt;k[i])--top; lmax[i]=stack[top],stack[++top]=i;&#125;top=0,stack[0]=n+1;for(int i=n;i&gt;=1;--i)&#123; while(top&amp;&amp;k[stack[top]]&lt;k[i])--top; rmax[i]=stack[top],stack[++top]=i;&#125; ÁÑ∂ÂêéÂèØ‰ª•ÂèëÁé∞ÔºåÂ¶ÇÊûúÊûö‰∏æÁÇπ $i$ ÁöÑËØùÔºåÊúâ‰∫Ü‰∏äÈù¢ÁöÑ‰∏§‰∏™Êï∞ÁªÑÂêéÊúâÂÖ≥ $i$ ÁöÑË¥°ÁåÆÂ∞±Â•ΩÊ±Ç‰∫õ‰∫ÜÔºåÈ¶ñÂÖàÊàë‰ª¨ÂèØ‰ª•Áü•ÈÅì $i$ ÊòØÂå∫Èó¥ $[lmax[i]+1,rmax[i]-1]$ ÁöÑÊúÄÂ§ßÂÄºÔºåÈÇ£‰πàÂØπ‰∫éÊØèÁßçË¥°ÁåÆÔºö Â¶ÇÊûú $lmax[i]$ Âíå $rmax[i]$ ÈÉΩÂú®ÂΩìÂâçËØ¢ÈóÆÂå∫Èó¥ÂÜÖÔºåÈÇ£‰πàÂ∞±ÂèØ‰ª•ÂÅöÂá∫ $p_1$ ÁöÑË¥°ÁåÆ„ÄÇ Â¶ÇÊûú $lmax[i]$ Âú®ÂΩìÂâçËØ¢ÈóÆÂå∫Èó¥‰∏≠ÔºåÈÇ£‰πàÊòæÁÑ∂ $lmax[i]$ ‰∏∫Âå∫Èó¥ $[lmax[i],rmax[i]-1]$ ÁöÑÊúÄÂ§ßÂÄºÔºåËøô‰∏™Êó∂ÂÄôÂè≥Á´ØÁÇπÂ¶ÇÊûúÂú® $[i+1,rmax[i]-1]$ Âå∫Èó¥‰∏≠ÔºåÈÇ£‰πàÂèØ‰ª•‰øùËØÅÂè≥Á´ØÁÇπ‰∏çÊòØ $[lmax[i],rmax[i]-1]$ ÁöÑÊ¨°Â§ßÂÄºÔºåËøô‰∏™Êó∂ÂÄôÂèØ‰ª•‰∫ßÁîüÂ§ö‰∏™ $p_2$ ÁöÑË¥°ÁåÆ„ÄÇ Â¶ÇÊûú $rmax[i]$ Âú®ÂΩìÂâçËØ¢ÈóÆÂå∫Èó¥‰∏≠ÔºåÈÇ£‰πàÊòæÁÑ∂ÂΩìÂ∑¶Á´ØÁÇπ‰∏∫ $[lmax[i]+1,i-1]$ ÁöÑÊó∂ÂÄôËØ•Â≠êÂå∫Èó¥ÂùáËÉΩ‰∫ßÁîü $p_2$ ÁöÑË¥°ÁåÆÔºåÂéüÂõ†Ë∑ü‰∏äÈù¢‰∏ÄÊ†∑ÁöÑ„ÄÇ ‰ΩÜÊòØËøôÊ†∑ÁöÑËØùÂ§çÊùÇÂ∫¶‰æùÊóßÊòØ $O(n^2)$ ÁöÑÔºåÊâÄ‰ª•ËøòË¶Å‰ºòÂåñ„ÄÇ ËÄÉËôëÁî®Á∫øÊÆµÊ†ëÁª¥Êä§ÔºåÊàë‰ª¨Á¶ªÁ∫øÂ§ÑÁêÜËØ¢ÈóÆÔºåÊääÊØè‰∏™ËØ¢ÈóÆÊåâÂ∑¶Á´ØÁÇπÊéí‰∏™Â∫èÔºåÁÑ∂ÂêéÂèçÁùÄÊâ´‰∏ÄÈÅçÔºåÂ¶ÇÊûúÈÅáÂà∞‰∫Ü‰∏Ä‰∏™ÁÇπ $x$ ÔºåÂÆÉÊòØ Êüê‰∏™ÁÇπ/Êüê‰∫õÁÇπ ÁöÑ $lmax$ ÔºåÂÅáËÆæ $x$ ÊòØ $i$ ÁöÑ $lmax$ ÔºåÈÇ£‰πàÊàë‰ª¨‰æùÊ¨°Âú®Á¨¨‰∏ÄÈ¢óÁ∫øÊÆµÊ†ë‰∏≠ÂÆûÁé∞Âå∫Èó¥Âä†ÔºöÂ∞Ü $[i+1,rmax[i]-1]$ Âå∫Èó¥Ê≠£È¢òÂä†‰∏ä $p_2$ ÔºåÂõ†‰∏∫ÂΩìÂâçÁöÑÂ∑¶Á´ØÁÇπ‰∏∫ $x$ ÔºåËøô‰∏™Êó∂ÂÄôÊàë‰ª¨Â∞ÜË¶ÅËÆ°ÁÆóÁöÑÊòØÊâÄÊúâÁöÑÂ∑¶Á´ØÁÇπ‰∏∫ $x$ ÁöÑÂå∫Èó¥ÂØπÁ≠îÊ°àÁöÑË¥°ÁåÆÔºåÂõ†‰∏∫ÂØπ‰∫é $i$ Êù•ËØ¥Âè≥Á´ØÁÇπÁöÑËåÉÂõ¥Â∞±ÊòØ $[i+1,rmax[i]-1]$ÔºåËøô‰∫õÂå∫Èó¥ÂùáÂèØ‰ª•ÂÅöÂá∫Ë¥°ÁåÆÔºå‰∫éÊòØÈÉΩÂú®Á∫øÊÆµÊ†ë‰∏≠Âä†‰∏ä„ÄÇÂΩìÁÑ∂Âú®ÂÅöË¥°ÁåÆÁöÑ‰πãÂâç‰∏çË¶ÅÂøòËÆ∞Âà§Êñ≠ $i+1&lt;rmax[i]$ ÔºåÂ¶ÇÊûú‰∏çÊª°Ë∂≥ÁöÑËØùÂ∞±Ê≤°ÊúâÂè≥Á´ØÁÇπ‰∫Ü‚Ä¶‚Ä¶ ÈÇ£‰πàÊé•‰∏ãÊù•ËÆ®ËÆ∫ÊÄé‰πàËÆ°ÁÆó $p_1$ ÁöÑË¥°ÁåÆÔºåÂØπ‰∫éËØ¢ÈóÆÂå∫Èó¥Êù•ËØ¥ÔºåÁé∞Âú®Êàë‰ª¨Á°ÆÂÆö‰∫ÜÂ∑¶Á´ØÁÇπ‰∏∫ $x$ ÔºåËøô‰∏™Êó∂ÂÄôÂΩìÂè≥Á´ØÁÇπËêΩÂú® $[rmax[i],n+1]$ ÁöÑÊó∂ÂÄôËØ¢ÈóÆÂå∫Èó¥ÈÉΩÂèØ‰ª•ÁÆó‰∏ä $[lmax[i],rmax[i]]$ Âå∫Èó¥ÁöÑË¥°ÁåÆÔºå‰πüÂ∞±ÊòØ $p_1$ ÁöÑË¥°ÁåÆÔºå‰∫éÊòØÊàë‰ª¨ÂèØ‰ª•Âú®Âè¶‰∏Ä‰∏™Á∫øÊÆµÊ†ë‰∏≠Â∞Ü $[rmax[i],n+1]$ ÂÖ®ÈÉΩÂä†‰∏ä $p_1$ Âç≥ÂèØ„ÄÇ ÊåâÁÖß‰∏äÈù¢ÁöÑÊñπÊ≥ïÔºåÂÜçÊ≠£ÁùÄÊâ´‰∏ÄÈÅçËÆ°ÁÆó $rmax$ ÁöÑÊÉÖÂÜµÂ∞±Â•ΩÔºåÂΩìÁÑ∂ÂèçÁùÄÊâ´ÁöÑÊó∂ÂÄôÂ∞±‰∏çË¶ÅÁÆó $p_1$ ÁöÑË¥°ÁåÆ‰∫ÜÔºå‰∏çÁÑ∂Â∞±‰ºöÈáçÂ§ç‰∫ÜÔºåÊÉ≥ÊÉ≥Â∞±ÂèØ‰ª•ÊòéÁôΩ„ÄÇÊúÄÂêéÂ∞±ÊòØ‰∏ÄÂÆöË¶ÅÂºÄ $longlong$ „ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define swap(x,y) ((x)^=(y)^=(x)^=(y))typedef long long ll;const int N=2e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; struct Seg_Tree&#123;//Á∫øÊÆµÊ†ëÊùøÂ≠ê #define mid ((l+r)&gt;&gt;1) ll v[N&lt;&lt;2];int tag[N&lt;&lt;2]; inline void pushdown(int x,int l,int r)&#123; if(tag[x])&#123; tag[x&lt;&lt;1]+=tag[x],tag[x&lt;&lt;1|1]+=tag[x]; v[x&lt;&lt;1]+=tag[x]*(mid-l+1),v[x&lt;&lt;1|1]+=tag[x]*(r-mid); &#125;tag[x]=0;return; &#125; inline void updata(int x,int l,int r,int L,int R)&#123; if(L&lt;=l&amp;&amp;r&lt;=R)&#123;v[x]+=r-l+1,++tag[x];return;&#125; pushdown(x,l,r); if(L&lt;=mid)updata(x&lt;&lt;1,l,mid,L,R); if(R&gt;mid)updata(x&lt;&lt;1|1,mid+1,r,L,R); v[x]=v[x&lt;&lt;1]+v[x&lt;&lt;1|1]; &#125; inline ll query(int x,int l,int r,int L,int R)&#123; if(L&lt;=l&amp;&amp;r&lt;=R)return v[x]; pushdown(x,l,r); ll ans=0; if(L&lt;=mid)ans+=query(x&lt;&lt;1,l,mid,L,R); if(R&gt;mid)ans+=query(x&lt;&lt;1|1,mid+1,r,L,R); return ans; &#125;&#125;st1,st2,st3;//‰∏âÊ£µÁ∫øÊÆµÊ†ë[ÊªëÁ®Ω]int n,m,k[N];ll p1,p2;struct Query&#123;int l,r;ll ans;&#125;q[N];int lmax[N],rmax[N],stack[N],top;std::vector&lt;int&gt; li[N],ri[N],lq[N],rq[N];inline void _Pre_lmax_rmax()&#123; top=0,stack[0]=0; for(int i=1;i&lt;=n;++i)&#123; while(top&amp;&amp;k[stack[top]]&lt;k[i])--top; lmax[i]=stack[top],li[stack[top]].push_back(i);//ÁªüËÆ°‰∏äÊñá‰∏≠ÁöÑx stack[++top]=i; &#125; top=0,stack[0]=n+1; for(int i=n;i&gt;=1;--i)&#123; while(top&amp;&amp;k[stack[top]]&lt;k[i])--top; rmax[i]=stack[top],ri[stack[top]].push_back(i); stack[++top]=i; &#125;&#125;int main()&#123; //freopen("code.in","r",stdin); IN(n),IN(m),IN(p1),IN(p2); for(int i=1;i&lt;=n;++i)IN(k[i]); _Pre_lmax_rmax(); for(int i=1;i&lt;=m;++i)&#123; IN(q[i].l),lq[q[i].l].push_back(i); IN(q[i].r),rq[q[i].r].push_back(i); &#125; for(int i=n;i&gt;=1;--i)&#123; for(int j=0;j&lt;li[i].size();++j)&#123;//ËÆ°ÁÆóÂ∑¶Á´ØÁÇπÂú®iÁöÑÂå∫Èó¥ÁöÑË¥°ÁåÆ if(li[i][j]+1&lt;rmax[li[i][j]]) st1.updata(1,0,n+1,li[i][j]+1,rmax[li[i][j]]-1); st3.updata(1,0,n+1,rmax[li[i][j]],n+1); &#125; for(int j=0;j&lt;lq[i].size();++j)&#123;//ÁªüËÆ°Â∑¶Á´ØÁÇπÂú®iÁöÑËØ¢ÈóÆÂå∫Èó¥ÁöÑÁ≠îÊ°à q[lq[i][j]].ans+=st1.query(1,0,n+1,i,q[lq[i][j]].r)*p2; q[lq[i][j]].ans+=st3.query(1,0,n+1,q[lq[i][j]].r,q[lq[i][j]].r)*p1; &#125; &#125; for(int i=1;i&lt;=n;++i)&#123; for(int j=0;j&lt;ri[i].size();++j) if(ri[i][j]-1&gt;lmax[ri[i][j]]) st2.updata(1,0,n+1,lmax[ri[i][j]]+1,ri[i][j]-1); for(int j=0;j&lt;rq[i].size();++j) q[rq[i][j]].ans+=st2.query(1,0,n+1,q[rq[i][j]].l,i)*p2; &#125; for(int i=1;i&lt;=m;++i)//ËæìÂá∫Á≠îÊ°àÔºå‰∏çË¶ÅÂøò‰∫ÜÊºèÁªüËÆ°ÁöÑÈïøÂ∫¶‰∏∫2ÁöÑÂå∫Èó¥ printf("%lld\n",q[i].ans+1ll*(q[i].r-q[i].l)*p1); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Á∫øÊÆµÊ†ë</tag>
        <tag>‰∏ªÂ∏≠Ê†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [AH2017/HNOI2017]ÂçïÊóã Á∫øÊÆµÊ†ë luoguP3721/bzoj4825]]></title>
    <url>%2F2019%2F03%2F15%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4825%2F</url>
    <content type="text"><![CDATA[$Spaly‚Äã$ ÊòØ‰∏ç‰ºöÁî®ÁöÑÔºåËøôËæàÂ≠ê‰πü‰∏ç‰ºöÁî®ÁöÑ„ÄÇ ËøôÈÅìÈ¢òÂΩìÁÑ∂ÂèØ‰ª•Áî® $Splay‚Äã$ ÂÅöÔºåÁÑ∂ËÄå‰∏ç‰ºö„ÄÇ ‰∫éÊòØËÄÉËôëÊÄé‰πàÊù•ÂÅöËøôÈÅìÈ¢òÔºåÊàë‰ª¨ÂÖàÊù•ËßÇÂØü‰∏Ä‰∏ãÊâÄÊúâÁöÑÊìç‰ΩúÔºö 1.ÊèíÂÖ•Êìç‰ΩúÔºöÂæàÊôÆÈÄöÁöÑÊèíÂÖ•Êìç‰Ωú‚Ä¶‚Ä¶2.ÂçïÊóãÊúÄÂ∞èÂÄºÔºö ÁªìÁÇπÁöÑÊ∑±Â∫¶ÁöÑÂèòÂåñÂ¶Ç‰∏ãÔºö ÈúÄË¶ÅÊóãËΩ¨ÁöÑÁªìÁÇπ $(4)$ ÔºöÂèò‰∏∫ $root$ ÔºåÊ∑±Â∫¶Âèò‰∏∫ $1$ „ÄÇ ÈúÄË¶ÅÊóãËΩ¨ÁöÑÁªìÁÇπÁöÑÂ≠êÊ†ë $(7)$ ÔºöÊ∑±Â∫¶‰∏çÂèò„ÄÇ ÂÖ∂‰ªñÁªìÁÇπ $(1,2,3,5,6)$ ÔºöÊ∑±Â∫¶Âä† $1$ „ÄÇ 3.ÂçïÊóãÊúÄÂ§ßÂÄºÔºöÂèòÂåñÂíå‰∏äÈù¢ÁöÑ ‚ÄúÂçïÊóãÊúÄÂ∞èÂÄº‚Äù ‰∏ÄÊ†∑„ÄÇ 4.5 Âà†Èô§ÊúÄÂ§ß/ÊúÄÂ∞èÂÄºÂÖàÂ∞ÜÈúÄË¶ÅÂà†Èô§ÁöÑ ÊúÄÂ§ß/ÊúÄÂ∞èÂÄº ËΩ¨Âà∞Ê†ëÊ†πÔºåËøô‰∏™Êó∂ÂÄôÊàë‰ª¨Â∞ÜÊ†ëÊ†πÂà†ÊéâÔºåÂèØ‰ª•ÂèëÁé∞Êï¥Ê£µÊ†ëÁöÑÊ∑±Â∫¶ÂÖ®ÈÉ®ÈÉΩÂáè‰∫Ü $1$ Ôºå‰∏ÄËµ∑ËÆ°ÁÆó‰∏äÊóãËΩ¨ÈÄ†ÊàêÁöÑÊ∑±Â∫¶ÁöÑÂΩ±Âìç‰ºöÂæóÂà∞Ôºö Âà†ÊéâÁöÑÁªìÁÇπÁöÑÂ≠êÊ†ë $(7)$ ÔºöÊ∑±Â∫¶Âáè $1$ ÂÖ∂‰ªñËäÇÁÇπ $(1,2,3,5,6)$ ÔºöÊ∑±Â∫¶‰∏çÂèò ÂèëÁé∞Ê∑±Â∫¶ÁöÑÂèòÂåñ‰πü‰∏çÊòØÂæàÂ§ßÔºå‰∫éÊòØÊàë‰ª¨ËÄÉËôëÁî®Á∫øÊÆµÊ†ëÁª¥Êä§ÊØè‰∏Ä‰∏™ËäÇÁÇπÁöÑÊ∑±Â∫¶„ÄÇÁ∫øÊÆµÊ†ë‰∏çÊòìÂØªÊâæÊúÄÂ§ß/ÊúÄÂ∞èÂÄºÔºåËøô‰∏™Âú∞ÊñπÊàë‰ª¨Áî® $set$ Êù•ËæÖÂä©Âç≥ÂèØÔºåÊìç‰ΩúÁöÑÊó∂ÂÄôÊõ¥Êñ∞‰∏Ä‰∏ã $set$ ‰∏≠Ê†ëÁöÑÂΩ¢ÊÄÅÂ∞±Â•Ω„ÄÇ Á∫øÊÆµÊ†ëÁöÑË¶ÅÊ±ÇÂæà‰ΩéÔºå‰∏Ä‰∏™ÂæàÊôÆÈÄöÁöÑÂÖπÁ£ÅÂå∫Èó¥‰øÆÊîπÁöÑÁ∫øÊÆµÊ†ëÂç≥ÂèØÔºö 123456789101112131415161718192021222324252627struct Segment_Tree&#123; #define mid ((l+r)&gt;&gt;1) int dep[N&lt;&lt;2]; inline void pushdown(int x,int l,int r)&#123; if(dep[x])&#123; dep[x&lt;&lt;1]+=dep[x],dep[x&lt;&lt;1|1]+=dep[x],dep[x]=0; &#125;return; &#125; void add(int x,int l,int r,int L,int R,int res)&#123; if(L&lt;=l&amp;&amp;r&lt;=R)&#123;dep[x]+=res;return;&#125; pushdown(x,l,r); if(L&lt;=mid)add(x&lt;&lt;1,l,mid,L,R,res); if(R&gt;mid)add(x&lt;&lt;1|1,mid+1,r,L,R,res); &#125; void change(int x,int l,int r,int pos,int res)&#123; if(l==r)&#123;dep[x]=res;return;&#125; pushdown(x,l,r); if(pos&lt;=mid)change(x&lt;&lt;1,l,mid,pos,res); else change(x&lt;&lt;1|1,mid+1,r,pos,res); &#125; int query(int x,int l,int r,int pos)&#123; if(l==r)return dep[x]; pushdown(x,l,r); if(pos&lt;=mid)return query(x&lt;&lt;1,l,mid,pos); else return query(x&lt;&lt;1|1,mid+1,r,pos); &#125;&#125;T; 1.ÊèíÂÖ•Êìç‰ΩúÁöÑÂÆûÁé∞Ôºö12345678910111213141516std::set&lt;int&gt; Spaly;inline int Insert(int x)&#123; std::set&lt;int&gt;::iterator it=Spaly.insert(x).first; if(!root)&#123;//ËøòÊ≤°ÊúâÊ†ëÊ†π T.change(1,1,tmp,x,1);//‰øÆÊîπxÁöÑÊ∑±Â∫¶ root=x;return 1;//Ê∑±Â∫¶‰∏∫1 &#125; if(it!=Spaly.begin())&#123;//‰∏çÊòØÊúÄÂ∞èÂÄºÔºåÊâÄ‰ª•ÂèØËÉΩÊàê‰∏∫ÂÖ∂‰ªñÁªìÁÇπÁöÑÂè≥ÂÑøÂ≠ê if(!ch[*--it][1])ch[fa[x]=*it][1]=x;//Êàê‰∏∫Âè≥ÂÑøÂ≠ê *it++;//Áª¥ÊåÅit‰∏çÂèò &#125; if(!fa[x])ch[fa[x]=*++it][0]=x;//Êàê‰∏∫Âè≥ÂÑøÂ≠êÂ§±Ë¥•Ôºå‰∫éÊòØÊàê‰∏∫Â∑¶ÂÑøÂ≠ê int dep_x=T.query(1,1,tmp,fa[x])+1;//xÁöÑÊ∑±Â∫¶Â∞±ÊòØÂÆÉÁà∂ËäÇÁÇπÁöÑÊ∑±Â∫¶Âä†1 T.change(1,1,tmp,x,dep_x);//Âú®Á∫øÊÆµÊ†ë‰∏≠‰øÆÊîπxÁöÑÊ∑±Â∫¶ return dep_x;//È¢òÁõÆË¶ÅÊ±Ç&#125; 2.ÂçïÊóãÊúÄÂ∞è/ÊúÄÂ§ßÂÄºÁöÑÂÆûÁé∞Ôºö1234567891011121314151617181920inline int Rotate_min()&#123; int x=*Spaly.begin(),ans=T.query(1,1,tmp,x);//Ëé∑ÂèñÂΩìÂâçÁöÑÊúÄÂ∞èÂÄºÂíåÈúÄË¶ÅËøîÂõûÁöÑÁ≠îÊ°à if(x==root)return 1;//ÊòØÊ†πÂ∞±Áõ¥Êé•ËøîÂõû if(x+1&lt;fa[x])T.add(1,1,tmp,x+1,fa[x]-1,-1);//xÊúâÂ≠êÊ†ëÔºåÂÖàÁªôxÁöÑÂ≠êÊ†ëÁöÑÊ∑±Â∫¶Êï¥‰ΩìÂáè1 T.add(1,1,tmp,1,tmp,1);//Êï¥Ê£µÊ†ëÊ∑±Â∫¶Âä†1ÔºåËøô‰∏™Êó∂ÂÄôxÁöÑÂ≠êÊ†ëÊ∑±Â∫¶‰∏çÂèò‰∫Ü ch[fa[x]][0]=ch[x][1],fa[ch[x][1]]=fa[x];//Â∞ÜxÁöÑÂ≠êÊ†ëÊé•Âà∞xÁöÑÁà∂‰∫≤‰∏ä ch[x][1]=root,fa[root]=x,root=x;//Êõ¥Êñ∞root T.change(1,1,tmp,x,1);//‰øÆÊîπxÁöÑÊ∑±Â∫¶ÔºåÂèò‰∏∫1 return ans;//È¢òÁõÆË¶ÅÊ±Ç&#125;inline int Rotate_max()&#123;//‰∏é‰∏äÈù¢ÁöÑRotate_minÊìç‰ΩúÂêåÁêÜ int x=*Spaly.rbegin(),ans=T.query(1,1,tmp,x); if(x==root)return 1; if(x-1&gt;fa[x])T.add(1,1,tmp,fa[x]+1,x-1,-1); T.add(1,1,tmp,1,tmp,1); ch[fa[x]][1]=ch[x][0],fa[ch[x][0]]=fa[x]; ch[x][0]=root,fa[root]=x,root=x; T.change(1,1,tmp,x,1); return ans;&#125; 3.Âà†Èô§ÊúÄÂ∞è/ÊúÄÂ§ßÂÄºÁöÑÂÆûÁé∞Ôºö12345678910inline void Delete_min()&#123; printf("%d\n",Rotate_min());//ÂÖàÊóã‰∏äÊù•ÔºåÊåâÁÖßÈ¢òÁõÆË¶ÅÊ±ÇËæìÂá∫ T.add(1,1,tmp,1,tmp,-1);//Êï¥Ê£µÊ†ëÁöÑÊ∑±Â∫¶ÂèëÁîüÂèòÂåñ Spaly.erase(root),root=ch[root][1],fa[root]=0;//Êõ¥Êñ∞root&#125;inline void Delete_max()&#123;//‰∏é‰∏äÈù¢ÁöÑDelete_minÊìç‰ΩúÂêåÁêÜ printf("%d\n",Rotate_max()); T.add(1,1,tmp,1,tmp,-1); Spaly.erase(root),root=ch[root][0],fa[root]=0;&#125; Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;set&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;const int N=1e5+2;const int inf=1e9+9;int m,tmp,v[N],a[N],op[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct Segment_Tree&#123; #define mid ((l+r)&gt;&gt;1) int dep[N&lt;&lt;2]; inline void pushdown(int x,int l,int r)&#123; if(dep[x])&#123; dep[x&lt;&lt;1]+=dep[x],dep[x&lt;&lt;1|1]+=dep[x],dep[x]=0; &#125;return; &#125; void add(int x,int l,int r,int L,int R,int res)&#123; if(L&lt;=l&amp;&amp;r&lt;=R)&#123;dep[x]+=res;return;&#125; pushdown(x,l,r); if(L&lt;=mid)add(x&lt;&lt;1,l,mid,L,R,res); if(R&gt;mid)add(x&lt;&lt;1|1,mid+1,r,L,R,res); &#125; void change(int x,int l,int r,int pos,int res)&#123; if(l==r)&#123;dep[x]=res;return;&#125; pushdown(x,l,r); if(pos&lt;=mid)change(x&lt;&lt;1,l,mid,pos,res); else change(x&lt;&lt;1|1,mid+1,r,pos,res); &#125; int query(int x,int l,int r,int pos)&#123; if(l==r)return dep[x]; pushdown(x,l,r); if(pos&lt;=mid)return query(x&lt;&lt;1,l,mid,pos); else return query(x&lt;&lt;1|1,mid+1,r,pos); &#125;&#125;T;struct Spaly_Tree&#123; std::set&lt;int&gt; Spaly; int root,fa[N],ch[N][2]; inline int Insert(int x)&#123; std::set&lt;int&gt;::iterator it=Spaly.insert(x).first; if(!root)&#123; T.change(1,1,tmp,x,1); root=x;return 1; &#125; if(it!=Spaly.begin())&#123; if(!ch[*--it][1])ch[fa[x]=*it][1]=x; *it++; &#125; if(!fa[x])ch[fa[x]=*++it][0]=x; int dep_x=T.query(1,1,tmp,fa[x])+1; T.change(1,1,tmp,x,dep_x); return dep_x; &#125; inline int Rotate_min()&#123; int x=*Spaly.begin(),ans=T.query(1,1,tmp,x); if(x==root)return 1; if(x+1&lt;fa[x])T.add(1,1,tmp,x+1,fa[x]-1,-1); T.add(1,1,tmp,1,tmp,1); ch[fa[x]][0]=ch[x][1],fa[ch[x][1]]=fa[x]; ch[x][1]=root,fa[root]=x,root=x; T.change(1,1,tmp,x,1); return ans; &#125; inline int Rotate_max()&#123; int x=*Spaly.rbegin(),ans=T.query(1,1,tmp,x); if(x==root)return 1; if(x-1&gt;fa[x])T.add(1,1,tmp,fa[x]+1,x-1,-1); T.add(1,1,tmp,1,tmp,1); ch[fa[x]][1]=ch[x][0],fa[ch[x][0]]=fa[x]; ch[x][0]=root,fa[root]=x,root=x; T.change(1,1,tmp,x,1); return ans; &#125; inline void Delete_min()&#123; printf("%d\n",Rotate_min()); T.add(1,1,tmp,1,tmp,-1); Spaly.erase(root),root=ch[root][1],fa[root]=0; &#125; inline void Delete_max()&#123; printf("%d\n",Rotate_max()); T.add(1,1,tmp,1,tmp,-1); Spaly.erase(root),root=ch[root][0],fa[root]=0; &#125;&#125;S;int main()&#123; IN(m); for(int i=1,x;i&lt;=m;++i)&#123; IN(op[i]); if(op[i]==1)IN(x),v[++tmp]=a[i]=x; &#125; std::sort(v+1,v+1+tmp); for(int i=1;i&lt;=m;++i) if(op[i]==1)a[i]=std::lower_bound(v+1,v+1+tmp,a[i])-v; for(int i=1;i&lt;=m;++i)&#123; if(op[i]==1)printf("%d\n",S.Insert(a[i])); if(op[i]==2)printf("%d\n",S.Rotate_min()); if(op[i]==3)printf("%d\n",S.Rotate_max()); if(op[i]==4)S.Delete_min(); if(op[i]==5)S.Delete_max(); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Á∫øÊÆµÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [AH2017/HNOI2017]Á§ºÁâ© FFT luoguP3723/bzoj4827]]></title>
    <url>%2F2019%2F03%2F15%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4827%2F</url>
    <content type="text"><![CDATA[È¢òÁõÆËÉåÊôØÊúâ‰∫õ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶ÈÄöËøáÈ¢òÁõÆÊàë‰ª¨ÂèØ‰ª•Áü•ÈÅìÊúÄÁªàÊàë‰ª¨Ë¶ÅÊ±ÇÁöÑÂºèÂ≠êÂ∞±ÊòØÔºö \sum_{i=1}^{n}(a_i+c-b_i)^2‰∫éÊòØÊàë‰ª¨Â∞ÜÂºèÂ≠êÊãÜÂºÄÔºö (a_i+c-b_i)^2=a_i^2+b_i^2+c^2+2a_ic-2b_ic-2a_ib_i \sum_{i=1}^{n}(a_i+c-b_i)^2=\sum_{i=1}^{n}a_i^2+\sum_{i=1}^{n}b_i^2+nc^2+2c(\sum_{i=1}^{n}a_i-\sum_{i=1}^{n}b_i)-2\sum_{i=1}^{n}a_ib_i‚ÄãÂâçÈù¢ÁöÑËøô‰∫õÈÉΩÂæàÂÆπÊòìÊ±ÇÂá∫Ôºå‰ΩÜÊòØÊúÄÂêéÁöÑ $\sum_{i=1}^{n}a_ib_i‚Äã$ Êó†Ê≥ïÂæàÂø´ÁÆóÂá∫ÔºåÊàë‰ª¨ÁÆóÁ≠îÊ°àÁöÑÊó∂ÂÄôÊûö‰∏æ $c‚Äã$ ‰ª•ÂèäÊâãÁéØÊóãËΩ¨‰∫ÜÂ§öÂ∞ëÔºåËøô‰∏™Êó∂ÂÄôÂ¶ÇÊûúÂú®ÈáåÈù¢Áõ¥Êé•Â§ßÂäõËÆ°ÁÆó $\sum_{i=1}^{n}a_ib_i‚Äã$ ÂèØ‰ª•ÊãøÂà∞ $30‚Äã$ ÂàÜ„ÄÇÂ¶ÇÊûúÂ∞ÜËøô‰∏™ÂºèÂ≠êÂú®‰πãÂâçÊãøÂá∫Êù•È¢ÑÂ§ÑÁêÜ‰∏Ä‰∏ãÔºåÂ∞Ü‰ºöÊãøÂà∞ $70‚Äã$ ÂàÜ„ÄÇ Ëøô‰∏™Êó∂ÂÄôÂ∞Ü $a_i$ ÂèçÂêëÔºåÂºèÂ≠êÂèò‰∏∫Ôºö$\sum_{i=1}^{n}a_{n-i+1}b_i$ ÔºåÂèØ‰ª•ÂèëÁé∞ËøôÊòØ‰∏Ä‰∏™Âç∑ÁßØÔºåÊòØÂèØ‰ª•Áî® $FFT$ Ë∑ëÁöÑÔºå‰ºóÊâÄÂë®Áü• $FFT$ ÁöÑÂ§çÊùÇÂ∫¶ÊòØ $O(nlogn)$ ÔºåÊòØËÉΩË∑ëËøáÁöÑ„ÄÇ ÂÖ∑‰ΩìÂÆûÁé∞ÁöÑÊó∂ÂÄôÊàë‰ª¨ÈúÄË¶ÅÂ∞Ü $a‚Äã$ ÊãâÊàê‰∏§ÂÄçÈïøÔºåÊàñËÄÖËØ¥ÊòØÊñ≠ÁéØ‰∏∫ÈìæÔºüËá≥‰∫é‰∏∫‰ªÄ‰πàÁöÑËØùÔºåÊòØÂõ†‰∏∫È¢òÁõÆË¶ÅÊ±Ç‰∫ÜËøô‰∏™Êï∞ÂàóÊòØÂèØ‰ª•ÊóãËΩ¨ÁöÑ„ÄÇÁÑ∂ÂêéÊåâÁÖß‰∏äÂºèÂ∞Ü $b‚Äã$ ÂèçÂêëÂ∞±Â•Ω‰∫Ü„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#define PI 3.1415926535898#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))typedef long long ll;const int N=5e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;int n,m,limit=1,a[N],b[N],filp[N];ll a1=0,a2=0,b1=0,b2=0;complex A[N],B[N];inline void FFT(complex *f,short inv)&#123; for(int i=0;i&lt;limit;++i) if(i&lt;filp[i])&#123;complex tmp=f[i];f[i]=f[filp[i]];f[filp[i]]=tmp;&#125; for(int p=2;p&lt;=limit;p&lt;&lt;=1)&#123; int len=p/2; complex tmp=complex(cos(PI/len),inv*sin(PI/len)); for(int k=0;k&lt;limit;k+=p)&#123; complex buf=complex(1,0); for(int l=k;l&lt;k+len;++l)&#123; complex t=buf*f[len+l]; f[len+l]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp; &#125; &#125; &#125;return;&#125;int main()&#123; IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(a[i]),a1+=a[i]*a[i],a2+=a[i]; for(int i=1;i&lt;=n;++i) IN(b[i]),b1+=b[i]*b[i],b2+=b[i]; for(int i=1;i&lt;=n;++i) A[i].x=A[i+n].x=a[i],B[i]=b[n-i+1]; while(limit&lt;=(3*n))limit&lt;&lt;=1; for(int i=0;i&lt;limit;++i)filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?limit&gt;&gt;1:0); FFT(A,1),FFT(B,1); for(int i=0;i&lt;=limit;++i)A[i]=A[i]*B[i]; FFT(A,-1); for(int i=0;i&lt;=limit;++i)A[i].x=(ll)(A[i].x/limit+0.5); ll ans=inf; for(int i=1;i&lt;=n;++i) for(int j=-m;j&lt;=m;++j) ans=min(ans,a1+b1+1ll*j*j*n+2ll*j*(a2-b2)-2ll*(ll)A[i+n].x); printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HNOI2016]Â∫èÂàó Ëé´Èòü+STË°® luoguP3246]]></title>
    <url>%2F2019%2F03%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3246%2F</url>
    <content type="text"><![CDATA[‰∏ÄÈÅìËé´Èòü‚Ä¶‚Ä¶‚Ä¶. ÊúÄ‰∏ªË¶ÅÁöÑÂ∞±ÊòØÊÄé‰πà‰ªéÂΩìÂâçÂå∫Èó¥Êé®Âà∞Áõ∏ÈÇªÂå∫Èó¥„ÄÇ ÂÅáËÆæÂΩìÂâçÂå∫Èó¥‰∏∫ $[l,r]$ ÔºåÁõÆÊ†áÂå∫Èó¥‰∏∫ $[l,r+1]$ „ÄÇÈÇ£‰πàÂæàÊòæÁÑ∂ËøôÊ†∑Â≠êÂ∞±‰ºöÂ¢ûÂä†Ôºö [l,r+1],[l+1,r+1],[l+2,r+1]\cdots \cdotsËøô‰∫õÂå∫Èó¥ÔºåÁé∞Âú®Êàë‰ª¨Ë¶ÅÂÅöÁöÑÂ∞±ÊòØÂ∞ΩÂø´ÁöÑÁÆóÂá∫Ëøô‰∫õÂå∫Èó¥ÁöÑÁ≠îÊ°à„ÄÇ ÂÅáËÆæ $p$ ‰∏∫Âå∫Èó¥ $[l,r+1]$ ÁöÑÊúÄÂ∞èÂÄºÁöÑ‰ΩçÁΩÆÔºåÈÇ£‰πàÂú®‰∏äÈù¢ÁöÑÂå∫Èó¥‰∏≠Ôºå$[l,r+1] \cdots [p,r+1]$ Ëøô‰∫õÂå∫Èó¥ÊòæÁÑ∂ÈÉΩÂåÖÂê´‰∫Ü $p$ Ôºå‰πüÂ∞±ÊòØËØ¥Ëøô‰∫õÂå∫Èó¥ÁöÑÊúÄÂ∞èÂÄºÈÉΩ‰∏∫ $p$ ÔºåÈÇ£‰πàËøô‰∏ÄÊÆµÂå∫Èó¥ÁöÑË¥°ÁåÆÊòæÁÑ∂‰∏∫ $a[p]\cdot (p-l+1)$ ÔºåÂÖ∂‰∏≠ $a[p]$ ‰∏∫ $p$ ‰ΩçÁΩÆ‰∏äÁöÑÊùÉÂÄº„ÄÇ ÂæàÊòæÁÑ∂Êàë‰ª¨ÂèØ‰ª•È¢ÑÂ§ÑÁêÜ‰∏Ä‰∏™ $ST$ Ë°®ÔºåÈÄöËøá $ST$ Ë°®‰∏äÈù¢ÁöÑ $p$ Â∞±ÂèØ‰ª• $O(1)$ Ê±ÇÂá∫„ÄÇ ÁÑ∂ÂêéÊé•‰∏ãÊù•ËÄÉËôëÂâ©‰∏ãÁöÑ $[p+1,r+1]\cdots [r+1,r+1]$ Ëøô‰∫õÂå∫Èó¥„ÄÇ Êàë‰ª¨ËÆæ $f[i][j]$ Ë°®Á§∫Âè≥Á´ØÁÇπ‰∏∫ $j$ ÔºåÂ∑¶Á´ØÁÇπÁöÑ‰ΩçÁΩÆÂú® $[i,j]$ ËåÉÂõ¥ÂÜÖÁöÑÊâÄÊúâÂå∫Èó¥ÊâÄÈÄ†ÊàêÁöÑË¥°ÁåÆ„ÄÇ Êàë‰ª¨ÂèØ‰ª•Áî®ÂçïË∞ÉÊ†àÈ¢ÑÂ§ÑÁêÜÂá∫‰ΩçÁΩÆ $i$ ÁöÑ $lmin$ Âíå $rmin$ Ôºå$lmin[i]$ Ë°®Á§∫ $i$ ÂæÄÂ∑¶Ëµ∞ÈÅáÂà∞ÁöÑÁ¨¨‰∏Ä‰∏™ÊØî $i$ Â∞èÁöÑÊï∞ÁöÑ‰ΩçÁΩÆÔºå$rmin$ ÂêåÁêÜ„ÄÇ ÈÇ£‰πàÊàë‰ª¨ÂæàËΩªÊòìÁöÑÂèØ‰ª•ÂæóÂà∞Ôºö f[i][j]=f[i][lmin_j-1]+a[lmin_j]\cdot (j-lmin_j)ÂèëÁé∞ $i$ ÊòØÊ≤°ÊúâÂΩ±ÂìçÁöÑÔºå‰∫éÊòØÊàë‰ª¨Â∞Ü $i$ ‰∏¢Êéâ„ÄÇ f[j]=f[lmin_j-1]+a[lmin_j]\cdot (j-lmin_j)Ëøô‰∏™ÂºèÂ≠ê $DP$ ‰∏éÂ§ÑÁêÜ‰∏Ä‰∏ãÂ∞±Â•Ω‰∫Ü„ÄÇ ÈÇ£‰πàÊúÄÂêéÊàë‰ª¨‰ªé $[l,r]$ ÁßªÂêë $[l,r+1]$ ‰∫ßÁîüÁöÑË¥°ÁåÆ‰∏∫Ôºö a[p]\cdot (p-l+1) + f[r+1]-f[p]Ëá≥‰∫é‰∏∫‰ªÄ‰πàË¶ÅÂáèÂéª $f[p]$ ÔºåÂ∑Æ‰∏çÂ§öÊòØÂÆπÊñ•ÁöÑÈÅìÁêÜ„ÄÇ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))typedef long long ll;const int N=1e5+2;const int inf=1e9+9;int n,m,block,a[N];struct MO&#123;int l,r,id;&#125;q[N];int top,stack[N],lmin[N],rmin[N];ll res,Ans[N],fl[N],fr[N];bool cmp(MO a,MO b)&#123; return a.l/block==b.l/block?a.l/block&amp;1?a.r&lt;b.r:a.r&gt;b.r:a.l/block&lt;b.l/block;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; namespace ST&#123; const int LogN=23; int logs[N],f[N][LogN+2]; inline void Make()&#123; logs[0]=-1; for(int i=1;i&lt;=n;++i) f[i][0]=i,logs[i]=logs[i&gt;&gt;1]+1; for(int j=1;j&lt;=logs[n];++j) for(int i=1;i+(1&lt;&lt;j)-1&lt;=n;++i) f[i][j]=a[f[i][j-1]]&lt;a[f[i+(1&lt;&lt;(j-1))][j-1]]?f[i][j-1]:f[i+(1&lt;&lt;(j-1))][j-1]; &#125; inline ll query(int x,int y)&#123; int ans=logs[y-x+1]; return a[f[x][ans]]&lt;a[f[y-(1&lt;&lt;ans)+1][ans]]?f[x][ans]:f[y-(1&lt;&lt;ans)+1][ans]; &#125;&#125;inline void __Pre_lmin_rmin()&#123; for(int i=1;i&lt;=n;++i)&#123; while(top&amp;&amp;a[stack[top]]&gt;a[i]) rmin[stack[top--]]=i; lmin[i]=stack[top],stack[++top]=i; &#125;while(top)lmin[stack[top]]=stack[top-1],rmin[stack[top--]]=n+1;&#125;inline ll left(int l,int r)&#123; int p=ST::query(l-1,r); return (ll)a[p]*(r-p+1)+fl[l-1]-fl[p];&#125;inline ll right(int l,int r)&#123; int p=ST::query(l,r+1); return (ll)a[p]*(p-l+1)+fr[r+1]-fr[p];&#125; int main()&#123; IN(n),IN(m);block=sqrt(n); a[0]=a[n+1]=inf; for(int i=1;i&lt;=n;++i)IN(a[i]); __Pre_lmin_rmin(); ST::Make(); for(int i=1;i&lt;=n;++i)fr[i]=(ll)a[i]*(i-lmin[i])+fr[lmin[i]]; for(int i=n;i&gt;=1;--i)fl[i]=(ll)a[i]*(rmin[i]-i)+fl[rmin[i]]; for(int i=1;i&lt;=m;++i) IN(q[i].l),IN(q[i].r),q[i].id=i; std::sort(q+1,q+1+m,cmp); int L=q[1].l,R=L-1;res=0; for(int i=1;i&lt;=m;++i)&#123; int x=q[i].l,y=q[i].r; while(L&gt;x)res+=left(L,R),L--; while(R&lt;y)res+=right(L,R),R++; while(L&lt;x)res-=left(L+1,R),++L; while(R&gt;y)res-=right(L,R-1),--R; Ans[q[i].id]=res; &#125; for(int i=1;i&lt;=m;++i) printf("%lld\n",Ans[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ëé´Èòü</tag>
        <tag>STË°®</tag>
        <tag>ÂçïË∞ÉÊ†à</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [CQOI2015]ÁΩëÁªúÂêûÂêêÈáè ÁΩëÁªúÊµÅ luoguP3171]]></title>
    <url>%2F2019%2F03%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3171%2F</url>
    <content type="text"><![CDATA[È¢òÁõÆË¶ÅÊ±Ç‰Ω†ÂÅö‰ªÄ‰πàÂ∞±ÂÅö‰ªÄ‰πàÂëó„ÄÇ Êàë‰ª¨ÂÖàË∑ëÊúÄÁü≠Ë∑ØÔºåÁÑ∂ÂêéÊåâÁÖßÊúÄÁü≠Ë∑ØÁöÑËæπËøûÁΩëÁªúÊµÅÁöÑËæπÂ∞±Â•Ω‰∫Ü„ÄÇ ËøôÈáåÊàëÈÄâÊã©Ë∑ëÂ†Ü‰ºò $Dij$ ÔºåÁÑ∂ÂêéÊàë‰ª¨Êûö‰∏æÊØè‰∏ÄÊù°ËæπÔºåÂà§Êñ≠ÁùÄ‰∏ÄÊù°ËæπÊòØÂê¶‰∏∫ÊúÄÁü≠Ë∑ØÁöÑËæπÔºåÂà§Êñ≠ÁöÑÊñπÂºèÂæàÊòæÁÑ∂ÔºåÂ∞±ÊòØÁúãËøôÊù°ËæπÁöÑËµ∑ÁÇπÁöÑ $dis$ Âä†‰∏äËæπÊùÉÊòØÂê¶Á≠â‰∫éÁªàÁÇπÁöÑ $dis$ Â∞±Â•Ω„ÄÇ ÁΩëÁªúÊµÅË¶ÅÊãÜÁÇπÔºåÈô§‰∫ÜÊãÜ‰∫ÜÁöÑÁÇπ‰πãÈó¥Ëøû‰∏ÄÊù°ËØ•ÁÇπÁöÑÊùÉÂÄºÁöÑËæπ‰πãÂ§ñÔºåÂÖ∂‰ΩôÁöÑËæπÂÖ®ÈÉ®ÈÉΩÊòØ $inf$ ÔºåÂΩìÁÑ∂Á¨¨‰∏Ä‰∏™ÁÇπÂíåÁ¨¨ $n$ ‰∏™ÁÇπÊãÜÁÇπÂêéËøûËæπ‰πüÊòØ $inf$ ËÄåÈùûÁÇπÊùÉ„ÄÇËøûÂÆåËæπ‰πãÂêéË∑ëÊúÄÂ§ßÊµÅÂç≥ÂèØ„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long long#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e5+2;const ll inf=1e18+9;int n,m,s,t;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace Dinic&#123; std::queue&lt;int&gt; q; struct Edge&#123;int nxt,to;ll val;&#125;G[N&lt;&lt;1]; int cnt(1),dep[N],head[N]; inline void add(int u,int v,ll w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125; inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t]; &#125; inline ll dfs(int x,ll flow)&#123; if(x==t||!flow)return flow; ll used=0,rlow; for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used; &#125; inline ll dinic()&#123; ll maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow; &#125;&#125;namespace Dijstra&#123; #define P std::pair&lt;int,int&gt; std::priority_queue&lt;P,std::vector&lt;P&gt;,std::greater&lt;P&gt; &gt; q; int vis[N],head[N],cnt; ll dis[N]; struct Edge&#123;int nxt,to;ll w;&#125;G[N&lt;&lt;1]; inline void add(int u,int v,ll w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].w=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].w=w,head[v]=cnt; &#125; inline void dijstra(int s)&#123; for(int i=1;i&lt;=n;++i)dis[i]=inf; memset(vis,false,sizeof(vis)); dis[s]=0; q.push(std::make_pair(dis[s],s)); while(!q.empty())&#123; int x=q.top().second; q.pop();if(vis[x])continue;vis[x]=true; for(int i=head[x];i;i=G[i].nxt) if(dis[G[i].to]&gt;dis[x]+G[i].w)&#123; dis[G[i].to]=dis[x]+G[i].w; if(!vis[G[i].to])q.push(std::make_pair(dis[G[i].to],G[i].to)); &#125; &#125; for(int x=1;x&lt;=n;++x) for(int i=head[x];i;i=G[i].nxt) if(dis[x]+G[i].w==dis[G[i].to]) Dinic::add(x+n,G[i].to,inf); return; &#125;&#125;int main()&#123; IN(n),IN(m),s=1,t=n&lt;&lt;1; for(int i=1;i&lt;=m;++i)&#123; int u,v,w;IN(u),IN(v),IN(w); Dijstra::add(u,v,w); &#125; Dijstra::dijstra(1); for(int i=1,x;i&lt;=n;++i) IN(x),Dinic::add(i,i+n,(i!=1&amp;&amp;i!=n)?x:inf); printf("%lld\n",Dinic::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë Ë¥ßËΩ¶ËøêËæì ÊúÄÂ§ßÁîüÊàêÊ†ë+ÂÄçÂ¢ûLca luoguP1967]]></title>
    <url>%2F2019%2F03%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1967%2F</url>
    <content type="text"><![CDATA[È¢òÁõÆÂ§ßÊÑèÂ∞±ÊòØÔºåÊúâÂ§öÁªÑËØ¢ÈóÆÔºåÊØèÁªÑËØ¢ÈóÆÂåÖÂê´‰∏§‰∏™Êï¥Êï∞ $x,y‚Äã$ ÔºåÊ±ÇÂá∫ $x‚Äã$ Âà∞ $y‚Äã$ ÁöÑ‰∏ÄÊù°Ë∑ØÂæÑÔºåÊª°Ë∂≥ËøôÊù°Ë∑ØÂæÑÂú®ÊâÄÊúâÁöÑ $x‚Äã$ Âà∞ $y‚Äã$ ÁöÑË∑ØÂæÑ‰∏≠ÔºåËæπÊùÉÊúÄÂ∞èÁöÑËæπÊùÉÂÄºÊúÄÂ§ß„ÄÇ Ëøô‰∏™ÂæàÊòæÁÑ∂Êàë‰ª¨ÂèØ‰ª•ÂÖàÊ±ÇÂá∫ÂõæÁöÑÊúÄÂ§ßÁîüÊàêÊ†ëÔºåÈÇ£‰πà $x$ Âà∞ $y$ ÁöÑÁõÆÊ†áË∑ØÂæÑËÇØÂÆöÂú®ÊúÄÂ§ßÁîüÊàêÊ†ë‰∏äÔºå‰πüÂè™ËÉΩÂú®ÊúÄÂ§ßÁîüÊàêÊ†ë‰∏ä„ÄÇ ÈÇ£‰πàÊàë‰ª¨ÈúÄË¶ÅÂú®ÊúÄÂ§ßÁîüÊàêÊ†ë‰∏äÊâæÂà∞ËøôÊù°Ë∑ØÂæÑÔºåÊúÄÂ§ßÁîüÊàêÊ†ëÊòØ‰∏ÄÊ£µÊ†ëÔºåÂæàÊòæÁÑ∂ÁöÑÊàë‰ª¨ÂèØ‰ª•ÊÉ≥Âà∞Âú®ËøôÊ£µÊ†ë‰∏äÂÅö $Lca$ ÔºåÈÇ£‰πàËøôÊ†∑Â∞±Ë∂ÖÁ∫ßÁÆÄÂçï‰∫Ü„ÄÇ Êàë‰ª¨Âú®Ê±Ç $lca$ ÁöÑÊó∂ÂÄôÈ°∫Â∏¶Áª¥Êä§‰∏Ä‰∏ã $sum$ Êï∞ÁªÑÔºå$sum[x][i]$ Ë°®Á§∫Âú®ÊúÄÂ§ßÁîüÊàêÊ†ë $x$ Âà∞ $fa[x][i]$ ËøôÊù°Ë∑ØÂæÑ‰∏äÁöÑÊâÄÊúâËæπÁöÑËæπÊùÉÊúÄÂ∞èÂÄº„ÄÇËΩ¨ÁßªÁöÑÊñπÊ≥ï‰πüÂæàÁÆÄÂçïÔºö$sum[x][i]=min(sum[x][i-1],sum[fa[x][i-1]][i-1])$ „ÄÇ ÂØπ‰∫é‰∏çËÉΩÂà∞ËææÁöÑÊÉÖÂÜµÁâπÂà§‰∏Ä‰∏ãÂ∞±Â•Ω‰∫Ü„ÄÇ ‰∫éÊòØËøôÈ¢òÂ∞±ÂÅöÂÆå‰∫Ü„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt; #define ll long long#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define swap(x,y) ((x)^=(y)^=(x)^=(y))const int N=1e5+2;const int log=30;const int inf=1e9+9;int n,m,q,cnt,f[N];int dep[N],fa[N][log+2],sum[N][log+2];struct Edge&#123;int from,to,val;&#125;G[N&lt;&lt;1];std::vector&lt;int&gt; E[N],V[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;bool cmp(Edge a,Edge b)&#123;return a.val&gt;b.val;&#125;int find(int x)&#123;return f[x]==x?x:f[x]=find(f[x]);&#125;void dfs(int u,int f,int dis)&#123; dep[u]=dep[f]+1, fa[u][0]=f,sum[u][0]=dis; for(int i=1;i&lt;log;++i) fa[u][i]=fa[fa[u][i-1]][i-1], sum[u][i]=min(sum[u][i-1],sum[fa[u][i-1]][i-1]); int size=E[u].size(); for(int i=0;i&lt;size;++i)&#123; int v=E[u][i]; if(v!=f)dfs(v,u,V[u][i]); &#125;return;&#125;inline int solve(int x,int y)&#123; int ans=inf; if(dep[x]&lt;dep[y])swap(x,y); for(int i=log-1;i&gt;=0;--i) if(dep[fa[x][i]]&gt;=dep[y]) ans=min(ans,sum[x][i]),x=fa[x][i]; if(x==y)return ans; for(int i=log-1;i&gt;=0;--i) if(fa[x][i]!=fa[y][i])&#123; ans=min(ans,min(sum[x][i],sum[y][i])); x=fa[x][i],y=fa[y][i]; &#125; ans=min(ans,min(sum[x][0],sum[y][0])); if(fa[x][0]==0)return -1; else return ans;&#125;int main()&#123; IN(n),IN(m); for(int i=1;i&lt;=n;++i)f[i]=i; for(int i=1;i&lt;=m;++i) IN(G[i].from),IN(G[i].to),IN(G[i].val); std::sort(G+1,G+1+m,cmp); for(int i=1;i&lt;=m;++i)&#123; int fx=find(G[i].from),fy=find(G[i].to); if(fx!=fy)&#123; f[fy]=fx;++cnt; E[G[i].from].push_back(G[i].to),V[G[i].from].push_back(G[i].val); E[G[i].to].push_back(G[i].from),V[G[i].to].push_back(G[i].val); if(cnt==n-1)break; &#125; &#125; for(int i=1;i&lt;=n;++i) if(!dep[i])dfs(i,0,0); IN(q); for(int i=1;i&lt;=q;++i)&#123; int x,y;IN(x),IN(y); printf("%d\n",solve(x,y)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>lca</tag>
        <tag>ÂÄçÂ¢û</tag>
        <tag>ÁîüÊàêÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë Willem, Chtholly and Seniorious ÁèÇÊúµËéâÊ†ë luoguCF896C]]></title>
    <url>%2F2019%2F03%2F11%2F%5B%E9%A2%98%E8%A7%A3%5DluoguCF896C%2F</url>
    <content type="text"><![CDATA[Á•ûÂ•áÁöÑÁèÇÊúµËéâÊ†ëÔºå‰ºòÈõÖÁöÑÊö¥Âäõ„ÄÇ ÁèÇÊúµËéâÊ†ëÁöÑ‰∏ªË¶ÅÊÄùÊÉ≥Â∞±ÊòØÂØπ‰∫é‰∏ÄÊÆµËøûÁª≠ÁöÑÂÄºÁõ∏ÂêåÁöÑÂå∫Èó¥ÔºåÂ∞ÜÂÖ∂Áº©‰∏∫‰∏Ä‰∏™ÁªìÁÇπÔºåÁÑ∂Âêé‰∏¢Âà∞ $set$ ÈáåÈù¢Ôºå‰∏ªË¶ÅÁöÑÊìç‰ΩúÊúâÊãÜÂàÜÂå∫Èó¥Êìç‰Ωú‚Ä¶‚Ä¶.ËøôË¥ßÂæàÂº∫Â§ßÔºåÁ†ÅÈáè‰∏çÁü≠‰ΩÜÊûÅÂ•ΩÂÜôÔºåËÄå‰∏î‰∏ÄËà¨‰∏ç‰ºöÂá∫‰ªÄ‰πàÈóÆÈ¢òÔºåË∞ÉËØï‰πüÂæàÊñπ‰æø„ÄÇ ‰ΩÜÊòØÁèÇÊúµËéâÊ†ëÁöÑÊÄùÊÉ≥ÂæàÊö¥ÂäõÔºåÊØîÂ¶ÇËØ¥Âå∫Èó¥Á¨¨ $K$ Â§ßÔºåÁèÇÊúµËéâÊ†ëÁöÑÂÅöÊ≥ïÂ∞±ÊòØÁõ¥Êé•Â∞ÜÂå∫Èó¥ÊãøÂá∫Êù•Êéí‰∏ÄÊ≥¢Â∫èÔºÅÂΩìÁÑ∂ÔºåËøôÊ†∑Êö¥ÂäõÁöÑ‰∏úË•øÂè™ËÉΩÂú®ÈöèÊú∫Êï∞ÊçÆÁöÑÊÉÖÂÜµ‰∏ãÈ£üÁî®ÔºåÊàñËÄÖÊï∞ÊçÆÊ∞¥ÁöÑÊÉÖÂÜµ‰∏ãÔºå‰∏çÁÑ∂ÂàÜÂàÜÈíüÁªô‰Ω† $T$ È£ûÔºÅ Â•ΩÂêßÊù•ÁúãÁúãËøôÈÅìÈ¢òÁöÑÊìç‰ΩúËØ•ÊÄé‰πàÂäûÔºö Á¨¨‰∏Ä‰∏™Êìç‰ΩúÁöÑËØùÂ±û‰∫éÂÇªÈÄºÊìç‰ΩúÔºåÁèÇÊúµËéâÊ†ëÔºåÂÖà $split$ ÊèêÂèñ $l,r$ Âå∫Èó¥ÔºåÁÑ∂ÂêéÁõ¥Êé•Êö¥ÂäõËÆøÈóÆÔºåÂä†‰∏ä $x$ Âç≥ÂèØ„ÄÇ Á¨¨‰∫å‰∏™Êìç‰ΩúÂÆåÂÖ®Â∞±ÊòØÁèÇÊúµËéâÊ†ëÁöÑÂü∫Êú¨Êìç‰ΩúÔºåË∑ü‰∏äÈù¢‰∏ÄÊ†∑ÔºåÊö¥ÂäõËÆøÈóÆÁÑ∂ÂêéÁõ¥Êé•Â∞ÜÊùÉÂÄºÊîπ‰∏∫ $x$ Âç≥ÂèØÔºåÊõ¥ÁÆÄÂçïÁöÑÊñπÊ≥ïÂ∞±ÊòØÂà†Èô§ $l,r$ Âå∫Èó¥ÔºåÁÑ∂ÂêéÊääÊùÉÂÄºÁªü‰∏Ä‰∏∫ $x$ ÂêéÂÜçÊèíÂÖ• $l,r$ „ÄÇ Á¨¨‰∏â‰∏™Êìç‰ΩúÁ¨¨ $K$ Â§ßÔºå‰∏äÈù¢ËØ¥‰∫ÜÔºåÁõ¥Êé•ÊãøÂá∫Êù•Êéí‰∏™Â∫èÂ∞±Â•Ω‰∫ÜÔºåÁÇíÈ∏°Êö¥Âäõ„ÄÇ Á¨¨Âõõ‰∏™Êìç‰Ωú‚Ä¶‚Ä¶‰ªçÁÑ∂ÊòØÊö¥ÂäõÔºåÂèØ‰ª•ÂèÇËÄÉÁ¨¨‰∏Ä‰∫å‰∏™Êìç‰ΩúÔºåÊ≥®ÊÑè $longlong$ ÁöÑÈóÆÈ¢òÔºå‰∏çË¶ÅÁàÜ $long long$ ‰∫Ü„ÄÇ ÂØπ‰∫éÂàùÂßãÁöÑÂ∫èÂàóÔºåÊàë‰ª¨ÂÖàÁî®È¢òÁõÆË¶ÅÊ±ÇÁöÑÈöèÊú∫ÂåñÂáΩÊï∞ÂæóÂà∞Â∫èÂàó‰∏≠ÊØè‰∏Ä‰∏™‰ΩçÁΩÆÁöÑÂÄºÔºåÁÑ∂ÂêéÊèíÂÖ•Âà∞ $set$ ‰∏≠ÔºåËøô‰∏™Êó∂ÂÄôÁ¨¨ $i$ ‰∏™ÂÖÉÁ¥†Âå∫Èó¥ÊòØ $i,i$ „ÄÇ ËøòÊúâ‰∏Ä‰∏™ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÂú∞ÊñπÔºåÂ∞±ÊòØÂú®ÊèíÂÖ•ÂÆåÊï¥‰∏™Â∫èÂàóÂêéËøòË¶ÅÂú®ÊúÄÂêéÈù¢ÊèíÂÖ•‰∏Ä‰∏™ËæπÁïåÁöÑÂì®ÂÖµÁªìÁÇπÔºåÂΩìÁÑ∂Âì®ÂÖµÁªìÁÇπÁöÑÊùÉÂÄº‰∏∫ $0$ „ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;set&gt;#include&lt;vector&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))typedef long long ll;const int N=1e5+7;const int inf=1e9+9;ll seed,vmax;inline ll rnd()&#123; ll ret=seed; seed=(seed*7+13)%1000000007; return ret;&#125;struct ODT&#123; struct Node&#123; int l,r; mutable ll v; Node(int L,int R=-1,ll V=0):l(L),r(R),v(V) &#123;&#125; bool operator &lt; (const Node&amp;x) const &#123;return l&lt;x.l;&#125; &#125;; std::set&lt;Node&gt; s; #define IT std::set&lt;Node&gt;::iterator inline IT split(int pos)&#123; IT it=s.lower_bound(Node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos)return it; else --it; int L=it-&gt;l,R=it-&gt;r;ll V=it-&gt;v; s.erase(it); return s.insert(Node(L,pos-1,V)),s.insert(Node(pos,R,V)).first; &#125; inline void assign(int l,int r,ll val)&#123; IT itr=split(r+1),itl=split(l); s.erase(itl,itr); s.insert(Node(l,r,val)); &#125; inline void add(int l,int r,ll val)&#123; IT itr=split(r+1),itl=split(l); for(;itl!=itr;++itl)itl-&gt;v+=val; &#125; inline ll rank(int l,int r,int k)&#123; std::vector&lt;std::pair&lt;ll,int&gt; &gt; hep; IT itr=split(r+1),itl=split(l); for(;itl!=itr;++itl) hep.push_back(std::make_pair(itl-&gt;v,itl-&gt;r-itl-&gt;l+1)); std::sort(hep.begin(),hep.end()); for(std::vector&lt;std::pair&lt;ll,int&gt; &gt;::iterator it=hep.begin();it!=hep.end();++it)&#123; k-=it-&gt;second; if(k&lt;=0)return it-&gt;first; &#125; &#125; inline ll pow(ll x,ll y,ll mod)&#123; ll res=1ll;x%=mod; for(;y;y&gt;&gt;=1,x=x*x%mod)if(y&amp;1)res=res*x%mod; return res%mod; &#125; inline ll sum(int l,int r,int ex,int mod)&#123; IT itr=split(r+1),itl=split(l); ll res=0; for(;itl!=itr;++itl) res=(res+(ll)(itl-&gt;r-itl-&gt;l+1)*pow(itl-&gt;v,ll(ex),ll(mod)))%mod; return res; &#125; inline void pre(int n)&#123; int a; for(int i=1;i&lt;=n;++i) a=(rnd()%vmax)+1,s.insert(Node(i,i,a)); s.insert(Node(n+1,n+1,0)); return; &#125;&#125;T;int main()&#123; int n,m; scanf("%d%d%lld%lld",&amp;n,&amp;m,&amp;seed,&amp;vmax); T.pre(n); for(int i=1;i&lt;=m;++i)&#123; int op=(rnd()%4)+1,l=(rnd()%n)+1,r=(rnd()%n)+1,x,y; if(l&gt;r)std::swap(l,r); if(op==3)x=(rnd()%(r-l+1))+1; else x=(rnd()%vmax)+1; if(op==4)y=(rnd()%vmax)+1; if(op==1)T.add(l,r,ll(x)); else if(op==2)T.assign(l,r,ll(x)); else if(op==3)printf("%lld\n",T.rank(l,r,x)); else if(op==4)printf("%lld\n",T.sum(l,r,x,y)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁèÇÊúµËéâÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [ZJOI2009]ÁãºÂíåÁæäÁöÑÊïÖ‰∫ã ÁΩëÁªúÊµÅ luoguP2598]]></title>
    <url>%2F2019%2F03%2F11%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2598%2F</url>
    <content type="text"><![CDATA[ËøôÈ¢òÁúüÁöÑÊòØË£∏ÁöÑÁΩëÁªúÊµÅ‚Ä¶‚Ä¶ËøûÊàëËøôÁßçÂà∂ÊùñÈÉΩÂèØ‰ª•Á´ãÂàªÊÉ≥Âà∞Ê≠£Ëß£„ÄÇ Â¶ÇÊûú‰∏çËÄÉËôëÈ¢ÜÂú∞ÈóÆÈ¢òÁöÑËØùÔºåËøôÊòæÁÑ∂ÊòØ‰∏ÄÈÅìÂæàË£∏ÁöÑÊúÄÂ∞èÂâ≤‚Äî‚Äî‚ÄîÂâ≤Êñ≠ÊúÄÂ∞ëÁöÑËæπ‰Ωø $S$ Âíå $T‚Äã$ ‰∏çËøûÈÄö„ÄÇ ‰ΩÜÊòØÁé∞Âú®Êúâ‰∫ÜÈ¢ÜÂú∞ÁöÑÈóÆÈ¢ò‚Ä¶‚Ä¶Â∞±ÊòØËØ¥ÈôêÂà∂‰∫ÜÊúâ‰∫õÊ†ºÂ≠êÊòØ‰∏ÄËµ∑ÁöÑÔºå‰∏çËÉΩË¢´Ââ≤ÂºÄ„ÄÇ Êó¢ÁÑ∂‰∏çËÉΩË¢´Ââ≤ÂºÄÔºåÂ∞±Ëøû‰∏ÄÊù° $inf$ ÁöÑËæπÂïäÔºåËøôÊ†∑Â∞±Ââ≤‰∏çÂºÄ‰∫ÜÂïä„ÄÇ ‰∫éÊòØÊàë‰ª¨ÂèØ‰ª•ËÆ© $S$ ÂêëÊâÄÊúâÁöÑÁãºÁöÑÈ¢ÜÂú∞Ëøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $inf$ ÁöÑËæπÔºåÁÑ∂ÂêéÊâÄÊúâÁöÑÁæäÁöÑÈ¢ÜÂú∞Âêë $T$ Ëøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $inf$ ÁöÑËæπ„ÄÇÁÑ∂ÂêéÂ∞±ÊòØÁΩëÊ†ºËæπËøûËæπ‰∫Ü‚Ä¶‚Ä¶ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define id(x,y) (((x)-1)*m+(y))const int N=1e5+2;const int inf=1e9+9;const int dx[4]=&#123;0,0,-1,1&#125;;const int dy[4]=&#123;-1,1,0,0&#125;;int n,m,s,t;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace Dinic&#123; std::queue&lt;int&gt; q; struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;1]; int cnt(1),dep[N],head[N]; inline void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125; inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t]; &#125; inline int dfs(int x,int flow)&#123; if(x==t||!flow)return flow; int used=0,rlow; for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used; &#125; inline int dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow; &#125;&#125;int main()&#123; IN(n),IN(m);s=n*m+1,t=n*m+2; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j)&#123; int a;IN(a); if(a==1)Dinic::add(s,id(i,j),inf); if(a==2)Dinic::add(id(i,j),t,inf); &#125; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) for(int k=0;k&lt;4;++k)&#123; int tx=i+dx[k],ty=j+dy[k]; if(tx&lt;1||tx&gt;n||ty&lt;1||ty&gt;m)continue; Dinic::add(id(i,j),id(tx,ty),1); &#125; printf("%d\n",Dinic::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [ÂõΩÂÆ∂ÈõÜËÆ≠Èòü]ËÅ™ËÅ™ÂèØÂèØ Ê†ëÂΩ¢DP luoguP2634]]></title>
    <url>%2F2019%2F03%2F10%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2634%2F</url>
    <content type="text"><![CDATA[Âà´‰∫∫ÈÉΩËØ¥Ôºå‰ªÄ‰πàÊ∑ÄÁ≤âË¥®Âïä‰πãÁ±ªÁöÑËΩªÊùæÊ∞¥ËøáÔºåÁÑ∂ËÄåÊàëÊúâÁ†ÅÈáèÊÅêÊÉßÁóáÔºå‰∏çÈÄÇÂêàÂ¶ÇÊ≠§Êï∞ÊçÆÁªìÊûÑ(‰∏ªË¶Å‰πüÊòØÂ§™Âº±‰∫ÜQvQ) ÈÇ£Â∞±‰∏äÊ†ëÂΩ¢DPÂêßÔºÅ$f[i][j]$Ë°®Á§∫ÁÇπi‰∏∫Ê†πÁöÑÂ≠êÊ†ë‰∏≠Âà∞iË∑ØÂæÑÊùÉÂÄºÂíå%3=jÁöÑÁÇπÊï∞.Áä∂ÊÄÅËΩ¨ÁßªÔºöDfsÔºåÁõ¥Êé•‰ªéÂ≠êÊ†ëËΩ¨ÁßªÂç≥ÂèØÔºåÂÖ∑‰ΩìÁúã‰ª£Á†Å„ÄÇ ÁúüÊòØÁÇíÈ∏°ÁÆÄÂçïÁöÑÂï¶~~ CODE:1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int#define A printf("A")using namespace std;const int N=2e4+2;inline ll gcd(int x,int y)&#123;return y?gcd(y,x%y):x;&#125;struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;2];int n,cnt,head[N];ll f[N][3],ans;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline void add(int x,int y,int v)&#123; G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt; G[++cnt].nxt=head[y],G[cnt].to=x,G[cnt].val=v,head[y]=cnt;&#125;inline void Dfs(int x,int fa)&#123; f[x][0]=1; for(register int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to;if(y==fa)continue;Dfs(y,x); for(int j=0;j&lt;3;++j)ans+=(ll)(f[y][j]*f[x][(((3-j-G[i].val)%3)+3)%3]*2); //‰ªéÂ≠êÊ†ëËΩ¨ÁßªËøáÊù•ÔºåÊ≥®ÊÑèÂèñÊ®°ÔºåÁúã‰∏çÊáÇÁöÑÂêåÂ≠¶ÁîªÂõæÁßíÊáÇ for(int j=0;j&lt;3;++j)f[x][(G[i].val+j)%3]+=f[y][j]; //Ë∑üÊñ∞ f[x] &#125;return;&#125;int main()&#123; IN(n);ll s=(ll)n*n,g; for(register int x,y,v,i=1;i&lt;n;++i) IN(x),IN(y),IN(v),add(x,y,v); Dfs(1,0);ans+=n,g=gcd(ans,s);//‰∏ÄÂÆöË¶ÅÊòØÊúÄÁÆÄÂàÜÊï∞ printf("%lld/%lld\n",ans/g,s/g);//ËæìÂá∫Á≠îÊ°à return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>Ê†ëÂΩ¢DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë „ÄåÁΩëÁªúÊµÅ24È¢ò„ÄçÈ§êÂ∑æËÆ°ÂàíÈóÆÈ¢ò ÁΩëÁªúÊµÅ luoguP1251]]></title>
    <url>%2F2019%2F03%2F09%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1251%2F</url>
    <content type="text"><![CDATA[ÂÆûÈôÖ‰∏äËøôÈÅìÈ¢òÂèØ‰ª•Áî®Ë¥™ÂøÉËß£ÁöÑ‚Ä¶‚Ä¶‰ΩÜÊòØÁ†ÅÈáèÊÉä‰∫∫ $QwQ$ „ÄÇ ‰∫éÊòØ‰∏äÁΩëÁªúÊµÅÂêß‚Ä¶‚Ä¶ËøôÈ¢òÊòæÁÑ∂ÊòØË¥πÁî®ÊµÅ„ÄÇ ÂØπ‰∫éÊØè‰∏ÄÂ§©ÔºåÊàë‰ª¨Â∞ÜÂÖ∂ÊãÜÊàê‰∏§‰∏™ÁÇπÔºå‰∏Ä‰∏™Ë°®Á§∫ËøôÂ§©ÁöÑÊó©Êô®Ôºå‰∏Ä‰∏™Ë°®Á§∫ËøôÂ§©ÁöÑÊôö‰∏ä„ÄÇ Êàë‰ª¨‰ªéÊ∫êÁÇπÂêëÊØè‰∏ÄÂ§©ÁöÑÊôö‰∏äËøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $x$ Ë¥πÁî®‰∏∫ $0‚Äã$ ÁöÑËæπÔºåË°®Á§∫Ëøô‰∏ÄÂ§©Êàë‰ª¨ÈúÄË¶ÅÂ§ÑÁêÜÁöÑÈ§êÂ∑æÊï∞ÔºåÂ∞±ÊòØÁôΩÂ§©Áî®ÊéâÁöÑÈ§êÂ∑æ„ÄÇ ÊØè‰∏ÄÂ§©ÁöÑÊó©Êô®ÔºåËøô‰∫õÈ§êÂ∑æÊù•Ëá™È¢òÁõÆÁªôÂá∫ÁöÑÂú∞ÊñπÔºåÂπ∂‰∏îÊúÄÁªàËøûÂêëÊ±áÁÇπÔºåËæπÊùÉ‰∏∫ $x$ Ë¥πÁî®‰∏∫ $0$ „ÄÇ ÁÑ∂ÂêéËÄÉËôëÊØèÂ§©Êó©‰∏äÈ§êÂ∑æÁöÑÊù•Ê∫êÔºåÁé∞Âú®È¢òÁõÆÁªô‰∫ÜÂõõ‰∏™Êìç‰ΩúÔºö ‰π∞Êñ∞ÁöÑ ‰∏¢Âà∞Âø´Ê¥óÂ∫ó ‰∏¢Âà∞ÊÖ¢Ê¥óÂ∫ó ÂºÉÁñó ÂØπ‰∫é‰π∞Êñ∞ÁöÑÔºåÊàë‰ª¨Âè™ÈúÄË¶Å‰ªéÊ∫êÁÇπËøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $inf$ Ë¥πÁî®‰∏∫ $p$ ÁöÑËæπÂà∞Ëøô‰∏ÄÂ§©ÁöÑÁôΩÂ§©ÔºåÊàë‰ª¨È§êÂ∑æÁöÑËé∑ÂèñÈÉΩÊù•Ëá™Ê∫êÁÇπ„ÄÇ ‰∏¢Âà∞Âø´Ê¥óÂ∫óÔºå‰πüÂ∞±ÊòØËØ¥Á¨¨ $i$ Â§©Êôö‰∏äËøô‰∫õÊ≤°ÊúâÂ§ÑÁêÜÁöÑÊØõÂ∑æ‰∏¢Âà∞Âø´Ê¥óÂ∫óÔºåÈÇ£‰πàÁ¨¨ $i+m$ Â§©Â∞ÜÊ¥óÂÆåÔºåËøô‰∏™Êó∂ÂÄôÂèØ‰ª•Âú®Êó©Êô®Êî∂Âà∞È§êÂ∑æÔºå‰∫éÊòØ‰ªé $i$ ÁöÑÊôö‰∏äËøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $inf$ Ë¥πÁî®‰∏∫ $f$ ÁöÑËæπËøûÂêë $i+m$ ÁöÑÁôΩÂ§©„ÄÇ ‰∏¢Âà∞ÊÖ¢Ê¥óÂ∫óÔºåËøô‰∏™Ë∑üÂø´Ê¥óÂ∫óÊòØ‰∏Ä‰∏™ÈÅìÁêÜ„ÄÇ ÂÖ≥‰∫éÂºÉÁñóÔºåÂ∞±ÊòØËØ¥ÊîæÁùÄ‰∏çÁÆ°‰∫ÜÔºåÂèØ‰ª•ÁêÜËß£‰∏∫Á¨¨ $i$ Â§©Êôö‰∏äÁöÑÈ§êÂ∑æÁïôÂà∞‰∫ÜÁ¨¨ $i+1$ Â§©ÔºåÂπ∂‰∏îËøô‰∫õÈ§êÂ∑æÊòØ‰∏çËÉΩÁî®ÁöÑÔºåÈÇ£‰πà‰∏ç‰ºöËøûÂêë $i+1$ ÁöÑÊó©Êô®Ôºå‰∫éÊòØ‰ªé $i$ ÁöÑÊôö‰∏äËøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $inf$ Ë¥πÁî®‰∏∫ $f$ ÁöÑËæπËøûÂêë $i+1$ ÁöÑÊôö‰∏ä„ÄÇ ÁÑ∂ÂêéË∑ë‰∏ÄËæπË¥πÁî®ÊµÅÊùøÂ≠êÂ∞±Â•Ω‰∫ÜÔºåÊ≥®ÊÑèË¶ÅÂºÄ $long long$ „ÄÇ Ëá≥‰∫é‰∏äÈù¢Âõõ‰∏™ÈÄâÈ°π‰∏∫‰ªÄ‰πàËæπÁöÑÂÆπÈáèÈÉΩËÆæ‰∏∫ $inf$ ÔºåÊàë‰ª¨Â∞±Êãø‰π∞Êñ∞ÁöÑÊù•ËØ¥ÂêßÔºåÈ¢òÁõÆÂèàÊ≤°ÊúâÈôêÂà∂‰Ω†ÊúÄÂ§ö‰π∞Â§öÂ∞ëÔºåÊâÄ‰ª•Â∞±ÊòØÂÖÅËÆ∏‰Ω†ÂèØ‰ª•‰∏ÄÁõ¥‰π∞Ôºå‰π∞Êó†ÈôêÊù°ÔºåÂ∞±ÂΩìÊàê $inf$ Âï¶„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define id(type,x) ((type)*n+x)#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y)) const int N=1e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int s,t,r[N],tot(1),head[N],vis[N],dist[N];struct Edge&#123;int nxt,to,val,cot;&#125;G[N&lt;&lt;8];struct Pre&#123;int last,edge;&#125;pre[N];inline void add(int u,int v,int val,int cot)&#123; G[++tot].nxt=head[u],G[tot].to=v,G[tot].val=val,G[tot].cot=cot,head[u]=tot; G[++tot].nxt=head[v],G[tot].to=u,G[tot].val=0,G[tot].cot=-cot,head[v]=tot;&#125; inline bool Spfa()&#123; memset(pre,0,sizeof(pre)); memset(dist,0x3f,sizeof(dist)); memset(vis,0,sizeof(vis)); std::queue&lt;int&gt; q; q.push(s),vis[s]=1,dist[s]=0; while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(G[i].val&gt;0&amp;&amp;dist[v]&gt;dist[u]+G[i].cot)&#123; dist[v]=dist[u]+G[i].cot; pre[v].last=u,pre[v].edge=i; if(!vis[v])&#123;q.push(v),vis[v]=1;&#125; &#125; &#125;vis[u]=0; &#125;return dist[t]!=0x3f3f3f3f;&#125;inline ll EK()&#123; ll maxflow=0; ll cost=0; int min_flow; while(Spfa())&#123; min_flow=inf; for(int i=t;i!=s;i=pre[i].last) min_flow=min(min_flow,G[pre[i].edge].val); for(int i=t;i!=s;i=pre[i].last)&#123; G[pre[i].edge].val-=min_flow; G[pre[i].edge^1].val+=min_flow; &#125; maxflow+=min_flow; cost+=min_flow*dist[t]; &#125;return cost; &#125;int main()&#123; int n,_n,_p,_m,_f,_s; IN(n);s=0,t=n*2+1; for(int i=1;i&lt;=n;++i)&#123; int x;IN(x); add(s,id(1,i),x,0),add(id(0,i),t,x,0); &#125; IN(_p),IN(_m),IN(_f),IN(_n),IN(_s); for(int i=1;i&lt;=n;++i)&#123; if(i+1&lt;=n)add(id(1,i),id(1,i+1),inf,0); if(i+_m&lt;=n)add(id(1,i),id(0,i+_m),inf,_f); if(i+_n&lt;=n)add(id(1,i),id(0,i+_n),inf,_s); add(s,id(0,i),inf,_p); &#125; printf("%lld\n",EK()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [WC2013]Á≥ñÊûúÂÖ¨Âõ≠ Ê†ë‰∏äÂ∏¶‰øÆÊîπËé´Èòü luoguP4074/Uoj58]]></title>
    <url>%2F2019%2F03%2F08%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4074%2F</url>
    <content type="text"><![CDATA[ÊØíÁò§È¢òÁõÆÔºåÊ†ë‰∏äÂ∏¶‰øÆÊîπËé´ÈòüÊùøÂ≠êÈ¢ò„ÄÇ ÂÖ≥‰∫éÊ†ë‰∏äËé´ÈòüÂíåÂ∏¶‰øÆÊîπËé´ÈòüÁöÑÊñáÁ´†Êà≥Ëøô $QwQ‚Äã$ :[ÁÆóÊ≥ï]Ëé´Èòü&amp;Ê†ë‰∏äËé´Èòü ÁÑ∂ÂêéÂ∞±ÊòØÂ∞ÜÂÖ∂ÁªìÂêàÂú®‰∏ÄËµ∑‰∫ÜÔºåÁªìÂêàÁöÑËØùÁÇíÈ∏°ÁÆÄÂçïÔºåÂ∞±ÊòØÁ†ÅÈáèÂ¢ûÂ§ß‚Ä¶ ÂèØ‰ª•ÁÆó‰Ωú‰∏Ä‰∏™Ê†ë‰∏äËé´Èòü/Ê†ë‰∏äÂ∏¶‰øÆÊîπËé´ÈòüÁöÑÊùøÂ≠êÊù•Áúã„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cctype&gt;#include&lt;bitset&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define swap(x,y) ((x)^=(y)^=(x)^=(y))const int N=1e5+24;const int LogN=20;const int inf=1e9+9;inline int IN()&#123; int x=0;char ch;bool flag=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); return flag?-x:x;&#125;int n,m,q,v[N],w[N],c[N];/*test*/int id[N&lt;&lt;1],in[N],out[N],dep[N],f[N][LogN],sequencelong;/*dfs&amp;lca*/int head[N],cnt;/*Tree Edge*/struct Edge&#123;int nxt,to;&#125;G[N&lt;&lt;1];/*Tree Edge*/int c0,c1,block,tot[N],cl[N],cr[N],vis[N],modify[N];/*MO*/struct MO&#123;int l,r,lbe,rbe,time,id,lca,ans;&#125;Q[N];/*MO*/ll now,Ans[N];bool cmp(MO a,MO b)&#123; if(a.lbe^b.lbe)return a.lbe&lt;b.lbe; if(a.rbe^b.rbe)return a.rbe&lt;b.rbe; if(a.time^b.time)return a.time&lt;b.time;&#125;inline void add(int u,int v)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,head[v]=cnt;&#125;void Get_Lca_and_sequence(int u,int fa)&#123; dep[u]=dep[fa]+1,f[u][0]=fa; for(int i=1;i&lt;20;++i)f[u][i]=f[f[u][i-1]][i-1]; id[in[u]=++sequencelong]=u; for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=fa)Get_Lca_and_sequence(G[i].to,u); id[out[u]=++sequencelong]=u; return;&#125;int Lca(int u,int v)&#123; if(dep[u]&lt;dep[v])swap(u,v); for(int i=19;~i;--i) if(dep[u]-(1&lt;&lt;i)&gt;=dep[v])u=f[u][i]; for(int i=19;~i;--i) if(f[u][i]!=f[v][i])u=f[u][i],v=f[v][i]; return u==v?u:f[u][0];&#125;inline void _Main_input()&#123; n=IN(),m=IN(),q=IN();/*line 1*/ for(int i=1;i&lt;=m;++i)v[i]=IN();/*line 2*/ for(int i=1;i&lt;=n;++i)w[i]=IN();/*line 3*/ for(int i=1;i&lt;n;++i)add(IN(),IN());/*line 4 to n+2*/ for(int i=1;i&lt;=n;++i)c[i]=IN();/*line n+3*/ Get_Lca_and_sequence(1,0); block=std::ceil(std::pow(sequencelong,0.66666)); for(int i=1;i&lt;=q;++i)&#123;/*line n+4 to n+4+q*/ int Type=IN(),x=IN(),y=IN(); if(Type==1)&#123; Q[++c1].id=c1,Q[c1].time=c0; if(x==y)&#123; Q[c1].lbe=(Q[c1].l=in[x])/block; Q[c1].rbe=(Q[c1].r=in[x])/block; &#125;else&#123; if(in[x]&lt;in[y]&amp;&amp;out[y]&lt;out[x])&#123; Q[c1].lbe=(Q[c1].l=in[x])/block; Q[c1].rbe=(Q[c1].r=in[y])/block; &#125; else if(in[y]&lt;in[x]&amp;&amp;out[x]&lt;out[y])&#123; Q[c1].lbe=(Q[c1].l=in[y])/block; Q[c1].rbe=(Q[c1].r=in[x])/block; &#125; else&#123; if(out[x]&lt;in[y])&#123; Q[c1].lbe=(Q[c1].l=out[x])/block; Q[c1].rbe=(Q[c1].r=in[y])/block; Q[c1].lca=Lca(x,y); &#125; else if(out[y]&lt;in[x])&#123; Q[c1].lbe=(Q[c1].l=out[y])/block; Q[c1].rbe=(Q[c1].r=in[x])/block; Q[c1].lca=Lca(x,y); &#125; &#125; &#125; &#125;else modify[++c0]=x,cl[c0]=c[x],cr[c0]=y,c[x]=y; &#125;return;&#125;inline void work(int x)&#123; if(vis[x])now-=1ll*v[c[x]]*w[tot[c[x]]--]; else now+=1ll*v[c[x]]*w[++tot[c[x]]]; vis[x]^=1;return;&#125;inline void add(int x)&#123; if(vis[modify[x]])&#123;work(modify[x]);c[modify[x]]=cr[x];work(modify[x]);&#125; else c[modify[x]]=cr[x];&#125;inline void del(int x)&#123; if(vis[modify[x]])&#123;work(modify[x]);c[modify[x]]=cl[x];work(modify[x]);&#125; else c[modify[x]]=cl[x];&#125;inline void _Main_Mo_Solve()&#123; std::sort(Q+1,Q+c1+1,cmp); int l=1,r=0,nowtime=c0; for(int i=1;i&lt;=c1;++i)&#123; while(nowtime&gt;Q[i].time)del(nowtime--); while(nowtime&lt;Q[i].time)add(++nowtime); while(l&lt;Q[i].l)work(id[l++]); while(l&gt;Q[i].l)work(id[--l]); while(r&lt;Q[i].r)work(id[++r]); while(r&gt;Q[i].r)work(id[r--]); if(Q[i].lca)work(Q[i].lca); Ans[Q[i].id]=now; if(Q[i].lca)work(Q[i].lca); &#125;&#125;inline void _Main_output()&#123; for(int i=1;i&lt;=c1;++i) printf("%lld\n",Ans[i]);&#125;int main()&#123; _Main_input(); _Main_Mo_Solve(); _Main_output(); return 0;&#125; ÂΩìÁÑ∂ÔºåÂ∞ΩÁÆ°ÂÜçÊØíÁò§ÔºåËøô‰∏™‰πüÂè™ÊòØÂÖ•Èó®ÁöÑÊ†ë‰∏äÂ∏¶‰øÆÊîπËé´ÈòüÁöÑÈ¢òÁõÆ„ÄÇ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ëé´Èòü</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÁÆóÊ≥ï„Äë ÊµÖË∞à4ÁßçËé´ÈòüÂèä‰æãÈ¢ò]]></title>
    <url>%2F2019%2F03%2F08%2F%5B%E7%AE%97%E6%B3%95%5D%E8%8E%AB%E9%98%9F%26%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%2F</url>
    <content type="text"><![CDATA[ÂÜçÊ≠§ËæìÂÖ•‰Ω†ÁöÑÂØÜÁ†Å‰ª•‰æøÈòÖËØªÂÖ®Êñá Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>ÊÄªÁªì</tag>
        <tag>Ëé´Èòü</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SCOI2007]Ëú•Ëú¥ ÁΩëÁªúÊµÅ luogu2472]]></title>
    <url>%2F2019%2F03%2F06%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2472%2F</url>
    <content type="text"><![CDATA[ÁΩëÁªúÊµÅ‚Ä¶‚Ä¶..È¢òÁõÆË¶ÅÊ±ÇÊàë‰ª¨Ê±ÇÂá∫ËÉΩÈÄÉÁ¶ªÁöÑËú•Ëú¥Êï∞ÈáèÁöÑÊúÄÂ§ßÂÄºÔºå‰∏çÂ∞±ÊòØÊúÄÂ§ßÊµÅÂêóÔºü ÁÑ∂ÂêéËÄÉËôëÊÄé‰πàÂª∫Ê®°„ÄÇ È¶ñÂÖàÊù•ÁúãÁúãËú•Ëú¥ÔºåÊàë‰ª¨Â∞ÜËøô‰∫õËú•Ëú¥ÁöÑÁÇπË∑ü $s$ ËøûËæπÔºåËæπÊùÉÊòØÂ§öÂ∞ëÂë¢ÔºüÊÉ≥‰∏ÄÊÉ≥ÔºåÁî±‰∫é‰∏Ä‰∏™‰ΩçÁΩÆÂè™Êúâ‰∏ÄÂè™Ëú•Ëú¥ÔºåÈÇ£‰πàËæπÊùÉÂ∞±ÂΩìÁÑ∂ÊòØ $1$ ‰∫Ü„ÄÇ ÁÑ∂ÂêéËÄÉËôëÈÄÉÁ¶ªÁöÑËøô‰∫õÊü±Â≠êÔºåÈ¢òÁõÆËØ¥‰ªÄ‰πàÁü≥Êü±ÈÉΩ‰∏çÁ®≥ÂÆöÔºåÊØèÊ¨°ÂΩìËú•Ëú¥Ë∑≥Ë∑ÉÊó∂ÔºåÊâÄÁ¶ªÂºÄÁöÑÁü≥Êü±È´òÂ∫¶Âáè $1$ ÔºåÁúã‰ººÂæà‰∏çÂ•ΩÂäûÔºå‰ΩÜÊòØËøôÊÅ∞ÊÅ∞Â∞±ÊòØÁΩëÁªúÊµÅ„ÄÇÂØπ‰∫éÊü±Â≠êÈó¥ÁöÑ‰∏ÄÊù°ËæπÔºå‰ªé $s$ ÁªèËøáËú•Ëú¥ÁöÑÁÇπÁöÑÊó∂ÂÄôÔºåÊµÅÈáèÂ∞±Âè™Êúâ $1$ ‰∫ÜÔºåËøô‰∏™ $1$ ÁöÑÊµÅÈáèÊµÅËøáÊü±Â≠ê‰∏≠ÁöÑËæπÁöÑÊó∂ÂÄôÂ∞±‰ºöËÆ©ËøôÊù°ËæπÁöÑËæπÊùÉÂáè $1$ ÔºåÂáèÂà∞ $0$ ÂΩìÁÑ∂Â∞±‰∏çËÉΩÊµÅ‰∫Ü„ÄÇ ÈÇ£‰πàÊü±Â≠ê‰πãÈó¥ÊÄé‰πàËøûËæπÂë¢Ôºü ÂØπ‰∫é‰∏Ä‰∏™Êü±Â≠êÔºåÊàë‰ª¨Â∞ÜÂÆÉÊãÜÊàê‰∏§‰∏™ÁÇπÔºå‰∏Ä‰∏™ÂÖ•ÁÇπÔºå‰∏Ä‰∏™Âá∫ÁÇπ„ÄÇÂÖ∂‰∏≠ÂÖ•ÁÇπÂêëÂá∫ÁÇπËøû‰∏ÄÊù°ËæπÔºåËæπÊùÉ‰∏∫Ëøô‰∏™Êü±Â≠êÁöÑÈ´òÂ∫¶„ÄÇÂ¶ÇÊûú‰∏Ä‰∏™Êü±Â≠êÔºåÂà§Êñ≠‰∏Ä‰∏ãÔºåÂèëÁé∞‰ªéÂÆÉËøôÈáåÂèØ‰ª•Ë∑≥Âá∫ÂéªÔºåÈÇ£‰πàÂ∞±Â∞ÜËøô‰∏™Êü±Â≠êÁöÑÂá∫ÁÇπÂêë $t$ Ëøû‰∏ÄÊù°ËæπÔºåËøôÊù°Ëæπ‰ªÖ‰ªÖÊòØ‰ª£Ë°®ÊâæÂà∞‰∫ÜÁ≠îÊ°àÔºåÂØπÁ≠îÊ°àÊ≤°ÊúâÂΩ±ÂìçÔºåËæπÊùÉ‰∏∫ $inf$ „ÄÇ ÁÑ∂ÂêéÊàë‰ª¨ÂÜçÁúã‰∏Ä‰∏ãÔºåËøô‰∏™Êü±Â≠êËÉΩÂà∞ËææÁöÑÊü±Â≠êÊúâÂì™‰∫õÔºåËøôÈáåÁõ¥Êé•ÁÆóÊõºÂìàÈ°øË∑ùÁ¶ªÂ∞±Â•Ω‰∫Ü„ÄÇÁÑ∂ÂêéÁî±ËøôÊù°Êü±Â≠êÁöÑÂá∫ÁÇπÂêëËÉΩÂà∞ËææÁöÑÊü±Â≠êÁöÑÂÖ•ÁÇπËøû‰∏ÄÊù°ËæπÔºåËæπÊùÉÂë¢ÔºüËøòÊòØ‰∏∫ $inf$ „ÄÇÂõ†‰∏∫Êàë‰ª¨ÂØπ‰∏Ä‰∏™Êü±Â≠êÁöÑÂΩ±ÂìçÂ∞±ÊòØÂÖ•ÁÇπÂà∞Âá∫ÁÇπÁöÑÈÇ£‰∏ÄÊù°ËæπÔºåÈÇ£‰∏ÄÊù°ËæπÁöÑËæπÊùÉÂ∑≤ÁªèÈôêÂà∂‰∫ÜËøô‰∏™Êü±Â≠êÁöÑ‰ΩøÁî®ÈáèÔºåÊâÄ‰ª•‰∏≠Èó¥ÁöÑËæπÊùÉ‰∏∫ $inf$ „ÄÇ Ê≥®ÊÑèÊï∞ÁªÑÂ§ßÂ∞èÔºåË¶ÅÂºÄÂ§ß‰∏ÄÁÇπ„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118/*---[SCOI2007]Ëú•Ëú¥.ÁΩëÁªúÊµÅ-ÊúÄÂ§ßÊµÅ ÊØíÁò§È¢òÁõÆ*/#include&lt;queue&gt;#include&lt;vector&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define ID(ty,x,y) ((ty)*r*c+id[(x)][(y)])const int N=55;const int S=1e5+2;const int inf=1e9+9;std::queue&lt;int&gt; q;std::vector&lt;std::pair&lt;int,int&gt; &gt; lizard;std::vector&lt;std::pair&lt;int,int&gt; &gt; Pillar;int r,c,d,s,t;int dep[S],head[S],cnt=1;int val[N][N],id[N][N],tot=0,total=0;char str;struct Edge&#123;int nxt,to,val;&#125;G[N*N*8];inline void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int bfs()&#123; std::memset(dep,0,sizeof(dep)); dep[s]=1;q.push(s); while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(!dep[v]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125; &#125;return dep[t];&#125;int dfs(int u,int flow)&#123; if(u==t||!flow)return flow; int used=0,rlow; for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(dep[v]==dep[u]+1&amp;&amp;G[i].val&gt;0)&#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[u]=-1; return used;&#125;int dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow;&#125;void _pre_in()&#123; IN(r),IN(c),IN(d); s=0,t=r*c*2+1; Pillar.clear();//Êü±Â≠ê lizard.clear();//Ëú•Ëú¥ for(int i=1;i&lt;=r;++i) for(int j=1;j&lt;=c;++j)&#123; std::cin&gt;&gt;str; id[i][j]=++tot,val[i][j]=str-'0'; if(val[i][j]&gt;0)Pillar.push_back(std::make_pair(i,j)); &#125; for(int i=1;i&lt;=r;++i) for(int j=1;j&lt;=c;++j)&#123; std::cin&gt;&gt;str; if(str=='L')++total,lizard.push_back(std::make_pair(i,j)); &#125; return;&#125;void _pre_add_line()&#123;//ËøûËæπ for(int i=0;i&lt;Pillar.size();++i)&#123; int x=Pillar[i].first,y=Pillar[i].second; add(ID(0,x,y),ID(1,x,y),val[x][y]); if(x&lt;=d||y&lt;=d||x+d&gt;r||y+d&gt;c)add(ID(1,x,y),t,inf);//ÂèØ‰ª•ÈÄÉÂá∫Âéª &#125; for(int i=0;i&lt;Pillar.size();++i) for(int j=0;j&lt;Pillar.size();++j)&#123; if(i==j)continue; int xi=Pillar[i].first,yi=Pillar[i].second; int xj=Pillar[j].first,yj=Pillar[j].second; if((xi-xj)*(xi-xj)+(yi-yj)*(yi-yj)&lt;=d*d) add(ID(1,xi,yi),ID(0,xj,yj),inf);//Êü±Â≠ê‰πãÈó¥ÂèØ‰ª•‰∫íÁõ∏Âà∞Ëææ &#125; for(int i=0;i&lt;lizard.size();++i)&#123; int x=lizard[i].first,y=lizard[i].second; add(s,ID(0,x,y),1);//Ê∫êÁÇπÂêëËú•Ëú¥ËøûËæπ &#125;return;&#125;int main()&#123; _pre_in(); _pre_add_line(); printf("%d\n",total-dinic()); /*Ê≥®ÊÑèÊúÄÁªàË¶ÅÁÆóÁöÑÊòØÊúÄÂ∞ëÁöÑÊú™ÈÄÉÁ¶ªÁöÑÊï∞Ôºå‰∏çÊòØÈÄÉÁ¶ªÁöÑÊúÄÂ§ßÊï∞*/ return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [HNOI2013]ÂàáÁ≥ï ÁΩëÁªúÊµÅ bzoj3144]]></title>
    <url>%2F2019%2F03%2F04%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj3144%2F</url>
    <content type="text"><![CDATA[ËØùËØ¥ÂàáÁ≥ïÊúâÂæàÂ§öÁªÜËèåÔºåÂπ∂‰∏îÈ´ò‰ª∑ÔºåÁé∞Âú®‰∏çËÆ©‰π∞‰∫ÜÔºå‰πü‰∏çËÆ©Âçñ‰∫Ü‚Ä¶‚Ä¶.. Â•ΩÂêßÊàë‰ª¨Êù•Ëß£ÂÜ≥‰∏Ä‰∏ãËøôÈ¢òÂêß„ÄÇ È¢ù‚Ä¶‚Ä¶ÊÑüËßâÈ¢òÊÑèÊúâÁÇπ‰∏çÂèØËØªÔºåÂÆûÈôÖ‰∏äÈ¢òÁõÆÂ∞±ÊòØËØ¥Áªô‰Ω†‰∏Ä‰∏™Á´ãÊñπ‰ΩìÔºåÁÑ∂ÂêéÁ´ãÊñπ‰Ωì‰∏≠ÁöÑÊØè‰∏Ä‰∏™ÁÇπÈÉΩÊúâ‰∏Ä‰∏™ÊùÉÂÄºÔºåË°®Á§∫Â¶ÇÊûúË¶ÅÂàáËøô‰∏™ÁÇπÁöÑËØùÊâÄËä±Ë¥πÁöÑ‰ª£‰ª∑ÔºåÈÇ£‰πàËøôÊó∂ÈúÄË¶ÅËÆ©‰Ω†Ê®™ÁùÄÂàáÔºåÂ∞ÜËøô‰∏™Á´ãÊñπ‰ΩìÂàáÊàê‰∏§ÂçäÔºåÊ±ÇÊúÄÂ∞è‰ª£‰ª∑„ÄÇ ËøôÂ∞±ÊòØÂæàÊòéÊòæÁöÑÊúÄÂ∞èÂâ≤‰∫ÜÔºåÂàáÊàê‰∏§Âçä‰ΩøÂæó $s$ Âíå $t$‰∏çËøûÈÄöÂòõ„ÄÇ ‰∫éÊòØÊàë‰ª¨ÂèØ‰ª•ËÄÉËôëËøôÊ†∑Âª∫ËæπÔºöÂØπ‰∫éËøô‰∏™Á´ãÊñπ‰ΩìÔºåÊàë‰ª¨Âª∫‰∏Ä‰∏™ËôöÊãüÂ±Ç‚ÄîÁ¨¨ $0$ Â±ÇÔºåÂØπ‰∫éÁ¨¨ $0$ Â±ÇÁöÑÊØè‰∏Ä‰∏™ÁÇπÔºåÊàë‰ª¨Áî® $s$ ‰∏éÂÖ∂Áõ∏ËøûÔºåËøô‰∏™ËøûÊé•ÁöÑËæπÊòØ‰∏çËÉΩË¢´Ââ≤ÊéâÁöÑÔºåÊâÄ‰ª•ËæπÊùÉ‰∏∫ $inf$ „ÄÇÁÑ∂ÂêéÂØπ‰∫éÁ¨¨ $R$ Â±ÇÁöÑÊâÄÊúâÁÇπÔºåÊàë‰ª¨ÈÉΩÂ∞ÜÂÖ∂‰∏é $t$ Áõ∏ËøûÔºåÂêåÊ†∑ÁöÑÈÅìÁêÜÔºåËæπÊùÉ‰∏∫ $inf$ „ÄÇÁÑ∂Âêé‰∏≠Èó¥ÁöÑÁÇπÁöÑËØùÔºåËÄÉËôë‰∏Ä‰∏™ÁÇπ $(x,y,z)$ ÔºåÊàë‰ª¨Ëøû‰∏ÄÊù° $(x‚àí1,y,z)$ Âà∞ $(x,y,z)$ ÁöÑËæπÔºåÊùÉÂÄº‰∏∫ $v(x,y,z)$ (Âç≥ÁÇπ $(x,y,z)$ ÁöÑÊùÉÂÄº) „ÄÇ Ëøô‰∏™Â∞±ÊòØÂü∫Êú¨ÁöÑ‰∫ÜÔºåÂ¶ÇÊûúÊ≤°ÊúâÁ¨¨‰∫å‰∏™ÂÖâÊªëÊÄßÁöÑÈôêÂà∂ÔºåÁõ¥Êé•Ë∑ë $Dinic$ Â∞±Â•Ω‰∫Ü„ÄÇ ‰ΩÜÊòØÁé∞Âú®Êúâ‰∫ÜËøô‰∏™ÈôêÂà∂ÔºåÊÄé‰πàÂäûÂë¢Ôºü ÂØπ‰∫é‰∏Ä‰∏™Á´ñËΩ¥ÔºåÂÅáËÆæËøô‰∏™Á´ñËΩ¥ÁöÑÊ®™Á´ñÂùêÊ†á‰∏∫ $(x,y)$ ÔºåÁé∞Âú®Âú®Ëøô‰∏™Á´ñËΩ¥‰∏äÊúâ‰∏Ä‰∏™È´òÂ∫¶‰∏∫ $z$ ÁöÑÁÇπÔºåËøô‰∏™ÁÇπÁöÑÂùêÊ†áÊòæÁÑ∂‰∏∫ $(x,y,z)$ ÔºåÈÇ£‰πàÁé∞Âú®ÁöÑÊÉÖÂÜµÂ∞±ÊòØÔºåÂ¶ÇÊûúÈÄâ‰∫Ü $z$ ÔºåÈÇ£‰πàÁõ∏ÈÇªÁ´ñËΩ¥‰∏äÁöÑ $z‚àíd,z+d$ ÈÉΩÂøÖÈ°ªÈÄâ„ÄÇ ‰∫éÊòØÊàë‰ª¨ËÄÉËôëÔºå‰ªé $(x,y,z)$ ÂêëÁõ∏ÈÇªÊï∞ËΩ¥ÁöÑ $z‚àíd,z+d$ Ëøû‰∏ÄÊù° $inf$ ÁöÑËæπÔºåËøôÊ†∑Â∞±ÂèØ‰ª•‰øùËØÅÊ≠£Á°ÆÊÄß‰∫Ü„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int dx[5]=&#123;0,0,0,-1,1&#125;;const int dy[5]=&#123;0,-1,1,0,0&#125;;const int N=8e4+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int P,Q,R,D,s,t,pointval[42][42][42];inline int point(int x,int y,int z)&#123;return x*P*Q+y*Q+z;&#125;namespace Dinic&#123; std::queue&lt;int&gt; q; struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;2]; int cnt(1),dep[N],head[N]; inline void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125; inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t]; &#125; inline int dfs(int x,int flow)&#123; if(x==t||!flow)return flow; int used=0,rlow; for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used; &#125; inline int dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow; &#125;&#125;int main()&#123; IN(P),IN(Q),IN(R),IN(D);s=0,t=N-1; for(int i=1;i&lt;=R;++i) for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) IN(pointval[i][j][k]); for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) Dinic::add(s,point(0,j,k),inf); for(int i=1;i&lt;=R;++i) for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) Dinic::add(point(i-1,j,k),point(i,j,k),pointval[i][j][k]); for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) Dinic::add(point(R,j,k),t,inf); for(int i=D;i&lt;=R;++i) for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) for(int l=0;l&lt;5;++l)&#123; int tx=dx[l]+j,ty=dy[l]+k; if(tx&lt;1||tx&gt;P||ty&lt;1||ty&gt;Q)continue; Dinic::add(point(i,j,k),point(i-D,tx,ty),inf); &#125; printf("%d\n",Dinic::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SDOI2015]Á∫¶Êï∞‰∏™Êï∞Âíå Ëé´ÊØî‰πåÊñØÂèçÊºî luoguP3327]]></title>
    <url>%2F2019%2F03%2F01%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3327%2F</url>
    <content type="text"><![CDATA[ÂèàÊòØ‰∏ÄÈÅìÁ•ûÂ•áÁöÑÈ¢òÁõÆ„ÄÇ ‰∏ÄÂè•ËØùÈ¢òÊÑèÔºöÁªôÂÆö $n,m$ Ê±Ç $\sum_{i=1}^{n}\sum_{j=1}^{m}d(ij)$ ‰∫éÊòØÂºÄÂßãÊé®ÂºèÂ≠êÔºö ÊúâËøô‰πà‰∏ÄÊù°ÂÖ¨ÂºèÔºö d(ij)=\sum_{x|i}\sum_{y|j}[gcd(x,y)=1]Ëøô‰∏™ÈùûÂ∏∏ÈáçË¶ÅÔºåËá≥‰∫éËØÅÊòéÁöÑËØùÔºåÊú¨‰∫∫Â§™Âº±ÔºåÁïô‰∏™ÂùëÔºåÂà∞Êó∂ÂÄôÂÜçÂ°´ÔºåËØ∑Â§ßÂÆ∂Ë∞ÖËß£ $QwQ$ „ÄÇ ÁÑ∂ÂêéÂë¢ÔºüÂèëÁé∞È¢òÁõÆÊ±ÇÁöÑÂºèÂ≠êÂêéÈù¢Ê≠£Â•ΩÊòØ $d(ij)$ Ôºå‰∫éÊòØÁæéÊªãÊªãÁöÑÂ•óËøõÂéª„ÄÇ \sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{x|i}\sum_{y|j}[gcd(i,j)=1]$x$ Âíå $y$ Êàë‰ª¨ÊâîÂà∞ÂâçÈù¢ÂéªÊûö‰∏æÔºåÂêéÈù¢Êù•ËÆ°ÁÆóÂÆÉ‰ª¨ÂØπÂÆÉ‰ª¨ÁöÑÂÄçÊï∞ÂÅöÂá∫ÁöÑË¥°ÁåÆ„ÄÇ ÂèØ‰ª•Áü•ÈÅìÂâçÈù¢ÁöÑ $x$ Âú® $n$ ‰ª•ÂÜÖÁöÑÂÄçÊï∞Êúâ $\lfloor\frac{n}{x}\rfloor$ ‰∏™Ôºå$y$ Âú® $m$ ‰ª•ÂÜÖÁöÑÂÄçÊï∞Êúâ $\lfloor\frac{m}{y}\rfloor$Ôºå‰∫éÊòØÔºö \sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{x|i}\sum_{y|j}[gcd(i,j)=1]=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[gcd(i,j)=1]ÊåâÁÖßÂ•óË∑ØÔºåÊàë‰ª¨ËÆæÔºö f(x)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[gcd(i,j)=k]g(k)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[k|gcd(i,j)]ÈÇ£‰πàÊòæÁÑ∂ÊúâÔºö g(k)=\sum_{k|d} f(d)Ëøô‰∏™ÂºèÂ≠êÂæàÊúâÁÜüÊÇâÁöÑÂë≥ÈÅìÔºåÊòæÁÑ∂ÊòØÂèçÊºîÂ∏∏ËßÅÁöÑÁ¨¨‰∫åÁßçÂΩ¢Âºè„ÄÇ ÊâÄ‰ª•Â∞±ÊúâÔºö f(k)=\sum_{k|d}\mu(\frac{d}{k})g(d)Êàë‰ª¨ÁöÑÁ≠îÊ°àÊòØ$f(1)$ÔºåÈÇ£‰πàÂ∞±ÊòØÔºö f(1)=\sum_{d=1}^{n}\mu(d)g(d)Áé∞Âú®Êù•ËÄÉËôëÊÄé‰πàËÆ°ÁÆó $g$ „ÄÇ g(k)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[k|gcd(i,j)]ÂêéÈù¢ÁöÑ $k$ ÂæàÁ¢çÁúºÔºåÊ∂àÊéâ‰ªñ„ÄÇ g(k)=\sum_{x=1}^{\lfloor\frac{n}{k}\rfloor}\sum_{y=1}^{\lfloor\frac{m}{k}\rfloor}\lfloor\frac{n}{xk}\rfloor\lfloor\frac{m}{yk}\rfloor‰∫éÊòØÊàë‰ª¨È¢ÑÂ§ÑÁêÜ‰∏Ä‰∏™ÂáΩÊï∞ $s$ Ôºö s(k)=\sum_{i=1}^{k}\lfloor\frac{k}{i}\rfloorÈÇ£‰πà $g(k)$ Â∞±ÂæàÂ•ΩÁÆó‰∫ÜÔºö g(k)=s(n/k) \cdot s(m/k)Â§çÊùÇÂ∫¶ÁöÑËØùËøòÂ•ΩÔºåÈ¢ÑÂ§ÑÁêÜ $s$ Êó∂ÂèØ‰ª•Êï¥Âá∫ÂàÜÂùóÔºå$O(\sqrt{n})$ ÁàΩÊ≠™Ê≠™„ÄÇÁÑ∂ÂêéÁöÑËØùÔºåÂèëÁé∞ÁªüËÆ°Á≠îÊ°àÁöÑÊó∂ÂÄô $g$ ÂáΩÊï∞‰πüÂèØ‰ª•Êï¥Âá∫ÂàÜÂùóÔºå$O(\sqrt{n})$ „ÄÇÊúÄÂêéÊÄªÊó∂Èó¥Â§çÊùÇÂ∫¶ $O(T\sqrt{n})$ (???)ÂèçÊ≠£Ëøá‰∫ÜÂ∞±Ë°åÔºåÊàë‰πü‰∏ç‰ºöÁÆó $QwQ$ „ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=5e4+2;const int inf=1e9+9;int T,n,m,cnt;int mui[N],vis[N],prime[N];ll s[N]; inline void _pre_mui()&#123; mui[1]=1; for(int i=2;i&lt;=N;++i)&#123; if(!vis[i])prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;5e4)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;mui[i*prime[j]]=0;break;&#125; mui[i*prime[j]]=-mui[i]; &#125; &#125; for(int i=1;i&lt;=N;++i)mui[i]+=mui[i-1]; for(int x=1;x&lt;=N;++x)&#123;//ÂÆûÈôÖ‰∏äËøôÈáåÊòØO(n sqrt(n))Ôºå‰∏çËøáÂΩ±Âìç‰∏çÂ§ß„ÄÇ ll res=0; for(int l=1,r=0;l&lt;=x;l=r+1) r=(x/(x/l)),res+=1ll*(r-l+1)*(x/l); s[x]=res; &#125;return;&#125;inline ll solve(int n,int m)&#123; ll ans=0; if(n&gt;m)n^=m^=n^=m; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); ans+=1ll*(mui[r]-mui[l-1])*s[n/l]*s[m/l]; &#125;return ans;&#125;int main()&#123; _pre_mui(); scanf("%d",&amp;T); while(T--)&#123; scanf("%d%d",&amp;n,&amp;m); printf("%lld\n",solve(n,m)); &#125;return 0;&#125; =\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ëé´ÊØî‰πåÊñØÂèçÊºî</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [ÂõΩÂÆ∂ÈõÜËÆ≠Èòü]CrashÁöÑÊï∞Â≠óË°®Ê†º Ëé´ÊØî‰πåÊñØÂèçÊºî luoguP1829]]></title>
    <url>%2F2019%2F03%2F01%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1829%2F</url>
    <content type="text"><![CDATA[ÂêêÊßΩ‰∏Ä‰∏ãTyporaËøô‰∏™ÁºñËæëÂô®ÔºöÁ†Å‰∫Ü‰∏Ä‰∏äÂçàÁöÑÈ¢òËß£ÔºåÂ±ÖÁÑ∂Á™ÅÁÑ∂Âç°Êú∫ÔºåÂπ∂‰∏îËá™Âä®ÂÖ≥Êéâ‰∫ÜÔºåÁÑ∂ÂêéÈáçÊñ∞ÊâìÂºÄÔºåÂèëÁé∞‰øùÂ≠òÁöÑ‰πüÊ≤°‰∫Ü„ÄÇÁÑ∂ÂêéÂºπÂá∫‰∏Ä‰∏™‚ÄúTyporaÊÑèÂ§ñÂÖ≥Èó≠‚ÄùÁöÑÁ™óÂè£ÔºåÁúüÊÉ≥‰∏ÄÊã≥‰∏äÂéª„ÄÇ Âè™Â•ΩÈáçÊñ∞Ëá™Â∑±Á†Å‰∫Ü‚Ä¶‚Ä¶„ÄÇ(‰ª•‰∏äÊòØÂêêÊßΩÔºåËØ∑‰∏çË¶ÅÂú®ÊÑè) ÁÆó‰∫ÜÁÆó‰∫ÜÔºåÈáçÊñ∞ÂÜôÂêß„ÄÇÊâÄ‰ª•‰Ω†ÁúãÂà∞ÁöÑËøôÊòØÁ¨¨‰∫å‰ªΩÁ®øÂ≠ê„ÄÇ ‰ªçÁÑ∂‰∏äËé´ÊØî‰πåÊñØÂèçÊºî„ÄÇ ‰ºóÊâÄÂë®Áü•Ôºö lcm(i,j)=\frac{ij}{gcd(i,j)}‚ÄãÈÇ£‰πàÊàë‰ª¨Â∞ÜËøô‰∏™Â∏¶ËøõÂéüÂºèÔºö \sum_{i=1}^{n}\sum_{j=1}^{m}lcm(i,j) = \sum_{i=1}^{n}\sum_{j=1}^{m}\frac{ij}{gcd(i,j)}‚ÄãÊàë‰ª¨Êûö‰∏æ $gcd(i,j)$ ÁöÑÂÄºÔºö \sum_{d=1}^{n}\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)=d]\frac{ij}{d}=\sum_{d=1}^{n}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ijd=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ijËÆæÔºö f(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=x]ijg(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[x|gcd(i,j)]ijÂèØÂæóÔºö g(x)=\sum_{x|d}f(d)ËÄÉËôëÊÄé‰πàËÆ°ÁÆó $g(x)$ Ôºö g(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[x|gcd(i,j)]ijg(x)=\sum_{i=1}^{\lfloor\frac{n}{dx}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{dx}\rfloor}ij \cdot x^2g(x)=x^2\sum_{i=1}^{\lfloor\frac{n}{dx}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{dx}\rfloor}ijËøô‰∏™ÊòæÁÑ∂ÊòØÂèØ‰ª• $O(1)$ ÁÆóÂá∫ÁöÑ„ÄÇ ÁªßÁª≠Ôºö ans=\sum_{d=1}^{n}d\cdot f(1)f(1)=\sum_{d=1}^{\lfloor\frac{n}{}\rfloor}\mu(d)g(d)Ëøô‰∏™Êó∂ÂÄôÁöÑÂ§çÊùÇÂ∫¶Âè™ÊòØ $O(n^2)$ ÔºåÁªßÁª≠‰ºòÂåñ„ÄÇ Â∞Ü $ans$ ÂÜôÂá∫Ôºö ans=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ijÂèëÁé∞ÂêéÈù¢ÂèØ‰ª•Êï¥Èô§ÂàÜÂùóÔºÅ ÁªßÁª≠ÔºåÂ∞Ü $f(1)$ ÂÜôÂá∫Ôºö f(1)=\sum_{i=1}^{n}\mu(i)g(i)f(1)=\sum_{i=1}^{n}\mu(i)i^2\sum_{a=1}^{\lfloor\frac{n}{di}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{di}\rfloor}abÂ∞Ü $g$ ÊãÜÂºÄÂêéÔºåÊàë‰ª¨ÂèØ‰ª•ÂèëÁé∞ÂêéÈù¢ÂèàÂèØ‰ª•Êï¥Èô§ÂàÜÂùóÔºÅ ÈÇ£‰πàÁé∞Âú®Â∞±ÊòØ $O(n)$ ‰∫ÜÔºåÂèØ‰ª•Ëøá„ÄÇ Code-$O(n)$123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define MOD 20101009#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e7+2;const int inf=1e9+9;int mui[N],sum[N];int vis[N],prime[N],cnt;inline void _pre_mui(int n)&#123; mui[1]=1; for(int i=2;i&lt;=n;++i)&#123; if(!vis[i])prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;n)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;mui[i*prime[j]]=0;break;&#125; mui[id*prime[j]]=-mui[i]; &#125; &#125;return;&#125;inline int solve(int n,int m)&#123; ll ans=0; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); int res=1ll*(1ll*(n/l)*(n/l+1)/2%MOD)*(1ll*(m/l)*(m/l+1)/2%MOD)%MOD; ans+=1ll*(sum[r]-sum[l-1])%MOD*res%MOD; ans%=MOD; &#125;return (ans+MOD)%MOD;&#125;int main()&#123; int n,m,ans=0; scanf("%d%d",&amp;n,&amp;m); if(n&gt;m)n^=m^=n^=m; _pre_mui(n); for(int i=1;i&lt;=n;++i) sum[i]=(sum[i-1]+1ll*i*i%MOD*mui[i]%MOD+MOD)%MOD; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); int res=1ll*(l+r)*(r-l+1)/2%MOD; ans=(ans+1ll*solve(n/l,m/l)*res%MOD)%MOD; &#125; printf("%d\n",ans); return 0;&#125; ÊØíÁò§Âá∫È¢ò‰∫∫‰∏ç‰ºöÊîæËøáÊàë‰ª¨ÔºåËøô‰∏™ÊØíÁò§Êõ¥Êîπ‰∫ÜÊï∞ÊçÆÔºö $n,m \leq 10^{10}$ „ÄÇ ‚ÄúÂìáÂíîÂíîÂíîÂç°Êéâ‰Ω†‰ª¨ÁöÑ O(n) !‚Äù ÁúüÊÉ≥‰∏ÄÊã≥‰∏äÂéªËøô‰∏™Êô∫Èöú„ÄÇ $O(\sqrt{n})$ ÊòØËøáÁöÑ‰∫ÜÁöÑÔºåÊïÖËÄÉËôëÂêëÁùÄËøô‰∏™ÊñπÂêëÂâçËøõ„ÄÇ ÁªßÁª≠Êé®ÂºèÂ≠êÔºö ans=\sum_{d=1}^{n}d\sum_{i=1}^{n}\mu(i)i^2\sum_{a=1}^{\lfloor\frac{n}{di}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{di}\rfloor}abÁúãËßÅËøô‰∏™ $di$ ‰∫ÜÂêóÔºüÊàë‰ª¨‰ª§ $T=di$ ÔºåÁÑ∂ÂêéÂ∞Ü $T$ ÊâîÂà∞ÂâçÈù¢ÂéªÊûö‰∏æ‰∏Ä‰∏ã„ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØÂêéÈù¢ÁöÑ‰∏§‰∏™ $\sum$ ÔºåËøôÁé©ÊÑèË∑ü $i,d$ Ê≤°ÂÖ≥Á≥ªÔºå‰∏ÄËµ∑ÊâîÂà∞ÂâçÈù¢Âéª„ÄÇ ‰∫éÊòØÂ∞±ÂèòÊàê‰∫ÜÔºö ans=\sum_{T=1}^{n}\sum_{a=1}^{\lfloor\frac{n}{T}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{T}\rfloor}ab\sum_{i|T}i^2\frac{T}{i}\mu(i)ÔºüÔºüÔºüÔºüÔºüÔºüÔºü È¶ñÂÖàÂâçÈù¢ÁöÑËøôÊÆµÊòØÊ≤°ÊúâÈóÆÈ¢òÁöÑÂØπÂêßÔºåÈÇ£‰πàÂêéÈù¢ÁöÑÂë¢Ôºü ÂêéÈù¢ÁöÑÂéüÊù•ÊòØ‰∏çÊòØÔºö \sum_{d=1}^{n}d\sum_{i=1}^{n}\mu(i)i^2ÈÇ£‰πà‚Ä¶‚Ä¶Áé∞Âú®Êàë‰ª¨Êûö‰∏æÁöÑ $T$ ÊòØ $i \cdot d$ ÔºåÊàë‰ª¨Êûö‰∏æ‰∫Ü‰∏Ä‰∏ãÂèØËÉΩÁöÑ $i$ ÔºåÊàê‰∏∫ $i$ ÁöÑÂøÖÂ§áÊù°‰ª∂ËÇØÂÆöÊòØËÉΩË¢´ $T$ Êï¥Èô§ÂØπÂêßÔºüÈÇ£‰πàËøô‰∏™Êó∂ÂÄôÁöÑ $d$ Âë¢ÔºüÂæàÊòæÁÑ∂ÊòØ $\frac{T}{i}$ ÂØπÂêßÔºü ÊâÄ‰ª•Âïä‚Ä¶‚Ä¶Â∞±ÊòØËøô‰πàÂÜô‰∫Ü„ÄÇ ‰ΩÜÊòØËøôÊ†∑ÂÜôÊúâ‰ªÄ‰πàÁî®Âïä $QwQ$ È¶ñÂÖàÔºåÊàë‰ª¨Êù•ÁúãÔºå$i^2$ ÊòØ‰∏™‰ªÄ‰πàÈ¨ºÔºüÊàë‰ª¨ËÆæ‰∏Ä‰∏™ÂáΩÊï∞ $Q(i)=i^2$ Ôºå‰∫éÊòØÊàë‰ª¨ÂèØ‰ª•ÂèëÁé∞ÔºåËøô‰∏™‰∏úË•øÊòØ‰∏™ÂÆåÂÖ®ÁßØÊÄßÂáΩÊï∞ÔºåÁÑ∂ÂêéÁúã $\frac{T}{i}$ ÔºåÊòæÁÑ∂ÊòØ $id(\frac{T}{i})$ Ôºå‰πüÊòØÂÆåÂÖ®ÁßØÊÄßÂáΩÊï∞„ÄÇ‰∫éÊòØ‰∏§‰∏™ÂÆåÂÖ®ÁßØÊÄßÂáΩÊï∞Áî®ÁãÑÂà©ÂÖãÈõ∑Âç∑ÁßØÂç∑Ëµ∑Êù•ÔºåÂÆÉ‰ª¨ÁöÑÁãÑÂà©ÂÖãÈõ∑Âç∑ÁßØÊòØ‰∏ÄÂÆöÂèØ‰ª•Á≠õÂá∫Êù•ÁöÑ„ÄÇÂêéÈù¢ÁöÑ $\mu$ ÊòØÁßØÊÄßÂáΩÊï∞ÔºåÁÑ∂ÂêéÂë¢ÔºüÂêéÈù¢ÁöÑÈÇ£‰∏ÄÂù®ÈÉΩÂèØ‰ª•Á≠õÂá∫Êù•ÔºÅ ‰∫éÊòØÁæéÊªãÊªã„ÄÇ Êàë‰ª¨ËÆæ $sum[k]$ Ë°®Á§∫ÂΩì $T$ ‰∏∫ $k$ ÁöÑÊó∂ÂÄôÂêéÈù¢ÈÇ£‰∏ÄÂù®ÁöÑÂÄº„ÄÇ ÈÇ£‰πàÁé∞Âú®ÂàÜ‰∏âÁßçÊÉÖÂÜµÔºö $k$ ÊòØË¥®Êï∞ÔºåËøô‰∏ãÂ≠êÂêéÈù¢ÁöÑ $i$ Âè™ËÉΩÊòØ $1$ Âíå $k$ Ôºå$1$ ÁöÑÊó∂ÂÄôÁöÑÂÄºÂ∞±ÊòØ $k$ Ôºå$k$ ÁöÑÊó∂ÂÄôÁöÑÂÄºÊòØ $k^2\cdot \frac{k}{k}\cdot \mu(k)$ ÔºåÂæàÊòæÁÑ∂Ëøô‰∏™Êó∂ÂÄôÁöÑ $\mu(k)$ ÁöÑÂÄºÊòØ $-1$ Ôºå‰∫éÊòØËøô‰∏™Êó∂ÂÄôÁöÑÂÄºÊòØ $-k^2$ ÔºåÈÇ£‰πàËøô‰∏™Êó∂ÂÄô $sum[k]$ ÁöÑÂÄºÊòØ $k-k^2$ „ÄÇ $\mu(k)$ ‰∏∫ $0$ ÔºåËøô‰∏ãÂ≠êÁöÑËØùÂ∞±ËÇØÂÆöÊúâ‰∏Ä‰∏™ $j$ Ôºå‰ΩøÂæó $k$ ÂèØ‰ª•Êï¥Èô§ $j^2$ ÔºåËøô‰∏™Êó∂ÂÄôÂÅáËÆæÂ∞±Âè™ËÉΩÊï¥Èô§ $j^2$ Ôºå‰πüÂ∞±ÊòØËØ¥ $\mu(k/j)$ ÁöÑÂÄºÈùû $0$ „ÄÇÈÇ£‰πàÊàë‰ª¨ÁúãÁúãÔºåÂú® $sum$ ÊâÄËÆ°ÁÆóÁöÑÂºèÂ≠ê‰∏≠ÔºåÂè™Êúâ $T$ ÁöÑÂõ†Â≠êÂØπ $T$ ‰∫ßÁîüË¥°ÁåÆ„ÄÇËÄÉËôë $k/j$ Âà∞ $k$ Â§ö‰∫Ü‰ªÄ‰πàÂõ†Â≠ê„ÄÇËøô‰∏™Êó∂ÂÄôÂ§öÁöÑÂõ†Â≠êÊúâ‰∏§Á±ªÔºå‰∏ÄÁ±ªÊòØÂåÖÂê´‰∫Ü $j^2$ ÁöÑÔºå‰∏ÄÁ±ªÊòØÂè™ÂåÖÂê´‰∫Ü $j$ ÁöÑ„ÄÇÁ¨¨‰∫åÁ±ªÁöÑÂèØ‰ª•ÂÖà‰∏çÁÆ°ÔºåÂõ†‰∏∫‰πãÂâç $k/j$ ‰∏≠Êúâ‰∫Ü‰∏Ä‰∏™ $j$ ÔºåËøôÁ±ªÂõ†Â≠êÁöÑË¥°ÁåÆÂ∑≤ÁªèÁÆóËøá‰∫Ü„ÄÇÈÇ£‰πàÂØπ‰∫éÁ¨¨‰∏ÄÁ±ªÂõ†Â≠êÔºåÂõ†‰∏∫ÂåÖÂê´‰∫Ü $j^2$ ÔºåÊâÄ‰ª• $\mu$ ÂÄº‰∏∫ $0$ ÔºåÂØπÁ≠îÊ°àÊ≤°Êúâ‰ªª‰ΩïË¥°ÁåÆ„ÄÇ ÈÇ£‰πàËøô‰∏™Êó∂ÂÄôÂØπÁ≠îÊ°àÊúâË¥°ÁåÆÁöÑËøòÊòØ $k/j$ ÁöÑÂõ†Â≠êÔºå‰πò‰∏ä‰∏Ä‰∏™ $j$ ÂêéÊ≤°ÊúâÊõ¥Â§öÁöÑÂØπÁ≠îÊ°àÈÄ†ÊàêË¥°ÁåÆÁöÑÂõ†Â≠ê„ÄÇ ‰ΩÜÊòØÊàë‰ª¨ÂèëÁé∞‰∏äÈôê $T$ Âèò‰∫ÜÔºåÂ¢ûÂ§ß‰∫Ü $j$ ÂÄçÔºåÂØπ‰∫éÂéüÊù•ÁöÑÊØè‰ªΩË¥°ÁåÆÁöÑÂÄº‰πüÂ¢ûÂ§ß‰∫Ü $j$ ÂÄç„ÄÇÁî±‰∫éÊ≤°ÊúâÂÖ∂‰ªñÁöÑË¥°ÁåÆÔºå$k$ ÁöÑÊâÄÊúâÁöÑË¥°ÁåÆÈÉΩÊù•Ëá™ $k/j$ ÔºåÈÇ£‰πàÁõ¥Êé•ËΩ¨ÁßªÂ∞±Â•Ω„ÄÇ ÊâÄ‰ª•ÊòØ$sum[k]=sum[k/j]\cdot j$ ÂØπ‰∫éÂâ©‰∏ãÁöÑÊÉÖÂÜµÔºåÊàë‰ª¨ÂèëÁé∞ÔºåËøô‰∏™ÂèØ‰ª•Áõ¥Êé•ËΩ¨Áßª‰∫Ü„ÄÇÂΩìÊàë‰ª¨Êûö‰∏æ $k$ ÁöÑÊó∂ÂÄôÔºåËÄÉËôëÊÄé‰πàÁî® $k$ Êù•ËΩ¨Áßª $k\cdot j$ ÔºåËøô‰∏™Êó∂ÂÄô $j$ ÊòØË¥®Êï∞ÔºåÂπ∂‰∏î $k$ ‰∏≠‰∏çÂåÖÂê´ $j$ Ôºå‰πüÂ∞±ÊòØËØ¥ $k$ ‰∏é $j$ ‰∫íË¥®„ÄÇ‰∫éÊòØÊ†πÊçÆÁßØÊÄßÂáΩÊï∞ÁöÑÊÄßË¥®Ôºå$sum[k]=sum[k/j]\cdot sum[j]$ Â∞±Â•Ω„ÄÇ ‰∫éÊòØËøô‰∏™Êó∂ÂÄôÂâçÈù¢ÂÜçÊï¥Âá∫ÂàÜÂùó‰∏Ä‰∏ãÔºåÂ§çÊùÇÂ∫¶ $O(\sqrt{n})$ „ÄÇ Âê¨ËØ¥Êúâ‰∫∫Ë¢´Âç°‰Ωè $O(n)$ ÂêéÊ≤°ÊúâÊé®ÂºèÂ≠ê‰∫ÜÔºåÁõ¥Êé•‰∏ä‰∫Ü‰∏™ÊùúÊïôÁ≠õÔºåËøô‰∫∫‰∏ÄÁúãÂ∞±ÊòØÊùúÊïôÂ£´‰∫ÜÔºåÂπ∂‰∏î‰πüËØ¥Êòé‰∏çÁèÇÂ≠¶ÁöÑ‰∏äÊùúÊïôÁ≠õÊòØÂ∏ÉÊòüÁöÑ Code-$O(\sqrt{n})$123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #define ll long long#define MOD 20101009#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y)) const int N=1e7+3;const int inf=1e9+9; int sum[N],vis[N],prime[N],cnt; inline void _pre_mui_sum()&#123; vis[1]=sum[1]=1; for(int i=2;i&lt;=N;++i)&#123; if(!vis[i])prime[++cnt]=i,sum[i]=(i-1ll*i*i%MOD+MOD)%MOD; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;=N)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;sum[i*prime[j]]=1ll*sum[i]*prime[j]%MOD;break;&#125; else sum[i*prime[j]]=1ll*sum[i]*sum[prime[j]]%MOD; &#125; &#125; for(int i=1;i&lt;=N;++i) sum[i]=(sum[i-1]+sum[i])%MOD;&#125; int main()&#123; int n,m; _pre_mui_sum(); scanf("%d%d",&amp;n,&amp;m); if(n&gt;m)std::swap(n,m); long long ans=0; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); int res=(1ll*(1+n/l)*(n/l)/2%MOD)*(1ll*(1+m/l)*(m/l)/2%MOD)%MOD; ans+=1ll*(sum[r]-sum[l-1]+MOD)%MOD*res%MOD; ans%=MOD; &#125; printf("%lld\n",(ans+MOD)%MOD); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ëé´ÊØî‰πåÊñØÂèçÊºî</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë Â£´ÂÖµÂç†È¢Ü ÁΩëÁªúÊµÅ luogu4311]]></title>
    <url>%2F2019%2F03%2F01%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4311%2F</url>
    <content type="text"><![CDATA[ËÆ®ÂéåÊ≠ªÊùÉÈôêÈ¢ò‰∫ÜÔºåÁÑ∂ËÄåËøôÈ¢òÂèàÊòØ $bzoj$ ÁöÑÊùÉÈôêÈ¢ò„ÄÇ $QwQ$ Âè™Â•ΩÂéªÊ¥õË∞∑‰∏äÂÅö‰∫ÜÔºåÂπ∏Â•ΩÊ¥õË∞∑Êî∂ÁöÑÈ¢òÁõÆÊØîËæÉÂ§ö„ÄÇ ËøôÈ¢òÂ∞±ÊòØÁΩëÁªúÊµÅÔºåÊàë‰ª¨ÂÖàÂÅáËÆæÊ£ãÁõò‰∏äÊëÜÊª°‰∫ÜÂ£´ÂÖµÔºåËøô‰∏™Êó∂ÂÄôÈúÄË¶ÅÊãøËµ∞‰∏Ä‰∫õÂ£´ÂÖµÔºå‰ΩøÂæóÊ£ãÁõò‰ªçÁÑ∂ÊòØÂêàÊ≥ïÁöÑÔºåÊ±ÇÊãøËµ∞ÁöÑÊúÄÂ§öÊï∞„ÄÇ È¢ù‚Ä¶‚Ä¶ÊúÄÂ§öÊï∞ËÆ©ÊàëÊÉ≥Ëµ∑‰∫ÜÊúÄÂ§ßÊµÅÔºå‰∏çËøáÁé∞Âú®ËøòÊòØÂÖàÊù•ËÄÉËôëÊÄé‰πàÂª∫Âõæ„ÄÇ Êàë‰ª¨Âª∫‰∏§ÊéíÁÇπÔºåÁ¨¨‰∏ÄÊéíË°®Á§∫Ë°åÔºå‰∏ÄÂÖ± $M$ ‰∏™ÁÇπÔºåÁ¨¨‰∫åÊéíË°®Á§∫ÂàóÔºå‰∏ÄÂÖ± $N$ ‰∏™ÁÇπ„ÄÇÂØπ‰∫é‰∏Ä‰∏™ÁÇπ $(x,y)$ ÔºåÂ∞±ÂÉè‰ªéÁ¨¨‰∏ÄÊéíÁöÑÁ¨¨ $x$ Âè∑ÁÇπÂêëÁ¨¨‰∫åÊéíÁöÑÁ¨¨ $y$ Âè∑ÁÇπËøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $1$ ÁöÑËæπ„ÄÇ Ëøô‰∏™ÊòæÁÑ∂ÊòØÊ≤°ÊúâÈóÆÈ¢òÁöÑ„ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØÈôêÂà∂ÔºåÂØπ‰∫éÁ¨¨ $k$ Ë°åÔºåËá≥Â∞ëË¶ÅÊúâ $L_k$ ‰∏™Â£´ÂÖµÔºå‰∫éÊòØÊàë‰ª¨‰ªé $s$ Ëøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $L_k$ ÁöÑËæπÔºåËøûÂêëÁ¨¨‰∏ÄÊéíÁöÑÁ¨¨ $k$ Âè∑ÁÇπ„ÄÇÂêåÊ†∑ÁöÑÈÅìÁêÜÔºåÂØπ‰∫éÁ¨¨‰∫åÊéíÁöÑÁÇπÔºåÊàë‰ª¨‰πüÂÉèËøôÊ†∑ËøûËæπÔºåËøûÂêë $t$ „ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØË∑ë $dinic$ ‰∫ÜÔºåÂà´Âøò‰∫ÜË∑ëÂá∫Êù•ÁöÑ‰∏çÊòØÁ≠îÊ°àÔºåËÄåÊòØÊúÄÂ§öÊãøËµ∞ÁöÑÂ£´ÂÖµÊï∞ÔºåËøô‰∏™Êó∂ÂÄôÁî®Êï¥‰∏™Ê£ãÁõòÁöÑÁ©∫‰ΩçÁΩÆÁöÑ‰∏™Êï∞ÂáèÂéªË∑ëÂá∫Êù•ÁöÑ $maxflow$ ÊâçÊòØÁ≠îÊ°à„ÄÇ ÈúÄË¶ÅÊ≥®ÊÑèÂá†‰∏™ÁÇπÔºö ÂΩìÊàë‰ª¨Âú®ÁúãÂà∞‰∫Ü‰∏Ä‰∏™Ë°å/ÂàóÁöÑÊó∂ÂÄôÔºåÈúÄË¶ÅÂà§Êñ≠‰∏Ä‰∏ã„ÄÇÂÅáËÆæËøô‰∏™ÊòØË°åÔºåÈÇ£‰πàËøôË°åÁöÑ‰ΩçÁΩÆÊòæÁÑ∂Êúâ $n$ ‰∏™ÔºåÂ¶ÇÊûú $n$ ÂáèÂéªËøôË°åÈöúÁ¢çÁöÑ‰∏™Êï∞ÔºåÂÜçÂáèÂéªÊúÄÂ∞ëË¶ÅÊîæÁöÑÂ£´ÂÖµÊï∞Âêé‰∏∫Ë¥üÊï∞ÔºåÈÇ£‰πàÊòæÁÑ∂Â∞±ÊÄé‰πà‰πü‰∏çÂèØËÉΩÊúâÂêàÊ≥ïÁöÑÊñπÊ°àÔºå‰∫éÊòØÁõ¥Êé•ËæìÂá∫ ‚ÄúJIONG‚Äù Â∞±Â•Ω‰∫Ü„ÄÇ Ê≥®ÊÑèÊï¥‰∏™Ê£ãÁõòÁöÑÁ©∫‰ΩçÁΩÆ‰∏çÊòØ $N\cdot M$ ÔºåËÄåÊòØ $N\cdot M-K$! Êï∞ÁªÑÂ§ßÂ∞èÁöÑËØùÂè™ÈúÄË¶ÅÂºÄÂà∞ $2n$ ÔºåÂπ∂‰∏çÈúÄË¶ÅÂºÄÂà∞ $n^2$ ÔºåÂõ†‰∏∫Âè™Êúâ‰∏§ÊéíÁÇπ„ÄÇ‰ΩÜÊòØËæπÁöÑÊï∞ÁªÑÂ§ßÂ∞èÈúÄË¶ÅÂºÄÂà∞ $n^2$ ÔºåÂõ†‰∏∫Êàë‰ª¨ÂØπ‰∫éÊ£ãÁõò‰∏äÁöÑ‰∏Ä‰∏™ÁÇπÂ∞±Ë¶ÅËøû‰∏ÄÊù°ËæπË°®Á§∫ÂÆÉÔºÅ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=2e2+5;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;std::queue&lt;int&gt; q;struct Edge&#123;int nxt,to,val;&#125;G[N*N];int n,m,k,s,t,cnt(1),dep[N],head[N];int map[N][N],Li[N],Ci[N],Lm[N],Cm[N];inline void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125;inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t];&#125; inline int dfs(int x,int flow)&#123; if(x==t||!flow)return flow; int used=0,rlow; for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used;&#125;inline int dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow;&#125;int main()&#123; IN(m),IN(n),IN(k); s=1,t=n+m+1; int atot=n*m-k; for(int i=1;i&lt;=m;++i)IN(Li[i]); for(int i=1;i&lt;=n;++i)IN(Ci[i]); for(int i=1;i&lt;=k;++i)&#123; int x,y;IN(x),IN(y); map[x][y]=1,Lm[x]++,Cm[y]++; &#125; for(int i=1;i&lt;=m;++i) for(int j=1;j&lt;=n;++j) if(!map[i][j])add(i,j+m,1); for(int i=1;i&lt;=m;++i)&#123; int flow=n-Li[i]-Lm[i]; if(flow&lt;0)&#123;printf("JIONG!");exit(0);&#125; else add(s,i,flow); &#125; for(int i=1;i&lt;=n;++i)&#123; int flow=m-Ci[i]-Cm[i]; if(flow&lt;0)&#123;printf("JIONG!");exit(0);&#125; else add(i+m,t,flow); &#125; printf("%d\n",atot-dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë YYÁöÑGCD Ëé´ÊØî‰πåÊñØÂèçÊºî luogu2257]]></title>
    <url>%2F2019%2F02%2F28%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2257%2F</url>
    <content type="text"><![CDATA[ÂèàÊòØ‰∏ÄÈÅìÂèçÊºîÈ¢òÔºåÊòæÁÑ∂ÔºåÈ¢òÁõÆË¶ÅÊ±ÇÊàë‰ª¨Ê±ÇÂá∫‰∏ãÂºèÔºö \sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)\in prime]‚ÄãËøô‰∏™‰∏çÂ•ΩÊ±ÇÔºåÊàë‰ª¨Êù•Êé®ÂºèÂ≠ê„ÄÇ ËÆæ $n \leq m$ \sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)\in prime]=\sum_{k=1}^{n}\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)=k] \cdot[k \in prime]‚Äã=\sum_{k=1}^{n}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[gcd(i,j)=1]\cdot[k \in prime]Êàë‰ª¨Áü•ÈÅì $\mu$ ÂáΩÊï∞ÁöÑ‰∏Ä‰∏™ÊÄßË¥®Ôºö [n=1]=\sum_{d|n} \mu(d)Â∞Ü $n$ Êç¢‰∏∫ $gcd(i,j)$ ÔºåÁÑ∂ÂêéÊâîÂõûÂéüÂºè„ÄÇ [n=1]=\sum_{d|n} \mu(d) \ \Rightarrow \ [gcd(i,j)=1]=\sum_{d|gcd(i,j)} \mu(d)\sum_{k=1}^{n}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}\sum_{d|gcd(i,j)}\mu(d) \ \ \ (k \in prime)‚Äã=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[d|gcd(i,j)]\cdot \mu(d) \ \ \ (k \in prime)=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}[1|gcd(i,j)]\cdot \mu(d) \ \ \ (k \in prime)=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}\mu(d) \ \ \ (k \in prime)Êàë‰ª¨Áü•ÈÅìÔºåËøôÈáåÁöÑ $\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}‚Äã$ ÂèØ‰ª•ÂèòÊàê $\lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor‚Äã$ ÁöÑÔºåËøôÊòØÁ≠â‰ª∑ÁöÑ„ÄÇ‰∫éÊòØÔºö =\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\mu(d)\cdot \lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor \ \ \ (k \in prime)‚ÄãËøô‰∏™ÂºèÂ≠ê‰æùÊóß‰∏çÂèØÂÅöÔºåÂõ†‰∏∫‰ºöË∂ÖÊó∂ÔºåËÄÉËôëÂ¶Ç‰ΩïÂÜç‰∏ÄÊ≠•‰ºòÂåñ„ÄÇ ËÆæ $T=kd$ ÔºåÈÇ£‰πàÊàë‰ª¨Êûö‰∏æ $T$ Ôºö =\sum_{T=1}^{n}\sum_{k|T,k\in prime}\mu(\frac{T}{k})\cdot \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor$QvQ‚Äã$ Êàë‰ª¨Â∞Ü $\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor‚Äã$ ÊâîÂà∞ÂâçÈù¢Âéª„ÄÇ =\sum_{T=1}^{n}\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor\sum_{k|T,k\in prime}\mu(\frac{T}{k}) ‚ÄãÊòæÁÑ∂ÂêéÈù¢ÁöÑÂèØ‰ª•È¢ÑÂ§ÑÁêÜÔºåÈ¢ÑÂ§ÑÁêÜÂ•Ω‰∫ÜÂêéÔºåÊàë‰ª¨ÊâÄÈúÄË¶ÅËÆ°ÁÆóÁöÑÂ∞±ÊòØËøô‰∏ÄÂùóÔºö \sum_{T=1}^{n}\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T}\rfloorËøô‰∏™ÁâπÂà´Â•ΩÂ§ÑÁêÜÔºåÊï¥Èô§ÂàÜÂùó‰ºòÂåñ‰∏ÄÊ≥¢ÔºåÂ§çÊùÇÂ∫¶ $O(\sqrt(n))$ „ÄÇ ÂºÄÂßãÂ±ÖÁÑ∂ÊÑüËßâËøôÈ¢ò‰∏çÂèØÂÅöÔºåÁÑ∂ÂêéÊÉ≥Ë¶Å‰∏çË¶ÅÁî®ÊØíÊïôÁ≠õÊù•Á≠õ $\mu$ ÁöÑÂâçÁºÄÂíåÔºå‰∏çËøáÊòæÁÑ∂ÊàëÊòØ‰∏ç‰ºöËøôÁßçÈªëÁßëÊäÄÁöÑ $QwQ$ CodeÔºö1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e7+2;const int inf=1e9+9;int vis[N],sum[N],mui[N],f[N],prime[N],cnt;inline void _pre_mui()&#123; mui[1]=1; for(int i=2;i&lt;=N;++i)&#123; if(!vis[i])prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;N)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;mui[i*prime[j]]=0;break;&#125; else mui[i*prime[j]]=-mui[i]; &#125; &#125; for(int i=1;i&lt;=cnt;++i) for(int j=1;prime[i]*j&lt;=N;++j) f[j*prime[i]]+=mui[j]; for(int i=1;i&lt;=N;++i)sum[i]=sum[i-1]+f[i]; return;&#125;inline ll solve(int n,int m)&#123; ll ans=0; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); ans+=(ll)(sum[r]-sum[l-1])*(ll)(n/l)*(ll)(m/l); &#125;return ans;&#125;int main()&#123; _pre_mui(); int n,m,T; scanf("%d",&amp;T); while(T--)&#123; scanf("%d%d",&amp;n,&amp;m); if(n&gt;m)std::swap(n,m); printf("%lld\n",solve(n,m)); &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ëé´ÊØî‰πåÊñØÂèçÊºî</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [POI2007]ZAP-Queries Ëé´ÊØî‰πåÊñØÂèçÊºî luogu3455]]></title>
    <url>%2F2019%2F02%2F27%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3455%2F</url>
    <content type="text"><![CDATA[ÂæàÊòæÁÑ∂ÊòØËÆ©Êàë‰ª¨Ê±ÇÂá∫‰∏ãÂºèÔºö ans=\sum_{i=1}^{A}\sum_{j=1}^{B}[gcd(i,j)=K]Ê†πÊçÆÊÄßË¥®ÂèØ‰ª•ÂæóÂà∞Ôºö ans=\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[gcd(i,j)=1]Êàë‰ª¨ËÆæ‰∏§‰∏™ÂáΩÊï∞Ôºö ÂáΩÊï∞ $f$Ôºå$f(x)$ Ë°®Á§∫ $\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[gcd(i,j)=x]$ ÂáΩÊï∞ $g$ Ôºå$g(x)$ Ë°®Á§∫ $\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[x|gcd(i,j)]$ Êàë‰ª¨ÂèØ‰ª•ÂæóÂà∞Ôºö g(x)=\sum_{x|d} f(x)ËøôÊòØËé´ÊØî‰πåÊñØÂèçÊºîÁöÑÁ¨¨‰∫å‰∏™ÂΩ¢ÂºèÔºö g(n)=\sum_{n|d} f(n) \ \Rightarrow \ f(n)=\sum_{n|d}g(d) \cdot \mu(\frac{d}{n})‰∫éÊòØÔºö g(x)=\sum_{x|d} f(x) \ \Rightarrow \ f(x)=\sum_{x|d}g(x) \cdot \mu(\frac{d}{x})=g(x)=\sum_{x|d} f(x) \ \Rightarrow \ f(x)=\sum_{x|d}g(\frac{d}{x}) \cdot \mu(x)ËÆæ $n=\lfloor\frac{A}{K}\rfloor\ ,\ m=\lfloor\frac{B}{K}\rfloor$ ÈÇ£‰πàÔºö g(x)=\sum_{i=1}^{n}\sum_{i=1}^{m} [x|gcd(i,j)]=\sum_{i=1}^{\lfloor\frac{n}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{K}\rfloor}[1|gcd(i,j)]=\sum_{i=1}^{\lfloor\frac{n}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{K}\rfloor}[1|gcd(i,j)]=\lfloor\frac{A}{K}\rfloor \times\lfloor\frac{B}{K}\rfloorans=f(1)f(1)=\sum_{i=1}^{n}\mu(i)*g(i)=\sum_{i=1}^{n}\mu(i)*\lfloor\frac{A}{K}\rfloor *\lfloor\frac{B}{K}\rfloorËøô‰∏™ÂºèÂ≠êÊòØ $O(n)$ ÁöÑ„ÄÇ ÂèëÁé∞ $\lfloor\frac{A}{K}\rfloor \times\lfloor\frac{B}{K}\rfloor$ ÂèØ‰ª•Êï¥Èô§ÂàÜÂùóÔºå‰∫éÊòØÊàë‰ª¨‰æøÂèØ‰ª•ÂÅöÂà∞ $O(\sqrt{x})$ CodeÔºö12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;const int N=1e5+2;const int inf=1e9+9;int T,cnt;int prime[N],mui[N],vis[N];long long sum[N];inline int _Pre_mui()&#123; mui[1]=1; for(int i=2;i&lt;=N;++i)&#123; if(!vis[i])prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;=N)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;mui[i*prime[j]]=0;break;&#125; else mui[i*prime[j]]=-mui[i]; &#125; &#125;for(int i=1;i&lt;=N;++i)sum[i]=sum[i-1]+mui[i]; return 0;&#125;#define min(x,y) ((x)&lt;(y)?(x):(y))inline void solve(int n,int m,int k)&#123; long long ans=0; n/=k,m/=k; int lim=min(n,m); for(int i=1;i&lt;=lim;)&#123; long long j=min(n/(n/i),m/(m/i)); ans+=1ll*(sum[j]-sum[i-1])*(n/i)*(m/i); i=j+1; &#125;printf("%lld\n",ans); return;&#125;int main()&#123; _Pre_mui(); scanf("%d",&amp;T); while(T--)&#123; int n,m,k; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); solve(n,m,k); &#125;return 0; &#125; ÊâÄ‰ª•Â∞±Ê≤°‰∫Ü„ÄÇ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ëé´ÊØî‰πåÊñØÂèçÊºî</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÊï∞ËÆ∫„Äë ‰ªéÁãÑÂà©ÂÖãÈõ∑Âç∑ÁßØÂà∞Ëé´ÊØî‰πåÊñØÂèçÊºî]]></title>
    <url>%2F2019%2F02%2F27%2F%5B%E6%95%B0%E8%AE%BA%5DDirichley%E5%88%B0Mobius%2F</url>
    <content type="text"><![CDATA[ÂÜçÊ≠§ËæìÂÖ•‰Ω†ÁöÑÂØÜÁ†Å‰ª•‰æøÈòÖËØªÂÖ®Êñá Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>Êï∞ËÆ∫</tag>
        <tag>ÊÄªÁªì</tag>
        <tag>Ëé´ÊØî‰πåÊñØÂèçÊºî</tag>
        <tag>ÁãÑÂà©ÂÖãÈõ∑Âç∑ÁßØ</tag>
        <tag>Ëé´ÊØî‰πåÊñØÂáΩÊï∞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë tower ÁΩëÁªúÊµÅ bzoj4657]]></title>
    <url>%2F2019%2F02%2F26%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4657%2F</url>
    <content type="text"><![CDATA[ËÄÉËØïÁöÑÊó∂ÂÄôÊ≠£Â•ΩËÄÉ‰∫ÜËøôÈÅìÈ¢òÔºåÂÖ®Âú∫‰ªÖÊúâ $lys$ Â§ß‰Ω¨ $AC$ „ÄÇ ÈÉΩ $GG$ ‰∫ÜÔºàÂΩìÁÑ∂ÊàëÊúÄÊÉ®ÔºåÊö¥ÂäõÂàÜÂ±ÖÁÑ∂Ë¢´Âç°‰∫ÜÔºåÂè™Êúâ $10$ ÂàÜ $QwQ$Ôºâ„ÄÇ Êàë‰ª¨Êù•Áúã‰∏Ä‰∏ãÈ¢òÁõÆÔºö È¢òÁõÆÁöÑÈò∂Ê¢ØÊï∞ÊçÆÁúüËâØÂøÉÔºÅ 20ÂàÜÂÅöÊ≥ïÂæàÊòæÁÑ∂Ôºå$n,m \le 5$ ÔºåÂàÜÊòéÊòØÊëÜÁùÄËÆ©Êàë‰ª¨ÁàÜÊêúÔºåÈÇ£‰πàÁõ¥Êé•Êö¥ÂäõÊûö‰∏æÊâìÈÇ£‰∏™ÔºåÂ§ÑÁêÜ‰∏Ä‰∏ãË∑ØÁ∫øÁöÑ‰∫§ÂèâÈóÆÈ¢òÂ∞±Â•Ω‰∫Ü„ÄÇ ÁÑ∂ËÄåÊàëËèúÁàÜ‰∫ÜÔºåËøô‰∏™Â±ÖÁÑ∂ÊâìÊåÇ‰∫ÜÔºåÁÑ∂ÂêéÂ∞±Âè™Ââ©‰∏ã $10$ ÂàÜ‰∫Ü $QvQ$„ÄÇ 40ÂàÜÂÅöÊ≥ïÂèØ‰ª•Âä†‰∏Ä‰∏™Ââ™ÊûùÔºåÊÄé‰πàÂâ™Âë¢Ôºü ÂØπ‰∫é‰∏Ä‰∏™ÁÇÆÂ°îÔºåÂÅáËÆæÊàë‰ª¨‰πãÂâçÂú®ÂÖ∂ÊâìÂáªËåÉÂõ¥ÂÜÖÂ∑≤ÁªèÊâæÂà∞‰∫Ü‰∏Ä‰∏™ÁÇπÔºåËØ•ÁÇπË∑üËØ•ÁÇÆÂ°îÁöÑÊõºÂìàÈ°øË∑ùÁ¶ªÊòØ $x$ ÔºåÂÖ∂ÊùÉÂÄº‰∏∫ $a$ ,ÁÑ∂ÂêéÁé∞Âú®Êàë‰ª¨ÁªßÁª≠ $dfs$ ÔºåÂèëÁé∞ÂèàÊâæÂà∞‰∫Ü‰∏Ä‰∏™ÁÇπ‰πüÂú®ÊâìÂáªËåÉÂõ¥ÂÜÖÔºåËØ•ÁÇπÁöÑ‰∏éËØ•ÁÇÆÁöÑÊõºÂìàÈ°øË∑ùÁ¶ªÊòØ $y$ ÔºåÂÖ∂ÊùÉÂÄºÊòØ $b$ „ÄÇ ÈÇ£‰πàÁé∞Âú®Êàë‰ª¨ÂÅáËÆæ $xb$ ÔºåÈÇ£‰πàÊòæÁÑ∂ÔºåÂØπ‰∫éÊúÄ‰ºòÁöÑÊñπÊ°àÔºåËØ•ÁÇÆÂ°îËÇØÂÆö‰∏ç‰ºöÊâì $b$ ÊùÉÂÄºÁöÑÁÇπ„ÄÇ‰πüÂ∞±ÊòØËØ¥Ôºå$b$ ÊùÉÂÄºÁöÑÁÇπÊ≤°Êúâ $a$ ÊùÉÂÄºÁöÑÁÇπ‰ºòÔºåÂõ†‰∏∫ÊùÉÂÄºÂ∞ë‰∫ÜÔºåÊî∂ÁõäÊ≤°ÈÇ£‰πàÂ§ßÔºåÂπ∂‰∏îÈ£éÈô©(Ë∑ùÁ¶ª)(ÊåáÂÆπÊòìË¢´ÊâìÊñ≠ÁöÑÈ£éÈô©)Â¢ûÂä†‰∫Ü„ÄÇËøôÊó∂Êàë‰ª¨‰æøÂèØ‰ª•ÊîæÂºÉ $b$ ÁÇπÔºåËøôÂ∞±ÊòØ‰∏Ä‰∏™Â∞èÂ∞èÁöÑÂâ™Êûù‰ºòÂåñ„ÄÇ 100ÂàÜÂÅöÊ≥ïËÄÉËôëÊúÄÂ∞èÂâ≤„ÄÇ ÂØπ‰∫éÊØè‰∏Ä‰∏™ÁÇÆÂ°îÔºåÊàë‰ª¨Â∞ÜÂÖ∂ËÉΩÊâìÂá∫ÂéªÁöÑËåÉÂõ¥ÁöÑÊâÄÊúâÁÇπËøûÊàê‰∏ÄÊù°ÈìæÔºåËøôÊù°ÈìæÁöÑ‰∏§Á´ØÂàÜÂà´ËøûÁùÄ $s$ Âíå $t$ „ÄÇ Ëøô‰∏™Êó∂ÂÄôÁöÑ ‚ÄúÂâ≤‚Äù Â∞±ÊòØËØ¥‰Ω†Ëøô‰∏™ÁÇÆÊâìÂà∞Âì™ÈáåÁªìÊùü„ÄÇ Â¶Ç‰∏ãÂõæÔºö ÈÇ£‰πàÁΩëÁªúÊµÅÁöÑÂõæ‰∏≠ÔºåËøôÊù°Èìæ‰∏≠ $3-4$ ÁöÑËøôÊù°ËæπË¢´ÂàáÊñ≠‰∫Ü„ÄÇ ÊâÄ‰ª•Êàë‰ª¨ÊØè‰∏Ä‰∏™ÁÇÆÊúâ‰∏Ä‰∏™ÊâìÂà∞ÁöÑÂú∞Êñπ(ÂΩìÁÑ∂ÂèØ‰ª•‰∏çÊâì)ÔºåËøô‰∏™Êó∂ÂÄôÊØè‰∏ÄÊù°ÈìæÈÉΩÊñ≠‰∫ÜÔºåÊâÄ‰ª•ÂõæÂ∞±Êñ≠‰∫Ü„ÄÇ ‰ΩÜÊòØÂÖ≥Á≥ªÂπ∂Ê≤°ÊúâÈÇ£‰πàÁÆÄÂçïÔºåÂÅáËÆæÁé∞Âú®ÂèàÊúâ‰∏Ä‰∏™ÁÇÆÂ°îÔºåÂÖ∂ËΩ®ËøπË∑üÁé∞Âú®ÁöÑÁÇÆÁõ∏‰∫§‰∫ÜÔºåÂ¶ÇÊûúÁõ∏‰∫§ÁöÑÁÇπÁöÑÁºñÂè∑ $&lt;3$ÔºåÊòæÁÑ∂Ëøô‰∏™Á∫¢ÁÇÆÊòØ‰∏çÂèØ‰ª•ÊâìÂà∞Â∞èËìùÁÇπ( $3$ Âè∑ÁÇπ)ÁöÑÔºåÊàë‰ª¨ËØ•Â¶Ç‰ΩïË°®Á§∫ËøôÁßçÂÖ≥Á≥ªÂë¢Ôºü Áé∞Âú®ÊâÄË°®Á§∫ÁöÑÁä∂ÂÜµÔºö Áé∞Âú®ÁöÑÁä∂ÂÜµÂ∞±ÊòØÔºåÁõ∏‰∫§ÁÇπ‰∏äÈù¢ÁöÑÁÇπÈÉΩÊâì‰∏çÂà∞‰∫Ü(Á∫¢ÁÇÆ)ÔºåÁõ∏‰∫§ÁÇπÂè≥ËæπÁöÑÁÇπÈÉΩÊâì‰∏çÂà∞‰∫Ü(ËìùÁÇÆ)„ÄÇ ‰ΩÜÊòØÊàë‰ª¨‰∏ÄÂÆöË¶Å‰øùËØÅ $S$ Âà∞ $T$ ÁöÑËÅîÈÄö„ÄÇ ÈÇ£‰πàÂ∞±ÂèØ‰ª•Á°ÆÂÆöÔºåÂ¶ÇÊûúÁ∫¢ÁÇÆÊâÄÂú®ÁöÑÁÇπËøûÊé• $S$ ÔºåÈÇ£‰πàËìùÁÇÆÂ∞±Ëøû $T$ÔºåËøôÊ†∑ÊâçÂèØ‰ª•‰Ωø $S$ Âíå $T$ ËøûÈÄö„ÄÇ ÁÑ∂ÂêéÊù•Ëß£ÂÜ≥ÊÄé‰πàÂ§ÑÁêÜÁõ∏‰∫§ÁÇπÁöÑËøûËæπÈóÆÈ¢ò„ÄÇ ‰ΩÜÊòØÔºåÂ¶ÇÊûúÊåâÁÖß‰∏äÈù¢ÁöÑ ‚ÄúÁ∫¢ÁÇÆËøû $S$ ÔºåËìùÁÇÆËøû $T$‚Äù ÁöÑËØùÔºåÁõ¥Êé•ËøôÊ†∑Ëøû‰∏çÂ∞±Â•Ω‰∫ÜÂêóÔºü ‰ªîÁªÜÊÉ≥‰∏ÄÊÉ≥ÔºåËøôÂÖ∂ÂÆûÊòØÂ∏ÉÊòüÁöÑÔºåÂõ†‰∏∫Êàë‰ª¨Ë¶Å‰øùËØÅËøô‰∏™Áõ∏‰∫§ÁÇπÁöÑÂÖ≥Á≥ª‰∏ç‰ºöË¢´Ââ≤ÊéâÔºåÈÇ£‰πàÂ∞±Âõ†ËØ•Â∞ÜËæπÂÄºËÆæ‰∏∫ $inf$Ôºå‰ΩÜÊòØËÆæÂì™Êù°ËæπÂë¢ÔºüËøôÈáåÊâÄÊúâÁöÑËæπÁöÑÂÄºÈÉΩÊòØËøô‰∏™ÁÇπÁöÑÊùÉÂÄºÔºåÊàë‰ª¨‰∏çÂèØËÉΩÁõ¥Êé•ÊîπÁÇπÁöÑÊùÉÂÄºÂêßÔºü ÈÇ£‰πàÂæàÊòæÁÑ∂ÔºåÊàë‰ª¨Â∞ÜÁõ∏‰∫§ÁÇπÊãÜÊàê‰∏§‰∏™ÁÇπÔºåËøô‰∏§‰∏™ÁÇπ‰∏≠Èó¥ËøûÊúâ‰∏ÄÊù°ËæπÊùÉ‰∏∫ $inf$ ÁöÑËæπÔºåËøôÊó∂Êó†ËÆ∫Â¶Ç‰ΩïÈÉΩÂâ≤‰∏çÊéâËøô‰∏™ÁÇπ‰∫Ü„ÄÇ ÊúÄÂêéÂ∞±ÊòØÔºåÊó¢ÁÑ∂Ë¶ÅÊ±ÇÊúÄÂ∞èÂâ≤ÔºåÂØπ‰∫éÂ¶ÇÊûúÁÇÆ‰∏çÂêØÂä®ÁöÑËØùËæπÊùÉÊòØ $0$ ÔºåÈÇ£‰πàÂ∞±ËææÊàê‰∫Ü ‚ÄúÊúÄÂ∞è‚Äù ÁöÑÊïàÊûúÔºåËøôÊòØÈîôÁöÑ„ÄÇÊâÄ‰ª•Êàë‰ª¨ËÆæ‰∏Ä‰∏™Â∏∏Èáè $T$ ÔºåÂ∞ÜÊØèÊù°ËæπÁöÑËæπÊùÉÈÉΩËÆæ‰∏∫ $T-v_i$ Â∞±Â•Ω„ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØÊùøÂ≠ê $Dinic$„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define id(i,j,type) type*n*m+(i-1)*m+j const int N=5e1+6;const int inf=1e9+9;const int dx[4]=&#123;-1,1,0,0&#125;;const int dy[4]=&#123;0,0,-1,1&#125;; int map[N][N],ans,n,m,s,t;int cnt(1),head[N*N*2],dep[N*N*2];struct Edge&#123;int nxt,to,val;&#125;G[N*N&lt;&lt;2];std::queue&lt;int&gt; q; bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(!dep[v]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125; &#125;return dep[t];&#125;int dfs(int u,int flow)&#123; if(u==t||!flow)return flow; int used=0,rlow; for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(dep[v]==dep[u]+1&amp;&amp;G[i].val&gt;0)&#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[u]=-1; return used;&#125; int Dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow;&#125; void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt;&#125; int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) scanf("%d",&amp;map[i][j]); s=0,t=n*m*2+1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j)&#123; if(map[i][j]&lt;0)&#123; int direction=-map[i][j]-1; int x=i,y=j,Mx_val=0; while(true)&#123; x+=dx[direction],y+=dy[direction]; if(x&lt;1||x&gt;n||y&lt;1||y&gt;m)break; Mx_val=max(Mx_val,map[x][y]); &#125;ans+=Mx_val; if(direction&lt;2)add(s,id(i,j,0),inf); else add(id(i,j,1),t,inf); x=i,y=j; while(true)&#123; int tx=x,ty=y; x+=dx[direction],y+=dy[direction]; if(x&lt;1||x&gt;n||y&lt;1||y&gt;m)break; if(direction&lt;2)add(id(tx,ty,0),id(x,y,0),Mx_val-max(0,map[tx][ty])); else add(id(x,y,1),id(tx,ty,1),Mx_val-max(0,map[tx][ty])); &#125; &#125;else add(id(i,j,0),id(i,j,1),inf); &#125; printf("%d\n",ans-Dinic()); return 0;&#125; ‰∏∫‰ªÄ‰πà‰πãÂâçÊ≤°ÊÉ≥Âá∫Êù•Âë¢Ôºü]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2009]ËØó‰∫∫Â∞èG ÂõõËæπÂΩ¢‰∏çÁ≠âÂºè/ÂÜ≥Á≠ñÂçïË∞ÉÊÄß‰ºòÂåñDP luoguP1912]]></title>
    <url>%2F2019%2F02%2F25%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1912%2F</url>
    <content type="text"><![CDATA[Á•ûÂ•áÁöÑÈ¢òÁõÆ $QvQ$ ÔºåÂç°‰∫ÜÊàëÂ•Ω‰πÖ„ÄÇ ÂìéÔºå‰∏ªË¶ÅÊòØÁªÜËäÇË¶ÅÂ§ÑÁêÜÂà∞‰ΩçÔºåÂê¶ÂàôÂ∞±‰ºö WA Â£∞Êª°Áâá„ÄÇ ËÆ∞ÂΩï‰∏Ä‰∏ãÊàëÂ£ÆËßÇÁöÑÊèê‰∫§ËÆ∞ÂΩïÔºö Â§™ÊùØÂÖ∑‰∫Ü $QvQ$ (ÊâØË∞àÊâØ‰∏ç‰∏ãÂéª‰∫Ü‚Ä¶‚Ä¶.) ËøõÂÖ•Ê≠£È¢òÂêß„ÄÇ Ë∑Ø‰∫∫Áî≤Ôºö$bzoj$ ‰∏äÂ±ÖÁÑ∂Ê≤°ÊúâËøôÈÅìÈ¢òÔºüÂØºÊºîÔºöËµ∂Á¥ßËµ∞ÂºÄÔºå‰∏çÁÆ°‰Ω†ÁöÑ‰∫ã ËøôÈ¢òÊòéÊòæÊòØ $DP$ÔºåÊàë‰ª¨ÂèØ‰ª•ÂæàÁÆÄÂçïÁöÑÂæóÂà∞ $DP$ ÊñπÁ®ãÔºö ËÆæ $f[i]$ Ë°®Á§∫ÂØπÂâç $i$ Âè•ËØóÊéíÁâàÂêéÁöÑÊúÄÂ∞è‰∏çÂçèË∞ÉÂ∫¶ÔºåÈÇ£‰πàÂæàÊòæÁÑ∂ÔºåÂØπ‰∫é‰∏Ä‰∏™Áé∞Âú®Êàë‰ª¨ÈúÄË¶ÅËΩ¨ÁßªÁöÑ $i$ÔºåÊàë‰ª¨‰ºöÊâæÂà∞‰∏Ä‰∏™ÊúÄ‰ºòÁöÑ $j$ Ôºå‰ΩøÂæóÁ¨¨ $j+1$ Âè•Âà∞Á¨¨ $i$ Âè•ÁªÑÊàê‰∏Ä‰∏™Êñ∞ÁöÑË°å„ÄÇÈÇ£‰πà‰πãÂâçÁöÑË°åÁöÑÊÄªÂÖ±ÁöÑÊúÄÂ∞è‰∏çÂçèË∞ÉÂ∫¶ÊòæÁÑ∂ÊòØ $f[j]$ÔºåÁé∞Âú®Êàë‰ª¨Â∞±Êù•ËÆ°ÁÆó‰∏Ä‰∏ã $f[i]$ ÁöÑÊúÄÂ∞è‰∏çÂçèË∞ÉÂ∫¶„ÄÇ ÊòæÁÑ∂ÔºåÊòØ‰∏ãÂºè(ÂÖ∂‰∏≠ $sum$ ÊòØÂè•Â≠êÈïøÂ∫¶ÁöÑÂâçÁºÄÂíå)Ôºö f[i]=f[j]+{|sum[i]-sum[j]-L-1|}^PËøôÂ∞±ÊòØÁä∂ÊÄÅËΩ¨ÁßªÊñπÁ®ãÔºåÁöÑÁ°ÆÂæàÂ•ΩÁêÜËß£„ÄÇ‰ΩÜÊòØ‚Ä¶‚Ä¶ËøôÊ†∑Â≠êÂÅöÊòØ $O(N^2)$ ÁöÑÂ§çÊùÇÂ∫¶ÔºåÂè™ËÉΩÊãø $30$ ÂàÜ„ÄÇ ËÄåÊåâÁÖßÈ¢òÁõÆÁöÑÊï∞ÊçÆËåÉÂõ¥ÔºåÊ≠£Ëß£ÁöÑÂ§çÊùÇÂ∫¶Âõ†ËØ•ÊòØ $O(n log n)$ Â∑¶Âè≥„ÄÇÊé•‰∏ãÊù•ËÄÉËôëÊÄé‰πà‰ºòÂåñ„ÄÇ ÁªèÊâìË°®ËßÇÂØüÂèëÁé∞ÔºåÂ¶ÇÊûúÊàë‰ª¨Â∞ÜÊØèÊ¨°Áî®‰ΩúËΩ¨Áßª $i$ ÁöÑÊúÄ‰ºòÁöÑ $j$ Â≠òËµ∑Êù•ÔºåËæìÂá∫Êó∂‰ºöÂèëÁé∞Ôºå$j$ ÊòØÂçïË∞ÉÈÄíÂ¢ûÁöÑ„ÄÇ ËØÅÊòéÁöÑËØùÁöÑÁ°Æ‰∏çÂ•ΩËØÅÔºåÂèØ‰ª•ÁúãÁúã $lyd$ ÁöÑ‰π¶„ÄÇ‰ΩÜÊòØÊåâÁÖßÂÆûÈôÖÁêÜËß£‰∏Ä‰∏ãÊòØÂèØ‰ª•ÁöÑÔºåÊàë‰ª¨Â∞Ü $j$ ÂêéÈù¢ÁöÑ‰∏ÄÁõ¥Âà∞ $i$ ÁöÑÂè•Â≠êÁªÑÊàê‰∫ÜÊñ∞ÁöÑ‰∏ÄË°åÔºåÈÇ£‰πàÂ¶ÇÊûú $j$ ‰∏çÂçïË∞É‰∏äÂçáÁöÑËØùÔºåÊñ∞ÁöÑ‰∏ÄÂè•Â∞Ü‰ºöÂèòÁöÑÂæàÈïøÂæàÈïøÂæàÈïøÔºåÈÇ£‰πàËøôÊó∂ËøôÂè•ÈÄ†ÊàêÁöÑ‰∏çÂçèË∞ÉÂ∫¶Â∞Ü‰ºö‰ª•Âá†‰ΩïÊï∞ÁöÑÂΩ¢ÂºèÁñØÁãÇÂ¢ûÈïøÔºåÈÇ£‰πàÂîØ‰∏ÄÁöÑÊñπÊ≥ïÂ∞±ÊòØÂ∞ÜËøôÂè•ÈïøÂè•Êñ≠Âè•ÔºåËøôÊ†∑Â≠ê $j$ Â∞±‰ºöÂèòÂ§ßÔºåÂèØ‰ª•ÊÑüÊÄßÁêÜËß£‰∏Ä‰∏ã $QvQ$„ÄÇ ‰ΩÜÊòØÊàë‰ª¨Áü•ÈÅì‰∫Ü $j$ ÊòØÂçïË∞É‰∏äÂçáÁöÑËøôÊù°ÊÄßË¥®Êúâ‰ªÄ‰πàÁî®Âë¢Ôºü ÂæàÊòæÁÑ∂ÔºåÊØè‰∏ÄÊ¨°ËΩ¨ÁßªÁöÑÊó∂ÂÄô‰∏çÂøÖÂæÄÂâçÊâæ‰∫ÜÔºåÁõ¥Êé•ÂæÄÂêéÊâæ„ÄÇ Êàë‰ª¨Áª¥Êä§‰∏Ä‰∏™ÈòüÂàóÔºåÈòüÂàóÈáåÁöÑÊØè‰∏Ä‰∏™ÂÖÉÁ¥†Êúâ‰∏â‰∏™ÂèòÈáèÔºö$l,r,c$ ÔºåÂÖ∂‰∏≠ $l$ Âíå $r$ Ë°®Á§∫ $c$ Ëøô‰∏™ÂÜ≥Á≠ñÁöÑÈÄÇÁî®ËåÉÂõ¥ÔºåÂπ∂‰∏îÂú®Ëøô‰∏™ËåÉÂõ¥‰∏≠ $c$ ÊòØÊúÄ‰ºòÁöÑ $j$„ÄÇ ÈÇ£‰πàÁé∞Âú®Êúâ‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑ $i$ÔºåËÄÉËôëÊÄé‰πàÁª¥Êä§Ëøô‰∏™ÈòüÂàó„ÄÇ Êàë‰ª¨ÂèØ‰ª•ÂÖàÊâæÂà∞ $i$ ÊâÄÂú®ÁöÑËåÉÂõ¥ÁöÑÊúÄ‰ºòÁöÑ $j$ÔºåÈÇ£‰πàËøôÊó∂Êàë‰ª¨Ê£ÄÊü•ÈòüÂ§¥ÔºåÂ¶ÇÊûúÈòüÂ§¥ÁöÑËåÉÂõ¥Â∑≤Áªè‰∏çÂåÖÊã¨ $i$ ‰∫ÜÔºåÈÇ£‰πàÁõ¥Êé•ÂºπÂá∫ÔºåÂõ†‰∏∫Êó¢ÁÑ∂ÈòüÂ§¥ÁöÑËåÉÂõ¥‰∏çÂåÖÊã¨ $i$ ‰∫ÜÔºåÈÇ£‰πàËøô‰∏™ÈòüÂ§¥ÂØπ $i+1$ ÂèäÂêéÈù¢ÁöÑÂÖÉÁ¥†ÈÉΩ‰∏çËÉΩ‰∫ßÁîüË¥°ÁåÆÔºåÊïÖÁõ¥Êé•ÂºπÂá∫„ÄÇ ÂºπÂá∫Êó†Áî®ÁöÑÈòüÂ§¥ÂêéÔºåËΩ¨ÁßªÁöÑËØùÂ∞±ÊòØ $O(1)$ ‰∫ÜÔºöÁõ¥Êé•ÂèñÈòüÂ§¥ËΩ¨Áßª‰∏çÂ∞±Â•Ω‰∫ÜÂêóÔºü ÈÇ£‰πàÁé∞Âú®ËÄÉËôëÊÄé‰πàÂ∞Ü $i$ Âä†ÂÖ•Ëøô‰∏™ÈòüÂàóÔºåÊàñËÆ∏Ëøô‰∏™ $i$ ‰πü‰ºöÂØπÂêéÈù¢ÁöÑÂÖÉÁ¥†‰∫ßÁîüË¥°ÁåÆ„ÄÇ Êàë‰ª¨Ê£ÄÊü•ÂΩìÂâçÁöÑÈòüÂ∞æÔºåÊÄé‰πàÂà§Êñ≠Ëøô‰∏™ÈòüÂ∞æÊòØÂê¶ÊØî $i$ Êõ¥‰ºòÂë¢ÔºüÁé∞Âú®ÈòüÂ∞æÁöÑËåÉÂõ¥ÊòØ $l,r$ ÔºåÂ¶ÇÊûú $i$ Êõ¥Êñ∞ $l$ ÊØî $c$ Êõ¥Êñ∞ $l$ Êõ¥‰ºòÔºåÊòæÁÑ∂ $i$ ‰ºöÊØîÂΩìÂâç $l,r$ ËåÉÂõ¥Á±ªÁöÑÊâÄÊúâÁöÑ $c$ Êõ¥‰ºòÔºåÊïÖÂºπÂá∫ÈòüÂ∞æ„ÄÇ ÈÇ£‰πàÔºåÂÅáËÆæÁé∞Âú®Êàë‰ª¨Á¢∞Âà∞‰∫Ü‰∏Ä‰∏™ÈòüÂ∞æÔºåÂÖ∂‰∏≠ $i$ Êõ¥Êñ∞ $r$ Êõ¥‰ºòÔºå $c$ Êõ¥Êñ∞ $l$ Êõ¥‰ºòÔºåÊÄé‰πàÂäûÂë¢Ôºü‰πüÂ∞±ÊòØËØ¥Ëøô‰∏™ÂÖÉÁ¥†ÁöÑËåÉÂõ¥‰∏≠ÂàÜÊàê‰∏§ÂçäÔºåÂâç‰∏ÄÂçä $c$ Êõ¥Êñ∞Êõ¥‰ºòÔºåÂêé‰∏ÄÂçä $i$ Êõ¥Êñ∞Êõ¥‰ºòÔºåÊòæÁÑ∂Ë¶ÅÊãÜÊàê‰∏§‰∏™ÈòüÂàóÂÖÉÁ¥†„ÄÇÈÇ£‰πàÊàë‰ª¨ÊÄé‰πàÁü•ÈÅìËøô‰∏™‰ΩçÁΩÆÂë¢Ôºü‰∫åÂàÜÔºÅ ÈÇ£‰πàËøô‰∏™Êó∂ÂÄôÊàë‰ª¨ÂèØ‰ª•ÂæóÂà∞Á≠îÊ°à‰∫ÜÔºåÂè™ÊòØËæìÂá∫ÊÄé‰πàÂäûÂë¢Ôºü ÂæàÁÆÄÂçïÔºåÊØèÊ¨°ËΩ¨ÁßªÁöÑÊó∂ÂÄôËÆ∞ÂΩï‰∏Ä‰∏ãËΩ¨ÁßªËá™Âì™ÈáåÔºåËøôÂ∞±ÊòØÂàÜË°åÔºåÁÑ∂ÂêéËæìÂá∫Âç≥ÂèØ„ÄÇ ÊúÄÂêéÂ∞±ÊòØÁ≤æÂ∫¶ÈóÆÈ¢ò„ÄÇ È¢òÁõÆË¶ÅÊ±ÇÔºåÂ¶ÇÊûú $f[n]$ (Âç≥ÊâÄÊúâÂè•Â≠êÊéíÁâàÂêéÁöÑÊúÄÂ∞è‰∏çÂçèË∞ÉÂ∫¶) ËøòÊòØÂ§ß‰∫é‰∫Ü $1e18$ ÔºåÈÇ£‰πàËæìÂá∫ ‚Äú$Too \ hard\ to\ arrange$‚ÄùÔºå‰ΩÜÊòØÂ¶ÇÊûúÂú® $DP$ ÁöÑËøáÁ®ã‰∏≠Â∞±ÁÇ∏‰∫Ü $long \ long$ÔºåÈÇ£Â∞± $GG$ ‰∫Ü„ÄÇÊâÄ‰ª•Êàë‰ª¨‰ΩøÁî® $long \ double$ ÔºåÁ≤æÂ∫¶Êõ¥È´òÔºå(‰∏ç‰ºö $int$ ÁöÑÔºåËøôËæàÂ≠ê‰πü‰∏ç‰ºöÁî® $int$ ÁöÑ)„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;typedef long long ll;typedef long double ld;const int NS=1e5+2;const int inf=1e9+9;int T,N,L,P;int head,tail;int last[NS],ans[NS],Next[NS];struct Node&#123;int c,l,r;&#125;q[NS];char s[NS][35];ld sum[NS],f[NS];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;void clear()&#123; memset(last,0,sizeof(last)); memset(sum,0,sizeof(sum)); memset(q,0,sizeof(q)); memset(s,0,sizeof(s)); memset(f,0,sizeof(f));&#125;ld pows(ld x,int y)&#123;//Âø´ÈÄüÂπÇ ld ans=1; for(;y;y&gt;&gt;=1,x*=x)if(y&amp;1)ans*=x; return ans;&#125;ld val(int j,int i)&#123;//ËΩ¨ÁßªÂáΩÊï∞ return f[j]+pows(abs(sum[i]-sum[j]-L-1),P);&#125;void half(int i)&#123;//‰∫åÂàÜËøáÁ®ã int now=q[tail].c,ls=q[tail].l,rs=q[tail].r;//ÂΩìÂâçÈòüÂ∞æËåÉÂõ¥ int ret=q[tail].r+1; while(ls&lt;=rs)&#123; int mid=(ls+rs)&gt;&gt;1; if(val(i,mid)&lt;=val(now,mid))rs=mid-1,ret=mid;//iÊõ¥‰ºò else ls=mid+1;//cÊõ¥‰ºò &#125; if(ret!=q[tail].l)q[tail].r=ret-1;//ÂàÜÊàê‰∫Ü‰∏§Âçä else --tail;//Êï¥‰∏™ÂÖÉÁ¥†ÈÉΩÊØî‰∏çËøái if(ret&lt;=N)q[++tail]=(Node)&#123;i,ret,N&#125;;//iÂàÜ‰∫Ü‰∏Ä‰∏™Âå∫Èó¥Êó∂ÔºåÂä†ÂÖ•Êñ∞ÂÖÉÁ¥†&#125;void output()&#123;//ÂÄºÂæóÊã•ÊúâÁöÑÈ¨ºÁïúËæìÂá∫ if(f[N]&gt;1e18)puts("Too hard to arrange");//Êó†Ëß£ÔºåÊîæÂøÉÂà§1e18 else&#123; printf("%lld\n",(ll)(f[N]+0.5));//Ê≥®ÊÑèÁ≤æÂ∫¶ÈóÆÈ¢ò for(int i=N;i;i=last[i])Next[last[i]]=i;//ËæìÂá∫ int now=0; for(int i=1;i&lt;=N;++i)&#123; now=Next[now]; for(int j=i;j&lt;now;++j)printf("%s ",s[j]); printf("%s\n",s[now]); i=now; &#125; &#125; puts("--------------------");//Ê≥®ÊÑè return;&#125;int main()&#123; IN(T); while(T--)&#123; clear(); IN(N),IN(L),IN(P); for(int i=1;i&lt;=N;++i)&#123; scanf("%s",s[i]); sum[i]=sum[i-1]+strlen(s[i])+1;//ÂÅöÂâçÁºÄÂíå /*Âõ†‰∏∫ËæìÂá∫ÊòØÊúâÁ©∫Ê†ºÁöÑÔºåÊâÄ‰ª•Âä†‰∏ä‰∏Ä‰∏™1*/ &#125; q[head=tail=1]=(Node)&#123;0,1,N&#125;;//ÂàùÂßãÂÖÉÁ¥† for(int i=1;i&lt;=N;++i)&#123; while(head&lt;tail&amp;&amp;q[head].r&lt;i)++head;//Ê∑òÊ±∞Êó†Áî®ÈòüÂ§¥ ++q[head].l; f[i]=val(q[head].c,i);//O(1) ËΩ¨Áßª last[i]=q[head].c;//ËÆ∞ÂΩï‚ÄúËΩ¨ÁßªËá™Âì™Èáå‚Äù while(head&lt;tail&amp;&amp;val(i,q[tail].l)&lt;=val(q[tail].c,q[tail].l))tail--;//ÂºπÂá∫Âä£Ë¥®ÈòüÂ∞æ half(i);//‰∫åÂàÜ &#125; output();//È¨ºÁïúËæìÂá∫ &#125; return 0;//Áªà‰∫éÁªìÊùü&#125; ÊúÄÂêéÔºåÊàëÊúâ‰∏™ÈóÆÈ¢ò„ÄÇ ËøôÊòØÂÜôÁöÑ‰ªÄ‰πàÊñáÁ´†Âïä $QvQ$ ÔºåËÆ©Êàë‰ª¨Êù•ÁåúÊµã‰∏Ä‰∏ã„ÄÇ ÁôΩÊó•‰æùÂ±±Â∞ΩÔºåÈªÑÊ≤≥ÂÖ•Êµ∑ÊµÅÔºåÊ¨≤Á©∑ÂçÉÈáåÁõÆÔºåÊõ¥‰∏ä‰∏ÄÂ±ÇÊ•º„ÄÇ ËøôÊòØ Â∞è $G$ ÂÜôÁöÑÔºü‰ΩúËÄÖÊòéÊòé‰∏çÊòØÂ∞è $G$ Â•Ω‰∏çÂ•Ω„ÄÇ $QvQ$ ÊúâÊØíÂïä‚Ä¶‚Ä¶]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
        <tag>ÂÜ≥Á≠ñÂçïË∞ÉÊÄß</tag>
        <tag>ÂõõËæπÂΩ¢‰∏çÁ≠âÂºè</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [USACO4.4]Pollutant Control ÁΩëÁªúÊµÅ luoguP1344]]></title>
    <url>%2F2019%2F02%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1344%2F</url>
    <content type="text"><![CDATA[ÊúâÂøÖË¶Å‰πà‚Ä¶‚Ä¶Áõ¥Êé•Êâì‰∏™ÁîµËØùÁªôÈõ∂ÂîÆÂïÜÔºö‚ÄùÊàëÁöÑÁâõÂ•∂‰∏çÂØπÔºå‰∏çË¶ÅÊî∂ÁâõÂ•∂ÔºÅ‚Äù‰∏ç‰πÖÂèØ‰ª•‰∫ÜÂêó‚Ä¶‚Ä¶ (Â•Ω‰∫ÜÂ•Ω‰∫ÜËøôÊòØÊâØÊ∑°) ÊòæÁÑ∂Ëøô‰∏™ËøêËæìÂõæÁöÑ $1$ Âè∑ÁÇπÂ∞±ÊòØÂÖ¨Âè∏ÂèëÈÄÅÁâõÂ•∂ÁöÑÂú∞ÊñπÔºå$n$ Âè∑ÁÇπÂ∞±ÊòØÈõ∂ÂîÆÂïÜÔºåÁÑ∂ÂêéÊØè‰∏ÄÊù°ËæπÂ∞±ÊòØËøô‰∏™Ë¥ßËΩ¶ÁöÑÂá∫ÂèëÁÇπ‰∏éÂà∞ËææÁÇπÔºåËæπÊùÉÂç≥‰∏∫Êã¶Êà™Ëøô‰∏™Ë¥ßËΩ¶ÁöÑ‰ª£‰ª∑„ÄÇ ÁÑ∂ÂêéÂë¢Ôºü ÊúÄÂ∞èÁöÑÊçüÂ§±‚Ä¶‚Ä¶‰Ωø $1$ Âà∞‰∏ç‰∫Ü $n$ ÔºåËøôÊòæÁÑ∂Â∞±ÊòØÊúÄÂ∞èÂâ≤Âïä $QwQ$ ÈÇ£‰πàËøôÊ†∑ÊçüÂ§±Êï∞Â∞±ÂæàÂÆπÊòìÂæóÂà∞‰∫ÜÔºåÈÇ£‰πàÊúÄÂ∞ëË¶ÅÂÅúÁöÑÂç°ËΩ¶Êï∞ÊÄé‰πàÊ±ÇÂë¢ÔºüÂæàÊòæÁÑ∂ÔºåÊàë‰ª¨‰ªªÁÑ∂Ë∑ëÊúÄÂ∞èÂâ≤ÔºåÈÇ£‰πàËøô‰∏™ÂõæÊàë‰ª¨Â∞ÜÊâÄÊúâËæπÈÉΩËÆæ‰∏∫ $1$ ÔºåÊòæÁÑ∂Áé∞Âú®ÁöÑÊúÄÂ∞èÂâ≤Â∞±ÊòØÊúÄÂ∞ëË¶ÅÂÅúÁöÑÂç°ËΩ¶Êï∞„ÄÇ ÂæàÊòæÁÑ∂ÔºåÊó∂Èó¥ÁàÜÁÇ∏ÔºåÊª°Â±èÊÉäÂñúÔºÅ ËøôÈáåÊúâ‰∏ÄÁßçÊñπÊ≥ïÔºÅÊàë‰ª¨ËÆæ‰∏Ä‰∏™Â∏∏Êï∞ $T$ ÔºåÂÅáËÆæÂΩìÂâçËæπÁöÑËæπÊùÉÊòØ $w$ ÔºåÈÇ£‰πàÊàë‰ª¨ÂÆûÈôÖËøû‰∏ÄÊù°ËæπÊùÉ‰∏∫ $w \times T+1$ ÁöÑËæπÔºåÂÖ∂‰∏≠ÊúÄÂ∞èÊçüÂ§±Êï∞ÊòæÁÑ∂‰∏∫ $maxflow/T$ ÔºåÈÇ£‰πàÊúÄÂ∞ëË¶ÅÂÅúÁöÑÂç°ËΩ¶Êï∞Âë¢ÔºüÊòæÁÑ∂Â∞±ÊòØ $maxflow\ \%\ T$„ÄÇ ËøôÈáåÁöÑ $T$ Ë¶ÅË∂≥Â§üÂ§ßÔºåÂê¶ÂàôÂ¶ÇÊûúÊØèÊù°ËæπÂêéÈù¢ÁöÑ $+1$ ‰πò‰∏äÂâ≤ÁöÑËæπÊï∞Â§ß‰∫é‰∫Ü $T$ ÔºåÁÑ∂Âêé $\%$ ‰∏Ä‰∏ãÔºåÊÅ≠Âñú‰Ω†ÔºÅ‰Ω† $GG$ ‰∫Ü„ÄÇÂÆûÈôÖ‰∏ä ‚ÄúË∂≥Â§üÂ§ß‚Äù Âè™Ë¶ÅÂ§ß‰∫éËæπÊï∞Â∞±Â•Ω‰∫ÜÔºåÊòæÁÑ∂ËøôÊ†∑Â≠êÂª∫ËæπÊòØË¶ÅÂºÄ $long long$ ÁöÑÔºåÂê¶Âàô‰ºöÁÇ∏„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define A printf("A")#define ll long long#define RI register int#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const ll N=1e5+5;const ll inf=1e9+9;const ll T=2019;//2019Êñ∞Âπ¥Âø´‰πê(Â∞ΩÁÆ°Áé∞Âú®‰∏çÊòØÊó∂ÂÄô‰∫Ü)template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;std::queue&lt;int&gt; q;struct Edge&#123;ll nxt,to,val;&#125;G[N];ll n,m,s,t,cnt(1),dep[N],head[N];inline void add(ll u,ll v,ll w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125;inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; ll x=q.front();q.pop(); for(ll i=head[x];i;i=G[i].nxt)&#123; ll y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t];&#125; inline ll dfs(ll x,ll flow)&#123; if(x==t||!flow)return flow; ll used=0,rlow; for(ll i=head[x];i;i=G[i].nxt)&#123; ll y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used;&#125;int main()&#123; IN(n),IN(m);s=1,t=n; for(ll i=1;i&lt;=m;++i)&#123; ll u,v,w;IN(u),IN(v),IN(w); add(u,v,w*T+1); &#125; ll maxflow=0; while(bfs())maxflow+=dfs(s,inf); printf("%lld %lld\n",maxflow/T,maxflow%T); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [BOI2007]Mokia CDQÂàÜÊ≤ª luogu4390]]></title>
    <url>%2F2019%2F02%2F22%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4390%2F</url>
    <content type="text"><![CDATA[BBQÁÉ§ÁøÖÔºåCDQÂàÜÊ≤ª„ÄÇ ‰∏ÄÈÅìÂæàË£∏ÁöÑ‰∏â‰ΩçÂÅèÂ∫èÔºåÂÖÅËÆ∏Á¶ªÁ∫øÁöÑËØùÔºåÂ∞±‰∏äCDQÂàÜÊ≤ªÔºåÂΩìÁÑ∂ÊÉ≥ÂΩìÁ†ÅÂÜúÂèØ‰ª•Êï≤Ê†ëÂ•óÊ†ë„ÄÇ ÂæàÊòæÁÑ∂Ôºå‰∏âÁª¥Â∞±ÊòØ $x$ ËΩ¥Ôºå$y$ ËΩ¥ÔºåÂíåÊó∂Èó¥„ÄÇ ÁÑ∂ÂêéÂ∞Ü‰∏Ä‰∏™Áü©ÈòµÁöÑËØ¢ÈóÆÊãÜÊàêÂõõ‰∏™ËØ¢ÈóÆÔºåÊåâÁÖßÂÆπÊñ•ÁöÑÊñπÂºèÊêûÔºåËøôÊòæÁÑ∂ÊòØÂèØ‰ª•‰∏îÁÆÄÂçïÁöÑÔºå‰ΩÜÊòØËØ¢ÈóÆÊï∞Â∞Ü‰ºöÁàÜÁÇ∏ $QvQ$ (‰ΩÜÊòØÊ≤°ÊúâÁÇ∏Ôºå‰∏çËàíÊúç) $long long$ ‰πüË¶ÅÂºÄÔºå‰∏çÁÑ∂‰ºöÁÇ∏„ÄÇ ÁÑ∂ÂêéÂ∞±ËøôÊ†∑‰∫Ü„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const ll N=2e6+2;const ll inf=1e9+9;ll s,w,tot,c[N];struct Node&#123; ll x,y,ans,pos,type;&#125;q[N],hep[N];bool cmp(const Node&amp;x,const Node&amp;y)&#123;return x.pos&lt;y.pos;&#125;;struct BIT&#123; void add(ll x,ll v)&#123;for(;x&lt;=w;x+=(x&amp;-x))c[x]+=v;&#125;; ll sum(ll x)&#123;ll res=0;for(;x;x-=(x&amp;-x))res+=c[x];return res;&#125;; void clr(ll x)&#123;for(;x&lt;=w;x+=(x&amp;-x))c[x]=0;&#125;;&#125;T;void CDQ(ll l,ll r)&#123; if(l==r)return; int mid=(l+r)&gt;&gt;1; CDQ(l,mid);CDQ(mid+1,r); ll i=l,j=mid+1,cnt=l; /*CDQÁöÑ‰∏ªË¶ÅÊµÅÁ®ã*/ while(i&lt;=mid&amp;&amp;j&lt;=r)&#123; if(q[i].x&lt;=q[j].x)&#123; /*Ê≥®ÊÑèËøô‰∏ÄÈ¢òËØ¢ÈóÆÂíå‰øÆÊîπÊòØ‰∏ç‰∏ÄÊ†∑ÁöÑÔºå‰∏çÂÉèÈôå‰∏äËä±ÂºÄÈÇ£È¢òÔºåÊØè‰∏™ÂÖÉÁ¥†Âç≥‰Ωø‰øÆÊîπÂØπÁ≠îÊ°àÂÅöË¥°ÁåÆÔºå‰πüÊòØËØ¢ÈóÆ*/ if(!q[i].type)T.add(q[i].y,q[i].ans);/*ËøôÊòØ‰øÆÊîπÔºåÊ†ëÁä∂Êï∞ÁªÑÊ†áËÆ∞‰∏Ä‰∏ã*/ hep[cnt++]=q[i++];/*ÂΩíÂπ∂ÊéíÂ∫è*/ &#125;else&#123; if(q[j].type)q[j].ans+=T.sum(q[j].y);/*ËØ¢ÈóÆÔºåÊõ¥Êñ∞Á≠îÊ°à*/ hep[cnt++]=q[j++]; &#125; &#125; /*Â∞ÜÂâ©‰∏ãÁöÑÂÖÉÁ¥†ÊéíÂ∫èÂ•ΩÔºåÊõ¥Êñ∞Â•ΩÁ≠îÊ°à*/ while(i&lt;=mid)&#123; if(!q[i].type)T.add(q[i].y,q[i].ans); hep[cnt++]=q[i++]; &#125; while(j&lt;=r)&#123; if(q[j].type)q[j].ans+=T.sum(q[j].y); hep[cnt++]=q[j++]; &#125; for(ll o=l;o&lt;=mid;++o)/*Ê∏ÖÈô§Êú¨Ê¨°Êìç‰ΩúÂú®Ê†ëÁä∂Êï∞ÁªÑ‰∏äÁïô‰∏ãÁöÑÁóïËøπ*/ if(!q[o].type)T.clr(q[o].y); for(ll o=l;o&lt;=r;++o)q[o]=hep[o];/*Êõ¥Êñ∞ÂéüÊï∞ÁªÑ*/&#125;int main()&#123; ll op; scanf("%lld%lld",&amp;s,&amp;w); while(scanf("%lld",&amp;op),op^3)&#123; ll x,y,z,x1,x2,y1,y2; if(op==1)&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;z); q[++tot]=(Node)&#123;x,y,z,tot,0&#125;; &#125;else&#123; scanf("%lld%lld%lld%lld",&amp;x1,&amp;y1,&amp;x2,&amp;y2); /*Âõõ‰∏™ËØ¢ÈóÆ*/ q[++tot]=(Node)&#123;x2,y2,0,tot,1&#125;; q[++tot]=(Node)&#123;x1-1,y2,0,tot,1&#125;; q[++tot]=(Node)&#123;x2,y1-1,0,tot,1&#125;; q[++tot]=(Node)&#123;x1-1,y1-1,0,tot,1&#125;; &#125; &#125; CDQ(1,tot); std::sort(q+1,q+tot+1,cmp); for(ll i=1;i&lt;=tot;++i) if(q[i].type)&#123; printf("%lld\n",q[i].ans-q[i+1].ans-q[i+2].ans+q[i+3].ans+s*(q[i].y-q[i+3].y)*(q[i].x-q[i+3].x)); i+=3; //printf("%lld\n",q[i].ans); &#125; return 0;&#125; ÁÑ∂ËÄåÊàëËøòÊòØÂ§™Âº±‰∫ÜÔºåË∞ÉÂçä‰∏™Â∞èÊó∂ÁöÑÂéüÂõ†Êó¢ÁÑ∂ÊòØ Ê†ëÁä∂Êï∞ÁªÑÊâìÈîô‰∫Ü$QvQ$]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>CDQÂàÜÊ≤ª</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2001]È£üÁâ©Èìæ Âπ∂Êü•ÈõÜ luoguP2024]]></title>
    <url>%2F2019%2F02%2F22%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2024%2F</url>
    <content type="text"><![CDATA[Âπ∂‰∏çÊòØÂæàÈöæ„ÄÇ È¶ñÂÖàÔºåÊàë‰ª¨Â∞Ü‰∏Ä‰∏™ÁÇπ $x$ ÊãÜÂàÜÊàê‰∏â‰∏™ÁÇπÔºö$x_{eat},x_{sim},x_{emy}$Ôºå $x_{eat}$ Ë°®Á§∫ $x$ ÁöÑÈ£üÁâ©Ôºå$x_{sim}$ Ë°®Á§∫ $x$ ÁöÑÂêåÁ±ªÔºå$x_{emy}$ Ë°®Á§∫ $x$ ÁöÑÂ§©Êïå„ÄÇ ÁÑ∂ÂêéÔºåÂØπ‰∫é‰∏ÄÂè•ÁúüËØùÔºö Â¶ÇÊûúÊòØË°®Á§∫ $x‚Äã$ ÊòØ $y‚Äã$ ÁöÑÂêåÁ±ªÔºåÈÇ£‰πàÂæàÊòæÁÑ∂Ôºå$x‚Äã$ ÁöÑÈ£üÁâ©Â∞±ÊòØ $y‚Äã$ ÁöÑÈ£üÁâ©Ôºå $x‚Äã$ ÁöÑÂ§©ÊïåÂ∞±ÊòØ $y‚Äã$ ÁöÑÂ§©ÊïåÔºå‰∫éÊòØËÆ≤ $x_{sim}‚Äã$ Âíå $y_{sim}‚Äã$ ÊâÄÂú®ÁöÑÂπ∂Êü•ÈõÜÂêàÂπ∂ÔºåÂ∞Ü $x_{eat}‚Äã$ Âíå $y_{eat}‚Äã$ ÊâÄÂú®ÁöÑÂπ∂Êü•ÈõÜÂêàÂπ∂ÔºåÊúÄÂêéÂ∞Ü $x_{emy}‚Äã$ Âíå $y_{emy}‚Äã$ ÊâÄÂú®ÁöÑÂπ∂Êü•ÈõÜÂêàÂπ∂Âç≥ÂèØ„ÄÇ Â¶ÇÊûúËøôÂè•Ë°®Á§∫ $x$ ÂêÉ $y$ ÔºåÈÇ£‰πàÂæàÊòæÁÑ∂Ôºå$x$ ÁöÑÈ£üÁâ©Â∞±ÊòØ $y$ ÁöÑÂêåÁ±ªÔºå$x$ ÁöÑÂ§©ÊïåÂ∞±ÊòØ $y$ ÁöÑÈ£üÁâ©(Âõ†‰∏∫ÊòØÁéØÂΩ¢)Ôºå$x$ ÁöÑÂêåÁ±ªÈÉΩÊòØ $y$ ÁöÑÂ§©ÊïåÔºåÊïÖÂ∞ÜËøô‰∫õÂÖ≥Á≥ªÁöÑÂπ∂Êü•ÈõÜ‰∏ÄÊ¨°ÂêàÂπ∂Âç≥ÂèØ„ÄÇ ÊÄé‰πàÂà§Êñ≠‰∏ÄÂè•ËØùÁöÑÁúüÂÅáÂë¢Ôºü ÊòæÁÑ∂ÔºåÂ¶ÇÊûú $x&gt;n||y&gt;n$ Â∞±ÊòØÂÅáËØùÔºåÂØπ‰∫é‰∏§‰∏™Êìç‰ΩúÔºö Â¶ÇÊûúË°®Á§∫ $x‚Äã$ ÊòØ $y‚Äã$ ÁöÑÂêåÁ±ªÔºåÈÇ£‰πà $x_{eat}‚Äã$ ‰∏çËÉΩÂíå $y_{sim}‚Äã$ Âú®Âêå‰∏Ä‰∏™Âπ∂Êü•ÈõÜ‰∏≠Ôºå$x_{sim}‚Äã$ ‰∏çËÉΩÂíå $y_{eat}‚Äã$ Âú®Âêå‰∏Ä‰∏™Âπ∂Êü•ÈõÜ‰∏≠ÔºåÂê¶ÂàôÂ∞±‰∏éÂâçÈù¢ÁöÑËØùÂÜ≤Á™Å‰∫Ü„ÄÇ Â¶ÇÊûúË°®Á§∫ $x$ ÂêÉ $y$ ÔºåÈ¶ñÂÖà $x$ Âíå $y$ ‰∏çËÉΩÊòØÂêåÁ±ª(Âç≥ $x_{sim}$ ‰∏çËÉΩÂíå $y_{sim}$ Âú®‰∏Ä‰∏™Âπ∂Êü•ÈõÜ‰∏≠)ÔºåÁÑ∂Âêé $y_{eat}$ ‰∏çËÉΩÂíå $x_{sim}$ Âú®‰∏Ä‰∏™Âπ∂Êü•ÈõÜ‰∏≠ÔºåÊòæÁÑ∂ËøùÂèç‰∫Ü‰ª•‰∏äÁöÑÂ∞±ÊòØÂÅáËØù„ÄÇ ÁÑ∂ÂêéÁ†ÅÈáèÊûÅÂ∞èÔºö CodeÔºö123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;const int N=5e4+2;const int inf=1e9+9;const int K=1e5+2;int fa[N*3],ans,n,k;inline int sim(int x)&#123;return x;&#125;;inline int eat(int x)&#123;return x+n;&#125;;inline int emy(int x)&#123;return x+n+n;&#125;;int find(int x)&#123;return x==fa[x]?x:fa[x]=find(fa[x]);&#125;;int main()&#123; scanf("%d%d",&amp;n,&amp;k); for(int i=1;i&lt;=n*3;++i)fa[i]=i; for(int i=1;i&lt;=k;++i)&#123; int op,x,y; scanf("%d%d%d",&amp;op,&amp;x,&amp;y); if(x&gt;n||y&gt;n)&#123;++ans;continue;&#125; if(op==1)&#123; if(find(eat(x))==find(sim(y))||find(sim(x))==find(eat(y)))&#123;++ans;&#125; else&#123; fa[find(sim(x))]=find(sim(y)); fa[find(eat(x))]=find(eat(y)); fa[find(emy(x))]=find(emy(y)); &#125; &#125;else&#123; if(find(sim(x))==find(sim(y))||find(sim(x))==find(eat(y)))&#123;++ans;&#125; else&#123; fa[find(eat(x))]=find(sim(y)); fa[find(emy(x))]=find(eat(y)); fa[find(sim(x))]=find(emy(y)); &#125; &#125; &#125; printf("%d\n",ans); return 0;&#125; ÊàëÁªùÂØπ‰∏ç‰ºöÂëäËØâ‰Ω†‰ª¨ÔºåÊàëÊúâ‰∏ÄÂ§ÑÂú∞Êñπ $sim$ ÂÜôÊàê‰∫Ü $sin$ ËÄåË∞É‰∫ÜÂçä‰∏™Â∞èÊó∂]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Âπ∂Êü•ÈõÜ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë Èôå‰∏äËä±ÂºÄ CDQÂàÜÊ≤ª bzoj3262]]></title>
    <url>%2F2019%2F02%2F22%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj3262%2F</url>
    <content type="text"><![CDATA[Èôå‰∏äËä±ÂºÄÔºåÂèØÁºìÁºìÂΩíÁü£ ‚Äî‚ÄîÂê¥Ë∂äÁéã ÊØèÊó•‰∏ÄÂ≠¶ËØ≠Êñá[ÊªëÁ®Ω]„ÄÇ ÂΩìÁÑ∂ËøôÈ¢ò $KDT‚Äã$ ÊòØÂèØ‰ª•ÂÅöÁöÑÔºå‰ΩÜÊòØ‰∏çË¥πÔºåÊâÄ‰ª•Áî® $CDQ‚Äã$ ÁÆó‰∫ÜÂêß„ÄÇ ÂæàÊòæÁÑ∂ËøôÈÅìÈ¢òÊòØ $CDQ$ ‰∏âÁª¥ÂÅèÂ∫èÁöÑÊùøÂ≠êÈ¢ò(luogu‰∏äÂÆÉÊú¨Êù•Â∞±ÊòØÊùøÂ≠êÈ¢ò) $CDQ$ ÂàÜÊ≤ªÁöÑ‰∏âÁª¥ÂÅèÂ∫èÊÄé‰πàÂÅöÔºü ÂØπ‰∫éÂÖ∂‰∏≠ÁöÑÁ¨¨‰∏ÄÁª¥Ôºå$CDQ$‰πãÂâçÁõ¥Êé• $sort$ ÊéíÂ•ΩÂ∫èÔºåÈÇ£‰πàËøôÂ∞±ÂèØ‰ª•‰øùËØÅÂØπ‰∫é‰∏Ä‰∏™ $i&lt;j$ Ôºå‰ΩçÁΩÆ $j$ ÁöÑÂÖÉÁ¥†‰∏ÄÂÆöÊòØÂØπ‰ΩçÁΩÆ $i$ ÁöÑÂÖÉÁ¥†ÂÅö‰∏çÂá∫Ë¥°ÁåÆÁöÑÔºåÂõ†‰∏∫ $x_i &lt;x_j$ „ÄÇ ÁÑ∂ÂêéÁ¨¨‰∫åÁª¥ÔºåËøõÂÖ• $CDQ$ ÔºåÂæàÊòæÁÑ∂ÂΩìÂâçÁöÑÂå∫Èó¥ $l - r$ ÊòØ‰ºöÂàÜÊàê‰∏§‰∏™Â≠êÂå∫Èó¥ÂàÜÂà´ÂÅö $CDQ$ ÁöÑÔºåÈÇ£‰πàÂΩì‰∏§‰∏™Â≠êÂå∫Èó¥ÂêàÂπ∂ÁöÑÊó∂ÂÄôÔºåÂ∑¶Â≠êÂå∫Èó¥ÊòØÂèØËÉΩ‰ºöÂØπÂè≥Â≠êÂå∫Èó¥ÂÅöÂá∫Ë¥°ÁåÆÁöÑÔºå‰ΩÜÊòØÂè≥Â≠êÂå∫Èó¥ÂØπÂ∑¶Â≠êÂå∫Èó¥ÂÅö‰∏çÂá∫‰ªª‰ΩïË¥°ÁåÆÔºåÂéüÂõ†ÊòØÊàë‰ª¨Âú®‰πãÂâçÂ∑≤ÁªèÊåâ $x$ ÊéíÂ•Ω‰∫ÜÂ∫èÔºåÈÇ£‰πàÊòæÁÑ∂Â∑¶Â≠êÂå∫Èó¥ÁöÑÂÖÉÁ¥†ÁöÑ $x$ ÂßãÁªàÂ∞è‰∫éÂè≥Â≠êÂå∫Èó¥ÁöÑÂÖÉÁ¥†ÁöÑ $x$„ÄÇ Â§ñÈù¢ÊéíÂ•Ω‰∫ÜÁ¨¨‰∏ÄÁª¥ÔºåÈÇ£‰πàÊàë‰ª¨Â∞±Âú® $CDQ$ ‰∏≠ÊéíÁ¨¨‰∫åÁª¥ÔºåÁî±‰∫éÊàë‰ª¨ÊòØÂàÜÊàê‰∫Ü‰∏§‰∏™Â≠êÂå∫Èó¥ÈÄíÂΩíÂ§ÑÁêÜÔºåÂæÄ‰∏äÈù¢ÂêàÂπ∂ÁöÑÊó∂ÂÄôÔºåÊ≠£Â•ΩÂèØ‰ª•ÂΩíÂπ∂ÊéíÂ∫è„ÄÇÁ¨¨‰∏â‰ΩçÂè™ÈúÄË¶ÅÂú®Ê†ëÁä∂Êï∞ÁªÑ‰∏≠ËÆ∞ÂΩï‰∏Ä‰∏ãÔºåÁÑ∂ÂêéÁªüËÆ°Á≠îÊ°àÁöÑÊó∂ÂÄôË∞ÉÁî®Ê†ëÁä∂Êï∞ÁªÑÁöÑÊü•ËØ¢ÔºåÁúãÁúãÊØîÂΩìÂâçÂÖÉÁ¥†Â∞èÁöÑÊúâÂ§öÂ∞ë‰∏™Âç≥ÂèØ„ÄÇ 1234567891011121314151617181920void CDQ(int l,int r)&#123; if(l==r)return; int mid=(l+r)&gt;&gt;1; CDQ(l,mid);CDQ(mid+1,r);/*ÂàÜÊàê‰∏§‰∏™Â≠êÂå∫Èó¥*/ int i=l,j=mid+1,cnt=l; while(i&lt;=mid&amp;&amp;j&lt;=r)&#123;/*ÂΩíÂπ∂+ÁªüËÆ°Á≠îÊ°à*/ if(v[i].b&lt;=v[j].b)add(v[i].c,size[v[i].id]),hep[cnt++]=v[i++]; /*Â∑¶Â≠êÂå∫Èó¥ÁöÑÂΩìÂâçÂÖÉÁ¥†ÂèØËÉΩ‰ºöÊúâË¥°ÁåÆÔºåËÆ∞ÂΩï‰∏Ä‰∏ã*/ else ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++]; /*Êé•‰∏ãÊù•ÁöÑÂ∑¶Â≠êÂå∫Èó¥ÁöÑbÊòØÊØîÂΩìÂâçÁöÑj.bË¶ÅÂ§ßÁöÑ‰∫ÜÔºåÊ≤°ÊúâË¥°ÁåÆ‰∫Ü*/ /*Âõ†‰∏∫Âú®Â≠êÂå∫Èó¥‰∏≠‰ΩøÁî®‰∫ÜÂΩíÂπ∂ÔºåÊâÄ‰ª•‰∏§‰∏™Â≠êÂå∫Èó¥‰∏≠bËÇØÂÆöÊòØÂçáÂ∫èÁöÑ*/ &#125; while(j&lt;=r)ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++]; /*Â∞ÜÂâ©‰∏ãÁöÑÂΩíÂπ∂ÊéíÂ∫èÂÆå*/ for(int h=l;h&lt;i;++h)add(v[h].c,-size[v[h].id]); /*Ê∏ÖÈô§Ê†ëÁä∂Êï∞ÁªÑÁïô‰∏ãÁöÑÁóïËøπ*/ while(i&lt;=mid)hep[cnt++]=v[i++]; for(int i=l;i&lt;=r;++i)v[i]=hep[i]; /*Êõ¥Êñ∞ÂéüÊï∞ÁªÑ*/&#125; $QvQ$ Â∞±ËøôÊ†∑‰∫ÜÔºåÂè™ÊòØËøôÈ¢òÈúÄË¶ÅÁ¶ªÊï£Âåñ‰∏Ä‰∏ãÔºå$Code$ ‰∏≠ÁöÑ $size$ Â∞±ÊòØÂÖÉÁ¥†Âá∫Áé∞ÁöÑ‰∏™Êï∞„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long longconst int N=1e5+2;const int K=2e5+2;int n,k;struct Node&#123;int a,b,c,id;&#125;v[N],hep[N];int tre[K],ans[N],num[N],size[N];inline void add(int x,int v)&#123;for(;x&lt;=k;x+=(x&amp;-x))tre[x]+=v;&#125;;inline ll sum(int x)&#123;ll res=0;for(;x;x-=(x&amp;-x))res+=tre[x];return res;&#125;;template&lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;bool cmp(Node x,Node y)&#123; if(x.a!=y.a)return x.a&lt;y.a; if(x.b!=y.b)return x.b&lt;y.b; return x.c&lt;y.c;&#125;void CDQ(int l,int r)&#123; if(l==r)return; int mid=(l+r)&gt;&gt;1; CDQ(l,mid);CDQ(mid+1,r); int i=l,j=mid+1,cnt=l; while(i&lt;=mid&amp;&amp;j&lt;=r)&#123; if(v[i].b&lt;=v[j].b)add(v[i].c,size[v[i].id]),hep[cnt++]=v[i++]; else ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++]; &#125; while(j&lt;=r)ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++]; for(int h=l;h&lt;i;++h)add(v[h].c,-size[v[h].id]); while(i&lt;=mid)hep[cnt++]=v[i++]; for(int i=l;i&lt;=r;++i)v[i]=hep[i];&#125;int main()&#123; IN(n),IN(k); for(int i=1;i&lt;=n;++i) scanf("%d%d%d",&amp;v[i].a,&amp;v[i].b,&amp;v[i].c); std::sort(v+1,v+n+1,cmp); int tot=0; for(int i=1;i&lt;=n;++i)&#123; if(v[i].a!=v[i-1].a||v[i].b!=v[i-1].b||v[i].c!=v[i-1].c)hep[++tot]=v[i]; ++size[tot]; &#125; for(int i=1;i&lt;=tot;++i)v[i]=hep[i],v[i].id=i; CDQ(1,tot); for(int i=1;i&lt;=tot;++i) num[ans[v[i].id]+size[v[i].id]-1]+=size[v[i].id]; for(int i=0;i&lt;n;++i) printf("%d\n",num[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>CDQÂàÜÊ≤ª</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÊï∞ËÆ∫„Äë ‰πòÊ≥ïÈÄÜÂÖÉ]]></title>
    <url>%2F2019%2F02%2F20%2F%5B%E6%95%B0%E8%AE%BA%5D%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83%2F</url>
    <content type="text"><![CDATA[ÁúüÁöÑÊàë‰πü‰∏çÁü•ÈÅìÊ†áÈ¢òÊÄé‰πàËµ∑ $QvQ‚Ä¶‚Ä¶$ Êú¨ÊñáÂ∞Ü‰ªãÁªç‰∏§ÁßçÊ±Ç‰πòÊ≥ïÈÄÜÂÖÉÁöÑÊñπÂºè„ÄÇ 0XFF ‰πòÊ≥ïÈÄÜÂÖÉÊòØ‰ªÄ‰πàÔºü ‰πòÊ≥ïÈÄÜÂÖÉÔºå‰∏ÄËà¨Áî®‰∫éÊ±Ç \frac{a}{b} \ \ (mod \ p)ÁöÑÂÄº ($p$ ÈÄöÂ∏∏‰∏∫Ë¥®Êï∞) „ÄÇ ÂØπ‰∫éÂä†„ÄÅÂáè„ÄÅ‰πòÊ≥ïÁöÑÂèñÊ®°Áõ¥Êé•ÂèñÂ∞±Â•Ω‰∫ÜÔºå‰ΩÜÊòØÂØπ‰∫éÈô§Ê≥ï(‰∏äÈù¢ÁöÑÂàÜÊï∞ÂΩ¢Âºè)ÂèñÊ®°ÁöÑËØùÔºåÊòæÁÑ∂Áõ¥Êé•ÂèñÊ®°ÊòØÈîôÁöÑÔºåÈÇ£‰πàËøô‰∏™Êó∂ÂÄôÂ∞±ÈúÄË¶ÅÁî®Âà∞‰πòÊ≥ïÈÄÜÂÖÉ„ÄÇ Â¶ÇÊûú $a \times x \equiv 1 \ \ (mod \ p) $Ôºå‰∏î $a$ ‰∏é $p$ ‰∫íË¥®ÔºåÈÇ£‰πàÂ∞±ÂèØ‰ª•ÂÆö‰πâ $p$ ‰∏∫ $x$ ÁöÑÈÄÜÂÖÉÔºåËÆ∞‰∏∫ $a^{-1}$ÔºåÊâÄ‰ª•Êàë‰ª¨‰πüÂèØ‰ª•Áß∞ $x$ ‰∏∫ $a$ Âú® $mod \ p$ ÊÑè‰πâ‰∏ãÁöÑÂÄíÊï∞„ÄÇ ÂØπ‰∫é $\frac{a}{b} \ \ (mod \ p)‚Äã$ÔºåËøô‰∏™ÂàÜÊï∞ÁöÑÂÄºÂ∞±ÊòØ $(b^{-1} \times a) \ mod \ p‚Äã$ÔºåÂç≥ $b‚Äã$ Âú® $mod \ p‚Äã$ ÊÑè‰πâ‰∏ãÁöÑÈÄÜÂÖÉ‰πò‰∏ä $a‚Äã$ ÔºåÊúÄÂêéÂØπ $p‚Äã$ ÂèñÊ®°„ÄÇ 0X1F Ê±Ç‰πòÊ≥ïÈÄÜÂÖÉÁöÑ‰∏§ÁßçÊñπÊ≥ï(ÊàëÂè™‰ºöËøô‰∏§Áßç)‚Ä¶‚Ä¶ 0X1F-1 Ë¥πÈ©¨Â∞èÂÆöÁêÜÊ±Ç‰πòÊ≥ïÈÄÜÂÖÉË¥πÈ©¨Â∞èÂÆöÁêÜÔºö Ëã• $p‚Äã$ ‰∏∫Ë¥®Êï∞Ôºå$a‚Äã$ ‰∏∫Ê≠£Êï¥Êï∞Ôºå‰∏î $a‚Äã$ ‰∏é $p‚Äã$ ‰∫íË¥®„ÄÇ ÈÇ£‰πà $a^{p-1} \equiv 1 \ \ (mod \ p)$„ÄÇ Êàë‰ª¨Â∞Ü $a^{p-1} \equiv 1 \ \ (mod \ p)$ ‰ª£ÂÖ•ÂéüÂºèÔºö a \times x \equiv 1 \ \ (mod \ p)a \times x\equiv a^{p-1} \ \ (mod \ p)x\equiv a^{p-2} \ \ (mod \ p)ÈÇ£‰πàÁõ¥Êé•Ë∑ë‰∏ÄÈÅçÂø´ÈÄüÂπÇÂç≥ÂèØ„ÄÇ Code:1234567891011#define ll long longll pow(ll x,ll y,ll p) &#123; x%=p; ll ans=1; for(;y;y&gt;&gt;=1,x=x*x%mod) if(power&amp;1)ans=ans*x%mod; return ans;&#125;int main()&#123; ll x=pow(a,p-2,p);&#125; 0X1F-2 Á∫øÊÄßÊ±Ç‰πòÊ≥ïÈÄÜÂÖÉËøô‰∏™ÁÆóÊ≥ïÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶ÊòØÁ∫øÊÄßÁöÑÔºö$O(n)$ ËÆæ $p=s \times i + r$ Ôºå$(1&lt;r&lt;i&lt;p)$. Â∞ÜÊ≠§ÂºèÂ•óÂÖ• $(mod \ p)‚Äã$ ÊÑè‰πâ‰∏ãÁöÑÂºèÂ≠êÂ∞±ÂèØ‰ª•ÂæóÂà∞Ôºö s \times i +r \equiv 0 \ \ (mod \ p)‚Äã‰∏§ËæπÂêåÊó∂‰πò‰∏ä $i^{-1}$Ôºö s + r \times i^{-1} \equiv 0 \ \ (mod \ p)‚ÄãÁÑ∂ÂêéÂÜçÂêåÊó∂‰πò‰∏ä $r^{-1}‚Äã$Ôºö s \times r^{-1} + i^{-1} \equiv 0 \ \ (mod \ p)‚ÄãÁßªÈ°πÂæóÂà∞Ôºö i^{-1} \equiv -s \times r^{-1} \ \ (mod \ p)ÂæàÊòæÁÑ∂ $s$ Á≠â‰∫é $[\frac{p}{i}]$Ôºå$r$ Á≠â‰∫é $p \ mod \ i$ÔºåÈÇ£‰πà $r^{-1}$ Â∞±Á≠â‰∫é $inv[p \ mod \ i]$ ($inv[i]$ Ë°®Á§∫ $i$ Âú® $mod \ p$ ÊÑè‰πâ‰∏ãÁöÑ‰πòÊ≥ïÈÄÜÂÖÉ) ÁÑ∂Âêé‰ª£ÂÖ•ÂÖ¨ÂºèÔºö inv[i] \equiv - [\frac{p}{i}] \times inv[p \ mod \ i] \ \ (mod \ p)‰∫éÊòØ‰ª£Á†ÅÂ∞±ÂæàÁü≠‰∫ÜÔºö 123inv[0]=0,inv[1]=1;for(int i=2;i&lt;=n;++i) inv[i]=(long long)(p-p/i)*inv[p%i]%p; ‰∏ÄËà¨Êù•ËØ¥Á∫øÊÄßÁöÑÊàñËÆ∏‰ºö‰ºòÁßÄ‰∫õÔºåÂª∫ËÆÆ‰ΩøÁî®Á∫øÊÄßÁöÑÁÆóÊ≥ïÔºåËÄå‰∏î‰ª£Á†Å‰πüÊØîËæÉÁü≠ÔºåÂÆπÊòìÂÜôÔºåÂ§ÑÁêÜÁªÑ‰πòÊ≥ïÈÄÜÂÖÉÁöÑÊó∂ÂÄôÔºåÁ¨¨‰∏ÄÁßçÁöÑÂ§çÊùÇÂ∫¶‰∏∫ $O(nlogn)$ÔºåÁ¨¨‰∫åÁßçÂè™ÈúÄ $O(n)$„ÄÇ‰ΩÜÊòØÂú®Â§ÑÁêÜÂçïÁªÑ‰πòÊ≥ïÈÄÜÂÖÉÁöÑÊó∂ÂÄôÔºåÁ¨¨‰∏ÄÁßçÂ§çÊùÇÂ∫¶‰∏∫ $O(logn)$Ôºå‰ΩÜÊòØÁ¨¨‰∫åÁßçÂõ†‰∏∫Ë¶ÅËÆ≤ $p \ mod \ i$ Ê±ÇÂá∫Êù•ÔºåÂ§çÊùÇÂ∫¶‚Ä¶..ÊàñËÆ∏ËøòÊòØ $O(n)$„ÄÇ(ÂÆûÈôÖ‰∏äÊàë‰πü‰∏ç‰ºöËØÅ $QvQ‚Ä¶$)]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>Êï∞ËÆ∫</tag>
        <tag>‰πòÊ≥ïÈÄÜÂÖÉ</tag>
        <tag>ÊÄªÁªì</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [ÂõΩÂÆ∂ÈõÜËÆ≠Èòü]Tree LCT luogu1501/bzoj2631]]></title>
    <url>%2F2019%2F02%2F17%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1501%2F</url>
    <content type="text"><![CDATA[Link-Cut-Tree ÁöÑÊáíÊ†áËÆ∞‰∏ã‰º†Ê≠£Á°ÆÈ£üÁî®ÊñπÊ≥ï„ÄÇ 1Ôºö+ u v cÔºöÂ∞Ü$u$Âà∞$v$ÁöÑË∑ØÂæÑ‰∏äÁöÑÁÇπÁöÑÊùÉÂÄºÈÉΩÂä†‰∏äËá™ÁÑ∂Êï∞$c$; Ëß£ÂÜ≥ÊñπÊ≥ïÔºö ÂæàÊòæÁÑ∂ÔºåÊàë‰ª¨ÂèØ‰ª•$split(u,v)$Êù•ÊèêÂèñu,vËøô‰∏ÄÊÆµÂå∫Èó¥,ÊèêÂèñÂÆå‰∫ÜÂ∞Ü$Splay(v)$,ÁÑ∂ÂêéÁõ¥Êé•Âú®v‰∏äÊâìÂä†Ê≥ïÊ†áËÆ∞$add$Âç≥ÂèØ„ÄÇ ‰ª£Á†ÅÔºö 1234567891011121314inline void pushadd(ll x,ll val)&#123;//ÊâìÊ†áËÆ∞ s[x]+=sz[x]*val,v[x]+=val,add[x]+=val; s[x]%=MOD,v[x]%=MOD,add[x]%=MOD;&#125;inline void split(ll x,ll y)&#123;//LCTÂü∫Êú¨Êìç‰Ωúsplit,‰∏çÂÜçËµòËø∞ makeroot(x);Access(y);Splay(y);&#125;//(mainÂáΩÊï∞‰∏≠)Ôºöif(op[0]=='+')&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;v);//ËæìÂÖ•‰ø°ÊÅØ split(x,y);pushadd(y,v);//ÊèêÂèñÈìæÊù°&amp;ÊâìÊ†áËÆ∞&#125; 2Ôºö- u1 v1 u2 v2ÔºöÂ∞ÜÊ†ë‰∏≠ÂéüÊúâÁöÑËæπ$(u1,v1)$Âà†Èô§ÔºåÂä†ÂÖ•‰∏ÄÊù°Êñ∞Ëæπ$(u2,v2)$Ôºå‰øùËØÅÊìç‰ΩúÂÆå‰πãÂêé‰ªçÁÑ∂ÊòØ‰∏ÄÊ£µÊ†ëÔºõ Ëß£ÂÜ≥ÊñπÊ≥ïÔºö Âà†Èô§ËæπÂç≥$cut$Êìç‰ΩúÔºåÂä†ËæπÂç≥$link$Êìç‰Ωú„ÄÇ ‰ª£Á†ÅÔºö 1234567891011121314inline void link(ll x,ll y)&#123; makeroot(x);if(findroot(x)!=y)f[x]=y;&#125;inline void cut(ll x,ll y)&#123; makeroot(x);split(x,y); if(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][1]) f[x]=ch[y][0]=0;return;&#125;//LCTÂü∫Êú¨Êìç‰Ωúlink&amp;cutÔºå‰∏çÂÜçËµòËø∞//(mainÂáΩÊï∞‰∏≠)Ôºöif(op[0]=='-')&#123; scanf("%lld%lld",&amp;x,&amp;y);cut(x,y);//Âà†Ëæπ scanf("%lld%lld",&amp;x,&amp;y);link(x,y);//Âä†Ëæπ&#125; 3Ôºö* u v cÔºöÂ∞Ü$u$Âà∞$v$ÁöÑË∑ØÂæÑ‰∏äÁöÑÁÇπÁöÑÊùÉÂÄºÈÉΩ‰πò‰∏äËá™ÁÑ∂Êï∞$c$Ôºõ Ëß£ÂÜ≥ÊñπÊ≥ïÔºö ÂæàÊòæÁÑ∂ÔºåÊàë‰ª¨ÂèØ‰ª•$split(u,v)$Êù•ÊèêÂèñu,vËøô‰∏ÄÊÆµÂå∫Èó¥,ÊèêÂèñÂÆå‰∫ÜÂ∞Ü$Splay(v)$,ÁÑ∂ÂêéÁõ¥Êé•Âú®v‰∏äÊâì‰πòÊ≥ïÊ†áËÆ∞$mul$Âç≥ÂèØ„ÄÇ(Ë∑üÁ¨¨‰∏Ä‰∏™Êìç‰ΩúÂü∫Êú¨ÂêåÁêÜ) ‰ª£Á†ÅÔºö 12345678910inline void pushmul(ll x,ll val)&#123;//ÊâìÊ†áËÆ∞ s[x]*=val,v[x]*=val,mul[x]*=val,add[x]*=val; s[x]%=MOD,v[x]%=MOD,mul[x]%=MOD,add[x]%=MOD;&#125;//(mainÂáΩÊï∞‰∏≠)Ôºöif(op[0]=='*')&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;v); split(x,y);pushmul(y,v);&#125; 4Ôºö/ u vÔºöËØ¢ÈóÆ$u$Âà∞$v$ÁöÑË∑ØÂæÑ‰∏äÁöÑÁÇπÁöÑÊùÉÂÄºÂíåÔºåÊ±ÇÂá∫Á≠îÊ°àÂØπ‰∫é51061ÁöÑ‰ΩôÊï∞„ÄÇ Ëß£ÂÜ≥ÊñπÊ≥ïÔºö $Splay(v)$Êó∂Â∑≤ÁªèÂ∞ÜÊâÄÊúâËäÇÁÇπÊõ¥Êñ∞Ëøá‰∫Ü(ÊáíÊ†áËÆ∞‰∏ã‰º†Ëøá‰∫Ü)ÔºåÊâÄ‰ª•ÊúÄÂêéÂè™ÈúÄËæìÂá∫$s[v]$Âç≥ÂèØ„ÄÇ ‰ª£Á†ÅÔºö 12345//(mainÂáΩÊï∞‰∏≠)Ôºöif(op[0]=='/')&#123; scanf("%lld%lld",&amp;x,&amp;y); split(x,y);printf("%lld\n",s[y]);&#125; Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register ll#define A printf("A")#define C printf(" ") #define MOD 51061using namespace std;const ll N=1e5+2;template&lt;typename _Tp&gt; inline void IN(_Tp&amp; dig)&#123; char c;bool flag=0;dig=0; while(c=getchar(),!isdigit(c))if(c=='-')flag=1; while(isdigit(c))dig=dig*10+c-'0',c=getchar(); if(flag)dig=-dig;&#125;ll f[N],s[N],v[N],sz[N],rev[N],mul[N],add[N],hep[N],ch[N][2];inline ll get(ll x)&#123;return ch[f[x]][0]==x||ch[f[x]][1]==x;&#125;inline ll chk(ll x)&#123;return ch[f[x]][1]==x;&#125;inline void pushfilp(ll x)&#123; swap(ch[x][0],ch[x][1]);rev[x]^=1;&#125;inline void pushup(ll x)&#123; s[x]=(s[ch[x][0]]+s[ch[x][1]]+v[x])%MOD; sz[x]=sz[ch[x][0]]+sz[ch[x][1]]+1;&#125;inline void pushmul(ll x,ll val)&#123; s[x]*=val,v[x]*=val,mul[x]*=val,add[x]*=val; s[x]%=MOD,v[x]%=MOD,mul[x]%=MOD,add[x]%=MOD;&#125;inline void pushadd(ll x,ll val)&#123; s[x]+=sz[x]*val,v[x]+=val,add[x]+=val; s[x]%=MOD,v[x]%=MOD,add[x]%=MOD;&#125;inline void pushdown(ll x)&#123; if(mul[x]!=1)pushmul(ch[x][0],mul[x]),pushmul(ch[x][1],mul[x]); if(add[x])pushadd(ch[x][0],add[x]),pushadd(ch[x][1],add[x]); if(rev[x])&#123; if(ch[x][0])pushfilp(ch[x][0]); if(ch[x][1])pushfilp(ch[x][1]); &#125;rev[x]=0,add[x]=0,mul[x]=1;return;&#125;inline void rotate(ll x)&#123; ll y=f[x],z=f[y],k=chk(x),v=ch[x][!k]; if(get(y))ch[z][chk(y)]=x;ch[x][!k]=y,ch[y][k]=v; if(v)f[v]=y;f[y]=x,f[x]=z;pushup(y),pushup(x);&#125;inline void Splay(ll x)&#123; ll y=x,top=0;hep[++top]=y; while(get(y))hep[++top]=y=f[y]; while(top)pushdown(hep[top--]); while(get(x))&#123; y=f[x],top=f[y]; if(get(y))rotate((ch[y][0]==x)^(ch[top][0]==y)?y:x); rotate(x); &#125;pushup(x);return;&#125;inline void Access(ll x)&#123; for(register ll y=0;x;x=f[y=x]) Splay(x),ch[x][1]=y,pushup(x);&#125;inline ll findroot(ll x)&#123; Access(x);Splay(x); while(ch[x][0])pushdown(x),x=ch[x][0]; return x;&#125;inline void makeroot(ll x)&#123; Access(x);Splay(x);pushfilp(x);&#125;inline void split(ll x,ll y)&#123; makeroot(x);Access(y);Splay(y);&#125;inline void link(ll x,ll y)&#123; makeroot(x);if(findroot(x)!=y)f[x]=y;&#125;inline void cut(ll x,ll y)&#123; makeroot(x);split(x,y); if(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][1]) f[x]=ch[y][0]=0;return;&#125;char op[2];int main()&#123; ll n,m,x,y;scanf("%lld%lld",&amp;n,&amp;m); for(register int i=1;i&lt;=n;++i) mul[i]=sz[i]=v[i]=1;ll v; for(register int i=1;i&lt;n;++i) scanf("%lld%lld",&amp;x,&amp;y),link(x,y); for(register int i=1;i&lt;=m;++i)&#123; scanf("%s",op); if(op[0]=='+')&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;v); split(x,y);pushadd(y,v); &#125;else if(op[0]=='-')&#123; scanf("%lld%lld",&amp;x,&amp;y);cut(x,y); scanf("%lld%lld",&amp;x,&amp;y);link(x,y); &#125;else if(op[0]=='*')&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;v); split(x,y);pushmul(y,v); &#125;else if(op[0]=='/')&#123; scanf("%lld%lld",&amp;x,&amp;y); split(x,y);printf("%lld\n",s[y]); &#125; &#125;return 0;&#125; Âõ†‰∏∫$51061 * 51061$ÊòØ‰ºöË∂äËøá$int$ÁïåÈôêÁöÑÔºåÊâÄ‰ª•ÊàëÂºÄÁöÑ$longlong$(ÂΩìÁÑ∂‰πüÂèØ‰ª•ÂºÄÊó†Á¨¶Âè∑$int$)ÊâÄ‰ª•Â∞±Ê≤°‰∫Ü„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÁÆóÊ≥ï„Äë ÊµÖË∞àÂêéÁºÄËá™Âä®Êú∫(SAM)&Â≠¶‰π†Á¨îËÆ∞]]></title>
    <url>%2F2019%2F02%2F16%2F%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BASAM%2F</url>
    <content type="text"><![CDATA[ÂÜçÊ≠§ËæìÂÖ•‰Ω†ÁöÑÂØÜÁ†Å‰ª•‰æøÈòÖËØªÂÖ®Êñá Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>Â≠¶‰π†Á¨îËÆ∞</tag>
        <tag>ÊÄªÁªì</tag>
        <tag>ÂêéÁºÄËá™Âä®Êú∫.SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÁÆóÊ≥ï„Äë ÊµÖË∞àÂêéÁºÄÊï∞ÁªÑ(SA)&Â≠¶‰π†Á¨îËÆ∞]]></title>
    <url>%2F2019%2F02%2F16%2F%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84SA%2F</url>
    <content type="text"><![CDATA[ÂÜçÊ≠§ËæìÂÖ•‰Ω†ÁöÑÂØÜÁ†Å‰ª•‰æøÈòÖËØªÂÖ®Êñá Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>Â≠¶‰π†Á¨îËÆ∞</tag>
        <tag>ÊÄªÁªì</tag>
        <tag>ÂêéÁºÄÊï∞ÁªÑ.SA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë Qtree3 LCT luoguP4116]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4116%2F</url>
    <content type="text"><![CDATA[Á¨¨‰∏Ä‰∏™Êìç‰ΩúÊòæÁÑ∂ÊòØ‰∏çË¶ÅËÄÉËôëÁöÑ‚Ä¶‚Ä¶ ËÄÉËôëÁ¨¨‰∫å‰∏™Êìç‰ΩúÊÄé‰πàÂäû(ÂÆûÈôÖ‰∏äÊòØË∂ÖÁ∫ßeasyÁöÑ) ÊØè‰∏™ËäÇÁÇπÁª¥Êä§‰∏Ä‰∏™ÂÄºsumÔºåË°®Á§∫ $Splay$ ‰∏≠ÂÆÉÂ≠êÊ†ëÁöÑÂíåÔºåÊØè‰∏™ÁÇπÁöÑÊùÉÂÄº‰∏∫1(Èªë)0(ÁôΩ)„ÄÇ ÂØπ‰∫éËøô‰∏™Êìç‰ΩúÔºåÊàë‰ª¨ÂèØ‰ª•ÂÖà $split(1,x)$ ÔºåÁé∞Âú®xÊòØËøô‰∏™ $Splay$ ÁöÑÊ†π„ÄÇÊàë‰ª¨Â∞ÜË¶ÅÊâæÁöÑÂ∞±ÊòØËøôÈ¢ó $Splay$ ‰∏≠Ê∑±Â∫¶ÊúÄÂ∞è‰∏î‰∏∫ÈªëÁÇπÁöÑËäÇÁÇπ„ÄÇ ÊâæAnswer‰πãÂâçÂÖàÁâπÂà§‰∏Ä‰∏ãs[x]ÊòØÂê¶Â§ß‰∫é0ÔºåÂ¶ÇÊûú‰∏∫0ÔºåÁõ¥Êé•Ë∑≥ËøáÂç≥ÂèØ„ÄÇ ‰∏çÁÑ∂ËøõÂÖ•Âæ™ÁéØÔºåÂàÜ‰∏âÁßçÊÉÖÂÜµÔºö 1.Â¶ÇÊûús[ch[x][0]]Â§ß‰∫é0ÔºåËØ¥ÊòéÊúâÊõ¥‰ºòÁöÑÁ≠îÊ°à(Â∑¶Â≠êÊ†ëÊ∑±Â∫¶Â∞è‰∫éx)Ôºåx=ch[x][0]„ÄÇ 2.Âê¶ÂàôÔºåÂ¶ÇÊûúxÊú¨Ë∫´Â∞±ÊòØÈªëÁÇπÔºåÈÇ£‰πàxÂ∞±ÊòØÁ≠îÊ°à‰∫ÜÔºåÁõ¥Êé•break„ÄÇ 3.‰∏çÁÑ∂ÔºåÂ¶ÇÊûúxÂà∞1ÁöÑËäÇÁÇπÈÉΩÊòØÁôΩËâ≤ÔºåÈÇ£Â∞±Âè™ËÉΩÂéªxÁöÑÂè≥Â≠êÊ†ëÊâæ‰∫ÜÔºåx=ch[x][1]„ÄÇ ÈÄÄÂá∫Âæ™ÁéØÊó∂xÂç≥‰∏∫Á≠îÊ°àÔºåËæìÂá∫Âç≥ÂèØ„ÄÇ123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int#define A printf("A") using namespace std;const int N=1e5+2;int n,m,f[N],s[N],v[N],r[N],ch[N][2];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline int chk(int x)&#123;return ch[f[x]][1]==x;&#125;inline int isroot(int x)&#123;return ch[f[x]][0]==x||ch[f[x]][1]==x;&#125;inline void pushup(int x)&#123;s[x]=s[ch[x][0]]+s[ch[x][1]]+v[x];&#125;inline void pushdown(int x)&#123; if(!r[x])return;r[x]=0; r[ch[x][0]]^=1,r[ch[x][1]]^=1,swap(ch[x][0],ch[x][1]);&#125;inline void Splay_push(int x)&#123;if(isroot(x))Splay_push(f[x]);pushdown(x);&#125;inline void rotate(int x)&#123; int y=f[x],z=f[y],k=chk(x),v=ch[x][!k]; if(isroot(y))ch[z][chk(y)]=x;ch[x][!k]=y,ch[y][k]=v; if(v)f[v]=y;f[y]=x,f[x]=z;pushup(y);&#125;inline void Splay(int x)&#123; int y=x;Splay_push(x); while(isroot(x))&#123; if(isroot(y=f[x])) rotate((ch[y][0]==x)^(ch[f[y]][0]==y)?x:y); rotate(x); &#125;pushup(x);return;&#125;inline void Access(int x)&#123; for(register int y=0;x;x=f[y=x]) Splay(x),ch[x][1]=y,pushup(x); &#125;inline int findroot(int x)&#123; Access(x);Splay(x); while(ch[x][0])pushdown(x),x=ch[x][0]; Splay(x);return x;&#125;inline void makeroot(int x)&#123;Access(x);Splay(x);r[x]^=1;&#125;inline void split(int x,int y)&#123;makeroot(x);Access(y);Splay(y);&#125;inline void link(int x,int y)&#123;makeroot(x);if(findroot(x)!=findroot(y))f[x]=y;&#125;inline void cut(int x,int y)&#123;split(x,y);if(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][1])f[x]=ch[y][0]=0;&#125;int main()&#123; IN(n),IN(m); for(register int x,y,i=1;i&lt;n;++i) &#123;IN(x),IN(y);link(x,y);&#125; for(register int op,x,i=1;i&lt;=m;++i)&#123; IN(op),IN(x); if(op==0)&#123; makeroot(x);v[x]^=1;pushup(x); &#125;else if(op==1)&#123; split(1,x); if(!s[x])&#123;printf("-1\n");continue;&#125; while(s[x])&#123; pushdown(x); if(s[ch[x][0]])x=ch[x][0]; else if(v[x])break; else x=ch[x][1]; &#125;printf("%d\n",x); &#125; &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë „ÄåÁΩëÁªúÊµÅ24È¢ò„ÄçÈ™ëÂ£´ÂÖ±Â≠òÈóÆÈ¢ò ÁΩëÁªúÊµÅ luoguP3355]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3355%2F</url>
    <content type="text"><![CDATA[ÊúÄÂ§ßÊµÅ‰∫éÊúÄÂ∞èÂâ≤ÁöÑËΩ¨Êç¢„ÄÇ ÂÅáËÆæÁé∞Âú®Ê£ãÁõò‰∏äÈùûÈöúÁ¢çÁöÑ‰ΩçÁΩÆÂÖ®ÈÉ®ÊëÜÊª°‰∫ÜÈ™ëÂ£´ÔºåÊàë‰ª¨ÊãøËµ∞ $x$ ‰∏™ÁöÑÈ™ëÂ£´ÂèØ‰ª•‰ΩøÊ£ãÁõò‰∏äÁöÑÊâÄÊúâÈ™ëÂ£´‰∫í‰∏çÂÜ≤Á™ÅÔºåÊ±ÇÊúÄÂ∞èÁöÑ $x$. ÂèØ‰ª•Ë∑ëÂåàÁâôÂà©Ôºå‰πüÂèØ‰ª•Ë∑ëÊúÄÂ§ßÊµÅÁÆóÊ≥ïÔºåÊàëÈÄâÊã©Ë∑ë $Dinic$„ÄÇ ÊâÄÊúâÁºñÂè∑‰∏∫Â•áÊï∞ÁöÑÁÇπÂêëÊ∫êÁÇπ $s$ ËøûËæπÔºåÊâÄÊúâÁºñÂè∑‰∏∫ÂÅ∂Êï∞ÁöÑÁÇπÂêëÊ±áÁÇπ $t$ ÔºåËøûËæπÔºåËæπÊùÉ‰∏∫ $1$.ÂèØ‰ª•Áü•ÈÅìÔºåÂêåÂ•áÂÅ∂ÁºñÂè∑ÁöÑÁÇπÊòØÊó†Ê≥ï‰∫íÁõ∏ÊîªÂáªÁöÑÔºåÊàë‰ª¨Â∞ÜÂú®Â•áÊï∞ÂíåÂÅ∂Êï∞‰πãÈó¥ÂèØ‰ª•ÊîªÂáªÂà∞ÂΩºÊ≠§ÁöÑÁÇπËøû‰∏ÄÊù°ËæπÊùÉÊó†ÈôêÂ§ßÁöÑËæπ„ÄÇ ÁÑ∂ÂêéË∑ë‰∏ÄÈÅç $Dinic$ „ÄÇ ÁÑ∂ÂêéÂ∞±Ê≤°‰∫Ü„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int #define ID(i,j) ((i-1)*n+j)#define A printf("A")using namespace std;const int M=5e5+2;const short dx[8]=&#123;1,1,-1,-1,2,2,-2,-2&#125;;const short dy[8]=&#123;2,-2,2,-2,1,-1,1,-1&#125;;int n,m,s,t,sum,cnt,dep[M],head[M];short ok[202][202];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct Edge&#123;int nxt,to,val;&#125;G[M];inline void add(int x,int y,int v)&#123; G[cnt].to=y,G[cnt].val=v,G[cnt].nxt=head[x],head[x]=cnt++; G[cnt].to=x,G[cnt].val=0,G[cnt].nxt=head[y],head[y]=cnt++;&#125; inline bool bfs()&#123; memset(dep,-1,sizeof(dep)); queue&lt;int&gt;q;q.push(s);dep[s]=0; while(q.size())&#123; int x=q.front();q.pop(); for(int i=head[x];i!=-1;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]!=-1||!G[i].val)continue; else&#123;dep[y]=dep[x]+1,q.push(y);if(y==t)return true;&#125; &#125; &#125;return false;&#125; inline int dfs(int x,int flow)&#123; if(x==t||!flow)return flow; int used=0,rlow; for(int i=head[x];i!=-1;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used;&#125;inline int dinic()&#123; int maxlow=0; while(bfs())maxlow+=dfs(s,1e9); return maxlow; &#125;int main()&#123; memset(head,-1,sizeof(head)); IN(n),IN(m);s=0,t=n*n+1;sum=n*n-m; for(int x,y,i=1;i&lt;=m;++i)IN(x),IN(y),ok[x][y]=1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j)&#123; if(ok[i][j])continue; if((i+j)&amp;1)&#123; add(s,ID(i,j),1); for(int k=0;k&lt;8;++k)&#123; int nx=i+dx[k],ny=j+dy[k]; if(nx&lt;1||ny&lt;1||nx&gt;n||ny&gt;n||ok[nx][ny])continue; add(ID(i,j),ID(nx,ny),1e9); &#125; &#125;else add(ID(i,j),t,1); &#125;printf("%d\n",sum-dinic()); return 0; &#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÁÆóÊ≥ï„Äë ÊµÖË∞àFFT&Â≠¶‰π†Á¨îËÆ∞]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E7%AE%97%E6%B3%95%5DFFT%2F</url>
    <content type="text"><![CDATA[$QvQ$ ‰πãÂâçÂ∞±ÂØπËøô‰∏™‰∏úË•øÊÑüÂÖ¥Ë∂£ÔºåÁÑ∂ÂêéË¢´‰∏ÄÂ†ÜÂÖ¨ÂºèË∏©ÁàÜÔºåËøôÊ†∑È´òÈÄºÊ†ºÁöÑÂêçÂ≠óÁÆÄÁõ¥ËÆ©‰∫∫Êó†Ê≥ïÈù†Ëøë„ÄÇÁªà‰∫éÂú® $1$ ÊúàÁöÑÊó∂ÂÄôÔºåÊïôÁªÉÊâØÁùÄÊàëÊêûËøô‰∏™ÔºåÊ≤°ÊÉ≥Âà∞‰∏ÄÂ§©Â∑¶Âè≥Â∞±‰ºö‰∫Ü„ÄÇ Êàë‰ª¨ËøõÂÖ•Ê≠£È¢ò„ÄÇ 0XFF‚Äî-FFTÊòØÂï•? FFTÊòØ‰∏ÄÁßçDFTÁöÑÈ´òÊïàÁÆóÊ≥ïÔºåÁß∞‰∏∫Âø´ÈÄüÂÇÖÁ´ãÂè∂ÂèòÊç¢Ôºàfast Fourier transformÔºâÔºåÂÆÉÊ†πÊçÆÁ¶ªÊï£ÂÇÖÊ∞èÂèòÊç¢ÁöÑÂ•á„ÄÅÂÅ∂„ÄÅËôö„ÄÅÂÆûÁ≠â ÁâπÊÄßÔºåÂØπÁ¶ªÊï£ÂÇÖÁ´ãÂè∂ÂèòÊç¢ÁöÑÁÆóÊ≥ïËøõË°åÊîπËøõËé∑ÂæóÁöÑ„ÄÇ ‚Äî-ÁôæÂ∫¶ÁôæÁßë ÂØπ‰∫é‰∏§‰∏™Â§öÈ°πÂºè $F(x)$ Âíå $G(x)$ ÔºåË¶ÅÊ±Ç‰Ω†Â∞Ü‰ªñ‰ª¨‰πòËµ∑Êù•„ÄÇ ÈÇ£Ëøò‰∏çÁÆÄÂçïÔºüÁõ¥Êé•Êö¥ÂäõÁõ∏‰πòÂïäÔºö ËÆæ $F(x)$ ÁöÑÁ≥ªÊï∞Êï∞Âàó‰∏∫ $C$„ÄÇ $F(x) \times G(x) = C_nx^nG(x) + C_{n-1}x^{n-1}G(x) + C_{n-2}x^{n-2}G(x) \cdots C_2x^2G(x) + C_1x^1G(x) + C_0G(x)$ ËøôÊ†∑‰∏ãÊù•ÈúÄË¶ÅÂÅöÂÅö $n$ Ê¨°ÂçïÈ°πÂºè‰πòÂ§öÈ°πÂºèÔºåÊØèÊ¨°ÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶ $O(n)$ ÔºåÂàôÊÄªÂ§çÊùÇÂ∫¶È´òËææ $O(n^2)$ Âü∫Êú¨‰∏ä $n$ ‰∏ä‰∫Ü$4000$ Â∞±‰ºöË¢´Âç°Âêß‚Ä¶‚Ä¶ÈÇ£ÊÄé‰πàÊèêÈÄüÂë¢Ôºü ËøôÂ∞±ÈúÄË¶ÅÊàë‰ª¨‰ºüÂ§ßËÄåÂèàÁ•ûÂ•áÁöÑÁ•ûÂô®Ôºö$FFT$ (Âø´ÈÄüÂçöÁ´ãÂè∂ÂèòÊç¢) Â§çÊùÇÂ∫¶Â∞±Âè™Êúâ $O(nlogn)$ ‰∫Ü„ÄÇ 0X1F‚Äî-FFTÁöÑÂâçÁΩÆÁü•ËØÜ. 1.Â§çÊï∞ÊòØ‰ªÄ‰πà? Êàë‰ª¨ÊääÂΩ¢Â¶Ç $z=a+bi$Ôºà $a,b$ Âùá‰∏∫ÂÆûÊï∞ÔºâÁöÑÊï∞Áß∞‰∏∫Â§çÊï∞ÔºåÂÖ∂‰∏≠ $a$ Áß∞‰∏∫ÂÆûÈÉ®Ôºå $b$ Áß∞‰∏∫ËôöÈÉ®Ôºå $i$ Áß∞‰∏∫ËôöÊï∞Âçï‰Ωç„ÄÇÂΩìËôöÈÉ®Á≠â‰∫éÈõ∂Êó∂ÔºåËøô‰∏™Â§çÊï∞ÂèØ‰ª•ËßÜ‰∏∫ÂÆûÊï∞ÔºõÂΩìzÁöÑËôöÈÉ®‰∏çÁ≠â‰∫éÈõ∂Êó∂ÔºåÂÆûÈÉ®Á≠â‰∫éÈõ∂Êó∂ÔºåÂ∏∏Áß∞z‰∏∫Á∫ØËôöÊï∞„ÄÇÂ§çÊï∞ÂüüÊòØÂÆûÊï∞ÂüüÁöÑ‰ª£Êï∞Èó≠ÂåÖÔºåÂç≥‰ªª‰ΩïÂ§çÁ≥ªÊï∞Â§öÈ°πÂºèÂú®Â§çÊï∞Âüü‰∏≠ÊÄªÊúâÊ†π„ÄÇ Â§çÊï∞ÊòØÁî±ÊÑèÂ§ßÂà©Á±≥ÂÖ∞Â≠¶ËÄÖÂç°ÂΩìÂú®ÂçÅÂÖ≠‰∏ñÁ∫™È¶ñÊ¨°ÂºïÂÖ•ÔºåÁªèËøáËææÊúóË¥ùÂ∞î„ÄÅÊ££Ëé´Âºó„ÄÅÊ¨ßÊãâ„ÄÅÈ´òÊñØÁ≠â‰∫∫ ÁöÑÂ∑•‰ΩúÔºåÊ≠§Ê¶ÇÂøµÈÄêÊ∏ê‰∏∫Êï∞Â≠¶ÂÆ∂ÊâÄÊé•Âèó„ÄÇ ‚Äî-ÁôæÂ∫¶ÁôæÁßë ÊÉ≥ÂøÖÂ§ßÂÆ∂ÈÉΩÁü•ÈÅìÂÆûÊï∞ÊòØÂï•(‰∏çÁü•ÈÅìÈáçËØªÂπºÂÑøÂõ≠Âêß‚Ä¶‚Ä¶)ÔºåÂÆûÊï∞‰Ωç‰∫éÊï∞ËΩ¥‰∏äÔºåÂ∞±ÂÉè‰∏ãÂõæËøôÊ†∑Ôºö Êàë‰ª¨Á®çÂæÆËßÇÂØü‰∏Ä‰∏ãÔºå$1$ ÊòØÊÄé‰πàÂèòÂà∞ $-1$ ÁöÑÂë¢Ôºü Âú®Êï∞ËΩ¥‰∏äËΩ¨‰∫Ü 180¬∞„ÄÇ Â¶ÇÊûúÔºåÊòØ 90¬∞ ÁöÑËØùÔºå‰ºöÂèëÁîü‰ªÄ‰πàÂë¢Ôºü Ëøô‰∏™Êó∂ÂÄôÔºå‰ºöËΩ¨Âà∞ $0$ ‰∏äÈù¢ÁöÑ‰ΩçÁΩÆÔºå‰ΩÜÊòØÈÇ£ÈáåÔºåÂ•ΩÂÉèÊ≤°ÊúâÊï∞Âïä! ‰∏çÂØπÔºåÂÖ∂ÂÆûÊòØÊúâÁöÑÔºåÂè™‰∏çËøáËøô‰∏™Êï∞‰∏çÂú®ÂÆûÊï∞ËΩ¥‰∏äÔºåËÄåÊòØÂú®ËôöÊï∞ËΩ¥‰∏äÔºÅ ËôöÊï∞ËΩ¥ÁöÑÂçï‰ΩçÊòØ $i$ ÔºåÊàë‰ª¨ÂèØ‰ª•Ëøô‰πàË°®Á§∫Ôºö ÂóØÔºåÂØπ„ÄÇËøôÊòæÁÑ∂ÊòØ‰∏Ä‰∏™Âπ≥Èù¢ÂùêÊ†áÁ≥ª„ÄÇÁé∞Âú®Êàë‰ª¨ÁöÑÊï∞‰ªÖÈôê‰∫éÊï∞ËΩ¥‰∏äÔºåÂ¶ÇÊûúÊòØËøô‰∏™Âπ≥Èù¢ÂùêÊ†áÁ≥ª‰∏äÁöÑ‰∏Ä‰∏™ÁÇπÊÄé‰πàË°®ËææÂë¢Ôºü ÂØπ‰∫é‰∏ãÈù¢ÁöÑÁ∫¢Ëâ≤ÁÇπÔºö Ëøô‰∏™ÁÇπÁöÑÂùêÊ†áÂæàÂÆπÊòìÁöÑÂèØ‰ª•ÂæóÂà∞Ôºö$(2,i)$ Ôºå‰πüÂèØ‰ª•Ë°®Á§∫Êàê $2+i$ . ‰Ω†Ê≤°ÁåúÈîôÔºÅËøô‰∏™Â∞±Âè´Â§çÊï∞ÔºÅ ‰∏Ä‰∏™ÂæàÈáçË¶ÅÁöÑÁªìËÆ∫ÔºöÂ§çÊï∞Áõ∏‰πòÊó∂ÔºåÊ®°ÈïøÁõ∏‰πòÔºåÂπÖËßíÁõ∏Âä†ÔºÅ 2.ÁÇπÂÄºË°®Á§∫Ê≥ïÊòØ‰ªÄ‰πà?Êàë‰ª¨Áî®‰∏Ä‰∏™‰∫åÁª¥Âπ≥Èù¢ÂùêÊ†áÁ≥ªÔºåÂú®‰∏äÈù¢Áîª $N+1$ ‰∏™ÁÇπÔºåÊúÄÁªàÂèØ‰ª•Ëß£Âá∫‰∏Ä‰∏™ $n$ ÂÖÉÁöÑÂáΩÊï∞„ÄÇËØÅÊòéÁï•„ÄÇ ÂêåÊ†∑ÔºåÊàë‰ª¨ÂèØ‰ª•Áî® $N-1$ ‰∏™ÁÇπÊù•Ë°®Ëææ‰∏Ä‰∏™Â§öÈ°πÂºè„ÄÇ Âõ†‰∏∫ÁÇπÂÄºÁõ∏‰πòÁöÑÂ§çÊùÇÂ∫¶Âè™Êúâ $O(n)$ ÊòæÁÑ∂‰ºòÁßÄËÆ∏Â§ö„ÄÇ 3.Âçï‰ΩçÊ†πÊòØ‰ªÄ‰πà?*nÊ¨°Âçï‰ΩçÊ†π(n‰∏∫Ê≠£Êï¥Êï∞)ÊòØnÊ¨°ÂπÇ‰∏∫1ÁöÑÂ§çÊï∞!*nÊ¨°Âçï‰ΩçÊ†π(n‰∏∫Ê≠£Êï¥Êï∞)ÊòØnÊ¨°ÂπÇ‰∏∫1ÁöÑÂ§çÊï∞!*nÊ¨°Âçï‰ΩçÊ†π(n‰∏∫Ê≠£Êï¥Êï∞)ÊòØnÊ¨°ÂπÇ‰∏∫1ÁöÑÂ§çÊï∞! Êàë‰ª¨ÂÖàÂú®Â§çÂπ≥Èù¢‰∏äÁîª‰∏™ÁÇπÔºåÂ∞±ÂÉèËøôÊ†∑Ôºö TaÂè´ÂÅöÂçï‰ΩçÂúÜ„ÄÇ ÂúÜËæπ‰∏äÁöÑ‰ªªÊÑè‰∏ÄÁÇπÁöÑÊ®°ÈïøÈÉΩÊòØ $1$. Âè™ÊúâÂçï‰ΩçÂúÜ‰∏äÁöÑÁÇπË°®Á§∫ÁöÑÂ§çÊï∞ÊâçÊúâÂèØËÉΩÊàê‰∏∫$n$Ê¨°Âçï‰ΩçÊ†π! Âçï‰ΩçÊ†πÁöÑÂü∫Êú¨Á¨¶Âè∑Ôºö$œâ$ ‰∏Ä‰∏™Âçï‰ΩçÂúÜÔºåÊàë‰ª¨Â∞ÜÂÆÉÂàáÊàê $n$ ‰ªΩÔºå‰ªé $(1,0)$ ÂºÄÂßãÊóãËΩ¨ÔºåÊØèÊ¨°ÊóãËΩ¨ $\frac{1}{n} \times 360$ Â∫¶ÔºåÊØèÊ¨°ÊóãËΩ¨ÂêéÁöÑÁÇπÈÉΩËÆ∞‰∏∫ $œâ_{n}^{k}$ÔºåÁâπÂà´ÁöÑÔºå$œâ_{n}^{0}$ Âíå $œâ_{n}^{n}$ ÈÉΩÊòØ $(1,0)$ ÁÇπ„ÄÇ ËøòÊúâÔºåÂΩì $k&gt;=n$ ÊàñËÄÖ $k&lt;0$ Êó∂Ôºå$œâ_{n}^{k}$ ‰πüÊòØÂêàÊ≥ïÁöÑ„ÄÇ Âçï‰ΩçÊ†πÁöÑÊÄßË¥®Ôºö$1.$ ÂØπ‰∫é‰ªªÊÑèÁöÑ $n$ , $œâ_{n}^{0}$ ÈÉΩ‰∏∫ $(1,0)$ ÁÇπ„ÄÇ$2.$ $œâ_{n}^{a} \times œâ_{n}^{b} = œâ_{n}^{a+b} $$3.$ $œâ_{an}^{ak} = œâ_{n}^{k} $$4.$ $(œâ_{n}^{x})^y = (œâ_{n}^{y})^x $$5.$ $œâ_{n}^{k+n/2} = -œâ_{n}^{k} $ if(n%2==0) 0X2F‚Äî-FFTÁöÑÊ±ÇËß£ËøáÁ®ã. ÂàÜÊ≤ªÊÄùÊÉ≥ÂæàÈáçË¶ÅÔºÅ Êàë‰ª¨Â∞ÜÂ§öÈ°πÂºè $F(x)$ Êåâ‰ΩçÁΩÆÂàÜÊàê‰∏§Âùó„ÄÇ ÈÇ£‰πàÂèòÊàê‰∫Ü(‰øùËØÅnÊòØ2ÁöÑÊ≠£Êï¥Êï∞Ê¨°ÂπÇ)Ôºö $F(x) = (C_0+C_2x^2+C_4x^4+ \cdots +C_{n-2}x^{n-2}) + (C_1x+C_3x^3+C_5x^5+ \cdots +C_{n-1}x^{n-1})$ ËÆæ‰∏§‰∏™Â§öÈ°πÂºè $F1(x),F2(x)$„ÄÇ $F1(x) = C_0+C_2x+C_4x^2+ \cdots +C_{n-2}x^{n/2-1}$$F2(x) = C_1x+C_3x+C_5x^2+ \cdots +C_{n-1}x^{n/2-1}$ ÂàôÊàë‰ª¨ÂèØ‰ª•ÂæóÂá∫Ôºö $F(x) = F1(x^2) + F2(x^2) \times x$ ËÆæ $k&lt;n/2$ Ôºå Â∞Ü $œâ_{n}^{k}$ Â∏¶ÂÖ•Â§öÈ°πÂºè $F(x)$. $F(œâ_{n}^{k}) = F1((œâ_{n}^{k})2) + F2((œâ_{n}^{k})^2) \times œâ_{n}^{k}$ ÁÆÄÂåñÂæóÔºö $F(œâ_{n}^{k}) = F1(œâ_{n/2}^{k}) + F2(œâ_{n/2}^{k}) \times œâ_{n}^{k}$ ÂÜçÂÅáËÆæ $k&lt;n/2$ ÔºåÂ∞Ü $œâ_{n}^{k+n/2}$ Â∏¶ÂÖ•Â§öÈ°πÂºè $F(x)$. $F(œâ_{n}^{k+n/2}) = F1((œâ_{n}^{k+n/2})2) + F2((œâ_{n}^{k+n/2})^2) \times œâ_{n}^{k}$$F(œâ_{n}^{k+n/2}) = F1(œâ_{n}^{2k+n}) + F2(œâ_{n}^{2k+n}) \times œâ_{n}^{k+n/2}$$F(œâ_{n}^{k+n/2}) = F1(œâ_{n}^{2k}) + F2(œâ_{n}^{2k}) \times œâ_{n}^{k+n/2}$$F(œâ_{n}^{k+n/2}) = F1(œâ_{n/2}^{k}) + F2(œâ_{n/2}^{k}) \times œâ_{n}^{k+n/2}$$F(œâ_{n}^{k+n/2}) = F1(œâ_{n/2}^{k}) - F2(œâ_{n/2}^{k}) \times œâ_{n}^{k}$ ÊØîËæÉ‰∏Ä‰∏ã‰∏§‰∏™ÂºèÂ≠êÔºö $F(œâ_{n}^{k}) = F1(œâ_{n/2}^{k}) + F2(œâ_{n/2}^{k}) \times œâ_{n}^{k}$ $F(œâ_{n}^{k+n/2}) = F1(œâ_{n/2}^{k}) - F2(œâ_{n/2}^{k}) \times œâ_{n}^{k}$ Á≠âÂºèÂè≥ËæπÂè™Êúâ‰∏Ä‰∏™Ë¥üÂè∑ÁöÑÂ∑ÆÂà´! Ëøô‰∏§‰∏™ÂºèÂ≠êÂæàÂÖ≥ÈîÆÔºÅ 0X3F‚Äî-FFTÁöÑ‰ª£Á†ÅÂÆûÁé∞.ÂØπ‰∫éÂ§çÊï∞ÁöÑ‰ΩøÁî®ËôΩÁÑ∂ $C++ STL$ ÈáåÈù¢ÊúâÂ§çÊï∞ $(complex)$ ‰ΩÜÊòØÂ§™ÊÖ¢‰∏çÂª∫ËÆÆÂ§ßÂÆ∂‰ΩøÁî®„ÄÇ ‰Ω†ÂèØ‰ª•Ëá™Â∑±ÊâãÊâì $complex$ ÊâãÊâìÁöÑ $complex$ : 1234struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125; FFT: 123456789101112131415complex a[N],b[N];inline void FFT(complex *f,int len,short inv)&#123; if(!len)return;complex f1[len+1],f2[len+2]; for(int k=0;k&lt;len;++k)f1[k]=f[k&lt;&lt;1],f2[k]=f[k&lt;&lt;1|1];//Êåâ‰ΩçÁΩÆÂàÜ FFT(f1,len&gt;&gt;1,inv);FFT(f2,len&gt;&gt;1,inv);//ÈÄíÂΩíÂ§ÑÁêÜÂ≠êÈóÆÈ¢ò complex tmp=complex(cos(PI/len),inv*sin(PI/len)),buf=complex(1,0); /*tmp:ÂÅö‰∏ÄÊ¨°Âπ≥ÊñπÂêéÂùêÊ†áÁöÑÂèòÊç¢*/ /*buf:ÂàùÂßã‰ΩçÁΩÆ*/ for(RI k=0;k&lt;len;++k)&#123; complex t=buf*f2[k]; f[k]=f1[k]+t,f[k+len]=f1[k]-t;buf=buf*tmp;//ÊåâÁÖßÂÖ¨ÂºèËøòÂéü &#125;return;&#125;//Ê≥®ÊÑèÔºåinvÁöÑ‰ΩúÁî®ÊòØÂà§Êñ≠ÊòØ "Á≥ªÊï∞ËΩ¨ÁÇπÂÄº" ËøòÊòØ "ÁÇπÂÄºËΩ¨Á≥ªÊï∞" $Code$ ‰∏≠ÊèêÂà∞ÁöÑÂÖ¨ÂºèÊòØËøô‰∏§È°πÔºö $F(œâ_{n}^{k}) = F1(œâ_{n/2}^{k}) + F2(œâ_{n/2}^{k}) \times œâ_{n}^{k}$ $F(œâ_{n}^{k+n/2}) = F1(œâ_{n/2}^{k}) - F2(œâ_{n/2}^{k}) \times œâ_{n}^{k}$ ÂØπ‰∫éÊñá‰∏≠ÁöÑ‚ÄùÂùêÊ†áÁöÑÂèòÊç¢‚ÄùÔºöÊàë‰ª¨‰æùÊóßÊù•ÁúãÂçï‰ΩçÂúÜÔºö ÂÆûÈôÖ‰∏äÔºåËøô‰∏™ÂùêÊ†áÁöÑÂèòÊç¢ÔºåÁõ¥Êé•Áî®Âõ≠‰∏≠ÁöÑ‰∏âËßíÂΩ¢ÔºåËøêÁî®‰∏âËßíÂáΩÊï∞Â∞±ÂèØ‰ª•ÂæóÂá∫Ëß£‰∫Ü„ÄÇ ËøáÁ®ãÁï•. ÊúÄÂêéÊàë‰ª¨ÂæóÂà∞ÁöÑÁªìÊûúÊòØÔºö$œâ_{n}^{1} = (cos(\frac{2œÄ}{n}),sin(\frac{2œÄ}{n}))$ Ê±ÇÂá∫ $œâ_{n}^{1}$ ÂêéÂ∞ÜÂÆÉ‰πò $n$ Ê¨°ÔºåÂèØ‰ª•ÂæóÂà∞Ôºö$ {œâ_{n}^{0},œâ_{n}^{1},œâ_{n}^{2},œâ_{n}^{3},œâ_{n}^{4},œâ_{n}^{5} \cdots œâ_{n}^{n-1}} $ Ë¥¥Âá∫ÊúÄÁªàÁöÑ‰ª£Á†ÅÔºö123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#define ll long long#define RI register int #define inf 0x3f3f3f3f#define PI 3.1415926535898using namespace std;const int N=6e4+2;template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;complex a[N],b[N];inline void FFT(complex *f,int len,short inv)&#123; if(!len)return;complex f1[len+1],f2[len+2]; for(int k=0;k&lt;len;++k)f1[k]=f[k&lt;&lt;1],f2[k]=f[k&lt;&lt;1|1]; FFT(f1,len&gt;&gt;1,inv);FFT(f2,len&gt;&gt;1,inv); complex tmp=complex(cos(PI/len),inv*sin(PI/len)),buf=complex(1,0); for(RI k=0;k&lt;len;++k)&#123; complex t=buf*f2[k]; f[k]=f1[k]+t,f[k+len]=f1[k]-t;buf=buf*tmp; &#125;return;&#125;int n,m;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(RI i=0;i&lt;=n;++i)scanf("%lf",&amp;a[i].x); for(RI i=0;i&lt;=m;++i)scanf("%lf",&amp;b[i].x); for(m+=n,n=1;n&lt;=m;n&lt;&lt;=1); FFT(a,n&gt;&gt;1,1);FFT(b,n&gt;&gt;1,1); for(int i=0;i&lt;n;++i)a[i]=a[i]*b[i]; FFT(a,n&gt;&gt;1,-1); for(int i=0;i&lt;=m;++i)printf("%.0f ",fabs(a[i].x)/n); putchar('\n'); return 0;&#125; Âê¨ËØ¥ÂèØ‰ª•‰ºòÂåñÔºåÈÇ£Âï•ÁöÑÊàëËøò‰∏ç‰ºöÔºåÂ∞±Âà∞ËøôÂêß. Ëøá‰∫Ü‰∏Ä‰ºöÂÑø‚Ä¶‚Ä¶ ‚ÄúÂéüÊù•FFTÂ∞è‰ºòÂåñËøô‰πàÁÆÄÂçïÂïä!‚Äù 0X4F‚Äî-FFTÁöÑ‰∏Ä‰∫õÂ∞è‰ºòÂåñ. ‰∏çÁî®ÈÄíÂΩíÔºö12345ÈÄíÂΩíÁâà(Êï∞ÁªÑ‰∏ãÊ†áÔºåÂÖàÂÅ∂ÂêéÂ•áÔºå‰ªé0ÂºÄÂßã)Ôºö0 1 2 3 4 5 6 7 --Á¨¨1Â±Ç0 2 4 6 |1 3 5 7 --Á¨¨2Â±Ç0 4 |2 6 |1 5 |3 7 --Á¨¨3Â±Ç0 |4 |2 |6 |1 |5 |3| 7 --Á¨¨4Â±Ç ÂèëÁé∞‰∫Ü‰ªÄ‰πàÂêóÔºü ÊúÄÂêéÁöÑÂ∫èÂàóÊòØÂéüÂ∫èÂàóÁöÑ‰∫åËøõÂà∂ÂèçËΩ¨! ÊØîÂ¶ÇÔºö $6 = (110)_2$ ÂèçËøáÊù•ÂèòÊàê‰∫Ü $(011)_2 = 3$ ÔºÅ Â¶Ç‰ΩïÂæóÂà∞‰∫åËøõÂà∂ÁøªËΩ¨ÂêéÁöÑÊï∞ÂàóÔºüÈÄíÊé®Âç≥ÂèØ! 12for(RI i=0;i&lt;n;++i)filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?n&gt;&gt;1:0); //filp[i] Âç≥‰∏∫ i ÁöÑ‰∫åËøõÂà∂‰ΩçÁøªËΩ¨ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#define ll long long#define RI register int #define inf 0x3f3f3f3f#define PI 3.1415926535898using namespace std;const int N=3e6+2;int n,m,filp[N]; template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;complex a[N],b[N];inline void FFT(complex *f,short inv)&#123; for(RI i=0;i&lt;n;++i)if(i&lt;filp[i])&#123;complex tmp=f[i];f[i]=f[filp[i]];f[filp[i]]=tmp;&#125; /*Êç¢‰ΩçÁΩÆ*/ for(RI p=2;p&lt;=n;p&lt;&lt;=1)&#123;//ÊØèÂ±ÄÂå∫Èó¥ÈïøÂ∫¶ RI len=p/2;//ÂêàÂπ∂Â≠êÂå∫Èó¥ÁöÑÈïøÂ∫¶(ÊâÄ‰ª•ÊòØp/2) complex tmp=complex(cos(PI/len),inv*sin(PI/len)); for(RI k=0;k&lt;n;k+=p)&#123;//ÊØèÂ±ÄÂ∑¶Á´ØÁÇπ complex buf=complex(1,0); for(RI l=k;l&lt;k+len;++l)&#123;//ÈÅçÂéÜÂå∫Èó¥ complex t=buf*f[len+l]; f[len+l]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp;//ËµãÂÄºÊúâÂæÆÂ∞èÁöÑÂèòÂåñÔºåÊ≥®ÊÑèÈ°∫Â∫èÔºÅ &#125; &#125; &#125;return;&#125;/*‰∏ªÁ®ãÂ∫è‰∏çÂèò*/int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(RI i=0;i&lt;=n;++i)scanf("%lf",&amp;a[i].x); for(RI i=0;i&lt;=m;++i)scanf("%lf",&amp;b[i].x); for(m+=n,n=1;n&lt;=m;n&lt;&lt;=1); for(RI i=0;i&lt;n;++i)filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?n&gt;&gt;1:0); FFT(a,1);FFT(b,1); for(RI i=0;i&lt;n;++i)a[i]=a[i]*b[i]; FFT(a,-1); for(RI i=0;i&lt;=m;++i)printf("%.0f ",fabs(a[i].x)/n); putchar('\n'); return 0;&#125; luogu‰∏äÁöÑÈ¢òÔºåÈÄíÂΩíÁöÑÊÄªÊòØTÊúÄÂêé‰∏Ä‰∏™ÁÇπÔºåÊîπÊàêÈùûÈÄíÂΩíÁâàÁöÑÂ∞±A‰∫ÜÔºüemmmmmmmmmmmmmm ÊâÄÊúâ‰ºòÂåñÂÖ®ÂºÄÔºöÂæà‰ΩúÊ≠ªÔºåÂª∫ËÆÆ‰∏çË¶ÅËΩªÊòìÂ∞ùËØï[ÊªëÁ®Ω] 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#pragma GCC optimize(2)#pragma GCC optimize(3)#pragma GCC optimize("Ofast")#pragma GCC optimize("inline")#pragma GCC optimize("-fgcse")#pragma GCC optimize("-fgcse-lm")#pragma GCC optimize("-fipa-sra")#pragma GCC optimize("-ftree-pre")#pragma GCC optimize("-ftree-vrp")#pragma GCC optimize("-fpeephole2")#pragma GCC optimize("-ffast-math")#pragma GCC optimize("-fsched-spec")#pragma GCC optimize("unroll-loops")#pragma GCC optimize("-falign-jumps")#pragma GCC optimize("-falign-loops")#pragma GCC optimize("-falign-labels")#pragma GCC optimize("-fdevirtualize")#pragma GCC optimize("-fcaller-saves")#pragma GCC optimize("-fcrossjumping")#pragma GCC optimize("-fthread-jumps")#pragma GCC optimize("-funroll-loops")#pragma GCC optimize("-fwhole-program")#pragma GCC optimize("-freorder-blocks")#pragma GCC optimize("-fschedule-insns")#pragma GCC optimize("inline-functions")#pragma GCC optimize("-ftree-tail-merge")#pragma GCC optimize("-fschedule-insns2")#pragma GCC optimize("-fstrict-aliasing")#pragma GCC optimize("-fstrict-overflow")#pragma GCC optimize("-falign-functions")#pragma GCC optimize("-fcse-skip-blocks")#pragma GCC optimize("-fcse-follow-jumps")#pragma GCC optimize("-fsched-interblock")#pragma GCC optimize("-fpartial-inlining")#pragma GCC optimize("no-stack-protector")#pragma GCC optimize("-freorder-functions")#pragma GCC optimize("-findirect-inlining")#pragma GCC optimize("-fhoist-adjacent-loads")#pragma GCC optimize("-frerun-cse-after-loop")#pragma GCC optimize("inline-small-functions")#pragma GCC optimize("-finline-small-functions")#pragma GCC optimize("-ftree-switch-conversion")#pragma GCC optimize("-foptimize-sibling-calls")#pragma GCC optimize("-fexpensive-optimizations")#pragma GCC optimize("-funsafe-loop-optimizations")#pragma GCC optimize("inline-functions-called-once")#pragma GCC optimize("-fdelete-null-pointer-checks") [ÊªëÁ®Ω][ÊªëÁ®Ω][ÊªëÁ®Ω][ÊªëÁ®Ω][ÊªëÁ®Ω][ÊªëÁ®Ω][ÊªëÁ®Ω][ÊªëÁ®Ω][ÊªëÁ®Ω][ÊªëÁ®Ω][ÊªëÁ®Ω] NNT‚Äî‚Äî‚ÄîÂ≠¶‰π†Á¨îËÆ∞‚Äî‚Äî‚ÄîÂÖ≥‰∫éFFTÂÖÑÂºüÁöÑÈÇ£‰∫õ‰∫ã 0X5F‚Äî-NTTÊòØÂï•? NTT(Âø´ÈÄüÊï∞ËÆ∫ÂèòÊç¢)‰∏ÄÁßçÂø´ÈÄüÊï∞ËÆ∫ÂèòÊç¢ÁÆóÊ≥ïÔºåËøôÁßçÁÆóÊ≥ïÊòØ‰ª•Êï∞ËÆ∫‰∏∫Âü∫Á°ÄÔºåÂØπÊ†∑Êú¨ÁÇπ‰∏∫ÁöÑÊï∞ËÆ∫ÂèòÊç¢ÔºåÊåâÊó∂Èó¥ÊäΩÂèñÁöÑÊñπÊ≥ïÔºåÂæóÂà∞‰∏ÄÁªÑÁ≠â‰ª∑ÁöÑËø≠‰ª£ÊñπÁ®ãÔºåÊúâÊïàÈ´òÈÄüÁÆÄÂåñ‰∫ÜÊñπÁ®ã‰∏≠ÁöÑËÆ°ÁÆóÂÖ¨Âºè¬∑‰∏éÁõ¥Êé•ËÆ°ÁÆóÁõ∏ÊØîÔºåÂ§ßÂ§ßÂáèÂ∞ë‰∫ÜËøêÁÆóÊ¨°Êï∞„ÄÇÔºàËßÅÂø´ÈÄüÂÇÖÈáåÂè∂ÂèòÊç¢Ôºâ„ÄÇÂú®ËÆ°ÁÆóÊú∫ÂÆûÁé∞Â§öÈ°πÂºè‰πòÊ≥ï‰∏≠ÔºåÊàë‰ª¨ÊâÄÁÜüÁü•ÁöÑÂø´ÈÄüÂÇÖÈáåÂè∂ÂèòÊç¢(FFT)ÊòØÂü∫‰∫énÊ¨°Âçï‰ΩçÊ†π$œâ_{n}$ $(omega)$ ÁöÑ‰ºòÁßÄÊÄßË¥®ÂÆûÁé∞ÁöÑÔºåËÄåÁî±‰∫éÂÖ∂ËÆ°ÁÆóÊó∂‰ºö‰ΩøÁî®Ê≠£Âº¶ÂáΩÊï∞Âíå‰ΩôÂº¶ÂáΩÊï∞ÔºåÂú®‰∏çÊñ≠ËøêÁÆóÊó∂Êó†Ê≥ïÈÅøÂÖçÂú∞‰ºö‰∫ßÁîüÁ≤æÂ∫¶ËØØÂ∑Æ„ÄÇËÄåÂ§öÈ°πÂºè‰πòÊ≥ïÊúâ‰∫õÊó∂ÂÄô‰ºöÂª∫Á´ãÂú®Ê®°Âüü‰∏≠ÔºåÂú®ÂØπ‰∏Ä‰∫õÁâπÊÆäÁöÑÂ§ßË¥®Êï∞ÂèñÊ®°Êó∂Ôºå‰æøÂèØ‰ª•ËÄÉËôëÁî®ÂéüÊ†πgÊù•‰ª£Êõø$œâ_{n}$ÔºåËÄåËøô‰∫õÁâπÊÆäÁöÑÂ§ßË¥®Êï∞ÁöÑÂéüÊ†πÊÅ∞Â•ΩÊª°Ë∂≥$œâ_{n}$ÁöÑÊüê‰∫õÊÄßË¥®ÔºåËøô‰ΩøÂæóÂ§öÈ°πÂºè‰πòÊ≥ïÂú®Ê®°Âüü‰∏≠‰πüÂèØ‰ª•Âø´ÈÄüÁöÑÂàÜÊ≤ªÂêàÂπ∂„ÄÇ ‚Äî‚Äî‚ÄîÁôæÂ∫¶ÁôæÁßë ÂÆûÈôÖ‰∏äÔºå$NTT$ Ë∑ü $FFT$ Ê≤°Âï•Â∑ÆÂà´Ôºå‰ºòÁº∫ÁÇπÂêÑÊúâ„ÄÇ‰ºòÁÇπÔºåÂ∞±ÊòØÁúÅÊéâ‰∫ÜÂ§ßÁ≤æÂ∫¶ÁöÑÊìç‰ΩúÔºåÂ∏∏Êï∞ËæÉÂ∞è„ÄÇ Ë¥¥Âá∫ÊàëÂú®luoguÁöÑP3803ÊµãËØÑËÆ∞ÂΩïÔºö O2‚Äî-FFT: Êó†‰ºòÂåñ‚ÄîNTT: (ÈÄüÂ∫¶‰∏çÂú®‰∏Ä‰∏™ÊúçÂä°Âô®‚Ä¶‚Ä¶) ÂΩìÁÑ∂Ôºå‰ªÄ‰πà‰∏úË•øÈÉΩÊòØÊúâÁº∫ÁÇπÁöÑÔºå$NTT$ ÁöÑÁº∫ÁÇπÂ∞±ÊòØÂ§öÈ°πÂºèÁöÑÁ≥ªÊï∞Âè™ËÉΩÊòØÊï¥Êï∞ ÔºåËÄå‰∏îÊôÆÈÄöÁöÑ $NTT$ Âπ∂‰∏çËÉΩÂÅöÂà∞‰ªªÊÑèÊ®°Êï∞ÔºåÊØîËæÉÊúâÈôêÂà∂(‰ΩÜÊòØÂÉèXZYËøôÊ†∑ÁöÑÂ•Ü‰Ω¨ÈöèÊâãÂèØ‰ª•Ê∞¥Ëøá‰ªªÊÑèÊ®°Êï∞NTT)Ôºå‰∏çËøáÂØπ‰∫é‰∏ÄËà¨ÁöÑÂÉè998244353ËøôÊ†∑ÁöÑÊ®°Êï∞ÂèØ‰ª•Ë∑ë„ÄÇ ÂÆûÁé∞ÁöÑÂü∫Á°Ä‚Äî‚Äî‚ÄîÂéüÊ†π ÂéüÊ†πÊòØ‰∏ÄÁßçÊï∞Â≠¶Á¨¶Âè∑ÔºåËÆæ $m$ ÊòØÊ≠£Êï¥Êï∞Ôºå$a$ ÊòØÊï¥Êï∞ÔºåËã• $a$ Ê®° $m$ ÁöÑÈò∂Á≠â‰∫é $œÜ(m)$ ÔºåÂàôÁß∞ $a$ ‰∏∫Ê®° $m$ ÁöÑ‰∏Ä‰∏™ÂéüÊ†π„ÄÇÔºàÂÖ∂‰∏≠ $œÜ(m)$ Ë°®Á§∫ $m$ ÁöÑÊ¨ßÊãâÂáΩÊï∞Ôºâ‚Äî‚Äî‚ÄîÁôæÂ∫¶ÁôæÁßë ‰∏∫‰ªÄ‰πà $FFT$ ÂèØ‰ª•Â¶ÇÊ≠§‰ºòÁßÄÔºüÈÇ£ÊòØÂõ†‰∏∫Âçï‰ΩçÊ†πÊúâÁùÄÁ•ûÂ•áÁöÑÊÄßË¥®„ÄÇÂéüÊ†π‰πüÊòØÂ¶ÇÊ≠§ÔºÅ ÂêàÂπ∂ÁöÑÊó∂ÂÄôÔºå$p=2len$ . Âçï‰ΩçÊ†πÔºö$cos\frac{2œÄ}{P}+i sin\frac{2œÄ}{P} = cos\frac{œÄ}{len} + i sin\frac{œÄ}{len}$ ÂéüÊ†πÔºö$g^{\frac{MOD-1}{P}} = g^{\frac{MOD-1}{2len}}$ $NTT$ ÁöÑÂ≠¶‰π†ÊòØÂª∫Á´ãÂú® $FFT$ ‰∏äÁöÑÔºåÂª∫ËÆÆÂ§ßÂÆ∂ÂÖàÁêÜËß£ $FFT$ ÂÜçÊù•Áúã $NTT$ Â§öËØ¥Êó†ÁõäÔºåË¥¥ÊùøÂ≠êÂêß‚Ä¶‚Ä¶ 1234567891011121314151617181920212223#define MOD 998244353#define G 3inline int pow(int x,int y)//Âø´ÈÄüÂπÇ&#123;ll z=1ll*x,ans=1ll;for(;y;y/=2,z=z*z%MOD)if(y&amp;1)ans=ans*z%MOD;return (int)ans%MOD;&#125;inline void NTT(int *f,short inv)&#123;//NTTÊùøÂ≠ê int bit=0;while((1&lt;&lt;bit)&lt;n)bit++; for(RI i=0;i&lt;n;++i)&#123; filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(bit-1)); if(i&lt;filp[i])swap(f[i],f[filp[i]]); &#125; for(RI len=1;len&lt;n;len&lt;&lt;=1)&#123; RI tmp=pow(G,(MOD-1)/(len&lt;&lt;1)); if(inv==-1)tmp=pow(tmp,MOD-2);//ÊòØÈÄÜËøêÁÆóÁöÑËØùÂ∞±Â•óÈÄÜÂÖÉ for(RI k=0;k&lt;n;k+=len*2)&#123; int buf=1; for(RI l=0;l&lt;len;++l,buf=1ll*buf*tmp%MOD)&#123; int t=f[l+k],d=1ll*buf*f[l+k+len]%MOD; f[l+k]=t+d,f[l+k+len]=t-d,//Ê≥®ÊÑèÂ∑ÆÂà´ f[l+k]=(f[l+k]%MOD+MOD)%MOD,f[l+k+len]=(f[l+k+len]%MOD+MOD)%MOD; &#125; &#125; &#125;&#125; ÈÇ£‰∏ÄÈ¢òÁöÑ‰ª£Á†ÅÔºö 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#define ll long long#define RI register int #define inf 0x3f3f3f3f#define MOD 998244353#define G 3using namespace std;const int N=3e6+2;int n=1,len1,len2,filp[N],a[N],b[N];template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline int pow(int x,int y)&#123;ll z=1ll*x,ans=1ll;for(;y;y/=2,z=z*z%MOD)if(y&amp;1)ans=ans*z%MOD;return (int)ans%MOD;&#125;inline void NTT(int *f,short inv)&#123; int bit=0;while((1&lt;&lt;bit)&lt;n)bit++; for(RI i=0;i&lt;n;++i)&#123; filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(bit-1)); if(i&lt;filp[i])swap(f[i],f[filp[i]]); &#125; for(RI len=1;len&lt;n;len&lt;&lt;=1)&#123; RI tmp=pow(G,(MOD-1)/(len&lt;&lt;1)); if(inv==-1)tmp=pow(tmp,MOD-2); for(RI k=0;k&lt;n;k+=len*2)&#123; int buf=1; for(RI l=0;l&lt;len;++l,buf=1ll*buf*tmp%MOD)&#123; int t=f[l+k],d=1ll*buf*f[l+k+len]%MOD; f[l+k]=t+d,f[l+k+len]=t-d, f[l+k]=(f[l+k]%MOD+MOD)%MOD,f[l+k+len]=(f[l+k+len]%MOD+MOD)%MOD; &#125; &#125; &#125;&#125;int main()&#123; IN(len1),IN(len2);len1++,len2++; while(n&lt;len1+len2)n&lt;&lt;=1; for(RI i=0;i&lt;=len1-1;++i)IN(a[i]); for(RI i=0;i&lt;=len2-1;++i)IN(b[i]); NTT(a,1);NTT(b,1); for(RI i=0;i&lt;n;++i)a[i]=1ll*a[i]*b[i]%MOD; NTT(a,-1); for(RI i=0;i&lt;=len1+len2-2;++i)printf("%d ",1ll*a[i]*pow(n,MOD-2)%MOD); putchar('\n'); return 0;&#125; 0X3f3f3f3f ÈôÑËÆ∞Êù•‰∏ÄÂº†Ë°®ÂêßÔºö Ê®°Êï∞ GÁöÑÂÄº 3 2 5 2 17 3 97 5 193 5 257 3 7681 17 12289 11 40961 3 65537 3 786433 10 5767169 3 7340033 3 23068673 3 104857601 3 167772161 3 469762049 3 998244353 3 1004535809 3 2013265921 31 2281701377 3 3221225473 5 75161927681 3 77309411329 7 ÊúÄÂêéÔºåÂõ†‰∏∫Êú¨‰∫∫ÂÆûÂú®Â§™Âº±‰∫ÜÔºåÂ§™Ëíü‰∫ÜÔºåÊâÄ‰ª•ÂÆûÂú®ÂÜô‰∏çÂá∫Âï•‰∫Ü„ÄÇ $by Qiuly$]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>Â≠¶‰π†Á¨îËÆ∞</tag>
        <tag>ÊÄªÁªì</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë Ë∑≥Ê•ºÊú∫ Âêå‰ΩôÊúÄÁü≠Ë∑Ø luogu3403]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3403%2F</url>
    <content type="text"><![CDATA[ÂØπ‰∫é $x,y,z$ ‰∏â‰∏™Êìç‰ΩúÔºåÊàë‰ª¨ÂÖàËÄÉËôë $y,z$ ‰∏§‰∏™Êìç‰ΩúÁöÑÊÉÖÂÜµ„ÄÇ $f[i]$ Ë°®Á§∫ÈÄöËøá $y,z$ ‰∏§‰∏™Êìç‰ΩúÂèØ‰ª•Âà∞ËææÁöÑ $mod x=i$ ÊúÄÂ∞èÁöÑÊ•ºÂ±Ç„ÄÇ ÂèØ‰ª•ÂæóÁü•Ôºö$f[i+y]=f[i]+y,f[i+z]=f[i]+z.$ ÂØπ‰∫éÊúÄÁü≠Ë∑ØÔºåÊàë‰ª¨ÂèØ‰ª•Áî®‰∏Ä‰∏ãÂΩ¢ÂºèÂª∫ËæπÔºö 1add(i,(i+y)%x,y); add(i,(i+z)%x,z); Ê≤°ÈóÆÈ¢òÂêßÔºü%xÊòØÂøÖÈ°ªË¶ÅÂÅöÁöÑÊìç‰ΩúÔºå‰∏äÊñáËÆ≤‰∫Ü„ÄÇ ÈÇ£Â¶Ç‰ΩïÁªüËÆ°Á≠îÊ°àÂë¢Ôºü È¶ñÂÖàÔºåÂ¶ÇÊûúËøô‰∏™ ‚ÄúÊúÄÂ∞èÁöÑÊ•ºÂ±Ç‚Äù Ë∂ÖÂá∫‰∫Ü $H$ ÔºåÈÇ£‰πàÊòæÁÑ∂ÊòØ‰∏çÁî®ÁªüËÆ°ÁöÑ„ÄÇÂê¶ÂàôÔºåÊàë‰ª¨Â∞ÜËøôÊ†∑ÁªüËÆ°Ôºöans+=(H-f[i])/x+1; ‰∏∫‰ªÄ‰πàË¶ÅËøôÊ†∑ÂÜôÂë¢ÔºüÊÉ≥ÊÉ≥ÔºåÁé∞Âú®Êàë‰ª¨Áü•ÈÅì‰∫ÜËøô‰∏™ÊúÄÂ∞èÊ•ºÂ±ÇÔºåÊàë‰ª¨ÂèØ‰ª•Âà∞ËææËøô‰∏™ÊúÄÂ∞èÊ•ºÂ±ÇÔºåÂØπÂêßÔºüÂ¶ÇÊûúÁé∞Âú®‰ª•Ëøô‰∏™ÊúÄÂ∞èÊ•ºÂ±Ç‰∏∫Ëµ∑ÁÇπÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄâÊã©Âú®ÂæÄ‰∏äË∑≥ $x$ Â±ÇÔºåÊàñËÄÖÊòØ $2x$ Â±Ç‚Ä¶.Áü•ÈÅì $nx$ Â±ÇÔºå$(n+1)x$Â∞±‰ºöË∂ÖÂá∫ $H$ÔºåËøôÊó∂‰∏äÈù¢ÁöÑÂºèÂ≠êÂ∞±Â•ΩÁêÜËß£Â§ö‰∫Ü„ÄÇ Code:(ÂèØ‰ª•‰∏çÁî® Â†Ü‰ºò$Dijstra$ÔºåÊ≤°ÂøÖË¶ÅÔºåÁî® $Spfa$ Â∞±Ë°å‰∫Ü)12345678910111213141516171819202122232425262728293031323334#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register intusing namespace std;const int N=1e5+3;ll H,x,y,z,ans,f[N];int vis[N],head[N],cnt;struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;1]; inline void add(int x,int y,int v)&#123;G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt;&#125;inline void spfa()&#123; memset(f,127,sizeof(f)); queue&lt;int&gt; q;f[1]=1,vis[1]=1,q.push(1); while(q.size())&#123; int x=q.front();q.pop();vis[x]=0; for(RI i=head[x];i;i=G[i].nxt)&#123; if(f[G[i].to]&gt;f[x]+G[i].val)&#123; f[G[i].to]=f[x]+G[i].val; if(!vis[G[i].to])q.push(G[i].to),vis[G[i].to]=1; &#125; &#125; &#125;return;&#125;int main()&#123; scanf("%lld%lld%lld%lld",&amp;H,&amp;x,&amp;y,&amp;z); if(x==1||y==1||z==1)&#123;printf("%lld\n",H);return 0;&#125; for(int i=0;i&lt;x;++i)&#123;add(i,(i+y)%x,y);add(i,(i+z)%x,z);&#125; spfa(); for(int i=0;i&lt;x;++i) if(f[i]&lt;=H)ans+=(H-f[i])/x+1; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Âêå‰ΩôÊúÄÁü≠Ë∑Ø</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SDOI2010]Âú∞Á≤æÈÉ®ËêΩ Á∫øÊÄßDP luogu2467]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2467%2F</url>
    <content type="text"><![CDATA[Â•ΩÂ∑ßÁöÑ‰∏ÄÈÅìÊÄùÁª¥È¢òÂïäÔºÅ ÊÄùÁª¥ÈáèÊûÅÂ§ß‰ΩÜÊòØÁ†ÅÈáèÊûÅÂ∞èÔºåÁúüÁöÑÂ•ΩÂ∑ßÂ¶ôÂïäÔºÅ(Â•Ω‰∫Ü‰∏çÂ∫üËØùËøõÂÖ•‰∏ªÈ¢ò) Âú®‰∏ãÊñáÔºåÂõ†‰∏∫‰∏∫‰∫ÜÊñπ‰æø‰ª£Á†ÅÁöÑÁêÜËß£ÂêåÊ≠•ÔºåÊâÄ‰ª•Â∫îÁî®‰∫ÜÁôæÂ∫¶ÁøªËØëÔºö summit: È°∂ÁÇπ valley: ÊµÅÂüü; Â±±Ë∞∑ÔºåÊ∫™Ë∞∑ÔºåÂ≥°Ë∞∑ÔºåË∞∑Âú∞ÔºåÊ∑±Ë∞∑; ËøôÊòæÁÑ∂ÊòØÈÅì $DP$ È¢ò(ÂèàÊòØÂ∫üËØù) ÂèØ‰ª•Áü•ÈÅìÈ¢òÁõÆË¶ÅÊ±ÇÁöÑÂêàÊ≥ïÂ±±ËÑâÂÖ∂ÂÆûÊòØ‰∏Ä‰∏™Ê≥¢Âä®Êï∞Âàó„ÄÇ ÂæàÂÆπÊòìÁöÑÂèØ‰ª•ÊÉ≥Âà∞ÔºåËÆæ $summit[i][j]$ Ë°®Á§∫ÈïøÂ∫¶‰∏∫ $j$ ÁöÑÊ≥¢Âä®Êï∞ÂàóÔºåÊ≠§Ê≥¢Âä®Êï∞ÂàóÁöÑÁ¨¨‰∏Ä‰∏™Êï∞‰∏∫ $i$Ôºå‰∏îÂú®È¢òÁõÆ‰∏≠Ôºå$i$ ‰∏∫Â±±Â≥∞ÔºåËøôÊ†∑Áä∂ÊÄÅ‰∏ãÁöÑÊñπÊ°àÊÄªÊï∞„ÄÇ ÂêåÊ†∑ÁöÑÔºåÊàë‰ª¨ÂêåÊó∂ËÆæ $valley[i][j]$ Ë°®Á§∫ÈïøÂ∫¶‰∏∫ $j$ ÁöÑÊ≥¢Âä®Êï∞ÂàóÔºåÊ≠§Ê≥¢Âä®Êï∞ÂàóÁöÑÁ¨¨‰∏Ä‰∏™Êï∞‰∏∫ $i$Ôºå‰∏îÂú®È¢òÁõÆ‰∏≠Ôºå$i$ ‰∏∫Â±±Ë∞∑ÔºåËøôÊ†∑Áä∂ÊÄÅ‰∏ãÁöÑÊñπÊ°àÊÄªÊï∞„ÄÇ ÈÇ£‰πàÁ≠îÊ°àÊòØÂ§öÂ∞ëÂë¢ÔºüÁî±‰∫éÊï∞Âàó‰∏≠ÁöÑÊØè‰∏Ä‰∏™ÂÖÉÁ¥†ÈÉΩÂèØ‰ª•ÂÅöÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†Ôºå‰∏îÈÉΩÊúâÂèØËÉΩÂÅö‚ÄùÂ±±Â≥∞‚ÄùÊàñËÄÖÊòØ‚ÄùÂ±±ËÑâ‚ÄùÔºåÊâÄ‰ª•Êàë‰ª¨ÁöÑÁ≠îÊ°àÂ∫îËØ•ÊòØÔºö \sum_{i=1}^{n} summit[i][n]+valley[i][n]Áé∞Âú®Êù•ËÄÉËôëÊÄé‰πàËΩ¨Áßª„ÄÇ ‰ª• $summit$ ÁöÑËΩ¨Áßª‰∏∫‰æãÂ≠êÔºåÂÅáËÆæÁé∞Âú®ÈúÄË¶ÅËΩ¨Áßª $summit[i][n]$. ÈÇ£‰πàËøô‰∏™Ê≥¢Âä®Êï∞ÂàóÁöÑÁ¨¨‰∫åÈ°πËÇØÂÆö‰∏•Ê†ºÂ∞è‰∫é $i$ ÔºåËÄåÁ¨¨‰∏âÈ°πÂèà‰∏•Ê†ºÂ§ß‰∫éÁ¨¨‰∫åÈ°πÔºåÊâÄ‰ª•Â¶ÇÊûú‰∏çÁúãÁ¨¨‰∏ÄÈ°πÁöÑËØùÔºåËøô‰∏™Êï∞ÂàóÂ∞±ÂèòÊàê‰∫ÜÁî±Á¨¨‰∫åÈ°πËµ∑Â§¥ÔºåÂπ∂‰∏îÁ¨¨‰∫åÈ°πÊòØ‚ÄùÂ±±Ë∞∑‚ÄùÔºåËÆæÁ¨¨‰∫åÈ°πÁöÑÊï∞‰∏∫ $j$ ÔºåÈÇ£‰πàÂÖ∂ÊñπÊ°àÊï∞ÂèØ‰ª•Áî® $valley[j][n-1]$ Êù•Ë°®Á§∫„ÄÇ Áî±‰∫éÁ¨¨‰∫åÈ°πÂèØ‰ª•ÊòØÊï∞Âàó‰∏≠‰∏•Ê†ºÂ∞è‰∫é $i$ ÁöÑ‰ªª‰ΩïÊï∞ÔºåÂõ†Ê≠§Êàë‰ª¨ÂèØ‰ª•ÂàóÂá∫ËΩ¨ÁßªÂºèÔºö summit[i][n] = \sum_{k=1}^{i-1} valley[k][n-1]Âõ†‰∏∫È¢òÁõÆËØ¥‰∫ÜÊòØ‰∏•Ê†ºÂ∞è‰∫éÔºåÊâÄ‰ª•ÂèØ‰ª•ËøôÊ†∑Â≠êÁªüËÆ°„ÄÇ ÂêåÊ†∑ÁöÑÔºå$valley[i][j]$ ‰πüÊòØËøôÊ†∑ËΩ¨ÁßªÔºö valley[i][n] = \sum_{k=i}^{n-1} summit[k][n-1]Êàë‰ª¨Áé∞Âú®ÂèØ‰ª•ÂæàËΩªÊòìÁöÑÊâìÂá∫Ê≠£Ëß£‰∫ÜÔºå‰ΩÜÊòØÊÉ≥Ë±°‰∏Ä‰∏ãÔºåÊàë‰ª¨ÊúâÈÇ£‰πàÂ§ßÁöÑÁ©∫Èó¥ÂêóÔºü$2\cdot 4200\cdot 4200$ÔºüË≤å‰ººÂæàÁ¥ßËØ∂(ËôΩÁÑ∂ÊàëÊòØË∏©Á∫øÊ≤°Êúâ $MLE$) ÈÇ£Â∞±‰ΩøÁî®ÊªöÂä®Êï∞ÁªÑÔºÅËøòÊúâÔºåËøôÊ†∑Â≠êÁªüËÆ°ÔºåÂ§çÊùÇÂ∫¶Â∞Ü‰ºöÊòØ $O(n^3)$ ÔºÅÊÄé‰πà‰ºòÂåñÂë¢Ôºü ÂâçÁºÄÂíåÂ∞±Â•Ω‰∫ÜÂëÄÔºÅÁÑ∂Âêé‚Ä¶‚Ä¶ÁÑ∂ÂêéÂ∞±Ê≤°ÊúâÁÑ∂Âêé‰∫Ü‚Ä¶‚Ä¶ Code:12345678910111213141516171819202122232425262728#include&lt;bits/stdc++.h&gt;#define ll long long#define RI register int #define A printf("A")using namespace std;const int N=4205;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int summit[N][2],valley[N][2],ans,sum,p;int main()&#123; scanf("%d%d",&amp;sum,&amp;p); summit[2][0]=1,valley[1][0]=1,valley[2][0]=1; for(int n=3;n&lt;=sum;++n) for(int i=1;i&lt;=n;++i)&#123; int sum_val,sum_sum; sum_val=(summit[n-1][(n-1)&amp;1]-summit[i-1][(n-1)&amp;1]+p)%p; valley[i][n&amp;1]=(valley[i-1][n&amp;1]+sum_val)%p; sum_sum=valley[i-1][(n-1)&amp;1]%p; summit[i][n&amp;1]=(summit[i-1][n&amp;1]+sum_sum)%p; &#125; ans=(valley[sum][sum&amp;1]+summit[sum][sum&amp;1])%p; printf("%d\n",ans); return 0; &#125; Ê≥®ÊÑèÂèñÊ®°Ôºå‰∏çÁÑ∂‰ºöÂá∫ÈîÖ!]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>È¢òËß£</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SDOI2016]ÁîüÊàêÈ≠îÂíí ÂêéÁºÄËá™Âä®Êú∫.SAM bzoj4516/luogu4070]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4070%2F</url>
    <content type="text"><![CDATA[‰∏ÄÁúºÈ¢òÁõÆ„ÄÇ È¢òÁõÆÁÆÄËø∞Â¶Ç‰∏ãÔºö ‰ªªÂä°‰∏ÄÔºöÊîØÊåÅËØ¢ÈóÆÂΩìÂâçÊú¨Ë¥®‰∏çÂêåÁöÑÂ≠ê‰∏≤ÁöÑ‰∏™Êï∞ ‰ªªÂä°‰∫åÔºöÊîØÊåÅÊèíÂÖ• ÂæàÊòæÁÑ∂ÂêéÁºÄËá™Âä®Êú∫ÂèØ‰ª•Ëß£ÂÜ≥ËÉú‰ªªÔºåÊ≠£Â•Ω‰ªäÂ§©ÂàöÂ≠¶‰∫ÜÂêéÁºÄËá™Âä®Êú∫ÔºåÈÇ£‰πàÂ∞±Â∞ÜÂÆÉÂÆö‰∏∫ÁªÉÊâãÈ¢ò‰∫Ü„ÄÇ ÊèíÂÖ•ÊòØÂæàÁÆÄÂçïÁöÑÔºåËá≥‰∫éËØ¢ÈóÆÊú¨Ë¥®‰∏çÂêåÁöÑÂ≠ó‰∏≤ÁöÑ‰∏™Êï∞ÔºåÊàë‰ª¨Áü•ÈÅìÊñ∞ÊèíÂÖ•‰∏Ä‰∏™ËäÇÁÇπ $now$ ÂØπÁ≠îÊ°àÁöÑË¥°ÁåÆÊòØ: $ |max(now)| - |min(now)| + 1$ „ÄÇÊàë‰ª¨Âª∫ÂêéÁºÄËá™Âä®Êú∫ÁöÑÊó∂ÂÄôÂè™‰øùÂ≠ò‰∫Ü $max(now)$ ÔºåÈöæÈÅìËøòË¶Å‰øùÂ≠ò‰∏Ä‰∏™ $min(now)$ ÂêóÔºüÂÖ∂ÂÆû‰∏çÈúÄË¶ÅÔºåÊ†πÊçÆÂÖ∂ÊÄßË¥®ÂèØ‰ª•ÂæóÂà∞Ôºö$|max(now)| - |max(fa[now])|$ÔºåÁõ¥Êé•ËÆ°ÁÆóÂç≥ÂèØ„ÄÇ Ê≥®ÊÑèÊï∞ÊçÆËåÉÂõ¥ËæÉÂ§ßÔºåËÆ∞ÂæóÂºÄ $longlong‚Äã$ ÔºÅ *Ê≥®ÔºöÊñá‰∏≠ÁöÑ $|S|‚Äã$ ÊåáÁöÑÊòØÂ≠óÁ¨¶‰∏≤ $S‚Äã$ ÁöÑÈïøÂ∫¶„ÄÇ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;map&gt;#include&lt;set&gt;#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=2e5+2;const int inf=1e9+9;template&lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct SAM&#123; ll ans; std::map&lt;int,int&gt; ch[N]; int last,cnt,len[N],fa[N]; inline void Insert(int c)&#123; int p=last,now=last=++cnt; len[now]=len[p]+1; while(p&amp;&amp;!ch[p][c])ch[p][c]=now,p=fa[p]; if(!p)fa[now]=1; else&#123; int q=ch[p][c]; if(len[q]==len[p]+1)fa[now]=q; else&#123; int copy=++cnt; len[copy]=len[p]+1,ch[copy]=ch[q]; fa[copy]=fa[q],fa[q]=fa[now]=copy; while(p&amp;&amp;ch[p][c]==q)ch[p][c]=copy,p=fa[p]; &#125; &#125; ans+=len[now]-len[fa[now]]; return; &#125;&#125;sam;int main()&#123; int n;IN(n); sam.last=sam.cnt=1; for(int i=1;i&lt;=n;++i)&#123; int c;IN(c); sam.Insert(c); printf("%lld\n",sam.ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÂêéÁºÄËá™Âä®Êú∫.SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [ICPC-Beijing 2006]ÁãºÊäìÂÖîÂ≠ê ÁΩëÁªúÊµÅ bzoj1001/Ê¥õË∞∑P4001]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4001%2F</url>
    <content type="text"><![CDATA[ÁΩëÁªúÊµÅÊ∞¥È¢ò„ÄÇ Êó¢ÁÑ∂Ë¶ÅÊäìÂà∞ÊâÄÊúâÁöÑÂÖîÂ≠êÔºåÂèàË¶ÅÁî®ÊúÄÂ∞ëÁöÑÁãºÔºåÂæàÂÆπÊòìÊÉ≥Âà∞ÔºåËøôÊòØÂú®ËÆ©Êàë‰ª¨Ê±ÇÊúÄÂ∞èÂâ≤„ÄÇ ÈÇ£‰πàÂ¶Ç‰ΩïÊ±ÇÊúÄÂ∞èÂâ≤Âë¢Ôºü Êúâ‰∏ÄÊù°ÂÆöÁêÜÊòØËøôÊ†∑ÁöÑÔºöÊúÄÂ§ßÊµÅ=ÊúÄÂ∞èÂâ≤ ÊâÄ‰ª•Êàë‰ª¨Âè™Ë¶ÅÁî® $Dinic$ Ë∑ëÂá∫ÊúÄÂ§ßÊµÅÔºåÁÑ∂ÂêéÁõ¥Êé•ËæìÂá∫Â∞±Ë°å‰∫Ü„ÄÇ ‰∏çËøáÔºå‰∏∫‰ªÄ‰πàÊúÄÂ§ßÊµÅ=ÊúÄÂ∞èÂâ≤Âë¢Ôºü ÁΩë‰∏äÁöÑ‰∏ÄÂêç $Dalao$ ÁªôÂá∫‰∫ÜÁ≠îÊ°àÔºö $Q:$ Â¶Ç‰ΩïÂá≠Áõ¥ËßâËß£ÈáäÊúÄÂ§ßÊµÅÁ≠â‰∫éÊúÄÂ∞èÂâ≤? $A:$ $1.$ ÊúÄÂ§ßÊµÅ‰∏çÂèØËÉΩÂ§ß‰∫éÊúÄÂ∞èÂâ≤, Âõ†‰∏∫ÊúÄÂ§ßÊµÅÊâÄÊúâÁöÑÊ∞¥ÊµÅÈÉΩ‰∏ÄÂÆöÁªèËøáÊúÄÂ∞èÂâ≤ÈÇ£‰∫õÂâ≤Ëæπ, ÊµÅËøáÁöÑÊ∞¥ÊµÅÊÄé‰πàÂèØËÉΩÊØîÊ∞¥ÁÆ°ÂÆπÈáèËøòÂ§ßÂë¢? $2.$ ÊúÄÂ§ßÊµÅ‰∏çÂèØËÉΩÂ∞è‰∫éÊúÄÂ∞èÂâ≤, Â¶ÇÊûúÂ∞è, ÈÇ£‰πàËØ¥ÊòéÊ∞¥ÁÆ°ÂÆπÈáèÊ≤°ÊúâÁâ©Â∞ΩÂÖ∂Áî®, ÂèØ‰ª•ÁªßÁª≠Âä†Â§ßÊ∞¥ÊµÅ. $Q:$ Â¶Ç‰Ωï‰∏•Ë∞®ËØÅÊòéÊúÄÂ§ßÊµÅÁ≠â‰∫éÊúÄÂ∞èÂâ≤? $A:$ $1.$ ËØÅÊòé‰ªªÊÑèÁöÑ $s-t$ ÊµÅÈáèÂ∞è‰∫é $s-t$ Ââ≤ÂÆπÈáè, ËØÅÊòéÊñπÊ≥ï: Ê†πÊçÆÂÆö‰πâÂç≥ÂèØ; $2.$ Ê†πÊçÆ $Ford-Fulkerson$ ÁÆóÊ≥ïÊ±ÇÂá∫ÁöÑÊµÅÊù•ÈÄâÂá∫‰∏Ä‰∏™ $s-t$ Ââ≤, $S$ ‰∏∫ÊÆã‰ΩôÁΩëÁªú‰∏≠ $s$ ÂèØËææÁöÑÈ°∂ÁÇπÈõÜÂêà, ËøôÊ†∑Â∞±ÂèØ‰ª•ËØÅÂá∫ÁÆóÊ≥ïÊ±ÇÂá∫ÁöÑÊµÅ$=$Ëøô‰∏™Ââ≤ÁöÑÂÆπÈáè, ÂÜçÊ†πÊçÆÂ∑≤ÁªèËØÅÊòéÁöÑ $1$ Êù•ÂæóÂá∫ÁÆóÊ≥ïÊ±ÇÂá∫ÁöÑÊµÅÊòØÊúÄÂ§ßÊµÅ, ÂØπÂ∫îÁöÑÂâ≤ÊòØÊúÄÂ∞èÂâ≤. $Dalao‚Äî‚ÄîJecvay Notes$ Áé∞Âú®Ë¶ÅÊ≥®ÊÑèÁöÑ‰∏ÄÁÇπÂ∞±ÊòØÔºåÁõ¥Êé•Ë∑ëÊú¥Á¥†ÁöÑ $Dinic$ ÊòØ‰ºö T ÁöÑÔºåËøô‰∏™Êó∂ÂÄôÊàñËÆ∏‰ºöË¶Å‰∏Ä‰∫õ‰ºòÂåñÔºåÊØîÂ¶ÇËØ¥Áî®ÂΩìÂâçÂºß‰ºòÂåñÔºåÊàñËÄÖÂèØ‰ª•Ë∑ë$ISAP$ÔºåÂ¶ÇÊûúËøòËøá‰∏ç‰∫ÜÔºåÂê∏Ê∞ßÁÆó‰∫Ü[ÊªëÁ®Ω]„ÄÇ Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;bits/stdc++.h&gt;#define RI register int#define ll long longconst int N=1e6+2;const int inf=1e9+9;struct Edge&#123; int nxt,to,val;&#125;G[N*6];int n,m,s,t,cnt=1,dep[N],head[N];#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y)) template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline int id(int x,int y)&#123;return (x-1)*m+y;&#125;inline void add(int x,int y,int v)&#123; G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt; G[++cnt].nxt=head[y],G[cnt].to=x,G[cnt].val=v,head[y]=cnt;&#125;inline bool bfs()&#123; std::memset(dep,0,sizeof(dep)); std::queue&lt;int&gt;q;q.push(s),dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||!G[i].val)continue; dep[y]=dep[x]+1;q.push(y); if(y==t)return true; &#125; &#125;return false;&#125;inline int dfs(int x,int flow)&#123; if(x==t)return flow; int used=0; for(int i=head[x];i&amp;&amp;used&lt;flow;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]!=dep[x]+1||!G[i].val)continue; else&#123; int rlow=dfs(y,min(G[i].val,flow-used)); if(!rlow)&#123;dep[y]=-1;continue;&#125; G[i].val-=rlow,G[i^1].val+=rlow,used+=rlow; &#125; &#125;return used;&#125;inline int Dinic()&#123; int ans=0; while(bfs())ans+=dfs(s,inf); return ans;&#125;int main()&#123; int v; IN(n),IN(m);s=1,t=n*m; for(int i=1;i&lt;=n;++i) for(int j=2;j&lt;=m;++j) IN(v),add(id(i,j-1),id(i,j),v); for(int i=2;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) IN(v),add(id(i-1,j),id(i,j),v); for(int i=2;i&lt;=n;++i) for(int j=2;j&lt;=m;++j) IN(v),add(id(i-1,j-1),id(i,j),v); printf("%d\n",Dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>ÁΩëÁªúÊµÅ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [JSOI2008]ÁêÉÂΩ¢Á©∫Èó¥‰∫ßÁîüÂô® È´òÊñØÊ∂àÂÖÉ Ê¥õË∞∑P4035]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4035%2F</url>
    <content type="text"><![CDATA[‚Äú‰Ω†Ë¶ÅÊ±ÇÂá∫Ëøô‰∏™nÁª¥ÁêÉ‰ΩìÁöÑÁêÉÂøÉÂùêÊ†á‚ÄúÔºåËøô‰ΩøÊàëÊÉ≥Âà∞ÁöÑËß£ÊñπÁ®ã‚Ä¶‚Ä¶ ÂÖàÂÅáËÆæn=2ÔºåËøôÊòØ‰∏Ä‰∏™‰∫åÁª¥Âπ≥Èù¢„ÄÇËÆæÂúÜÂøÉÁöÑÂùêÊ†á‰∏∫$(x,y)$ÔºåÊúâ‰∏§‰∏™ÂùêÊ†á$(a_1,b_1)$Âíå$(a_2,b_2)$ÔºåÊòæÁÑ∂‰∏§‰∏™ÂùêÊ†áÁöÑÂÖ≥Á≥ª‰∏∫Ôºö (x-a_1)^2+(y-b_1)^2=(x-a_2)^2+(y-b_2)^2ËÄÉËôëÂ¶Ç‰ΩïÂåñÁÆÄ‰∏äÈù¢ÁöÑÂºèÂ≠ê„ÄÇ (x-a_1)^2-(x-a_2)^2+(y-b_1)^2-(y-b_2)^2=0Ê†πÊçÆÂÆåÂÖ®Âπ≥ÊñπÂÖ¨ÂºèÔºö (x-a_1)^2=x^2+a_1^2-2 \times x \times a_1(x-a_1)^2-(x-a_2)^2=x^2+a_1^2-2 \times x \times a_1-x^2-a_2^2+2 \times x \times a_2(x-a_1)^2-(x-a_2)^2=a_1^2-2 \times x \times a_1-a_2^2+2 \times x \times a_2(x-a_1)^2-(x-a_2)^2=a_1^2-a_2^2-2(a_1-a_2)xÂêåÁêÜ (y-b_1)^2-(y-b_2)^2=b_1^2-b_2^2-2(b_1-b_2)yÊï¥ÁêÜÂêéÔºö a_1^2-a_2^2-2(a_1-a_2)x+b_1^2-b_2^2-2(b_1-b_2)y=0ÁßªÈ°πÂêéÔºö a_1^2-a_2^2+b_1^2-b_2^2=2(a_1-a_2)x+2(b_1-b_2)yËøô‰∏™ÂºèÂ≠êÊúÄÁªà‰∏∫Ôºö 2(a_1-a_2)x+2(b_1-b_2)y=a_1^2-a_2^2+b_1^2-b_2^2Áî±‰∫é $a_1^2-a_2^2+b_1^2-b_2^2‚Äã$ ÊòØÂ∑≤Áü•ÁöÑÔºåÊàë‰ª¨Â∞Ü $a_1^2-a_2^2+b_1^2-b_2^2‚Äã$ ËÆæ‰∏∫$Sum‚Äã$. $2(a_1-a_2)‚Äã$ Âíå $2(b_1-b_2)‚Äã$ÈÉΩÊòØÂ∑≤Áü•ÁöÑÈ°πÔºåÂàÜÂà´ËÆæ‰∏∫ $a‚Äã$ Âíå $b‚Äã$ . ÊâÄ‰ª•ÂÆÉÂèàÂèòÊàê‰∫ÜÊàë‰ª¨‰∫≤ÂàáÁöÑÂ∞èÂ≠¶Â••Êï∞‰πãËß£ÊñπÁ®ãÔºö$ax+by=Sum$ ÂØπ‰∫é‰∫åÁª¥ÁöÑÁ≠îÊ°àÊòØ $(x,y)‚Äã$ Ôºå$x‚Äã$ Âíå $y‚Äã$ ÈÉΩÂèØ‰ª•ÈÄöËøáÈ´òÊñØÊ∂àÂÖÉÁöÑÊ®°ÊùøÊù•Ëß£Âá∫„ÄÇ ÂØπ‰∫éÊõ¥È´òÁöÑÁª¥Êï∞ÔºåË∑ü‰∫åÁª¥ÂêåÁêÜÔºåÂè™‰∏çËøá‚ÄùÂÖÉ‚ÄùÂ§ö‰∫ÜÂá†‰∏™ËÄåÂ∑≤„ÄÇ ÊâÄ‰ª•Â∞±ËøôÊ†∑ÊÑâÂø´ÁöÑAÊéâ‰∫ÜËøôÈÅìÂ§ßÊ∞¥È¢ò„ÄÇCode:1234567891011121314151617181920212223242526272829303132333435#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register intusing namespace std;const int N=25;const double eps=1e-8;double v[N][N],f[N][N],s[N],del;int n;inline bool Gauss()&#123; for(RI k=1,i=1;i&lt;=n;++i,k=i)&#123; for(RI j=i+1;j&lt;=n;++j)if(abs(f[j][i])&gt;abs(f[k][i]))k=j; if(fabs(del=f[k][i])&lt;eps)return false;//‰∏çÂà§Â∞±Âá∫BUGÔºå‰∏çÁü•ÈÅì‰∏∫Âï• swap(f[i],f[k]);swap(s[i],s[k]); for(RI j=i;j&lt;=n;++j)f[i][j]/=del;s[i]/=del; for(k=1;k&lt;=n;++k)if(k!=i)&#123; del=f[k][i]; for(RI j=i;j&lt;=n;++j)f[k][j]-=f[i][j]*del; s[k]-=s[i]*del; &#125; &#125;return true;&#125;int main()&#123; scanf("%d",&amp;n); for(RI i=1;i&lt;=n+1;++i)for(RI j=1;j&lt;=n;++j)scanf("%lf",&amp;v[i][j]); for(RI i=1;i&lt;=n;++i) for(RI j=1;j&lt;=n;++j)&#123; s[i]+=(v[i][j]*v[i][j]-v[i+1][j]*v[i+1][j]);//Ê±Ç‰∏äÈù¢ÁöÑ "Sum" f[i][j]=2*(v[i][j]-v[i+1][j]);//Ê±Ç‰∏äÈù¢ÁöÑ "a"„ÄÅ"b"Á≠â &#125; Gauss(); for(RI i=1;i&lt;n;++i)printf("%.3lf ",s[i]);//Ê≥®ÊÑèËæìÂá∫Ê†ºÂºè! printf("%.3lf",s[n]); return 0;&#125; ËøôÈ¢òÂï•ÈÉΩÂ•ΩÔºåÂ∞±ÊòØËæìÂá∫Ê†ºÂºèÊúâÁÇπÂà∂Êùñ‚Ä¶‚Ä¶ËØ∑ÂêÑ‰ΩçÂ∞èÂøÉ‚Ä¶‚Ä¶]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>È´òÊñØÊ∂àÂÖÉ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [USACO18DEC]Balance Beam ÊúüÊúõ+Âá∏ÂåÖ Ê¥õË∞∑P5155]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5155%2F</url>
    <content type="text"><![CDATA[Ë¢´Ê¶ÇÁéáÂÜ≤ÊòèÁöÑÂ§¥ËÑë~~~ Êàë‰ª¨ÂÖàÂ∞ÜÊ†∑‰æãÂú®Âõæ‰∏äÁîª‰∏ãÊù•Ôºö ‰ºöÂèëÁé∞ÔºåÊúÄÂ§ßÊî∂ÁõäÊòØÔºö ) ÁúãÂá∫‰ªÄ‰πà‰∫ÜÂêóÔºü Ëøô‰∏çÂ∞±ÊòØÂá∏ÂåÖÂêóÔºü Ë∑ë‰∏ÄÈÅçÂá∏ÂåÖÂ∞±Â•Ω‰∫ÜÂëÄÔºåËøô‰∫õÁÇπ‰∏≠ÔºåÂ¶ÇÊûúiÂè∑ÁÇπÊòØÂá∏ÂåÖ‰∏äÁöÑÁÇπÔºåÈÇ£‰πàÂÆÉÁöÑansÂ∞±ÊòØËá™Â∑±(Á¨¨‰∫å‰∏™ÁÇπ)Ôºå‰∏çÁÑ∂ÁöÑËØùÔºå‰ªé‰∏äÂõæÊù•ÁúãÔºåiÁöÑansËÇØÂÆöÂíå‰ªñÁõ∏ÈÇªÁöÑ‰∏§‰∏™ÊòØÂá∏ÂåÖËæπÁïåÁöÑÁÇπÊúâÂÖ≥(0ËäÇÁÇπÂíå2ËäÇÁÇπ)ÔºåÈÇ£‰πàÊÄé‰πàÊ±ÇËøô‰∏™ansÂë¢Ôºü(Á¨¨xÂè∑ÁÇπ‰∏∫Ê®™ÂùêÊ†á‰∏∫xÁöÑÁÇπ) ÂÆûÈôÖ‰∏äÊàë‰πü‰∏çÁü•ÈÅìÂ∞±ÊòØ‰∏™ÊúüÊúõÂÖ¨ÂºèÂïä! l[i]ËÆ∞ÂΩïiÂè∑ÁÇπÂæÄÂ∑¶Ëµ∞Á¨¨‰∏Ä‰∏™‰∏∫Âá∏ÂåÖËæπÁïåÁöÑÁÇπ(Â¶ÇÊûúi‰∏∫1Âè∑ÔºåÈÇ£‰πàl[i]‰∏∫0ÔºåÁâπÊÆäÁöÑÔºåÂ¶ÇÊûúi‰∏∫2Âè∑ÔºåÈÇ£‰πàl[i]Â∞±ÊòØÊú¨Ë∫´)Ôºår[i]ÂêåÁêÜ„ÄÇÂΩìl[x]==r[x]Êó∂ÔºåxÊó∂ËæπÁïå„ÄÇ Â∞±ÊòØËøô‰∏™ÊñπÁ®ãÔºö (f[l[i]])*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);Âü∫Á°ÄÁöÑÊúüÊúõÊñπÁ®ãÔºåÂú®Ê≠§‰∏çÂÜçËµòËø∞(ÂÆûÈôÖ‰∏äÊòØ‰∏ç‰ºöËØÅ) ÂÖ≥‰∫éÂá∏ÂåÖÔºåÂú®ËøôË¥¥‰∏ÄÊ≥¢yybÂ§ßÁ•ûÁöÑÂçöÂÆ¢Ôºö‰º†ÈÄÅÈó®Êà≥ÊàëQwQ(È°∫‰æøËÜú‰∏ÄÊ≥¢yybÂ§ßÁ•û%%%) 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int#define F 100000using namespace std;const int NS=1e5+5;ll f[NS],l[NS],r[NS],hep[NS];//fÂ¶ÇÈ¢ò,l[i]/r[i]Â¶Ç‰∏äÊñá,hep‰∏∫Âá∏ÂåÖ template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int main()&#123; int n,top=0;IN(n);hep[++top]=0;//Ê≥®ÊÑèÂÖàÂä†ÂÖ•0! for(int i=1;i&lt;=n;++i)IN(f[i]); for(int i=1;i&lt;=n+1;++i)&#123;//Âá∏ÂåÖ while(top&gt;=2)&#123; int a=hep[top],b=hep[top-1]; if(((f[a]-f[b])*(i-a))&lt;((f[i]-f[a])*(a-b)))--top; else break; &#125;hep[++top]=i; &#125; for(int i=1;i&lt;top;++i)&#123; //‰∏≠Èó¥ÁöÑËäÇÁÇπÁöÑl,rÂÄºÈÉΩ‰∏∫hep[i]/hep[i+1] for(int j=hep[i]+1;j&lt;hep[i+1];++j)&#123; l[j]=hep[i],r[j]=hep[i+1]; &#125;l[hep[i]]=hep[i],r[hep[i]]=hep[i]; &#125; for(int i=1;i&lt;=n;++i)&#123; ll ans=0;//ËÆ∞ÂæóLL! if(l[i]==r[i])ans=f[i]*F;//‰∏∫ËæπÁïåÔºåÁõ¥Êé•Ë∑≥‰∏ãÊúÄ‰ºò else ans=(F*(f[l[i]]*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);//Âê¶ÂàôÁî®ÊñπÁ®ãÁÆó printf("%lld\n",ans); &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ê¶ÇÁéá</tag>
        <tag>ÊúüÊúõ</tag>
        <tag>Âá∏ÂåÖ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÁÆóÊ≥ï„Äë ÊµÖË∞àÊ†ëÂ•óÊ†ë(Á∫øÊÆµÊ†ëÂ•óÂπ≥Ë°°Ê†ë)&Â≠¶‰π†Á¨îËÆ∞]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E7%AE%97%E6%B3%95%5D%E6%A0%91%E5%A5%97%E6%A0%91(%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91)%2F</url>
    <content type="text"><![CDATA[ÂîâËøòÊòØÂ§™Âº±‰∫ÜÔºåÊØïÁ´üÂè™‰ºöÂàùÁ∫ßÁöÑÁ∫øÊÆµÊ†ëÂ•óÂπ≥Ë°°Ê†ëÔºå$QvQ$ Á†ÅÈáèÂ∑®Â§ßÔºåË∂ÖÁ∫ß‰∏çÈÄÇÂêàÊàëËøôÁßçÂ§©ÁîüÁ†ÅÈáèÊÅêÊÉßÁóáÁöÑ‰∫∫‚Ä¶‚Ä¶ ÈÇ£‰πàÊàë‰ª¨ÂºÄÂßãÊ≠£Êñá 0XFF ÂâçË®Ä *Â¶ÇÊûúÊú¨ÊñáÊúâ‰∏çÂ•ΩÁöÑÂú∞ÊñπÔºåËØ∑Âú®‰∏ãÊñπËØÑËÆ∫Âå∫ÊèêÂá∫ÔºåMonlightsÊÑüÊøÄ‰∏çÂ∞ΩÔºÅ 0X1F Ëøô‰∏™‰∏úË•øÊúâÂï•Áî®? Ê†ëÂ•óÊ†ë‚Äî‚Äî‚ÄîÁ∫øÊÆµÊ†ëÂ•óÂπ≥Ë°°Ê†ëÔºåÂèØ‰ª•Áî®‰∫éËß£ÂÜ≥ÂæÖ‰øÆÊîπÂå∫Èó¥$K$Â§ßÁöÑÈóÆÈ¢òÔºåÂΩìÁÑ∂‰πüÂèØ‰ª•Áî® Ê†ëÂ•óÊ†ë‚Äî‚Äî‚ÄîÊ†ëÁä∂Êï∞ÁªÑÂ•óÂèØÊåÅ‰πÖÂåñÁ∫øÊÆµÊ†ëÔºå‰ΩÜÊòØ Á∫øÊÆµÊ†ëÂ•óÂπ≥Ë°°Ê†ë Êõ¥Âä†ÂÆπÊòìÁêÜËß£ÔºåÊõ¥Âä†‰æø‰∫éÊñ∞ÊâãÁêÜËß£ÔºåÊâÄ‰ª•‰∏ÄËà¨‰πü‰Ωú‰∏∫Ê†ëÂ•óÊ†ëÁöÑÂÖ•Èó®Á±ªÂà´„ÄÇÂØπ‰∫éÈùôÊÄÅÂå∫Èó¥$K$Â§ßÔºåÊàë‰ª¨ÂèØ‰ª•Áî®Â∞èÂ∑ßÁ≤æÊÇçÁöÑ‰∏ªÂ∏≠Ê†ëÊù•ÂÅöÔºå‰πüÂèØ‰ª•Áî®Âº∫Â§ßÊó†ÊØîÁöÑ$Splay$Êù•ÂÅö„ÄÇÂ¶ÇÊûúÂ∏¶‰øÆÊîπÔºå‰∏ªÂ∏≠Ê†ëÂ∞±Êó†ËÉΩ‰∏∫Âäõ‰∫ÜÔºå$Splay$‰πü‰ºöÂèòÂæóÂæàÊ£òÊâãÈöæÊâì„ÄÇÂ¶ÇÊûúÁî®ÊôÆÈÄöÁ∫øÊÆµÊ†ëÔºåÊØè‰∏™ËäÇÁÇπÈÉΩÊúâÁùÄ‰∏ÄËØæÂåÖÂê´Â≠êËäÇÁÇπÁöÑ$Splay$ÔºåÂØπ‰∫é‰∏Ä‰∏™Âå∫Èó¥ÔºåÁõ¥Êé•Ë∞ÉÁî®Á∫øÊÆµÊ†ë‰∏äÁöÑ$Splay$Â∞±ËøéÂàÉËÄåËß£‰∫Ü„ÄÇËøôÊó∂ÁöÑ$Splay$‰∏çÊòØÂØπÂÖ®Â±ÄÔºåËÄåÊòØÂè™ÂØπËøô‰∏™Á∫øÊÆµÊ†ëËäÇÁÇπ‰ª£Ë°®ÁöÑÂå∫Èó¥„ÄÇ ÂΩìÁÑ∂ÔºåÊ†ëÂ•óÊ†ë‚Äî‚Äî‚ÄîÁ∫øÊÆµÊ†ëÂ•óÂπ≥Ë°°Ê†ëÂπ∂‰∏çÊòØÈÇ£‰πàÁöÑÂ•ΩÊâìÔºåËøòÊòØË¶ÅÂä®Á∫∏Á¨î and Âä®ËÑëÁ≠ã„ÄÇÁº∫ÁÇπ‰πüÊòØÊúâÁöÑÔºöÂõ†‰∏∫Ë¶ÅÊâì$Splay$ÂíåÁ∫øÊÆµÊ†ëÔºåÊ®°ÊùøÁöÑÁ†ÅÈáèÂ∞±Êúâ $150$ Ë°åÔºÅÂõ†‰∏∫Á∫øÊÆµÊ†ëÊú¨Êù•Â∞±ÊòØÊòìÊâãÊªëÁöÑÊï∞ÊçÆÁªìÊûÑÔºåÁ®ç‰∏çÁïôÁ•ûÂèØËÉΩ‰ºöËÆ©‰Ω†Ë∞É‰∏äÂ•Ω‰πÖÔºÅÂè¶Â§ñÔºåÂõ†‰∏∫$Splay$ÁöÑÂ∏∏Êï∞ÊûÅÂ§ßÔºåÂÜçËøô‰πàÈÄöËøáÁ∫øÊÆµÊ†ë‰∏ÄÁΩ©ÔºåÊïàÁéáÂ∞±‰∏ãÊù•‰∫ÜËÆ∏Â§öÔºåÂ∏∏Êï∞Â∑®Â§ßÊó†ÊØî‚Ä¶‚Ä¶ÊÄª‰πã Ê†ëÂ•óÊ†ë ÊòØ‰∏Ä‰∏™ÂæàÂº∫ÁöÑÊï∞ÊçÆÁªìÊûÑÔºå‰ΩÜÊòØÂ¶ÇÊûúÈ¢òÁõÆ‰∏çÊòØÂº∫Âà∂Âú®Á∫øÁöÑËØùÔºå$CDQ$ÂàÜÊ≤ªÂíåÊï¥‰Ωì‰∫åÂàÜ‰ºöÂ∞ÜÊ†ëÂ•óÊ†ëÂêäËµ∑Êù•ÊâìÔºÅ ‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîQiuly 0X2F Ëøô‰∏™‰∏úË•øÊÄé‰πàÂÆûÁé∞?È¶ñÂÖàÔºåÁ∫øÊÆµÊ†ëÂ•óÂπ≥Ë°°Ê†ëÂèØ‰ª•Ëß£ÂÜ≥ÁöÑ‰∏ÄËà¨ÈóÆÈ¢òÂ¶Ç‰∏ãÔºö Êü•ËØ¢ $k$ Âú®Âå∫Èó¥ $l,r$ ÂÜÖÁöÑÊéíÂêç Êü•ËØ¢Âå∫Èó¥ $l,r$ ÂÜÖÊéíÂêç‰∏∫ $k$ ÁöÑÂÄº ‰øÆÊîπÊüê‰∏Ä‰ΩçÁΩÆ‰∏äÁöÑÊï∞ÂÄº Êü•ËØ¢ $k$ Âú®Âå∫Èó¥ $l,r$ ÂÜÖÁöÑÂâçÈ©± Êü•ËØ¢ $k$ Âú®Âå∫Èó¥ $l,r$ ÂÜÖÁöÑÂêéÁªß ‰øÆÊîπÂå∫Èó¥ $l,r$ ÁöÑÂÄº(ÈõÜ‰ΩìÂä†Âáè)(‰∏ç‰ºö) ‚Ä¶‚Ä¶‚Ä¶‚Ä¶ Êàë‰ª¨‰ªäÂ§©Êù•ËÆ≤ËÆ≤Ââç‰∫î‰∏™Âü∫Á°ÄÊìç‰ΩúÊÄé‰πàÂÆûÁé∞(ÊàëÂè™‰ºöÂâç‰∫î‰∏™Êìç‰Ωú) 0X2f-1 Êü•ËØ¢ $k$ Âú®Âå∫Èó¥ $l,r$ ÂÜÖÁöÑÊéíÂêçÊàë‰ª¨ÂÖàÂ∞Ü‰∏Ä‰∏™Â§ñÈù¢ÁöÑÁ∫øÊÆµÊ†ëÁîª‰∏ãÊù•Ôºö (Âè∂Â≠êËäÇÁÇπ‰∏≠ÁöÑÊï∞Â≠óÊòØÂ∫èÂàóÂêÑ‰∏™ÂÖÉÁ¥†ÁöÑÊùÉÂÄº) ÂÅáËÆæÊàë‰ª¨Áé∞Âú®Ë¶ÅÊü•ËØ¢Âå∫Èó¥ $3,8$ ‰∏≠ $5$ ÁöÑÊéíÂêç„ÄÇ Êü•ËØ¢‰∏Ä‰∏™Êï∞ÁöÑÊéíÂêçÔºåÂæàÊòæÁÑ∂ÔºåÂ∞±ÊòØÊü•ËØ¢Ëøô‰∏™Âå∫Èó¥ÂÜÖÊúâÂ§öÂ∞ë‰∏™Êï∞ÊØî Ta Â∞èÔºåÁÑ∂ÂêéÂú®+1(Âç≥Ëá™Â∑±)„ÄÇ ÈÇ£ÊÄé‰πàÊü•ËØ¢ $3,8$ Âå∫Èó¥ÂÜÖÊúâÂ§öÂ∞ë‰∏™Êï∞ÊØî‰ªñÂ∞èÂë¢Ôºü$3,8$ ‰∏çÊòØÊï¥‰∏™Á∫øÊÆµÊ†ëËäÇÁÇπÂïä„ÄÇ Êàë‰ª¨ÂèØ‰ª•Â∞ÜÂÆÉÂàÜÊàêËã•Âπ≤‰∏™Á∫øÊÆµÊ†ëËäÇÁÇπÊù•Â§ÑÁêÜ„ÄÇ Code:123456789101112131415161718inline int Splay_rank(int i,int k)&#123;//iË°®Á§∫‰ª•Á∫øÊÆµÊ†ëÁöÑiÂè∑ËäÇÁÇπ‰∏∫Ê†πÁöÑSplay int x=rt[i],cal=0;//ÊùøÂ≠êÂ∞±‰∏çÂÜçËµòËø∞‰∫Ü while(x)&#123; if(v[x]==k)return cal+((ch[x][0])?s[ch[x][0]]:0); else if(v[x]&lt;k)&#123; cal+=((ch[x][0])?s[ch[x][0]]:0)+c[x];x=ch[x][1]; &#125;else x=ch[x][0]; &#125;return cal;&#125;;inline void Seg_rank(int x,int l,int r,int L,int R,int Kth)&#123; if(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);return;&#125;//ÊòØÊï¥‰∏™Á∫øÊÆµÊ†ëËäÇÁÇπ if(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);//ÊÉÖÂÜµ1ÔºöÂÆåÂÖ®Â±û‰∫éÂ∑¶Â≠êÊ†ë else if(L&gt;mid)Seg_rank(rc,mid+1,r,L,R,Kth);//ÊÉÖÂÜµ2ÔºöÂÆåÂÖ®Â±û‰∫éÂè≥Â≠êÊ†ë else Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+1,r,mid+1,R,Kth);//ÊÉÖÂÜµ3ÔºöÊ®™Ë∑®‰∏§Â≠êÊ†ëÂå∫Èó¥&#125;;//Main ÂáΩÊï∞‰∏≠case 1:&#123;IN(v);ans=0;Seg_rank(1,1,n,x,y,v);printf("%d\n",ans+1);&#125;break; Ê≤°ÁúãÊáÇÔºüÊàë‰ª¨Êù•‰∏ÄÊ≠•‰∏ÄÊ≠•Ëß£ËØª„ÄÇ È¶ñÂÖàÔºåËøõÂÖ•Á∫øÊÆµÊ†ë„ÄÇ ‰∏çÊòØÊï¥‰∏™Á∫øÊÆµÊ†ëËäÇÁÇπÔºåË∑≥ËøáÁ¨¨‰∏ÄÊù°ËØ≠Âè•„ÄÇÂèëÁé∞ $3,8$ Ê®™Ë∑®‰∫Ü‰∏§‰∏™Â≠êÊ†ëÔºåÊãÜÂºÄËØ¢ÈóÆÂå∫Èó¥ÔºåÂÖàËØ¢ÈóÆÂ∑¶Â≠êÊ†ë„ÄÇËøô‰∏™Êó∂ÂÄôÂæÄÂ∑¶Â≠êÊ†ëÈÄíÂΩíÔºåÁõÆÊ†áËØ¢ÈóÆÂå∫Èó¥ $3,4$ ÔºåÂè≥Â≠êÊ†ëÁõÆÊ†áËØ¢ÈóÆÂå∫Èó¥ $5,8$ „ÄÇÂàÜÂà´Â§ÑÁêÜ„ÄÇ ËøõÂÖ•Â∑¶Â≠êÊ†ëÔºö ÁÑ∂ÂêéÔºåÂèëÁé∞ËØ¢ÈóÆÂå∫Èó¥ÂÆåÂÖ®Â±û‰∫éÂè≥Â≠êÊ†ë(ÂΩìÂâçÂå∫Èó¥Ôºö$1,4$ , ËØ¢ÈóÆÂå∫Èó¥Ôºö$3~4$)ÔºåÊâÄ‰ª•Áõ¥Êé•ÈÄíÂΩíÂè≥Â≠êÊ†ëÔºö Ëøô‰∏™Êó∂ÂÄôÔºåÂèëÁé∞ÂΩìÂâçÂå∫Èó¥ÂíåËØ¢ÈóÆÂå∫Èó¥ÂêàÂπ∂‰∫Ü(ÂΩìÂâçÂå∫Èó¥Ôºö$3,4$ , ËØ¢ÈóÆÂå∫Èó¥Ôºö$3~4$)Ôºå$Splay$ ËØ¢ÈóÆÂ∞è‰∫é $5$ ÁöÑÊï∞ÁöÑ‰∏™Êï∞„ÄÇ Âå∫Èó¥Ôºö$3,4$ ÁöÑ $Splay$ : Ëá≥‰∫é $Splay$ ÈáåÈù¢ÁöÑÊìç‰Ωú‰∏çÂú®Ê®°ÊãüÔºåÂõ†‰∏∫ $(4,6)$ ‰∏≠ÊØî $5$ Â∞èÁöÑÂè™Êúâ‰∏Ä‰∏™Êï∞ÔºåÊâÄ‰ª• $ans+=1$ ÔºåÁé∞Âú® $ans=1$ Â∑¶Â≠êÊ†ëÁöÑ‰ªªÂä°ÂÆåÊàêÔºåÁé∞Âú®Â§ÑÁêÜÂú®Âè≥Â≠êÊ†ëÁöÑËØ¢ÈóÆÂå∫Èó¥ $(5,8)$ ÔºåÂèëÁé∞‰∏Ä‰∏ãÂéª ÂΩìÂâçÂå∫Èó¥Ôºö$5,8$ , ËØ¢ÈóÆÂå∫Èó¥Ôºö$5,8$ ÂêàÂπ∂‰∫ÜÔºÅÁõ¥Êé•Ë∑≥Ëøõ $Splay$„ÄÇ Ë∑ëÂÆå $Splay$ ÂêéÔºåÂèëÁé∞Êúâ‰∏§‰∏™Êï∞Â∞è‰∫é $5$ ($=$ÁöÑ‰∏çÁÆó)Ôºå$ans+=2$ ÔºåÁé∞Âú® $ans=3$ „ÄÇ ÊâÄ‰ª•ËØ¢ÈóÆÂå∫Èó¥ÂÖ®ÈÉ®Â§ÑÁêÜÂÆå‰∫ÜÔºåÈÄÄÂá∫ÂáΩÊï∞„ÄÇmainÂáΩÊï∞ËæìÂá∫Ôºö$ans(3)+1=4$ Âç≥Á≠îÊ°à‰∏∫ $4$ . 0X2f-2 Êü•ËØ¢Âå∫Èó¥ $l,r$ ÂÜÖÊéíÂêç‰∏∫ $k$ ÁöÑÂÄºËøô‰∏™Êàë‰ª¨ÈúÄË¶ÅÁî®Âà∞‰∫åÂàÜÊù•ÂÆûÁé∞ÔºåÊàë‰ª¨‰∏çËÉΩËÆ≤ËØ¢ÈóÆÂå∫Èó¥ÊãÜÊàê‰∏§‰∏™Âå∫Èó¥(ÂÉèÁ¨¨‰∏Ä‰∏™Êìç‰ΩúÈÇ£Ê†∑)ÔºåÂõ†‰∏∫ÂêàÂπ∂‰∏ç‰∫ÜÁ≠îÊ°àÂïä„ÄÇ ÊâÄ‰ª•Êàë‰ª¨‰æùÈù†‰∫åÂàÜÊù•ÂÆûÁé∞„ÄÇ Code: 1234567891011inline int Get_Kth(int x,int y,int k)&#123; int L=0,R=MX+1,M;//MX‰∏∫Â∫èÂàóÊùÉÂÄºÁöÑÊúÄÂ§ßÂÄºÔºå‰∏äÂõæ‰∏≠MX‰∏∫9. while(L&lt;R)&#123; M=(L+R)&gt;&gt;1; ans=0;Seg_rank(1,1,n,x,y,M);//ËØ¢ÈóÆMÁöÑÊéíÂêç if(ans&lt;k)L=M+1;else R=M;//‰∫åÂàÜ &#125;return L-1;//return&#125;;//MainÂáΩÊï∞‰∏≠case 2:&#123;IN(v);printf("%d\n",Get_Kth(x,y,v));&#125;break; Ëøô‰∏™ÊàëÂ∞±‰∏çË¥¥Âõæ‰∫ÜÔºå‰∏çÂ•ΩÁîªÂõæËß£Èáä„ÄÇÁêÜËß£‰∏çÈöæÔºåÂ§öËØªÂá†ÈÅç‰ª£Á†ÅÂ∞±Â•Ω‰∫Ü„ÄÇ 0X2f-3 ‰øÆÊîπÊüê‰∏Ä‰ΩçÁΩÆ‰∏äÁöÑÊï∞ÂÄºËøô‰∏™ÂæàÁÆÄÂçïÔºåË∑üÊôÆÈÄöÁöÑÁ∫øÊÆµÊ†ëÂçïÁÇπ‰øÆÊîπÂá†‰πé‰∏ÄÊ®°‰∏ÄÊ†∑ÔºåÂè™ÊòØË¶ÅÂêåÊó∂Êõ¥Êñ∞ $Splay$„ÄÇ 123456789inline void Seg_change(int x,int l,int r,int pos,int val)&#123; Splay_Delete(x,a[pos]);Splay_Insert(x,val);//Êõ¥Êñ∞ Splay if(l==r)&#123;a[pos]=val;return;&#125;;//‰øÆÊîπÂ∫èÂàóÁöÑÂÄº if(pos&lt;=mid)Seg_change(lc,l,mid,pos,val);//ÊôÆÈÄöÁöÑÁ∫øÊÆµÊ†ë else Seg_change(rc,mid+1,r,pos,val);&#125;;//MainÂáΩÊï∞‰∏≠case 3:&#123;Seg_change(1,1,n,x,y);&#125;break; 0X2f-4 Êü•ËØ¢ $k$ Âú®Âå∫Èó¥ $l,r$ ÂÜÖÁöÑÂâçÈ©±ÂØπ‰∫éËøô‰∏™Êìç‰ΩúÔºåÊàë‰ª¨‰æùÊóßÂèØ‰ª•ÊãÜÂºÄÊù•Êìç‰ΩúÔºåÂêàÂπ∂ÁöÑÊó∂ÂÄôÂØπ‰∫éÊØè‰∏™ÊãÜÂàÜÂêéÁöÑËØ¢ÈóÆÂå∫Èó¥ÁöÑÁ≠îÊ°àÂèñ‰∏™ÊúÄÂ§ßÂÄºÔºåÂõ†‰∏∫ÊòØÊ±ÇÂâçÈ©±ÔºåËÇØÂÆöÊòØË∂äÊé•Ëøë $k$ Ë∂äÂ•Ω„ÄÇ 123456789inline void Seg_pre(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));return;&#125; if(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_pre(rc,mid+1,r,L,R,val); else Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+1,r,mid+1,R,val);&#125;;//MainÂáΩÊï∞‰∏≠case 4:&#123;IN(v);ans=-inf;Seg_pre(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; 0X2f-4 Êü•ËØ¢ $k$ Âú®Âå∫Èó¥ $l,r$ ÂÜÖÁöÑÂêéÁªß Ë∑ü $4$ Êìç‰ΩúÂêåÁêÜ. 0X3F ‰∏Ä‰∫õÈ¢òÁõÆ BZOJ3196: Tyvj 1730 ‰∫åÈÄºÂπ≥Ë°°Ê†ëLUOGU P3380„ÄêÊ®°Êùø„Äë‰∫åÈÄºÂπ≥Ë°°Ê†ë(Ê†ëÂ•óÊ†ë) ËøôÈÅìÈ¢òÂ∞±ÊòØ‰∏äÈù¢ËÆ≤ÁöÑÈÇ£ÈÅìÂïä! Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define RI register int #define A printf("A")#define C printf(" ")#define inf 2147483647#define PI 3.1415926535898using namespace std;const int N=4e6+2;//template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; //template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int n,m,a[N],ans,MX;/*----------------------------------Splay-------------------------------------*/int f[N],c[N],s[N],v[N],ch[N][2],rt[N],tot;inline int chk(int x)&#123;return ch[f[x]][1]==x;&#125;;inline void Splay_del_node(int x)&#123;f[x]=s[x]=c[x]=v[x]=ch[x][0]=ch[x][1]=0;&#125;;inline void Splay_pushup(int x)&#123;s[x]=(ch[x][0]?s[ch[x][0]]:0)+(ch[x][1]?s[ch[x][1]]:0)+c[x];&#125;;inline void Splay_rotate(int x)&#123; int y=f[x],z=f[y],k=chk(x),v=ch[x][k^1]; ch[y][k]=v;if(v)f[v]=y;f[x]=z;if(z)ch[z][chk(y)]=x; f[y]=x,ch[x][k^1]=y;Splay_pushup(y),Splay_pushup(x);&#125;;inline void Splay(int i,int x,int top=0)&#123; while(f[x]!=top)&#123; int y=f[x],z=f[y]; if(z!=top)Splay_rotate((ch[z][0]==y)==(ch[y][0]==x)?y:x); Splay_rotate(x); &#125;if(!top)rt[i]=x;&#125;;inline void Splay_Insert(int i,int x)&#123; int pos=rt[i]; if(!rt[i])&#123; rt[i]=pos=++tot;v[pos]=x;s[pos]=c[pos]=1; f[pos]=ch[pos][0]=ch[pos][1]=0;return; &#125;int last=0; while(1)&#123; if(v[pos]==x)&#123;++c[pos];Splay_pushup(last);break;&#125; last=pos;pos=ch[pos][x&gt;v[pos]]; if(!pos)&#123; pos=++tot;v[pos]=x;s[pos]=c[pos]=1; ch[last][x&gt;v[last]]=pos; f[pos]=last;ch[pos][0]=ch[pos][1]=0; Splay_pushup(last);break; &#125; &#125;Splay(i,pos);return;&#125;;inline int Splay_rank(int i,int k)&#123; int x=rt[i],cal=0; while(x)&#123; if(v[x]==k)return cal+((ch[x][0])?s[ch[x][0]]:0); else if(v[x]&lt;k)&#123; cal+=((ch[x][0])?s[ch[x][0]]:0)+c[x];x=ch[x][1]; &#125;else x=ch[x][0]; &#125;return cal;&#125;;inline int Splay_find(int i,int x)&#123; int pos=rt[i];while(x)&#123; if(v[pos]==x)&#123;Splay(i,pos);return pos;&#125;; pos=ch[pos][x&gt;v[pos]]; &#125;return 0;&#125;;inline int Splay_pre(int i)&#123;int x=ch[rt[i]][0];while(ch[x][1])x=ch[x][1];return x;&#125;inline int Splay_suc(int i)&#123;int x=ch[rt[i]][1];while(ch[x][0])x=ch[x][0];return x;&#125;inline int Splay_Get_pre(int i,int x)&#123; int pos=rt[i];while(pos)&#123; if(v[pos]&lt;x)&#123;if(ans&lt;v[pos])ans=v[pos];pos=ch[pos][1];&#125; else pos=ch[pos][0]; &#125;return ans;&#125;;inline int Splay_Get_suc(int i,int x)&#123; int pos=rt[i];while(pos)&#123; if(v[pos]&gt;x)&#123;if(ans&gt;v[pos])ans=v[pos];pos=ch[pos][0];&#125; else pos=ch[pos][1]; &#125;return ans;&#125;;inline void Splay_Delete(int i,int key)&#123; int x=Splay_find(i,key); if(c[x]&gt;1)&#123;--c[x];Splay_pushup(x);return;&#125; if(!ch[x][0]&amp;&amp;!ch[x][1])&#123;Splay_del_node(rt[i]);rt[i]=0;return;&#125; if(!ch[x][0])&#123;int y=ch[x][1];rt[i]=y;f[y]=0;return;&#125; if(!ch[x][1])&#123;int y=ch[x][0];rt[i]=y;f[y]=0;return;&#125; int p=Splay_pre(i);int lastrt=rt[i]; Splay(i,p,0);ch[rt[i]][1]=ch[lastrt][1];f[ch[lastrt][1]]=rt[i]; Splay_del_node(lastrt);Splay_pushup(rt[i]);&#125;;/*------------------------------Seg_Tree--------------------------------------*/ #define lc ((x)&lt;&lt;1)#define rc ((x)&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)inline void Seg_Insert(int x,int l,int r,int pos,int val)&#123; Splay_Insert(x,val);if(l==r)return; if(pos&lt;=mid)Seg_Insert(lc,l,mid,pos,val); else Seg_Insert(rc,mid+1,r,pos,val);&#125;;inline void Seg_rank(int x,int l,int r,int L,int R,int Kth)&#123; if(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);return;&#125; if(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth); else if(L&gt;mid)Seg_rank(rc,mid+1,r,L,R,Kth); else Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+1,r,mid+1,R,Kth);&#125;;inline void Seg_change(int x,int l,int r,int pos,int val)&#123; // printf("QvQ:: %d %d %d %d %d\n",x,l,r,pos,val); Splay_Delete(x,a[pos]);Splay_Insert(x,val); if(l==r)&#123;a[pos]=val;return;&#125;; if(pos&lt;=mid)Seg_change(lc,l,mid,pos,val); else Seg_change(rc,mid+1,r,pos,val);&#125;;inline void Seg_pre(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));return;&#125; if(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_pre(rc,mid+1,r,L,R,val); else Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+1,r,mid+1,R,val);&#125;;inline void Seg_suc(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=min(ans,Splay_Get_suc(x,val));return;&#125; if(R&lt;=mid)Seg_suc(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_suc(rc,mid+1,r,L,R,val); else Seg_suc(lc,l,mid,L,mid,val),Seg_suc(rc,mid+1,r,mid+1,R,val);&#125;;/*---------------------------------ask----------------------------------------*/inline int Get_Kth(int x,int y,int k)&#123; int L=0,R=MX+1,M; while(L&lt;R)&#123; M=(L+R)&gt;&gt;1; ans=0;Seg_rank(1,1,n,x,y,M); if(ans&lt;k)L=M+1;else R=M; &#125;return L-1;&#125;;/*-------------------------------main-------------------------------------*/int main(int argc,char const* argv[])&#123; IN(n),IN(m); for(RI i=1;i&lt;=n;++i)&#123;IN(a[i]);Seg_Insert(1,1,n,i,a[i]);MX=max(MX,a[i]);&#125; while(m--)&#123; int op,x,y,v;IN(op),IN(x),IN(y); switch(op)&#123; case 1:&#123;IN(v);ans=0;Seg_rank(1,1,n,x,y,v);printf("%d\n",ans+1);&#125;break; case 2:&#123;IN(v);printf("%d\n",Get_Kth(x,y,v));&#125;break; case 3:&#123;Seg_change(1,1,n,x,y);&#125;break; case 4:&#123;IN(v);ans=-inf;Seg_pre(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; case 5:&#123;IN(v);ans=inf;Seg_suc(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; &#125; &#125;return 0;&#125; ÁÑ∂ÂêéÂ∞±ÊòØËøôÈÅìÈ¢òÔºåË∑ü‰∏äÈù¢ÁöÑÈÇ£ÈÅìÈ¢òÂ∑Æ‰∏çÂ§öÔºåÂ§ßÂÆ∂ÂèØ‰ª•ÊãøÊù•ÁªÉÁªÉÊâãÔºö BZOJ3196: 1901 Dynamic RankingsLUOGU P2617 Dynamic Rankings ‰∏çË¥¥‰ª£Á†Å‰∫Ü„ÄÇ ‰∏ÄÈÅì‰∏çÈîôÁöÑÁªÜËäÇÈ¢òÔºö LUOGU P3332 [ZJOI2013]KÂ§ßÊï∞Êü•ËØ¢ $‚Äî‚Äî‚Äîby Qiuly$]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>Â≠¶‰π†Á¨îËÆ∞</tag>
        <tag>ÊÄªÁªì</tag>
        <tag>Ê†ëÂ•óÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [ZJOI2014]Âäõ FFT bzoj3527/luogu3338]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3338%2F</url>
    <content type="text"><![CDATA[Ëøô‰∏™ÂºèÂ≠êÊúâÁÇπ‚Ä¶‚Ä¶‰π±„ÄÇ ÂóØÔºåÊàë‰ª¨Êù•Êé®‰∏ÄÊé®ÂºèÂ≠ê‚Ä¶‚Ä¶Êé®‰∏ÄÊé®ÂºèÂ≠ê„ÄÇ ÂéüÂºèÊé®‰∏ÄÊé®ÔºåÈÇ£‰πàÂ∞±ÊòØÔºö E_i = \frac{F_i}{q_i} = \sum_{j=1}^{i} \frac{q_j}{(i-j)^2} - \sum_{j=i+1}^{n} \frac{q_j}{(i-j)^2}‚Äã ‰ª§ $x = \frac{1}{y^2}‚Äã$ Ôºå ÈÇ£‰πàÔºö E_i = \frac{F_i}{q_i} = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} q_j x_{j-i}‚ÄãËøòÂèØ‰ª•ÂÜôÊàêÔºö E_i = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} q_j x_{j-i}‚Äã‰ª§ $S_i = q_{n-i+1} ‚Äã$ÔºåÈÇ£‰πàÂºèÂ≠êÂèòÊàê‰∫ÜÔºö E_i = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} p_{n-j+1} x_{j-i}Ëøô‰∏™Êó∂ÂÄôÊàë‰ª¨ÂèØ‰ª•ÂèëÁé∞Ôºå$\sum_{j=1}^{i} q_j x_{i-j}‚Äã$ Âíå $\sum_{j=i+1}^{n} p_{n-j} x_{j-i}‚Äã$ ÈÉΩÊòØÂç∑ÁßØÔºåÈÇ£‰πàÊàë‰ª¨ÂèØ‰ª•Ë∑ë‰∏§ÈÅç $FFT‚Äã$ÔºåÂàÜÂà´Ê±ÇÂá∫‰∏äÈù¢ÁöÑ‰∏§‰∏™ÂºèÂ≠êÔºåËÆ∞ÂΩï‰∏∫ $A,B‚Äã$ „ÄÇÊúÄÂêéÁöÑÁ≠îÊ°àÂ∞±ÊòØ $A[i].x - B[n+1-i].x‚Äã$ ‰∫Ü„ÄÇ FFT‰∏çÁî®ÂÅöÂ§™Â§ö‰øÆÊîπÔºåÂ•óÊ®°ÊùøË∑ëÂ∞±Ë°å(Êú¨Êù•Â∞±ÊòØÊ®°Êùø)„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;cstdio&gt; #include&lt;cmath&gt;#include&lt;string&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int #define PI 3.1415926535898using namespace std;const int N=4e5+2;int n,limit=1,filp[N];template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;;complex A[N],B[N],C[N];inline void FFT(complex *f,short inv)&#123; for(RI i=0;i&lt;limit;++i)if(i&lt;filp[i])&#123;complex t=f[i];f[i]=f[filp[i]],f[filp[i]]=t;&#125; for(RI p=2;p&lt;=limit;p&lt;&lt;=1)&#123; RI len=p/2; complex tmp=complex(cos(PI/len),inv*sin(PI/len)); for(RI k=0;k&lt;limit;k+=p)&#123; complex buf=complex(1,0); for(RI l=k;l&lt;k+len;++l)&#123; complex t=buf*f[l+len]; f[l+len]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d",&amp;n);int cnt=0; for(RI i=1;i&lt;=n;++i)&#123;scanf("%lf",&amp;A[i].x),B[n+1-i].x=A[i].x;&#125; for(RI i=1;i&lt;=n;++i)C[i].x=(1.0/double(i))/double(i); while(limit&lt;=(n&lt;&lt;1))limit&lt;&lt;=1,cnt++; for(RI i=0;i&lt;limit;++i)filp[i]=((filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(cnt-1))); FFT(A,1);FFT(B,1);FFT(C,1); for(RI i=0;i&lt;=limit;++i)A[i]=A[i]*C[i],B[i]=B[i]*C[i]; FFT(A,-1);FFT(B,-1); for(RI i=0;i&lt;=limit;++i)A[i].x/=limit,B[i].x/=limit; for(RI i=1;i&lt;=n;++i)printf("%.3lf\n",-B[n+1-i].x+A[i].x); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë Ê•ºÊàøÈáçÂª∫ Á∫øÊÆµÊ†ë bzoj2957]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj2957%2F</url>
    <content type="text"><![CDATA[ÊØè‰∏™Ê•ºÊàøÔºåËøòÊúâÂçïÁÇπ‰øÆÊîπÊìç‰Ωú„ÄÇÁÆÄÂçïÁöÑÊÉ≥Âà∞Áî®Á∫øÊÆµÊ†ëÊù•Áª¥Êä§‰ø°ÊÅØ„ÄÇ ÊòæÁÑ∂Á∫øÊÆµÊ†ëÂè™ÈúÄË¶ÅÁª¥Êä§y/xÂç≥ÂèØÔºåÂØπ‰∫éÊØè‰∏Ä‰∏™Ê•ºÊàøÔºåËÉΩÁúãËßÅÁöÑÊù°‰ª∂Â∞±ÊòØÂâçÈù¢Ê•ºÊàøÁöÑy/xÁöÑ‰∏•Ê†ºÂ∞è‰∫éÂΩìÂâçÊ•ºÊàøÁöÑy/x„ÄÇ Á∫øÊÆµÊ†ëÁöÑÂå∫Èó¥‰øÆÊîπ‰∏çÂÜçËµòËø∞„ÄÇ ÈÇ£‰πàÊÄé‰πàÁª¥Êä§ÂèØ‰ª•ÁúãÂà∞ÁöÑÊ•ºÊàøÊï∞Âë¢Ôºü ËÄÉËôëÂú®Á∫øÊÆµÊ†ëÁöÑÊØè‰∏Ä‰∏™ËäÇÁÇπ‰∏äÁî®‰∏Ä‰∏™ÂèòÈáèsumÊù•Ë°®Á§∫‰ªéËøô‰∏™ËäÇÁÇπÁöÑÂ∑¶Á´ØÁÇπÂêëÂè≥Á´ØÁÇπÁúãÊó∂ËÉΩÁúãÂà∞Â§öÂ∞ëÊ•ºÊàø„ÄÇ ÂÅáËÆæÁé∞Âú®Êúâ‰∏ÄÂå∫Èó¥Ôºö1,5,8,0,7,9„ÄÇÁª¥Êä§Ëøô‰∏™Âå∫Èó¥‰ø°ÊÅØÁöÑËäÇÁÇπÁºñÂè∑‰∏∫x„ÄÇ xÁöÑÂ∑¶ÂÑøÂ≠êÁª¥Êä§ÁöÑÂå∫Èó¥ÊòØ1,5,8Ôºå‰ªé1ÂæÄ8ÁúãÂèØ‰ª•ÁúãÂà∞‰∏â‰∏™Ê•ºÊàøÔºåÊïÖxÁöÑÂ∑¶ÂÑøÂ≠êÁöÑsumÁöÑÂÄº‰∏∫3„ÄÇ xÁöÑÂè≥ÂÑøÂ≠êÁª¥Êä§ÁöÑÂå∫Èó¥ÊòØ0,7,9Ôºå‰ªé0ÂæÄ9Áúã‰πüÂèØ‰ª•ÁúãÂà∞‰∏â‰∏™Ê•ºÊàøÔºåÊïÖxÁöÑÂè≥ÂÑøÂ≠êÁöÑsumÁöÑÂÄº‰πü‰∏∫3„ÄÇ ÈöæÈÅìxÁöÑsumÂÄº‰πü‰∏∫3+3=6ÔºüÈîô!ËøôÊòæÁÑ∂ÊòØ‰∏çËÉΩÂä†Âú®‰∏ÄËµ∑ÁöÑÔºåxÁöÑsumÁöÑÂÄº‰∏∫4„ÄÇ ‰∏∫‰ªÄ‰πà‰ºöÈîôÂë¢ÔºüÂõ†‰∏∫xÁöÑÂè≥ÂÑøÂ≠êÁöÑËßÇÂØüËßÜËßí‰∏çÊòØ‰ªé1ÂºÄÂßãÁöÑÔºåÊòØ‰ªé0ÂºÄÂßãÁöÑ„ÄÇ ÊòæÁÑ∂0Ë¢´ÂâçÈù¢ÁöÑÊ•ºÊàøÊå°‰Ωè‰∫Ü„ÄÇ È¶ñÂÖàËÄÉËôëÊØè‰∏™Á∫øÊÆµÊ†ëËäÇÁÇπÂú®Áª¥Êä§‰∏Ä‰∏™mxÔºåmx‰ª£Ë°®Ëøô‰∏™ËäÇÁÇπÊâÄ‰ª£Ë°®ÁöÑÂå∫Èó¥‰∏≠ÊâÄÊúâÁöÑÊ•ºÊàø‰∏≠ÊúÄÈ´òÁöÑÈ´òÂ∫¶„ÄÇ ‰∏ä‰º†Êó∂ÔºåÁî±‰∫é‰∏§‰∏™ÂÑøÂ≠êÁöÑsumÂÄºÊòØÂ∑≤ÁªèÂ§ÑÁêÜÂ•ΩÁöÑÔºåËÄåÂ∑¶ÂÑøÂ≠êÁöÑËßÜËßíÊòØË∑üxÁöÑËßÜËßí‰∏ÄÊ†∑ÁöÑ(ÂØπ‰∫é‰∏äÈù¢ÁöÑ‰æãÂ≠êÊù•ËØ¥ÈÉΩÊòØ1)ÔºåÂèØ‰ª•Áõ¥Êé•‰∏ä‰º†ÔºåÂç≥sum(x)+=sum(l(x))„ÄÇ ÂØπ‰∫éÂè≥ÂÑøÂ≠êÔºåËÄÉËôëÈÄíÂΩíÂ§ÑÁêÜÂè≥ÂÑøÂ≠êÁöÑÂå∫Èó¥ÔºåÈÄíÂΩíÊó∂Â∏¶‰∏Ä‰∏™MxÂèòÈáèË°®Á§∫xÁöÑÂ∑¶ÂÑøÂ≠êmx(Âè≥ÂÑøÂ≠êÂÜçÂ∑¶ÂÑøÂ≠êÂêéÈù¢ÔºåÂéüÂõ†‰∏ãÈù¢Ëß£Èáä)ÔºåÈÄíÂΩíÂáΩÊï∞ÁöÑËøîÂõûÂÄºÊòØÂΩìÂâçÂ§ÑÁêÜÂå∫Èó¥ÂèØ‰ª•Ë¢´ÁúãÂà∞ÁöÑÊ•ºÊàøÊï∞(‰ªéxÁöÑËßÜËßíÁúã) ÂØπ‰∫éÁé∞Âú®Â§ÑÁêÜÁöÑÊØè‰∏Ä‰∏™Âå∫Èó¥Ôºö Â¶ÇÊûúËøô‰∏™Âå∫Èó¥ÁöÑÊúÄÈ´òÁöÑÊ•ºÊàøÁöÑÈ´òÂ∫¶ÈÉΩMx(ÂèØ‰ª•ÁúãÂà∞)ÔºåÈÇ£‰πàreturn ÂΩìÂâçÂå∫Èó¥Áª¥Êä§ÁöÑsumÂÄº„ÄÇ Â¶ÇÊûúËøô‰∏™Âå∫Èó¥Âè™‰ª£Ë°®‰∏Ä‰∏™Ê•ºÊàøÔºåÁõ¥Êé•Âà§Êñ≠ÂÖ∂ËÉΩÂê¶Ë¢´ÁúãÂà∞Âç≥ÂèØ„ÄÇ ÂØπ‰∫éÂâ©‰∏ãÁöÑÊÉÖÂÜµÔºåÈÄíÂΩíÂÑøÂ≠êÔºåÂàÜ‰∏§ÁßçÊÉÖÂÜµËÆ®ËÆ∫Ôºö Â¶ÇÊûúÂ∑¶ÂÑøÂ≠êÁöÑÊúÄÈ´òÁöÑÊ•ºÊàøÂ∞è‰∫éMx(‰∏çËÉΩÂØπÁ≠îÊ°àÊúâ‰ªª‰ΩïË¥°ÁåÆ)ÔºåÁõ¥Êé•ÈÄíÂΩíÂè≥ÂÑøÂ≠ê„ÄÇ Âê¶ÂàôÔºåÈÄíÂΩíÂ∑¶ÂÑøÂ≠êÔºåÂè≥ÂÑøÂ≠êËÉΩÁúãÂà∞ÁöÑÊ•ºÊàø‰∏™Êï∞‰∏∫ÂΩìÂâçÂå∫Èó¥sum-Â∑¶ÂÑøÂ≠êsumÂç≥ÂèØÔºå(Â∫î‰∏∫‰∏ãÈù¢Â∑≤ÁªèÊõ¥Êñ∞Â•Ω‰∫ÜÔºåÂè™ÈúÄË¶ÅÁõ¥Êé•Ë∞ÉÁî®Â∞±Â•Ω‰∫Ü„ÄÇ) Code(Êñá‰∏≠ÁöÑsumÁî®l‰ª£Êõø):12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define lson x&lt;&lt;1#define rson x&lt;&lt;1|1using namespace std;const int N=1e5+2;struct Node &#123; double mx;int l; #define m(x) tree[x].mx #define l(x) tree[x].l&#125; tree[N&lt;&lt;2];int n,m;double val[N];inline void pushup_max(int x) &#123; m(x)=max(m(x&lt;&lt;1),m(x&lt;&lt;1|1));&#125;inline int pushup_sum(double Mx,int x,int l,int r) &#123; if(m(x)&lt;Mx)return 0; if(val[l]&gt;Mx)return l(x); if(l==r)return val[l]&gt;Mx; int mid=(l+r)&gt;&gt;1; if(m(lson)&lt;=Mx)return pushup_sum(Mx,rson,mid+1,r); else return pushup_sum(Mx,lson,l,mid)+l(x)-l(lson);&#125;inline void change(int x,int l,int r,int pos,int value) &#123; if(l==r&amp;&amp;l==pos)&#123;m(x)=(double)value/pos;l(x)=1;return;&#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid)change(lson,l,mid,pos,value); else if(pos&gt;mid)change(rson,mid+1,r,pos,value); pushup_max(x); l(x)=l(lson)+pushup_sum(m(lson),rson,mid+1,r);&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(register int x,y,i=1; i&lt;=m; ++i) &#123; scanf("%d%d",&amp;x,&amp;y); val[x]=(double)y/x; change(1,1,n,x,y); printf("%d\n",l(1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Á∫øÊÆµÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [SDOI2008]CaveÊ¥ûÁ©¥ÂãòÊµã LCT bzoj2049/Ê¥õË∞∑P2147]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2147%2F</url>
    <content type="text"><![CDATA[Link-Cut-TreeÁöÑÊ®°ÊùøÈ¢òÂïä‚Ä¶‚Ä¶(Âê¨ËØ¥ËøòÂèØ‰ª•Áî®ÂÖ∂‰ªñÁöÑÊñπÊ≥ïÂÅöÔºå‰∏çÁÆ°‰∫ÜÔºåÁõ¥Êé•‰∏äLCT) Ê≤°ÊúâË¶ÅÊ±ÇÁª¥Êä§ÁÇπÊùÉÔºåÂè™ÈúÄË¶ÅÁª¥Êä§ÁÇπÁöÑËøûÈÄöÊÄßÂç≥ÂèØ„ÄÇ Â∞±ÊòØÊú¥Á¥†ÁöÑLCTÔºåÂ±ÖÁÑ∂Ëøò‰∏çË¶Åpushup„ÄÇ ÊÑüËßâÊúâ‰∫õ‰∏çÈÄÇÂ∫îÂïä‚Ä¶‚Ä¶.‰∏çÂæó‰∏çËØ¥LCTÊòØ‰∏™Á•ûÂô®„ÄÇ ÁÆÄÂçïÂàÜÊûê‰∏Ä‰∏ã„ÄÇ ÂØπ‰∫éÊØèÁßçÂëΩ‰ª§: Â¶ÇÊûúÊòØConnect x y (ÈìæÊé• x y):Áõ¥Êé• link(x,y)Âç≥ÂèØ„ÄÇ Â¶ÇÊûúÊòØDestroy x y (ÂàáÊñ≠ x y):Áõ¥Êé• cut(x,y)Âç≥ÂèØ„ÄÇ Â¶ÇÊûúÊòØQuery x y (ËØ¢ÈóÆ x y ÁöÑËøûÈÄöÊÄß):Âà§Êñ≠findroot(x)Âíåfindroot(y)ÊòØÂê¶‰∏ÄËá¥Ôºå‰∏ÄËá¥ËæìÂá∫YesÔºåÂê¶ÂàôËæìÂá∫No„ÄÇ ÁÑ∂ÂêéÂ∞±A‰∫Ü„ÄÇ123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int#define A printf("A")#define C printf(" ") using namespace std;const int N=2e5+2;template &lt;typename Tp&gt; inline void IN(Tp &amp;x)&#123; int f=1;x=0;char ch=getchar(); while(ch&lt;'0'||ch&gt;'9')if(ch=='-')f=-1,ch=getchar(); while(ch&gt;='0'&amp;&amp;ch&lt;='9')x=x*10+ch-'0',ch=getchar();x*=f;&#125;int n,m,f[N],r[N],hep[N],ch[N][2];inline int chk(int x)&#123;return ch[f[x]][1]==x;&#125;inline int get(int x)&#123;return ch[f[x]][0]==x||ch[f[x]][1]==x;&#125;inline void filp(int x)&#123;swap(ch[x][0],ch[x][1]);r[x]^=1;&#125; inline void pushdown(int x)&#123; if(!r[x])return;r[x]=0; if(ch[x][0])filp(ch[x][0]); if(ch[x][1])filp(ch[x][1]);&#125;inline void rotate(int x)&#123; int y=f[x],z=f[y],k=chk(x),&amp;v=ch[x][!k]; if(get(y))ch[z][chk(y)]=x;v=y,ch[y][k]=v; if(v)f[v]=y;f[y]=x,f[x]=z;return;&#125;inline void Splay(int x)&#123; int y=x,top=0;hep[++top]=y; while(get(y))hep[++top]=y=f[y]; while(top)pushdown(hep[top--]); while(get(x))&#123; y=f[x],top=f[y]; if(get(y))rotate((ch[y][0]==x)^(ch[top][0]==y)?x:y); rotate(x); &#125;return;&#125; inline void Access(int x)&#123; for(register int y=0;x;x=f[y=x]) Splay(x),ch[x][1]=y;&#125;inline void makeroot(int x)&#123; Access(x);Splay(x);filp(x);&#125;inline int findroot(int x)&#123; Access(x);Splay(x); while(ch[x][0])pushdown(x),x=ch[x][0]; return x;&#125;inline void split(int x,int y)&#123; makeroot(x);Access(y);Splay(y);&#125; inline void link(int x,int y)&#123; makeroot(x);if(findroot(y)!=x)f[x]=y;&#125;inline void cut(int x,int y)&#123; makeroot(x); if(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][1])&#123; f[x]=ch[y][0]=0; &#125;return;&#125;char op[10];int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(register int x,y,i=1;i&lt;=m;++i)&#123; scanf("%s%d%d",op,&amp;x,&amp;y); if(op[0]=='C')link(x,y); else if(op[0]=='D')cut(x,y); else if(op[0]=='Q')&#123; if(findroot(x)==findroot(y))printf("Yes\n"); else printf("No\n"); &#125; &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÁÆóÊ≥ï„Äë ÁÇπÂàÜÊ≤ªÊÄªÁªì&Â≠¶‰π†Á¨îËÆ∞]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E7%AE%97%E6%B3%95%5D%E7%82%B9%E5%88%86%E6%B2%BB%2F</url>
    <content type="text"><![CDATA[ÂÖ∂ÂÆûÂæàÁü≠ÁöÑÂï¶ÔºåÊÑüËßâ‚Ä¶‚Ä¶ÊÑüËßâÊ∑ÄÁ≤âË¥®ËøôÁßç‰∏úË•øÂ•ΩÂÉèÊ≤°‰ªÄ‰πàÂèØ‰ª•ÊÄªÁªìÁöÑ‚Ä¶‚Ä¶Âè™‰ºöÊúâ‰∏Ä‰∫õÁÆÄÂçïÁöÑÊùøÂ≠êÈ¢òËÄåÂ∑≤‚Ä¶‚Ä¶(ÂÆûÈôÖ‰∏äÊòØÁ†ç‰∏çÂä®ÈöæÁöÑÈ¢òÁõÆ)(Ê∑ÄÁ≤âË¥®ÂêóÔºüÂë≥ÈÅìÁúüÊòØ‰∏çÈîôÂë¢ÂòøÂòøÂòø) 0XFF‚Äî-ÁÇπÂàÜÊ≤ªÊòØÂï•Ôºü ÁÇπÂàÜÊ≤ªÔºåÊòØÂ§ÑÁêÜÊ†ë‰∏äË∑ØÂæÑÁöÑ‰∏Ä‰∏™ÊûÅÂ•ΩÁöÑÂ∑•ÂÖ∑„ÄÇ ‰∏ÄËà¨Â¶ÇÊûúÈúÄË¶ÅÂ§ßËßÑÊ®°Â§ÑÁêÜÊ†ë‰∏äË∑ØÂæÑÔºåÁÇπÂàÜÊ≤ªÊòØ‰∏Ä‰∏™‰∏çÈîôÁöÑÈÄâÊã©„ÄÇ ‚Äî‚Äî‚Äî‰∏Ä‰ΩçÁΩë‰∏äÁöÑDalao Áé∞Âú®Êúâ‰∏Ä‰∏™ÈóÆÈ¢òÔºåÁªô‰Ω†‰∏ÄÈ¢óÊ†ëÔºåÊ†ë‰∏äÁöÑÊØè‰∏ÄÊù°ËæπÈÉΩÊúâÊùÉÂÄºÔºåÁé∞Âú®Áªô‰∏Ä‰∏™ $k$ ÔºåË¶ÅÊ±Ç‰Ω†Ê±ÇÂá∫Ê†ë‰∏äÊâÄÊúâË∑ØÂæÑ‰∏≠Ë∑ØÂæÑÊùÉÂÄºÂ∞è‰∫é $k$ ÁöÑË∑ØÂæÑÊÄªÊï∞Ôºå‰Ω†ÊÄé‰πàÂäûÔºü Êö¥ÂäõÔºü$O(N^3)$ ÁöÑÂ§çÊùÇÂ∫¶ÂàÜÂàÜÈíüËÆ©‰Ω† T È£ûÔºÅ ÂΩìÁÑ∂Ôºå‰Ω†ÂèØ‰ª•Áî®ÂàÜÊ≤ªÊù•Ê±ÇÔºåÂ§çÊùÇÂ∫¶‰ªÖÊúâ $O(nlogn)$„ÄÇ ÂØπ‰∫éÊ†ë‰∏äÂÅöÂàÜÊ≤ªÔºå‰∏ç‰ªÖÊúâÂü∫‰∫éÁÇπÁöÑÂàÜÊ≤ªÊñπÂºèÔºåËøòÊúâÂü∫‰∫éËæπÁöÑ‰ª•ÂèäÂü∫‰∫éÈìæÁöÑÔºå‰ΩÜÊòØËøô‰∏çÂú®Êàë‰ª¨ÁöÑËÆ®ËÆ∫ËåÉÂõ¥Á±ª(‰ΩúËÄÖÂ§™Ëíü‰∫Ü‰∏ç‰ºöQvQ)„ÄÇ 0X1F ÁÇπÂàÜÊ≤ªÁöÑÊµÅÁ®ã0X1F‚Äî-1 ÊÄé‰πàÂàÜÊ≤ªÔºüÂØπ‰∫éÊâÄÊúâÁöÑË∑ØÂæÑÔºåÂæàÊòæÁÑ∂Êàë‰ª¨ÂèØ‰ª•Â∞ÜÂÆÉ‰ª¨ÂàÜÊàê‰∏§ÈÉ®ÂàÜÔºö $1.$ ËøôÊù°Ë∑ØÂæÑÁªèËøá‰∫ÜÂÆÉÊâÄÂú®ÁöÑÂ≠êÊ†ëÁöÑÊ†πËäÇÁÇπ $2.$ ËøôÊù°Ë∑ØÂæÑÊ≤°ÁªèËøáÂÆÉÊâÄÂú®ÁöÑÂ≠êÊ†ëÁöÑÊ†πËäÇÁÇπ ÂÅáËÆæÁé∞Âú®Êúâ‰∏ÄÈ¢óÊ†ëÔºåTaÁöÑÊ†πËäÇÁÇπÊòØ $1$Ôºö ÂØπ‰∫éË∑ØÂæÑ $2 -&gt; 1 -&gt; 3 -&gt; 6$ ÔºåÂÆÉÊòØÁªèËøá‰∫ÜÊ†πËäÇÁÇπÁöÑÔºåÂ±û‰∫é $1$ Á±ªË∑ØÂæÑ„ÄÇ ÂØπ‰∫éË∑ØÂæÑ $4 -&gt; 2 -&gt; 5 -&gt; 8$ ÔºåÂÆÉÊ≤°ÊúâÁªèËøáÊ†πËäÇÁÇπ $1$ÔºåÂ±û‰∫é $2$ Á±ªË∑ØÂæÑ„ÄÇ ÂØπ‰∫éÁ¨¨‰∏ÄÁ±ªË∑ØÂæÑÊàë‰ª¨Áõ¥Êé•Â§ÑÁêÜÔºåÂØπ‰∫éÁ¨¨‰∫åÁ±ªË∑ØÂæÑÔºåÈÄíÂΩíÂ§ÑÁêÜÂΩìÂâçÊ†πÁöÑÂÑøÂ≠êÔºåÂú®ÂÑøÂ≠êÈáåÈù¢Â§ÑÁêÜÔºå‰πüÂ∞±ÊòØËØ¥Áé∞Âú®Êàë‰ª¨Âè™ÈúÄË¶ÅÂ§ÑÁêÜÁ¨¨‰∏ÄÁ±ªË∑ØÂæÑ„ÄÇ ÊÄé‰πàÁ°ÆÂÆöËøô‰∏™Ê†πÂë¢ÔºüÊòæÁÑ∂Ê†πÁöÑÂ•ΩÂùèÂèØ‰ª•ÂÜ≥ÂÆöÁÆóÊ≥ïÁöÑÂ§çÊùÇÂ∫¶„ÄÇ Âõ†‰∏∫ÊØèÊ¨°ÊòØÈÄíÂΩíÂÑøÂ≠êÔºåÊòæÁÑ∂ÈÄíÂΩíÂ±ÇÊï∞Ë∂äÂ∞ëË∂äÂ•ΩÔºå‰ªÄ‰πàÊÉÖÂÜµ‰∏ãÈÄíÂΩíÂ±ÇÊï∞Ë∂äÂ∞ëÔºüÂΩìÂâçÊ†πÊòØÂΩìÂâçÊ†ëÁöÑÈáçÂøÉÊó∂ÔºÅ ÈÇ£‰πàÔºåÊï¥‰∏™ÁÆóÊ≥ïÁöÑÊ°ÜÊû∂Â¶Ç‰∏ãÔºö 12345678910void solve(int u)&#123;//ÂΩìÂâçËäÇÁÇπu ÂΩìÂâçÊ†ëÁöÑÂΩìÂâçÊ†πËäÇÁÇπ‰∏∫uÔºåÁªüËÆ°Á¨¨‰∏ÄÁ±ªË∑ØÂæÑ; ÂÅöÊ†áËÆ∞ÔºåÂΩìÂâçÁÇπÂ∑≤ÁªèÂΩìËøáÊ†π‰∫Ü(ÊÄª‰∏çÂèØËÉΩ‰∏ÄÁõ¥ÊòØ‰∏Ä‰∏™ÁÇπÂΩìÂêß=„ÄÇ=) for(uÁöÑÊâÄÊúâÂÑøÂ≠ê)&#123; if(ÂÑøÂ≠êÂΩìËøáÊ†πËäÇÁÇπ‰∫Ü)continue; ÂéªÊéâÊª°Ë∂≥Âú®‰∏Ä‰∏™Â≠êÊ†ëÊù°‰ª∂ÁöÑ‰∏çÂêàÊ≥ïÁ≠îÊ°à; Âú®ÂÑøÂ≠êÁöÑÂ≠êÊ†ë‰∏≠ÂæóÂà∞‰∏Ä‰∏™Êñ∞ÁöÑÊ†πËäÇÁÇπ; solve(Êñ∞ÁöÑÊ†πËäÇÁÇπ); &#125;return;&#125; ÂÖ∂‰∏≠ÔºåÂú®ÂÑøÂ≠êÁöÑÂ≠êÊ†ë‰∏≠ÂæóÂà∞‰∏Ä‰∏™Êñ∞ÁöÑÊ†πËäÇÁÇπÂ¶Ç‰∏ãÔºö Áé∞Âú®Âú® $Solva(1)$ ÂáΩÊï∞‰∏≠ÔºåÂπ∂‰∏îÁé∞Âú®Âæ™ÁéØÂà∞‰∫Ü $1$ ÁöÑÂÑøÂ≠ê $3$ ÔºåÈÇ£‰πà $3$ ÁöÑÂ≠êÊ†ëÂ∞±ÊòØÁÅ∞Ëâ≤‰∏âËßíÂΩ¢‰∏≠ÁöÑ‰∏â‰∏™ËäÇÁÇπÔºåÊàë‰ª¨ÁöÑÊñ∞ $root$ Â∞±ÊòØÁÅ∞Ëâ≤‰∏âËßíÂΩ¢ËøôÊ£µÊ†ëÁöÑÈáçÂøÉÔºåÁé∞Âú®ÂàöÂºÄÂßãÁöÑÊó∂ÂÄôÂèØ‰ª•Â∞Ü $3$ ÁúãÊàêÊ†πËäÇÁÇπÔºåÁÑ∂ÂêéÂÜçÂæÄ‰∏ãËÆ°ÁÆó„ÄÇ 0X1F‚Äî-2 Ëé∑ÂèñÊ†ëÁöÑÈáçÂøÉÂæàÁÆÄÂçïÔºåÂè™ÈúÄË¶Å‰∏Ä‰∏™ $DP$ Â∞±Ë°å‰∫Ü„ÄÇ 123456789101112void getroot(int u,int fa)&#123; size[u]=1;mxss[u]=0; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; getroot(v,u); size[u]+=size[v]; mxss[u]=max(mxss[u],size[v]); &#125; mxss[u]=max(mxss[u],sum-size[u]); if(mxss[u]&lt;mxss[root])root=u; //mxss[u]‰∏∫uÁöÑÂ≠êÊ†ë‰∏≠sizeÊúÄÂ§ßÁöÑsizeÔºåsizeÂ∞±ÊòØu‰∏ãÈù¢ÁöÑÂ≠êÊ†ëÂ§ßÂ∞è„ÄÇ&#125; ÈÇ£‰πàËøô‰∏ÄÂè•ÊòØ‰ªÄ‰πàÊÑèÊÄùÂë¢Ôºömxss[u]=max(mxss[u],sum-size[u]); Êàë‰ª¨ÂÜç‰∏æ‰∏™Ê†óÂ≠êÔºåÂÅáÂ¶ÇÁé∞Âú®ÁöÑ $u$ ÊòØ $1$ Ôºö($Qiuly$ÊáíÊâÄ‰ª•Áî®ÁöÑÂâçÈù¢ÁöÑÈÇ£‰∏™Âõæ) ‰ΩÜÊòØ $size[1]$ ÁªüËÆ°ÁöÑÂè™ÊòØTa‰∏ãÈù¢ÁöÑ ${2,3,4,5,6,7,8}$ Âè∑ËäÇÁÇπÔºå‰∏á‰∏ÄÂΩìÂâçÊ†ë‰∏çÊ≠¢Ëøô‰∫õÂë¢Ôºü‰πüÂ∞±ÊòØËØ¥‰∏äÈù¢ËøòÊúâ‰∏ÄÂù®ËäÇÁÇπÔºåÂ¶ÇÊûúËÆ°ÁÆóÁöÑÊó∂ÂÄôÊòæÁÑ∂‰πüÊòØË¶ÅËÄÉËôëËøõÂéªÁöÑ„ÄÇ 0X1F‚Äî-ÊÄé‰πàÁªüËÆ°1Á±ªË∑ØÂæÑÔºüCode:123456789101112131415161718void getdist(int u,int fa)&#123; use[++cnt]=dist[u]; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; dist[v]=dist[u]+G[i].val;getdist(v,u); &#125;return;&#125;int calc(int u,int dist0)&#123; cnt=0;dist[u]=dist0; getdist(u,0); std::sort(use+1,use+1+cnt); int l=1,r=cnt,res=0; while(l&lt;r) if(use[l]+use[r]&lt;=k)res+=r-l,++l; else --r; return res; &#125; Á°ÆÂÆö‰∫ÜÂΩìÂâçÊ†ëÁöÑ $root$ ÂêéÔºåÊàë‰ª¨ÂèØ‰ª•ÂÆö‰πâ $dist[root]$ ‰∏∫ $0$ ÔºåÂÖ∂‰ΩôÁöÑÂΩìÂâçÊ†ëÁöÑËäÇÁÇπÁöÑ $dist$ ‰∏∫TaÂà∞ $root$ ÁöÑË∑ùÁ¶ª(Ë∑Ø‰∏äÊâÄÊúâËæπÁöÑÊùÉÂÄºÂíå)„ÄÇ ÊòæÁÑ∂ÔºåËøô‰∏™ÈóÆÈ¢òÂæàÂÆπÊòìÊêûÂÆö($getdist$)„ÄÇ ÊÉ≥Ë±°‰∏Ä‰∏ãÔºåÁé∞Âú®Êúâ‰∏ÄÊù°Ë∑ØÂæÑ $l -&gt; \cdots -&gt; root -&gt; \cdots -&gt; r$ÔºåÊòæÁÑ∂ËøôÊù°Ë∑ØÂæÑÁöÑÊùÉÂÄºÂ∞±ÊòØ $dist[l] + dist[r]$„ÄÇ ÂèØÊòØÔºåÂ¶ÇÊûú‰∏Ä‰∏ÄÂéªÊûö‰∏æ $l,r$ Âπ∂‰∏îÁªüËÆ°ÁöÑËØùÂ§çÊùÇÂ∫¶ÊòØÊä•Ë°®ÁöÑÂïäÔºÅËøôÊ≤°ÂÖ≥Á≥ªÔºåÊàë‰ª¨‰æùÊóßÂèØ‰ª•Áî®Á∫øÊÄßÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶Ëß£ÂÜ≥ÈóÆÈ¢ò„ÄÇ ÂæóÂà∞‰∫ÜÊâÄÊúâÁöÑ $dist$ ÂêéÔºåÊàë‰ª¨Êéí‰∏™Â∫è„ÄÇ ÁÑ∂ÂêéÂ∞±ÊòØÁªüËÆ°ÁöÑÊµÅÁ®ã„ÄÇ ÂÅáËÆæÁé∞Âú®ÊéíÂ•ΩÂ∫èÁöÑÊï∞Âàó‰∏∫ {$1,1,2,3,4,4,5,6,7,7,8$}Ôºå$l$ ‰∏∫ $1$ Ôºå$r$ ‰∏∫ $cnt$„ÄÇ Áé∞Âú®ËÆ°ÁÆó $1+8$ ÔºåÊòæÁÑ∂Â¶ÇÊûú $1+8$ Â∞è‰∫é $k$ ÔºåÈÇ£‰πà $1 + (1/2/3/4/4/5/6/7/7)$ ÈÉΩ‰ºöÂ∞è‰∫é $k$ÔºåËøô‰∏™Êó∂ÂÄôÁõ¥Êé•ÁªüËÆ°Âç≥ÂèØ„ÄÇÂê¶Âàô --r ÔºåÂõ†‰∏∫Êàë‰ª¨ËøòÈúÄË¶ÅÁªüËÆ°ÁöÑÊòØ $l+1,l+2,\cdots$ÔºåÊó¢ÁÑ∂Ëøô‰∏™ $r$ ‰∏çË°å‰∫ÜÔºåÂØπÂêéÈù¢ÁöÑÁ≠îÊ°àÊòØËÇØÂÆö‰∏ç‰ºöÊúâÂΩ±ÂìçÁöÑ„ÄÇ ÊúÄÂêé $return;$ 0X2F ÊÄª‰Ωì‰ª£Á†Å Test:Luogu P4178 TreeCode:Â¶Ç‰∏ã 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))//‰∏∫‰∫ÜÊ†ºÂºè‰∏çÈ¨ºÁïúËøô‰∏§‰∏™ÂÆèÂÆö‰πâÊàëÂè™ËÉΩÊîæÁùÄ‰∫ÜQvQ#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt; const int N=4e4+2;const int inf=1e9+9;int n,m,k,cnt,sum,ans,root,head[N];int vis[N],use[N],dist[N],size[N],mxss[N];struct Edge&#123; int nxt,to,val; &#125;G[N&lt;&lt;1];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;void getroot(int u,int fa)&#123; size[u]=1;mxss[u]=0; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; getroot(v,u); size[u]+=size[v]; mxss[u]=max(mxss[u],size[v]); &#125; mxss[u]=max(mxss[u],sum-size[u]); if(mxss[u]&lt;mxss[root])root=u; &#125;void getdist(int u,int fa)&#123; use[++cnt]=dist[u]; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; dist[v]=dist[u]+G[i].val;getdist(v,u); &#125;return;&#125;int calc(int u,int dist0)&#123; cnt=0;dist[u]=dist0; getdist(u,0); std::sort(use+1,use+1+cnt); int l=1,r=cnt,res=0; while(l&lt;r) if(use[l]+use[r]&lt;=k)res+=r-l,++l; else --r; return res; &#125;void solve(int u)&#123; ans+=calc(u,0); vis[u]=1; for(int v,i=head[u];i;i=G[i].nxt)&#123; if(vis[(v=G[i].to)])continue; ans-=calc(v,G[i].val); sum=size[v];root=0; getroot(v,0); solve(root); &#125;return;&#125;int main()&#123; IN(n),sum=mxss[0]=n; for(int i=1,u,v,w;i&lt;n;++i)&#123; IN(u),IN(v),IN(w); G[++cnt]=(Edge)&#123;head[u],v,w&#125;;head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,w&#125;;head[v]=cnt; &#125; IN(k); getroot(1,0); solve(root); printf("%d\n",ans); return 0; &#125; Test:Luogu P3806 „ÄêÊ®°Êùø„ÄëÁÇπÂàÜÊ≤ª1Analysis:ÂæàÊòæÁÑ∂Êàë‰ª¨‰∏çËÉΩÂÉè‰∏äÈù¢ÈÇ£Ê†∑ÂÇª‰πé‰πéÁöÑWhile‰∫ÜÔºåÈÇ£Ê†∑‰∏çËÉΩÁÆóÂá∫Ë∑ØÂæÑÁöÑÊùÉÂÄºÔºåÂè™ËÉΩÁªüËÆ°„ÄÇÂπ≤ËÑÜÁªüËÆ°Êó∂Êù•‰∏™ÂèåÈáçÂæ™ÁéØÊö¥ÂäõÂêßÔºÅÁÑ∂ÂêéÊêû‰∏™Ê°∂„ÄÇÂ§çÊùÇÂ∫¶ÂæàÈ´ò‰ΩÜÊòØËÉΩËøáÂæó‰∫Ü(Ëá≥Â∞ëËøô‰∏ÄÈ¢òÊòØËøôÊ†∑ÁöÑ)Code:Â¶Ç‰∏ã 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))//Q.v.Q........................#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long long#define RI register int const int N=1e4+2;const int inf=1e9+9;int ans[10000005];int n,m,k,cnt,sum,root,head[N];int vis[N],use[N],dist[N],size[N],mxss[N];struct Edge&#123; int nxt,to,val; &#125;G[N&lt;&lt;1];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;void getroot(int u,int fa)&#123; size[u]=1;mxss[u]=0; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; getroot(v,u); size[u]+=size[v]; mxss[u]=max(mxss[u],size[v]); &#125; mxss[u]=max(mxss[u],sum-size[u]); if(mxss[u]&lt;mxss[root])root=u; &#125;void getdist(int u,int fa)&#123; use[++cnt]=dist[u]; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; dist[v]=dist[u]+G[i].val;getdist(v,u); &#125;return;&#125;void calc(int u,int dist0,int add)&#123; cnt=0;dist[u]=dist0; getdist(u,0); for(int i=1;i&lt;=cnt;++i) for(int j=1;j&lt;=cnt;++j) ans[use[i]+use[j]]+=add; &#125;void solve(int u)&#123; calc(u,0,1);vis[u]=1; for(int v,i=head[u];i;i=G[i].nxt)&#123; if(vis[(v=G[i].to)])continue; calc(v,G[i].val,-1); sum=size[v];root=0; getroot(v,0); solve(root); &#125;return;&#125;int main()&#123; IN(n),IN(m),sum=mxss[0]=n; for(int i=1,u,v,w;i&lt;n;++i)&#123; IN(u),IN(v),IN(w); G[++cnt]=(Edge)&#123;head[u],v,w&#125;;head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,w&#125;;head[v]=cnt; &#125; getroot(1,0); solve(root); for(int i=1;i&lt;=m;++i) IN(k),printf(ans[k]?"AYE\n":"NAY\n"); return 0; &#125; ~~(ËøòÊòØËÉåÊùøÂ≠êÊúÄÈáçË¶ÅÂòøÂòøÂòø)]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>Â≠¶‰π†Á¨îËÆ∞</tag>
        <tag>ÊÄªÁªì</tag>
        <tag>ÁÇπÂàÜÊ≤ª</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2010]Ë∂ÖÁ∫ßÈí¢Áê¥ RMQ+‰ºòÂÖàÈòüÂàó bzoj2006/Ê¥õË∞∑P2048]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2048%2F</url>
    <content type="text"><![CDATA[Ëøô‰∏ÄÈÅìÈ¢òÊòæÁÑ∂ÊòØ‰∏ÄÈÅì $RMQ$ ÁöÑÈ¢òÁõÆÔºåÁî®‰∏Ä‰∏™‰∏âÂÖÉÁ¥†ÁªÑ$ÔºàoÔºålÔºårÔºâ‚Äã$Ë°®Á§∫ÔºöÂ∑¶Á´ØÁÇπ‰∏∫oÔºåÂè≥Á´ØÁÇπÂú®lÂà∞rÁöÑÂå∫Èó¥ÂÜÖÁöÑÊúÄÂ§ßÂ≠êÊÆµÔºåÂÖÉÁ¥†ÁªÑÁî®Â†ÜÁª¥Êä§„ÄÇ ÂØπ‰∫éÊØè‰∏™ÂíåÂº¶ÁöÑÂÄºÔºåÁî®ÂâçÁºÄÂíåÂú®$O(1)$ÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶Ê±ÇÂá∫„ÄÇ $ans$Á¥ØÂä†Ëøô‰∏™‰∏âÂÖÉÁªÑÁöÑË¥°ÁåÆ„ÄÇÁî±‰∫é$t$Â∑≤ÁªèË¢´ÈÄâ‰∏≠ÔºåÂØπ‰∫éËøô‰∏™$o$Ôºå$t$Â∑≤Áªè‰∏çËÉΩÈáçÂ§çÈÄâ‰∏≠Ôºå‰ΩÜÊúÄ‰ºòËß£ËøòÂèØËÉΩÂ≠òÂú®‰∫é $t$Â∑¶Âè≥ÁöÑ‰∏§Á´ØÂå∫Èó¥‰∏≠ÔºåÊâÄ‰ª•ÊèêÂèñÂá∫$(o, l, r)$‰πãÂêéÔºå‰∏∫‰∫ÜÈÅøÂÖçÈáçÂ§ç‰∏î‰∏ç‰∏ßÂ§±ÂÖ∂‰ªñËæÉ‰ºòËß£ÔºåÊàë‰ª¨‰ªçÁÑ∂Ë¶ÅÊää$(o, l, t - 1),(o, t + 1, r)$ÊâîÂõûÂ†ÜÈáåÈù¢Âéª„ÄÇËøòË¶ÅÈÅøÂÖçÈáçÂ§çÊàñÈîôËØØÔºåÂç≥$l = t$Êàñ$r = t$ÁöÑÊÉÖÂÜµË¶ÅËøõË°åÁâπÂà§„ÄÇ ÂØπ‰∫é$t$ÁöÑ‰ΩçÁΩÆÔºåÊàë‰ª¨Áõ¥Êé•Áî®STË°®È¢ÑÂ§ÑÁêÜÂá∫Âç≥ÂèØ„ÄÇ ‰ª£Á†ÅÔºö1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define Macth#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=500005,Log=20;ll f[N][Log],sum[N];template &lt;typename Tp&gt; inline void read(Tp &amp;x)&#123; x=0;char ch=getchar(); while(ch&lt;'0'||ch&gt;'9')ch=getchar(); while(ch&gt;='0'&amp;&amp;ch&lt;='9')x=(x&lt;&lt;1)+(x&lt;&lt;3)+ch-'0',ch=getchar();&#125;namespace RMQ&#123;//STË°®Ê±ÇÂå∫Èó¥ÊúÄ‰ºò‰ΩçÁΩÆ(Ë≤å‰ººÂú®Êú¨È¢ò‰∏≠ÊòØËøôÊ†∑) inline void make(int n)&#123; for(register int i=1;i&lt;=n;++i)f[i][0]=i; for(register int j=1;(1&lt;&lt;j)&lt;=n;++j) for(register int i=1;i+(1&lt;&lt;j)-1&lt;=n;++i)&#123; int x=f[i][j-1],y=f[i+(1&lt;&lt;(j-1))][j-1]; f[i][j]=sum[x]&gt;sum[y]?x:y;//ÂèñÊõ¥‰ºòÁöÑ‰ΩçÁΩÆ &#125;return; &#125; inline int query(int l,int r)&#123; int k=log2(r-l+1); int x=f[l][k],y=f[r-(1&lt;&lt;k)+1][k]; return sum[x]&gt;sum[y]?x:y; &#125;&#125;int n,k,L,R;struct Queue&#123; int l,r,o,t;//tÂ∞±ÊòØÊúÄ‰ºòÁöÑ‰ΩçÁΩÆ Queue()&#123;&#125; Queue(int o,int l,int r):o(o),l(l),r(r),t(RMQ::query(l,r))&#123;&#125;//t:Âèñ‰∏™lËá≥rÂå∫Èó¥ÁöÑÊúÄ‰ºòÂÄº bool operator &lt; (Queue a)const&#123;//ÈáçËΩΩËøêÁÆóÁ¨¶ return sum[a.t]-sum[a.o-1]&lt;sum[t]-sum[o-1]; &#125;&#125;A;std::priority_queue&lt;Queue&gt; q;int main()&#123; scanf("%d%d%d%d",&amp;n,&amp;k,&amp;L,&amp;R); for(register int i=1;i&lt;=n;++i)&#123; scanf("%lld",&amp;sum[i]);sum[i]+=sum[i-1]; &#125;RMQ::make(n);ll ans=0; for(register int i=1;i&lt;=n;++i)&#123; if(i+L-1&lt;=n)q.push(Queue(i,i+L-1,min(i+R-1,n))); &#125;while(k--)&#123; A=q.top();q.pop(); ans+=sum[A.t]-sum[A.o-1];//Êõ¥Êñ∞ans if(A.l!=A.t)q.push(Queue(A.o,A.l,A.t-1)); if(A.r!=A.t)q.push(Queue(A.o,A.t+1,A.r)); &#125;printf("%lld\n",ans); return 0;&#125; Â∑Æ‰∏çÂ§öÂ∞±ÊòØËøôÊ†∑‰∫Ü‚Ä¶‚Ä¶]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>RMQ</tag>
        <tag>Â†Ü</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë [NOI2014]È≠îÊ≥ïÊ£ÆÊûó Âä®ÊÄÅÂä†ËæπSpfa bzoj3669/luogu2387]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2387%2F</url>
    <content type="text"><![CDATA[ËÜúÊ≥ïÊ£ÆÊûó2333‚Ä¶‚Ä¶ ÊòæÁÑ∂ÊòØ‰∏ÄÈÅì $LCT$ Âä®ÊÄÅÂä†ËæπÁöÑÈ¢òÁõÆ„ÄÇ ÁÑ∂ËÄåÂπ∂‰∏çÈúÄË¶ÅËøô‰πàÈ´òÊ∑±ÁöÑÊï∞ÊçÆÁªìÊûÑÊù•Âä®ÊÄÅÂä†Ëæπ(ÂÆûÈôÖ‰∏äÊòØ‰∏ç‰ºö)ÔºåÊàë‰ª¨Âè™ÈúÄË¶Å $Spfa$ Âä®ÊÄÅÂä†ËæπÂç≥ÂèØÂàáÊéâÊ≠§È¢ò„ÄÇ ÊÄé‰πà $Spfa$?ÂèàÊòØ‰∏™ÊÄé‰πàÁöÑÂä®ÊÄÅÂä†ËæπÊ≥ïÂë¢Ôºü Âú®‰∏ãÈù¢ÊàëÂÖàÁªôÂá∫‰ª£Á†ÅÔºåÁÑ∂ÂêéÂÜçÊù•‰∏ÄÊ≠•‰∏ÄÊ≠•ÂâñÊûê(Ë∑ü $Spfa$ ÊùøÂ≠êÂ∑Æ‰∏çÂ§ö)„ÄÇ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;queue&gt;#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long long#define RI register intconst int N=5e4+2,M=1e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; bool flag=0;char ch;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;bool vis[N];std::queue&lt;int&gt; q;int head[N],dis[N],tot,cnt,ans,n,m;struct Edge_Spfa&#123;int nxt,to,v1,v2;&#125;G[M];struct Edge_Main&#123; int x,y,v1,v2; bool operator &lt; (Edge_Main a)const&#123; return v1&lt;a.v1; &#125;&#125;L[M];inline void make_line(int x,int y,int v1,int v2)&#123; G[++tot].nxt=head[x],head[x]=tot,G[tot].to=y,G[tot].v1=v1,G[tot].v2=v2; G[++tot].nxt=head[y],head[y]=tot,G[tot].to=x,G[tot].v1=v1,G[tot].v2=v2;&#125; #define A printf("A")#define C printf("\n")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y)) inline void spfa(int star_1,int star_2)&#123; vis[star_1]=true,vis[star_2]=true; q.push(star_1),q.push(star_2); while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt)&#123; int to=G[i].to; if(max(dis[u],G[i].v2)&lt;dis[to])&#123; dis[to]=max(dis[u],G[i].v2); if(!vis[to])q.push(to),vis[to]=true; &#125; &#125;vis[u]=false; &#125;return;&#125;int main()&#123; IN(n),IN(m); memset(dis,127,sizeof(dis)); dis[1]=0,q.push(1),ans=inf; for(int i=1;i&lt;=m;++i) IN(L[i].x),IN(L[i].y),IN(L[i].v1),IN(L[i].v2); std::sort(L+1,L+1+m); for(int i=1;i&lt;=m;++i)&#123; make_line(L[i].x,L[i].y,L[i].v1,L[i].v2); spfa(L[i].x,L[i].y); ans=min(ans,dis[n]+L[i].v1); &#125;printf("%d\n",ans==inf?-1:ans); return 0;&#125; Âä®ÊÄÅÂä†ËæπÔºåÈ°æÂêçÊÄù‰πâÔºåÂ∞±ÊòØÊåâÊúÄ‰ºòÈ°∫Â∫è‰æùÊ¨°Â∞ÜËæπÊèíÂÖ•ÔºåÂØπ‰∫éÊØèÊ¨°ÊèíÂÆåËæπÁöÑÂõæÂÅö‰∏ÄÊ¨°Á≠îÊ°àÁªüËÆ°($Spfa$)ÔºåÁÑ∂ÂêéÊØèÊ¨°Âú® $main$ ÂáΩÊï∞ÈáåÁªüËÆ°Á≠îÊ°àÔºåÊúÄÂêéËæìÂá∫Âç≥ÂèØ„ÄÇ Êàë‰ª¨Âõ∫ÂÆö $v1$ ÔºåÁî® $v2$ Ë∑ë $Spfa$ÔºåËæπÁöÑÊèíÂÖ•È°∫Â∫èÊòØÊåâÁÖß $v1$ ÁöÑÂ§ßÂ∞èÊù•ÁöÑÔºåÂ∞èÁöÑÂÖàÊèí„ÄÇ ‰πãÊâÄ‰ª•‰∏äÈù¢Ë¶ÅÁî®Âà∞ $sort$ÔºåÊòØÂõ†‰∏∫Êàë‰ª¨Ë¶ÅËææÂà∞‚ÄùÊåâÊúÄ‰ºòÈ°∫Â∫è‰æùÊ¨°Â∞ÜËæπÊèíÂÖ•‚Äù„ÄÇ $Spfa$ ÁöÑÊùøÂ≠êÂ∞±‰∏çËß£Èáä‰∫ÜÔºå‰∏çÊáÇÁöÑÂêåÂ≠¶Â∑¶ËΩ¨ÊêúÁ¥† $Spfa$ ÔºåÂÖàÂà∑Âá†ÈÅìÈªÑÁâåÂéªÂêß‚Ä¶‚Ä¶ Êàë‰ª¨Êù•ÁúãÁúãÂä®ÊÄÅÂä†ËæπÁöÑËøáÁ®ã: 12345for(int i=1;i&lt;=m;++i)&#123; make_line(L[i].x,L[i].y,L[i].v1,L[i].v2); spfa(L[i].x,L[i].y); ans=min(ans,dis[n]+L[i].v1); &#125; make_line(L[i].x,L[i].y,L[i].v1,L[i].v2); : Âä†ËæπÔºå‰∏çËß£Èáä spfa(L[i].x,L[i].y); : $Spfa$ ËøáÁ®ã„ÄÇ $Q$ :‰∏∫‰ªÄ‰πàË¶ÅÂÆö‰πâ‰∏§‰∏™Ëµ∑ÁÇπ $L[i].x$ Âíå $L[i].y$ Âë¢Ôºü $A$ :ÊòæÁÑ∂Âä†ËøõÊù•‰∫ÜËøôÊù°ËæπÂêéÔºåÂØπÂΩìÂâçÂõæ‰∏≠‰∏Ä‰∫õÁÇπÁöÑ $dis$ ÂÄºÂèØËÉΩ‰ºöÊúâÂΩ±ÂìçÔºåÊâÄ‰ª•‰ª•Ëøô‰∏™ËæπÁöÑ‰∏§Á´ØÁöÑÁÇπ‰∏∫Ëµ∑ÁÇπÔºå‰æùÊ¨°Êõ¥Êñ∞ÊóÅËæπÁöÑÁÇπÔºåÁõ¥Âà∞‰∏çËÉΩÂÜçÊõ¥Êñ∞„ÄÇ ans=min(ans,dis[n]+L[i].v1); : Êõ¥Êñ∞ $ans$ ÂÄº $Q$ :‰∏∫‰ªÄ‰πà‰ΩøÁî® $dis[n]+L[i].v1$ ÂØπ $ans$ ËøõË°åÊõ¥Êñ∞ÔºåÊúâÂèØËÉΩËøôÊù°ÊúÄÁü≠Ë∑Ø‰∏äÂπ∂‰∏çÂåÖÂê´Ëøô‰∏™ËæπÂïäÔºå‰∏∫‰ªÄ‰πàË¶ÅÂ∞Ü $L[i].v1$ ÁÆóËøõÂéªÂë¢ÔºüÂèØËÉΩ‰ºöÊõ¥Êñ∞ÈîôÁ≠îÊ°àÂïä„ÄÇ $A$ :ÂØπ‰∫éÂΩìÂâçÂõæÁöÑÊúÄÁü≠Ë∑ØÔºåÊàë‰ª¨ÂàÜ‰∏§ÁßçÊÉÖÂÜµÊù•ËÆ®ËÆ∫Ôºö $1.$ ËøôÊù°ÊúÄÁü≠Ë∑Ø‰∏äÊ≤°ÂåÖÂê´ËøôÊù°Êñ∞Âä†‰∏äÁöÑËæπ $2.$ ËøôÊù°ÊúÄÁü≠Ë∑Ø‰∏äÂåÖÂê´‰∫ÜËøôÊù°Êñ∞Âä†‰∏äÁöÑËæπ ÂØπ‰∫éÁ¨¨‰∏ÄÁßçÊÉÖÂÜµÔºåÊòæÁÑ∂ËøôÊù°ÊúÄÁü≠Ë∑ØÂú®Âä†‰∏äËøôÊù°Ëæπ‰πãÂâçÂ∞±Â∑≤ÁªèÊúâ‰∫ÜÔºåÂõ†‰∏∫ËøôÊù°ËæπÁöÑÂ≠òÂú®Ë∑üËøôÊù°ÊúÄÁü≠Ë∑ØÊ≤°‰ªª‰ΩïÂÖ≥Á≥ªÔºåÊó¢ÁÑ∂‰πãÂâçÊúâ‰∫ÜÔºåÈÇ£‰πàÂ∞±ËÇØÂÆöÂ∑≤ÁªèÊõ¥Êñ∞Ëøá $ans$ ‰∫Ü„ÄÇËÄåÈÇ£‰∏™Êó∂ÂÄôÁöÑ $v1$ ÊòØËÇØÂÆöÊØîËøô‰∏™Êó∂ÂÄôÁöÑ $v1$ Â∞èÁöÑÔºå‰πüÂ∞±ÊòØËØ¥ $ans$ Âú®‰πãÂâçÂ∑≤ÁªèË¢´ÊØîÁé∞Âú®ÁöÑÁ≠îÊ°àÊõ¥Â∞èÁöÑÁ≠îÊ°àÊõ¥Êñ∞Ëøá‰∫ÜÔºåÊâÄ‰ª• $ans$ ‰πü‰∏ç‰ºöË¢´ÂΩìÂâçÁ≠îÊ°àÊõ¥Êñ∞„ÄÇ ÂØπ‰∫éÁ¨¨‰∫åÁßçÊÉÖÂÜµÔºåÂõ†‰∏∫ËøôÊù°ÊúÄÁü≠Ë∑Ø‰∏äÂåÖÂê´‰∫ÜËøôÊù°ËæπÔºåËÄåËøôÊù°ËæπËÇØÂÆöÊòØËøôÊù°ÊúÄÁü≠Ë∑Ø‰∏ä $v1$ ÊúÄÂ§ßÁöÑËæπ(ÂΩìÁÑ∂‰πüÊòØÂΩìÂâçÂõæ‰∏ä $v1$ ÊúÄÂ§ßÁöÑËæπ)ÔºåÊâÄ‰ª•Áõ¥Êé•Êõ¥Êñ∞Ê≤°Èîô„ÄÇ ÊØè‰∏ÄÊ¨°Âæ™ÁéØÂêéÊï∞ÁªÑ‰∏çË¶ÅÈáçÁΩÆÂêóÔºü ÊòæÁÑ∂ÈòüÂàóÊòØ‰∏çË¶ÅÁöÑÔºåÂõ†‰∏∫ $Spfa$ ÁöÑÈÄÄÂá∫Êù°‰ª∂ÊòØÊòØÈòüÂàó‰∏∫Á©∫ÔºåÊâÄ‰ª•ÊØèÊ¨°ÂÅöÂÆå $Spfa$ Êó∂ÈòüÂàó‰πüÂ∞±Á©∫‰∫Ü„ÄÇ $vis$ Êï∞ÁªÑ‰πü‰∏çÈúÄË¶ÅÔºåË∑üÈòüÂàóÊòØ‰∏Ä‰∏™ÈÅìÁêÜÔºåÂè™Êúâ $vis$ Êï∞ÁªÑÈáåÈù¢ËøòÊúâ $true$ ÁöÑÂÖÉÁ¥†ÔºåËØ¥ÊòéËøòÊúâÂÖÉÁ¥†Âú®ÈòüÂàóÈáåÔºåÈòüÂàóÁ©∫‰∫ÜÔºå$vis$ Êï∞ÁªÑ‰πüËá™ÁÑ∂Á©∫‰∫Ü„ÄÇ $dis$ Êï∞ÁªÑ‰∏çÈúÄË¶ÅÔºåÂõ†‰∏∫Âæ™ÁéØ‰∏≠ÊØèÊ¨°Ë∑ë $Spfa$ ÊòØ‰∏∫‰∫ÜÊõ¥Êñ∞ $dis$ Êï∞ÁªÑËÄåÈùûÂÅöÊúÄÁü≠Ë∑Ø„ÄÇ ÁÑ∂Âêé‚Ä¶‚Ä¶ÁÑ∂ÂêéÂ∞±Ê≤°ÊúâÁÑ∂Âêé‰∫Ü‚Ä¶‚Ä¶]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>LCT</tag>
        <tag>Spfa</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë Tyvj1730‰∫åÈÄºÂπ≥Ë°°Ê†ë Ê†ëÂ•óÊ†ë luogu3380/bzoj3196]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1730%2F</url>
    <content type="text"><![CDATA[Ê†ëÂ•óÊ†ëÔºåÁõ¥Êé•Á∫øÊÆµÊ†ëÂ•ó $Splay$ . Âõ†‰∏∫ÊúâÂå∫Èó¥ÁöÑ$k$Â§ßÔºå‰∏çËÉΩÁõ¥Êé•Áî®$Splay$(Â§ß‰Ω¨ÂøΩËßÜËøôÂè•ËØù)ÔºåÊòæÁÑ∂ÂèØ‰ª•Áî®Ê†ëÂ•óÊ†ë(Â∫üËØù)„ÄÇÂØπ‰∫éÊØè‰∏Ä‰∏™Á∫øÊÆµÊ†ëÁöÑËäÇÁÇπÈÉΩÂª∫‰∏ÄÊ£µ $Splay$ ÔºåÈúÄË¶ÅÊü•ËØ¢Ëøô‰∏™ËäÇÁÇπÊâÄ‰ª£Ë°®ÁöÑÂå∫Èó¥Á¨¨ $k$ Â§ßÁ≠âÊìç‰ΩúÊó∂Áõ¥Êé•Áî® $Splay$ Êù•ÂÆåÊàêÂç≥ÂèØ‚Ä¶‚Ä¶ ‰ΩÜÊòØÔºåÂ¶ÇÊûú‰∏çÊòØÊ≠£Â•ΩÁöÑÂå∫Èó¥Âë¢ÔºüÂÅáÂ¶ÇËØ¢ÈóÆÂå∫Èó¥Ê®™Ë∑®‰∫Ü‰∏§‰∏™Â≠êÊ†ëÂå∫Èó¥ÊÄé‰πàÂäûÂë¢Ôºü ËøôÂ∞±ÈúÄË¶ÅÊäÄÂ∑ß‰∫Ü. ‰∏ãÈù¢ÔºåÂØπ‰∫éÁ¨¨‰∏Ä‰∏™Êìç‰ΩúÔºåÂÖàË¥¥Âá∫‰ª£Á†Å: 123456789inline void Seg_rank(int x,int l,int r,int L,int R,int Kth)&#123; if(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);return;&#125;//ÂøÖÈ°ªÂà§Êñ≠ÂïäÔºå‰∏ÄÂÆöË¶ÅÁõ∏Á≠â if(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);//ÂÆåÂÖ®Â±û‰∫éÂ∑¶Â≠êÊ†ë else if(L&gt;mid)Seg_rank(rc,mid+1,r,L,R,Kth);//ÂÆåÂÖ®Â±û‰∫éÂ∑¶Â≠êÊ†ë else Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+1,r,mid+1,R,Kth); //Âõ†‰∏∫ ans ÊòØ += ÔºåÊâÄ‰ª•Áõ¥Êé•ÊãÜÂºÄÂç≥ÂèØÔºåÂõ†‰∏∫Êúâ‰∫õÊäΩË±°ÔºåÂèØ‰ª•ÁîªÂõæÊ®°Êãü&#125;;case 1:&#123;IN(v);ans=0;Seg_rank(1,1,n,x,y,v);printf("%d\n",ans+1);&#125;break; Âü∫Êú¨‰∏äÔºåÊâÄÊúâÊúâÂÖ≥ÁöÑÊìç‰ΩúÈÉΩÂèØ‰ª•ÂèÇËÄÉ‰∏äÈù¢ÁöÑ‰ª£Á†ÅÊÆµ‚Ä¶‚Ä¶ Â§öËØ¥Êó†ÁõäÔºåÁõ¥Êé•Áúã‰ª£Á†ÅÂêß. Âì¶ÔºåÂØπ‰∫ÜÔºåÂÖ∂ÂÆûÁêÜËß£Âè™ÈúÄÁ∫∏Á¨îÂíå‰∏Ä‰ªΩÊ≠£Á°ÆÁöÑ‰ª£Á†ÅÔºåÂπ∂‰∏çË¶ÅÂ§™Â§öÁöÑËÆ≤Ëß£(ÊÑüËßâÁΩë‰∏äÊ≤°ÊâæÂà∞Âæà‰ºòÁßÄÁöÑÊñáÁ´†‚Ä¶‚Ä¶) Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define RI register int #define A printf("A")#define C printf(" ")#define inf 2147483647#define PI 3.1415926535898using namespace std;const int N=4e6+2;//template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; //template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int n,m,a[N],ans,MX;/*----------------------------------Splay-------------------------------------*/int f[N],c[N],s[N],v[N],ch[N][2],rt[N],tot;// rt[i] Ë°®Á§∫Á∫øÊÆµÊ†ëÁºñÂè∑‰∏∫iÁöÑËäÇÁÇπÁöÑSplayÁöÑÊ†πËäÇÁÇπinline int chk(int x)&#123;return ch[f[x]][1]==x;&#125;;inline void Splay_del_node(int x)&#123;f[x]=s[x]=c[x]=v[x]=ch[x][0]=ch[x][1]=0;&#125;;inline void Splay_pushup(int x)&#123;s[x]=(ch[x][0]?s[ch[x][0]]:0)+(ch[x][1]?s[ch[x][1]]:0)+c[x];&#125;;inline void Splay_rotate(int x)&#123; int y=f[x],z=f[y],k=chk(x),v=ch[x][k^1]; ch[y][k]=v;if(v)f[v]=y;f[x]=z;if(z)ch[z][chk(y)]=x; f[y]=x,ch[x][k^1]=y;Splay_pushup(y),Splay_pushup(x);&#125;;inline void Splay(int i,int x,int top=0)&#123; while(f[x]!=top)&#123; int y=f[x],z=f[y]; if(z!=top)Splay_rotate((ch[z][0]==y)==(ch[y][0]==x)?y:x); Splay_rotate(x); &#125;if(!top)rt[i]=x;&#125;;inline void Splay_Insert(int i,int x)&#123; int pos=rt[i]; if(!rt[i])&#123; rt[i]=pos=++tot;v[pos]=x;s[pos]=c[pos]=1; f[pos]=ch[pos][0]=ch[pos][1]=0;return; &#125;int last=0; while(1)&#123; if(v[pos]==x)&#123;++c[pos];Splay_pushup(last);break;&#125; last=pos;pos=ch[pos][x&gt;v[pos]]; if(!pos)&#123; pos=++tot;v[pos]=x;s[pos]=c[pos]=1; ch[last][x&gt;v[last]]=pos; f[pos]=last;ch[pos][0]=ch[pos][1]=0; Splay_pushup(last);break; &#125; &#125;Splay(i,pos);return;&#125;;inline int Splay_rank(int i,int k)&#123; int x=rt[i],cal=0; while(x)&#123; if(v[x]==k)return cal+((ch[x][0])?s[ch[x][0]]:0); else if(v[x]&lt;k)&#123; cal+=((ch[x][0])?s[ch[x][0]]:0)+c[x];x=ch[x][1]; &#125;else x=ch[x][0]; &#125;return cal;&#125;;inline int Splay_find(int i,int x)&#123; int pos=rt[i];while(x)&#123; if(v[pos]==x)&#123;Splay(i,pos);return pos;&#125;; pos=ch[pos][x&gt;v[pos]]; &#125;return 0;&#125;;inline int Splay_pre(int i)&#123;int x=ch[rt[i]][0];while(ch[x][1])x=ch[x][1];return x;&#125;inline int Splay_suc(int i)&#123;int x=ch[rt[i]][1];while(ch[x][0])x=ch[x][0];return x;&#125;inline int Splay_Get_pre(int i,int x)&#123; int pos=rt[i];while(pos)&#123; if(v[pos]&lt;x)&#123;if(ans&lt;v[pos])ans=v[pos];pos=ch[pos][1];&#125; else pos=ch[pos][0]; &#125;return ans;&#125;;inline int Splay_Get_suc(int i,int x)&#123; int pos=rt[i];while(pos)&#123; if(v[pos]&gt;x)&#123;if(ans&gt;v[pos])ans=v[pos];pos=ch[pos][0];&#125; else pos=ch[pos][1]; &#125;return ans;&#125;;inline void Splay_Delete(int i,int key)&#123; int x=Splay_find(i,key); if(c[x]&gt;1)&#123;--c[x];Splay_pushup(x);return;&#125; if(!ch[x][0]&amp;&amp;!ch[x][1])&#123;Splay_del_node(rt[i]);rt[i]=0;return;&#125; if(!ch[x][0])&#123;int y=ch[x][1];rt[i]=y;f[y]=0;return;&#125; if(!ch[x][1])&#123;int y=ch[x][0];rt[i]=y;f[y]=0;return;&#125; int p=Splay_pre(i);int lastrt=rt[i]; Splay(i,p,0);ch[rt[i]][1]=ch[lastrt][1];f[ch[lastrt][1]]=rt[i]; Splay_del_node(lastrt);Splay_pushup(rt[i]);&#125;;/*------------------------------Seg_Tree--------------------------------------*/ #define lc ((x)&lt;&lt;1)#define rc ((x)&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)inline void Seg_Insert(int x,int l,int r,int pos,int val)&#123; Splay_Insert(x,val);if(l==r)return; if(pos&lt;=mid)Seg_Insert(lc,l,mid,pos,val); else Seg_Insert(rc,mid+1,r,pos,val);&#125;;inline void Seg_rank(int x,int l,int r,int L,int R,int Kth)&#123; if(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);return;&#125; if(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth); else if(L&gt;mid)Seg_rank(rc,mid+1,r,L,R,Kth); else Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+1,r,mid+1,R,Kth);&#125;;inline void Seg_change(int x,int l,int r,int pos,int val)&#123;// printf("QvQ:: %d %d %d %d %d\n",x,l,r,pos,val); Splay_Delete(x,a[pos]);Splay_Insert(x,val); if(l==r)&#123;a[pos]=val;return;&#125;; if(pos&lt;=mid)Seg_change(lc,l,mid,pos,val); else Seg_change(rc,mid+1,r,pos,val);&#125;;inline void Seg_pre(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));return;&#125; if(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_pre(rc,mid+1,r,L,R,val); else Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+1,r,mid+1,R,val);&#125;;inline void Seg_suc(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=min(ans,Splay_Get_suc(x,val));return;&#125; if(R&lt;=mid)Seg_suc(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_suc(rc,mid+1,r,L,R,val); else Seg_suc(lc,l,mid,L,mid,val),Seg_suc(rc,mid+1,r,mid+1,R,val);&#125;;/*---------------------------------ask----------------------------------------*/inline int Get_Kth(int x,int y,int k)&#123; int L=0,R=MX+1,M; while(L&lt;R)&#123; M=(L+R)&gt;&gt;1; ans=0;Seg_rank(1,1,n,x,y,M); if(ans&lt;k)L=M+1;else R=M; &#125;return L-1;&#125;;/*-------------------------------main-------------------------------------*/int main(int argc,char const* argv[])&#123; IN(n),IN(m); for(RI i=1;i&lt;=n;++i)&#123;IN(a[i]);Seg_Insert(1,1,n,i,a[i]);MX=max(MX,a[i]);&#125; while(m--)&#123; int op,x,y,v;IN(op),IN(x),IN(y); switch(op)&#123; case 1:&#123;IN(v);ans=0;Seg_rank(1,1,n,x,y,v);printf("%d\n",ans+1);&#125;break; case 2:&#123;IN(v);printf("%d\n",Get_Kth(x,y,v));&#125;break; case 3:&#123;Seg_change(1,1,n,x,y);&#125;break; case 4:&#123;IN(v);ans=-inf;Seg_pre(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; case 5:&#123;IN(v);ans=inf;Seg_suc(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; &#125; &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ê†ëÂ•óÊ†ë</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêÈ¢òËß£„Äë Â∞èÊ∏ÖÊñ∞‰∫∫Ê∏£ÁöÑÊú¨ÊÑø Ëé´Èòü+bitset luoguP3674]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3674%2F</url>
    <content type="text"><![CDATA[Ëé´Èòü $+$ $bitset$. Êàë‰ª¨ÂèØ‰ª•Áî® $bitset$ Áª¥Êä§ÂΩìÂâç $l,r$ Âå∫Èó¥Êï∞ÁöÑÂá∫Áé∞ÁöÑÁä∂ÊÄÅÔºåËé´ÂØπ‰æùÊóßÊåâÁÖßÂ•óË∑ØÊêûÔºåÁÑ∂ÂêéÊù•ËÄÉËôëÊÄé‰πàÂõûÁ≠îÊØè‰∏Ä‰∏™ËØ¢ÈóÆ„ÄÇ ÂØπ‰∫éÊìçÂÅö $1$ ÔºåË¶ÅÊ±ÇÂõûÁ≠îÊàë‰ª¨‰ªéÂΩìÂâçÂå∫Èó¥ËÉΩÂê¶ÊâæÂá∫ $a,b$ ‰ΩøÂæóÂÖ∂Â∑Æ‰∏∫ $x$„ÄÇ ÂæàÊòæÁÑ∂Ôºå$a-b=x$ Á≠â‰ª∑‰∫é $a=b+x$„ÄÇ Êàë‰ª¨Áª¥Êä§ÁöÑÊòØÊï∞ÁöÑÂá∫Áé∞ÁöÑÁä∂ÊÄÅÔºå‰∫éÊòØÂèØ‰ª•Â∞ÜÂΩìÂâçÁöÑ $bitset$ Â∑¶Áßª $x$ ‰ΩçÔºå‰πüÂ∞±ÊòØËÆ©ÊâÄÊúâÊï∞ÈÉΩÂä†‰∏ä $x$ÔºåÁÑ∂Âêé‰∏éÂéü $bitset$ ÂÅö‰∏éËøêÁÆóÔºåÁúãÁúãÊòØÂê¶Êúâ‰∏Ä‰∏™ $a$ Âá∫Áé∞ÔºåÂ¶ÇÊûú‰∏éÁöÑÁªìÊûúÈùû $0$ ÔºåÈÇ£‰πàÊòæÁÑ∂ÊòØÊúâÁöÑÔºåÂê¶ÂàôÊ≤°Êúâ„ÄÇ Á¨¨‰∫å‰∏™Êìç‰ΩúÊúâ‰∫õ‰∏çÂ•ΩÂäûÔºåÊàë‰ª¨ÂÜçÂºÄ‰∏Ä‰∏™ $bitset$ ÈõÜÔºåÂØπ‰∫é‰∏Ä‰∏™Âá∫Áé∞ËøáÁöÑÊï∞ $i$ÔºåÂú®Á¨¨‰∫å‰∏™ $bitset$ ÈõÜ‰∏≠ËÆ∞‰∏∫ $N-i$„ÄÇÁÑ∂ÂêéÂÜçÊù•ÁúãÊìç‰ΩúË¶ÅÊ±ÇÔºåËøôÊ¨°ÊòØËÆ© $a+b=x$„ÄÇ ÈÇ£‰πàÂèØ‰ª•ÂæóÂà∞Ôºöa=x-b ‰∫éÊòØËÆæ‰∏Ä‰∏™Êï∞ $z$ ÔºåË°®Á§∫ $N-a$ „ÄÇ ÁÑ∂ÂêéÔºöz=N-x+b ÁßªÈ°πÂæóÔºöz-b=N-x ‰∫éÊòØÊàë‰ª¨Â∞ÜÁ¨¨‰∫å‰∏™ $bitset$ Âè≥Áßª $N-x$ ‰∏∫ÔºåÊòæÁÑ∂Á¨¨‰∫å‰∏™ $bitset$ ÈõÜ‰∏äÁöÑÁ¨¨ $i$ ‰Ωç‰ª£Ë°®ÁöÑÂ∞±ÊòØÁ¨¨‰∏Ä‰∏™ $bitset$ ‰∏äÁöÑ $x-i$ ‰Ωç„ÄÇ ÁÑ∂ÂêéÔºåÂ∞Ü‰∏§‰∏™ $bitset$ ‰∏é‰∏Ä‰∏ãÔºåÁúãÁúãÊòØÂê¶ÂêåÊó∂Â≠òÂú® $a$ Âíå $x-a$ Âç≥ÂèØ„ÄÇ ÊúÄÂêéÂØπ‰∫éÁ¨¨‰∏â‰∏™Êìç‰ΩúÔºåË≤å‰ººbitset‰πü‰∏çÂ§™Â•ΩÊêûÔºåÈÇ£‰πàÁõ¥Êé•Êö¥ÂäõÊûö‰∏æÂõ†Â≠êÂ∞±Â•Ω‰∫ÜÔºåÂ§çÊùÇÂ∫¶ $O(\sqrt{n})$ÔºåÊîæÂøÉ‰∏ç‰ºöÁÇ∏„ÄÇÂÖ∑‰ΩìÊÄé‰πàÊö¥ÂäõÊûö‰∏æÂë¢ÔºüÂú® $1 - \sqrt{x}$ ÁöÑËåÉÂõ¥Á±ªÊûö‰∏æ‰∏Ä‰∏™ $j$ ÔºåÂ¶ÇÊûú $x$ % $j==0$ Âπ∂‰∏îÂêåÊó∂Â≠òÂú® $j$ Âíå $x/j$ÔºåÊòæÁÑ∂Â∞±ÊúâÁ≠îÊ°à‰∫Ü„ÄÇ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;cmath&gt;#include&lt;bitset&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;std::bitset&lt;N&gt; now1,now2; int n,m,l,r,s,a[N],c[N],Be[N],ans[N];struct MO&#123;int opt,l,r,x,id;&#125;q[N];inline bool cmp(MO a,MO b)&#123;return Be[a.l]==Be[b.l]?a.r&lt;b.r:a.l&lt;b.l;&#125; inline void input()&#123; IN(n),IN(m);s=sqrt(n); for(int i=1;i&lt;=n;++i)IN(a[i]),Be[i]=(i-1)/s+1; for(int i=1;i&lt;=m;++i) IN(q[i].opt),IN(q[i].l),IN(q[i].r),IN(q[i].x),q[i].id=i; std::sort(q+1,q+1+m,cmp); l=1,r=0;now1.reset(),now2.reset();&#125;inline void Add(int x)&#123;if(c[x]++==0)now1[x]=1,now2[N-x]=1;&#125;inline void Del(int x)&#123;if(--c[x]==0)now1[x]=0,now2[N-x]=0;&#125;int main()&#123; input(); for(int i=1;i&lt;=m;++i)&#123; while(l&lt;q[i].l)Del(a[l++]); while(l&gt;q[i].l)Add(a[--l]); while(r&gt;q[i].r)Del(a[r--]); while(r&lt;q[i].r)Add(a[++r]); if(q[i].opt==1)&#123; if((now1&amp;(now1&lt;&lt;q[i].x)).any())ans[q[i].id]=true; &#125;else if(q[i].opt==2)&#123; if((now1&amp;(now2&gt;&gt;(N-q[i].x))).any())ans[q[i].id]=true; &#125;else if(q[i].opt==3)&#123; for(int j=1;j*j&lt;=q[i].x;++j) if(!(q[i].x%j)&amp;&amp;now1[j]&amp;&amp;now1[q[i].x/j]) &#123;ans[q[i].id]=true;break;&#125; &#125; &#125; for(int i=1;i&lt;=m;++i) if(ans[i])printf("hana\n"); else printf("bi\n"); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>È¢òËß£</tag>
        <tag>Ëé´Èòü</tag>
        <tag>bitset</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello new blog!]]></title>
    <url>%2F2019%2F02%2F12%2FHello%20new%20blog!%2F</url>
    <content type="text"><![CDATA[ÊõæÁªèÂ∞ùËØïËøáÁî® $Wordpress$ Êê≠ËøáÂçöÂÆ¢ÔºåËôΩËØ¥Êìç‰ΩúÁÆÄÂçïÔºåÂç¥Âõ†‰∏∫Êàë‰∏çÊÉ≥Ëä±Èí±ËÄå‰ΩøÁî®‰∏ç‰∫Ü $Makedown$ Ê†ºÂºèÔºåÂØπ‰∫éË∂ÖÁ∫ß‰æùËµñ $Makedown$ ÁöÑÊàëÔºåÊâæÈÅç‰∫ÜÊñπÊ≥ïÈÉΩÊ≤°Ê≥ïËß£ÂÜ≥‚Ä¶‚Ä¶ ‰∫éÊòØË†¢Ë†¢Ê¨≤Âä®ÁöÑÊÉ≥Ë¶ÅÁî® $Hexo$ Êê≠‰∏™ÂçöÂÆ¢ÔºåËôΩÁÑ∂Âê¨Â≠¶ÈïøËØ¥Ôºå$Hexo$ Âè™ÊòØÈùôÊÄÅÈ°µÈù¢Ôºå‰∏çÊòØÈÇ£‰πàÂ•Ω„ÄÇ‰ΩÜÊòØÂç¥ÂèØ‰ª•ÂÖçË¥πÔºåËøòÂèØ‰ª•Áî®Ëá™Â∑±ÂñúÊ¨¢ÁöÑÁºñËæëÂô®Â≠¶ÊñáÁ´†„ÄÇËøô‰∏™ËÆ°ÂàíÂ∞±Ëøô‰πàÂºÄÂßã‰∫Ü„ÄÇ ‰∏§Â§©Êó∂Èó¥Ôºå‰∏ÄÂÖ±Êê≠Âª∫‰∫ÜÂõõÊ¨°ÔºåÂâç‰∏âÊ¨°Âú®Êú∫ÊàøÊê≠ÁöÑÔºåÂùáÊú™ÊàêÂäü„ÄÇ‰∏ÄÂà∞ÂÆ∂Áî®Ëá™Â∑±ÁöÑÁ¨îËÆ∞Êú¨ÁîµËÑëÔºåÂç¥Âá∫Â•áÁöÑÈ°∫Âà©ÔºåÁúãÂà∞È°µÈù¢ÊàêÂäüÁöÑÂºπÂá∫Êù•Êó∂ÔºåÊàëÁúüÁöÑÊòØÊøÄÂä®Âæó‰∏çËÉΩË®ÄËØ≠ÔºÅ ÁÑ∂ÂêéÔºåÂØπËøô‰∏™‰πüÊå∫Êª°ÊÑèÁöÑ„ÄÇ‰ΩÜÊòØÁî±‰∫éÊú¨‰∫∫ÂÆûÂú®Â§™Âº±ÔºåÊ≤°ÊúâÂÆûÂäõ‰∏éÁ≤æÂäõÂéª‰ºòÂåñÂçöÂÆ¢ÁïåÈù¢ÔºåÂè™ÊòØËçâËçâÁöÑÊêû‰∫Ü‰∏Ä‰∏ã $LATEX$(ÊâìÈîô‰∫ÜÔºü) Ôºå‰∏çÁü•ÈÅìËÉΩ‰∏çËÉΩÁî®„ÄÇ ‰πãÂâçÊàëÁöÑ $Wordpress$ ÁöÑÁ¨¨‰∏ÄÁØáÊñáÁ´†Âè´Êñ∞ÁöÑÂºÄÂßãÔºåÁé∞Âú®ÁúãÊù•ÈÇ£Ëøò‰∏çÊòØÔºåÂ∏åÊúõËøôÊâçÊòØ‰∏Ä‰∏™Â¥≠Êñ∞ÁöÑÂºÄÂßãÂêßÔºÅ ÔºàÂÆûÈôÖ‰∏äÂéüÊù•Âè´ $Qiuly$ÔºåËøô‰∏™ $‚Äúmonlights‚Äù$ Âè™ÊòØÂ∞èÂè∑ËÄåÂ∑≤Ôºå$QvQ!$Ôºâ ÔºàÈÄÉ]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>ÂÖ¨Âëä</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Welcome,new visitors! Here is Qiuly's blog!]]></title>
    <url>%2F2019%2F02%2F12%2FWelcome%2F</url>
    <content type="text"><![CDATA[È¢ÑÊµãÊú™Êù•ÁöÑÊúÄÂ•ΩÊñπÊ≥ïÊòØÂàõÈÄ†Êú™Êù• ‚Äî‚ÄîËâæ‰º¶¬∑ÂáØ Ê¨¢ËøéÔºÅËøôÈáåÊòØ $Qiuly‚Äôs\ blog$ ÔºÅÂú®ÁøªÈòÖÊñáÁ´†‰πãÂâçÔºå$Qiuly$ ÊúâÂá†‰∏™Â∞èÂ∞èÁöÑË¶ÅÊ±ÇÔºö Â¶ÇÊûúÈúÄË¶ÅÂ§çÂà∂ÂéüÊñáÁöÑËØùÂèØ‰ª•Âä† $Qiuly$ $QQ:2641450959$ ÔºåËØ∑‰∏çË¶ÅÊìÖËá™Â§çÂà∂Âç¥‰∏çË∑ü $Qiuly$ ËØ¥‰∏ÄÂ£∞ÔºåË∞¢Ë∞¢ÁêÜËß£„ÄÇ$Qiuly$ ÁõÆÂâçËøòÂè™ÊòØ‰∏Ä‰∏™ÂèØÁà±ÁöÑÂ∞èÂ≠¶Ê£ÆÔºåÊõ¥ÂçöÂã§Âø´ÁöÑÁ°Æ‰∏çÂÆπÊòì„ÄÇ Â¶ÇÊûúÊúâÂõæÁâáÊåÇ‰∫ÜÁöÑÔºåÊàñËÄÖÊòØ‰ª£Á†ÅÁº©ËøõÂèòÊàê‰∫Ü $8$ ÁöÑ‰ª£Á†ÅÔºåËøòÊúâÂ∞±ÊòØÊ†ºÂºèÈóÆÈ¢òÁàÜÁÇ∏ÁöÑËØù(Â∞±ÊòØÂ≠ó‰πãÈó¥Á™ÅÁÑ∂ÊúâËã•Âπ≤‰∏™Á©∫Ê†º‰πãÁ±ªÁöÑ)‰πüËØ∑Âä† $QQ$ Ôºå$Qiuly‚Äôs \ blog$ Ê≤°ÊúâÈÇÆÁÆ±ÊèêÈÜíÁöÑÂäüËÉΩÔºåÊâÄ‰ª•Â¶ÇÊûúÂè™ÁöÑÊòØËØÑËÆ∫ÁöÑËØù $Qiuly$ Ê†πÊú¨‰∏çÁü•ÈÅì„ÄÇ$QQ$ ÁöÑÈ™åËØÅÂ∞±Â°´ÂÖ≠Âπ¥Á∫ßÂ•Ω‰∫ÜÔºåËØ¥ÊòéÁöÑËØùÂ∞±Â°´ÂçöÂÆ¢ÈóÆÈ¢ò„ÄÇ ‰Ωú‰∏∫‰∏Ä‰∏™‰∏™‰∫∫ÂçöÂÆ¢ÔºåÂΩìÁÑ∂Ê¨¢ËøéÂä†ÂèãÈìæÂï¶ÔºÅÊÉ≥Ë¶ÅÂä†ÂèãÈìæÁöÑÊúãÂèãÂèØ‰ª•ÂÜç‰∏ãÊñπËØÑËÆ∫Âå∫ÊèêÂá∫Âì¶„ÄÇ ÊàñËÆ∏ÊòØ‰ΩøÁî®ÁöÑ $Latex$ ÊØîËæÉÂ§öÔºåÊúâ‰∫õÂÖ¨Âºè/ $Latex$ ÁöÑÂè•Â≠êÊàñËÆ∏‰ºöÂä†ËΩΩÁöÑÊØîËæÉÊÖ¢ÔºåÈúÄË¶ÅÁ≠âÂæÖÁâáÂàªÂêéÂÜçÈ£üÁî®„ÄÇ Â•ΩÂï¶ÔºåÁé∞Âú®ÂºÄÂßã‰Ω†ÁöÑ $Qiuly‚Äôs \ blog$ ‰πãÊóÖÂêßÔºÅ]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>ÂÖ¨Âëä</tag>
      </tags>
  </entry>
</search>
