<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[新域名：qiuly.ml !]]></title>
    <url>%2F2019%2F05%2F24%2Fqiuly.ml%2F</url>
    <content type="text"><![CDATA[很想要一个自定义域名了……于是 $2019.3.4$ 迫不及待的去 $freenom$ 弄了一个免费域名：$qiuly.ml$ 。当时不懂得如何解析域名，只是在 $dnspod$ 上面瞎搞，居然还填写了 $\rm{A}$ 记录，填了自己的 $\rm{IP}$ 地址，于是迟迟没有解析完成，$http$ 总是无法访问。于是先放弃了。 到了五月末，突然发现腾讯云可以很好的托管 $typecho$ 博客，并且只需要两分钟就好了，经过实验发现的确如此，不过域名是随机的，总是不尽人意。 激动的去阿里云买了个域名，两年的应该够用了，借着审核的时间，又去看了看教程，无意间看到了 $\rm{Hexo}$ 的域名教程，发现只需要多一条 $\rm{CNAME}$ 记录就好了，填的记录值当然就是 $qiuly.github.io$ ，说明域名的指向。 刚填好，然后设置了一下 $Github$ ，接着在网址栏输入 $qiuly.ml$ ，加载了一会儿，标题栏居然显示出 $Qiuly’s\ blog!$ ，这让我大为惊喜，真好啊，终于 $\rm{Hexo}$ 有一个新域名了。 另外，等待 $typecho$ 的域名搞定并测试成功后，还会去买 $handsome$ 主题，那么之后差不多就是一起更新了。也就是说如果发现 $\rm{Hexo}$ 没有更新，那么或许 $typecho$ 更新了呢。 不过，这个虽然是自定义域名，却无法备案……这就是唯一的遗憾啊。 貌似现在域名还有些不稳定？]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>公告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI2011]卡农 组合数学+DP luoguP3214]]></title>
    <url>%2F2019%2F05%2F22%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3214%2F</url>
    <content type="text"><![CDATA[什么同种音乐简直是个逗比，最后直接除上 $m!$ 即可。 现在我们需要算出选出 $m$ 的片段的方案数，考虑 $\rm{DP}$ ，设 $dp_i$ 表示前 $i​$ 个片段已经确定，且满足下列要求： 这 $i$ 个片段中没有空集 这 $i$ 个片段互不相同 这 $i$ 个片段中所有的音符的出现次数全部都要是偶数次 现在考虑如何从 $dp_{i-1}$ 转移到 $dp_i$ 。 首先看第三个要求，不难发现在知道前 $i-1$ 个片段的情况下，$i$ 的音符集合一定是确定的—— $i$ 的音符集合一定是前 $i-1$ 个片段中出现次数为奇数的音符。也就是说 $i$ 的集合是随着前 $i-1$ 个片段变换的，已知选择前 $i-1$ 个片段的方案数为 $A_{2^n-1}^{i-1}$ ，那么 $i$ 的方案数也自然是 $A_{2^n-1}^{i-1}$ 。(注意该统计方案保证前 $i-1$ 个片段互不相同) 但是 $i$ 可能是空集，那么这个方案就不成立，方案不成立的个数当然是前 $i-1$ 个片段自由搭配且合法的情况数，那么自然就是 $dp_{i-1}$ ，为什么要计算和法的呢，因为首先计算了的方案数显然是满足第三个要求的，也就是说我们要去掉的也只能是满足第三个要求的不合法方案数，那么自然就是 $dp_{i-1}$ 个了。 最后考虑不满足第二种情况的方案数，首先我们令一个片段 $j$ 和 $i$ 一样(在前 $i-1$ 个片段中最多一个和 $i$ 一样)，这个那么这样子我们将这两个片段都去掉的时候全局的方案数就是 $dp_{i-2}$ 了，因为剩下的一定是合法的。显然 $j$ 可以是前 $i-1$ 个片段中的任意一个，并且重复的音乐集的种类数为 $2^n-1-(i-2)$ ，为什么这么说呢，显然 $2^n-1$ 是非空集的音乐集方案数，$i-2$ 就是说剩下的 $i-2$ 个片段不重复，并且 $i,j$ 也不能与之重复，那么可供 $i,j$ 选择的就剩下 $2^n-1-(i-2)$ 个音乐集了。 也就是说，我们用 $A_{2^n-1}^{i-1}$ 减去这些不合法的方案后剩下的就是 $dp_i$ 了： dp_i=A_{2^n-1}^{i-1}-dp_{i-1}-(dp_{i-2}\times(i-1)\times(2^n-1-(i-2)))最后的答案就是 $dp_m$ 。 关于初始化的问题，首先 $dp_0=0$ ，那么选一个片段呢可以吗？其实不行，因为音符没有重复偶数次，所以一定是全都不合法的，又不允许空集的存在，也就是说 $dp_1=0$ 。用上面的式子从 $dp_2$ 推起即可。 Code：12345678910111213141516171819202122232425262728293031323334#include &lt;cstdio&gt;using namespace std;typedef long long ll;const int N=1e6+2;#define p 100000007int n,m;ll dp[N],A[N];inline ll pow(ll x,ll y,ll res=1) &#123; for(;y;y&gt;&gt;=1,x=x*x%p) if(y&amp;1) res=res*x%p; return res%p;&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); ll mul=pow(2,n)-1;mul=(mul%p+p)%p; A[0]=1; for(int i=1;i&lt;=m;++i) A[i]=1ll*A[i-1]*(mul-i+1)%p; dp[0]=1,dp[1]=0; for(int i=2;i&lt;=m;++i) &#123; dp[i]=A[i-1]%p; dp[i]=(dp[i]-dp[i-1]+p)%p; dp[i]=(dp[i]-1ll*dp[i-2]*(i-1)%p*(mul-(i-2))%p+p)%p; dp[i]=(dp[i]%p+p)%p; &#125; ll fac=1; for(int i=2;i&lt;=m;++i) fac=1ll*fac*i%p; ll inv=pow(fac,p-2); printf("%lld\n",dp[m]*inv%p); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 Lunar New Year and Red Envelopes DP luoguCF1106E]]></title>
    <url>%2F2019%2F05%2F22%2F%5B%E9%A2%98%E8%A7%A3%5DluoguCF1106E%2F</url>
    <content type="text"><![CDATA[很简单的可以想到，设 $f_{i,j}$ 表示到第 $i$ 时刻已经干扰了 $j$ 次时的最少拿到钱数。然后每一次转移的时候只要看第 $i$ 时刻是否干扰即可，然后如果不干扰的话就算一下这一时刻拿到的红包的钱。 对于第 $i$ 时刻拿到的红包的钱数我们需要预处理，开一个优先队列，按照题意重载运算符，然后按照时刻走一遍即可。 Code：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+3;const int M=2e2+3;ll f[N][M];int n,m,k,nxt[N],val[N];struct Node &#123; int s,t,d,w,id; bool operator &lt; (const Node&amp;b) const &#123;return w==b.w?b.d&gt;d:b.w&gt;w;&#125;&#125;a[N];priority_queue&lt;Node&gt; q;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;bool cmp(Node x,Node y) &#123;return x.s&lt;y.s;&#125;int main() &#123; IN(n),IN(m),IN(k); for(int i=1;i&lt;=k;++i) IN(a[i].s),IN(a[i].t),IN(a[i].d),IN(a[i].w),a[i].id=i; sort(a+1,a+1+k,cmp); int cnt=1; for(int i=0;i&lt;=n;++i) &#123; while(cnt&lt;=k&amp;&amp;a[cnt].s&lt;=i) q.push(a[cnt++]); if(q.empty()) nxt[i]=i+1,val[i]=0; else &#123; Node now=q.top(); if(now.t&lt;i) &#123;--i,q.pop();continue;&#125; nxt[i]=now.d+1,val[i]=now.w; &#125; &#125; memset(f,127,sizeof(f)); f[0][0]=0; for(int i=0;i&lt;=n;++i)for(int j=0;j&lt;=m;++j) f[i+1][j+1]=min(f[i+1][j+1],f[i][j]), f[nxt[i]][j]=min(f[nxt[i]][j],f[i][j]+val[i]); ll ans=1e18+9; for(int i=0;i&lt;=m;++i) ans=min(ans,f[n+1][i]); printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【数论】 扩展中国剩余定理]]></title>
    <url>%2F2019%2F05%2F17%2F%5B%E6%95%B0%E8%AE%BA%5D%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%2F</url>
    <content type="text"><![CDATA[在此输入你的密码以便阅读全文 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>中国剩余定理</tag>
        <tag>扩展中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SDOI2010]古代猪文 组合数学 luoguP2480]]></title>
    <url>%2F2019%2F05%2F17%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2480%2F</url>
    <content type="text"><![CDATA[题目传送门：传送门戳我 很显然题目需要我们求出 $G^{\sum_{d|n}C_n^d} \ mod\ P$ ( $P=999911659$ ) 。我们知道费马小定理有一个推论：$a^{x}\equiv a^{x \ mod\ (P-1)} \ (mod \ P)$ (需要满足 $P$ 是质数) ，题目中的 $P$ 正好是质数，那么我们可以将上式变换一下： G^{\sum_{d|n}C_n^d} \ mod\ P=G^{\sum_{d|n}C_n^d \ mod\ (P-1)} \ mod\ P​ 现在我们需要快速求出 $\sum_{d|n}C_n^d \ mod\ (P-1)$ ，看样子可以 $lucas$ 直接求组合数，但是模数太大了不方便。分解质因数后发现 $999911658=2\times 3\times 4679\times 35617$ ，对四个模数求出其对应的答案，然后因为四个模数互质，最后 $crt$ 合并答案即可。 Code：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;#define mod 999911658ll n,g,fac[35617+7];ll m[5]=&#123;0,2,3,4679,35617&#125;,a[5];namespace math &#123; inline ll pow(ll x,ll y,ll p) &#123; ll res=1; for(;y;y&gt;&gt;=1,x=1ll*x*x%p) if(y&amp;1) res=1ll*res*x%p; return res; &#125; inline ll C(ll n,ll m,ll p) &#123; if(m&gt;n)return 0; return ((fac[n]*pow(fac[m],p-2,p))%p*pow(fac[n-m],p-2,p)%p)%p; &#125; inline ll lucas(ll n,ll m,ll p) &#123; if(!m) return 1; return C(n%p,m%p,p)*lucas(n/p,m/p,p)%p; &#125; inline ll exgcd(ll a,ll b,ll&amp;x,ll&amp;y) &#123; if(!b) &#123;x=1,y=0;return a;&#125; ll gcd=exgcd(b,a%b,x,y),tmp=x; x=y,y=tmp-(a/b)*y;return gcd; &#125; inline ll CRT(ll*m,ll*a,int n) &#123; ll res=0,lcm=1; for(ll i=1;i&lt;=n;++i) lcm=lcm*m[i]; for(ll i=1;i&lt;=n;++i) &#123; ll num=lcm/m[i],x,y,gcd=exgcd(num,m[i],x,y); x=(x%m[i]+m[i])%m[i]; res=(res+a[i]*x*num)%lcm; &#125;return res; &#125;&#125;using namespace math;int main() &#123; scanf("%lld%lld",&amp;n,&amp;g); if(!(g%(mod+1))) &#123;puts("0");return 0;&#125; fac[0]=1; for(int i=1;i&lt;=35617;++i) fac[i]=1ll*fac[i-1]*i%mod; for(int k=1;k&lt;=4;++k) &#123; ll p=m[k],res=0; for(ll i=1;i*i&lt;=n;++i) if(!(n%i)) &#123; ll x=i,y=n/i;if(x==y) y=0; res=(res+lucas(n,x,p)%p)%p; if(y) res=(res+lucas(n,y,p)%p)%p; &#125; a[k]=res; &#125; ll ans=CRT(m,a,4); printf("%lld\n",pow(g,ans,mod+1)); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>中国剩余定理</tag>
        <tag>题解</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SDOI2009]学校食堂 状压DP luoguP2157]]></title>
    <url>%2F2019%2F05%2F17%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2157%2F</url>
    <content type="text"><![CDATA[观察发现 $\texttt{B}​$ 及其的小，可以想到对于第 $i​$ 个人，状压自己以及自己后面 $7​$ 个人的打饭状态即可。 设 $dp_{i,j}$ 表示打饭到第 $i$ 个人，第 $i$ 个人以及其后面 $7$ 人的打饭状态为 $j$ 的时候的最短时间。转移的时候看在当前状态 $j$ 下有那些人没有打饭，然后给其打饭转移即可(显然还有忍耐度的限制)。 但是经过打饭操作我们无法得出这道菜的时间——因为我们不清楚上一个打饭的是谁。这个时候再记一维状态即可。 设 $dp_{i,j,k}$ 表示( $i,j$ 的意义与上面相同)，上一次打饭的人的编号就是 $i+k$ (注意 $k$ 的取值为 $-8$ 至 $7$ ，所以实际实现中我们需要将 $k$ 加上 $8$ 后再记入数组) 。 Code：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e3+2;const int M=256;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int n,t[N],b[N],dp[N][M+2][16];void cmin(int&amp;x,int y) &#123;x=min(x,y);&#125;void cmax(int&amp;x,int y) &#123;x=max(x,y);&#125;void solve() &#123; IN(n); for(int i=1;i&lt;=n;++i) IN(t[i]),IN(b[i]); memset(dp,127,sizeof(dp)); int inf=dp[0][0][0]; dp[1][0][7]=0; for(int i=1;i&lt;=n;++i) for(int j=0;j&lt;M;++j) for(int k=-8;k&lt;=7;++k) if(dp[i][j][k+8]!=inf) &#123; if(j&amp;1) cmin(dp[i+1][j&gt;&gt;1][k+7],dp[i][j][k+8]); else &#123; int max_pos=inf; for(int h=0;h&lt;=7;++h) if(!((j&gt;&gt;h)&amp;1)) &#123; if(i+h&gt;max_pos) break; cmin(max_pos,i+h+b[i+h]); cmin(dp[i][j|(1&lt;&lt;h)][h+8],dp[i][j][k+8]+(i+k?t[i+h]^t[i+k]:0)); &#125; &#125; &#125; int ans=inf; for(int i=0;i&lt;=8;++i) cmin(ans,dp[n+1][0][i]); printf("%d\n",ans); return;&#125;int main() &#123; int T;IN(T); while(T--) solve(); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [九省联考2018]林克卡特树 树形DP+wqs二分优化 loj2478]]></title>
    <url>%2F2019%2F05%2F12%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2478%2F</url>
    <content type="text"><![CDATA[毒瘤传送门：戳我戳我 仔细观察会发现该题需要从树上拿出 $k+1$ 条互不相交的链，求这些链的节点的权值总和的最大值。那么我们选出这些链后就可以用 $k$ 条边将其连起来了，这样就满足了题意。 用 $f_{i,j}$ 表示 $i$ 的子树中选出了 $j$ 个链的最大值，但是会发现转移很难办，枚举一个 $i$ 的儿子 $v$ 的时候，我们不好算出 $v$ 对 $i$ 上的链做出的贡献。 那么我们新增加一个状态，设 $f_{0/1/2,i,j}$ 为我们的状态，$i,j$ 的意思和上面一样，其中 $0/1/2$ 分别表示——$0$ : $i$ 不属于子树中 $j$ 条链中的任意一条，$1$ : $i$ 属于 $j$ 条链中其中一条，$2$ : $i$ 属于 $j$ 条链中的其中两条 。 那么我们枚举一个儿子 $v$ ，现在我们需要转移的对象就是 $u$ (上面的 $i$ ) ，那么我们注意来考虑： 我们转移的时候枚举一个 $i$ 表示当前的链数，然后枚举 $j$ 表示 $v$ 子树中的链数，那么之前 $u$ 子树中的链数显然就是 $i-j$ 了。 令 $num_{v,j}=\max(f_{0,v,j},f_{1,v,j},f_{2,v,j})$ . 计算 $v$ 对 $f_{0,u,i}$ 的贡献 因为该状态必须满足 $u$ 不能属于任意一条链，所有我们理所当然也不能连上 $u\rightarrow v$ 这条边。那么也就是说 $v$ 中发生什么事情都跟 $u$ 没有任何关系了，因为要统计最大，我们直接将 $num$ 统计进去即可。 转移： f_{0,u,i}=\max_v\max_j \{f_{0,u,i-j}+num_{v,j}\} 计算 $v$ 对 $f_{1,u,i}$ 的贡献 考虑两种情况，第一种，这一条和 $u$ 有关的链是连着别的子树的，那么也就肯定不会连上 $u\rightarrow v$ 这条边，按照上面的转移即可。 第一种转移： f_{1,u,i}=\max_v\max_j \{f_{1,u,i-j}+num_{v,j}\}​ 第二种情况就是这一条链是和 $v$ 相连接的，那么这个时候 $v$ 的状态只能是 $0,1$ ，原因很显然，链不能香蕉(最好吃了🍌) ，那么对于 $v$ 状态是 $0$ 的情况，这样一连接后就会新出现一条链了，记得算上边权： 转移 $0$ 情况： f_{1,u,i}=\max_v\max_j\{f_{0,u,i-j}+f_{0,v,j-1}+w\}​$f_{0,u,i-j}$ 不解释，$f_{0,v,j-1}$ 这里为什么要 $j-1$ 呢？因为很显然当前局面只有 $i-1$ 条链，上面讲了连接后会多出来一条，那么 $i-1+1$ 就正好用来转移 $i$ 了。最后的 $w$ 即为当前转移带来的贡献。 $v$ 的状态是 $1$ 的时候和上面差不多，但是因为连接 $u,v$ 后 $u$ 属于了原来就存在的一条链，也就是说没有新增链，那么就没必要 $j-1$ 了。 转移 $1$ 的情况： f_{1,u,i}=\max_v\max_j\{f_{0,u,i-1}+f_{1,v,j}+w\} 计算 $v$ 对 $f_{2,u,i}$ 的贡献 首先如果这两条链连接别的子树了，那么 $v$ 就没有限制了，转移同上： 转移： f_{2,u,i}=\max_v\max_j \{f_{2,u,i-j}+num_{v,j}\} 接下来的就很好办了，因为连接 $u,v$ 最多是一条链，也就是说我们不可能将两条链都放到 $v$ 下来。先考虑 $v$ 状态为 $0$ 的情况，因为连接后 $v$ 属于了 $u$ 原来所在的链(没有新增链)，那么直接算贡献： 转移： f_{2,u,i}=\max_v\max_j\{f_{1,u,i-j}+f_{0,v,j}+w\} 然后考虑 $v$ 状态为 $1$ 的情况，这个时候连接 $u,v$ 会使得 $v$ 原来所在的链和 $u$ 原来所在的链合并为一条链，那么这里的和上面的 $j-1$ 不同，这里因为是少了一条链所有要变成 $j+1$ 。 转移： f_{2,u,i}=\max_v\max_j\{f_{1,u,i-j}+f_{1,v,j+1}+w\} 所有的转移式都得到了，我们来考虑初始化，首先因为是取最大值，我们需要全部初始化为一个很小的负数。然后对于 $f_{0,u,0}$ 这样的状态的值很显然是 $0$ 。 其他的没了，注意这样的 $\rm{DP}$ 复杂度只能让我们最多拿到 $60$ 分。 Code (60 $pts$ ) ：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=3e5+2;const int inf=1e9+9;int n,k,sz[N],head[N],cnt;ll dp[3][N][110];struct Edge&#123;int nxt,to,val;&#125; G[N&lt;&lt;1];void add(int u,int v,int w) &#123; G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,w&#125;,head[v]=cnt;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;void dfs(int u,int fa) &#123; dp[0][u][0]=0;/*初始化*/ for(int e=head[u];e;e=G[e].nxt) &#123; int v=G[e].to,w=G[e].val; if(v==fa) continue; dfs(v,u),sz[u]+=sz[v]; /*利用sz数组优化，同样是O(nk^2)的代码，其他的只能拿到30 ~40，但是这个优化过后是妥妥的60分*/ for(int i=min(sz[u],k);i;--i) &#123; /*计算v下面没有链的情况，计算初始状态带来的贡献*/ dp[2][u][i]=max(dp[2][u][i],dp[1][u][i]+w); dp[2][u][i]=max(dp[2][u][i],dp[1][u][i]+dp[1][v][1]+w); for(int j=min(sz[v],i);j;--j) &#123; /*计算出num*/ ll num=max(dp[0][v][j],max(dp[1][v][j],dp[2][v][j])); /*下面的7个式子就是上文讲的转移了*/ dp[0][u][i]=max(dp[0][u][i],dp[0][u][i-j]+num); dp[1][u][i]=max(dp[1][u][i],dp[1][u][i-j]+num); dp[1][u][i]=max(dp[1][u][i],dp[0][u][i-j]+dp[1][v][j]+w); dp[1][u][i]=max(dp[1][u][i],dp[0][u][i-j]+dp[0][v][j-1]+w); dp[2][u][i]=max(dp[2][u][i],dp[2][u][i-j]+num); dp[2][u][i]=max(dp[2][u][i],dp[1][u][i-j]+dp[0][v][j]+w); dp[2][u][i]=max(dp[2][u][i],dp[1][u][i-j]+dp[1][v][j+1]+w); &#125; /*也是一种特殊情况，可以直接放到上面去的(v下没有链)*/ dp[1][u][i]=max(dp[1][u][i],dp[0][u][i-1]+w); &#125; &#125; if(!sz[u]) dp[0][u][1]=0; ++sz[u];&#125;int main() &#123; IN(n),IN(k); for(int i=1;i&lt;n;++i) &#123; int x,y,v;IN(x),IN(y),IN(v),add(x,y,v); &#125; memset(dp,-0x3f,sizeof(dp));/*极小值*/ ++k;dfs(1,0); printf("%lld\n",max(dp[0][1][k],max(dp[1][1][k],dp[2][1][k]))); /*输出最优👆*/ return 0;&#125; 如果打出了表，你会发现对于单调递增的 $k$ ，关于其的最优解所形成的一定是一个上凸的函数，感性理解的话就是说 $k$ 小的时候我们可以选更多的更大的边，但是随着 $k$ 增大，这些边不够了，我们只能选更小的或者是拆掉一些边(将一条链断成两条增加链数) ，这样子答案就好慢慢变小。 因为是上凸函数，我们可以使用 $\rm{DP}$ 凸优化，带权二分/$wqs$二分套路优化一下就可以过了。 注意二分边界！还有就是需要注意一个点也可以成为一条链的情况！ Code (100 $pts$ )12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=6e5+2;const ll inf=1e18+9;int n,k,head[N],cnt;struct date &#123; ll x;int y; bool operator &lt; (const date&amp;var) const &#123;return x==var.x?y&gt;var.y:x&lt;var.x;&#125; date operator + (const date&amp;var) &#123;return (date)&#123;x+var.x,y+var.y&#125;;&#125; date operator + (const ll&amp;var) &#123;return (date)&#123;x+var,y&#125;;&#125;&#125;dp[3][N];ll number(date var) &#123;return var.x;&#125;struct Edge&#123;int nxt,to,val;&#125; G[N&lt;&lt;1];void add(int u,int v,int w) &#123; G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,w&#125;,head[v]=cnt;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;void check(ll add,int u,int fa) &#123; dp[0][u]=(date)&#123;0,0&#125;, dp[1][u]=(date)&#123;-inf,0&#125;, dp[2][u]=(date)&#123;add,1&#125;; for(int e=head[u];e;e=G[e].nxt) &#123; int v=G[e].to; ll w=G[e].val; if(v==fa) continue; check(add,v,u); date num=max(dp[0][v],max(dp[1][v],dp[2][v])); dp[2][u]=max(dp[2][u],dp[2][u]+num); dp[2][u]=max(dp[2][u],dp[1][u]+(date)&#123;w,0&#125;+max(dp[0][v],dp[1][v]+(date)&#123;-add,-1&#125;)); dp[1][u]=max(dp[1][u],dp[1][u]+num); dp[1][u]=max(dp[1][u],dp[0][u]+(date)&#123;w,0&#125;+max(dp[1][v],dp[0][v]+(date)&#123;add,1&#125;)); dp[0][u]=dp[0][u]+num; &#125;return;&#125;ll wqs(ll sum) &#123; ll l=-sum,r=sum,mid; date now; while(l&lt;r) &#123; mid=(l+r+1)&gt;&gt;1,check(mid,1,0); now=max(dp[0][1],max(dp[1][1],dp[2][1])); if(!(now.y^k)) &#123;l=r=mid;break;&#125; now.y&lt;k?l=mid:r=mid-1; &#125; mid=l;check(mid,1,0); now=max(dp[0][1],max(dp[1][1],dp[2][1])); return now.x-mid*k;&#125;int main() &#123; // freopen("lct2.in","r",stdin); // freopen("P4383.out","w",stdout); IN(n),IN(k);++k; ll sum=0; for(int i=1;i&lt;n;++i) &#123; int x,y,v;IN(x),IN(y),IN(v); add(x,y,v),sum+=abs(v); &#125; printf("%lld\n",wqs(sum)); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>树形DP</tag>
        <tag>wqs二分/带权二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [ZJOI2010]基站选址 线段树优化DP luoguP2065]]></title>
    <url>%2F2019%2F05%2F09%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2605%2F</url>
    <content type="text"><![CDATA[这题居然只有 $luogu$ 有……无法水多倍经验了（逃。 朴素的 $\rm{DP}$ 很简单，设 $f_{i,j}$ 表示前 $i$ 个村庄建了 $j$ 个基站的花费最小值，注意因为是前 $i$ 个，所有完全无视掉后面的所有村庄了。转移的话直接枚举一个 $k$ ，从 $f_{k,j-1}$ 转移过来即可，加上的代价就是中间村庄产生的补偿费用。 那么这样的复杂度就是 $O(n^2k)$ [爆炸] ，我们需要做到的就是如何快速计算中间村庄的补偿，那么外围的 $\rm{DP}$ 复杂度其实是 $O(nk)$ 的，如果中间的补偿可以快速算出那么就可以过掉了。 我们对于每一个村庄 $i$ ，用二分计算出最左边可以覆盖到其的村庄 $st_i$ 和最右边可以覆盖到其的村庄 $ed_i$ ，那么我们从 $i$ 到 $i+1$ 的时候，所有 $ed$ 值为 $i$ 的点都将失去右边的依靠，这个时候对于 $i+1$ 的最优转移点 $k$ ，有对于一个失去”右边依靠”的村庄 $j$ ，如果 $k$ 的范围在 $[1,st_j-1]$ 之间的话那么就要给 $j$ 补偿了。 于是我们考虑用线段树优化，对于这样一个村庄 $j$ ，我们在 $[1,st_j-1]$ 区间集体加上 $w_j$ ，表示决策点如果落在那个区间就要多付出 $w_j$ 的费用。 线段树的每个位置维护的就是 $f_k+$ $i$ 和 $k$ 中间村庄的补偿费用，因为我们每一次的答案就是整个区间的 $\min$ 值了，只是随着 $i$ 的变化线段树维护的值也应当做出变化，所以就会向上面那样更新。 不过有个问题，有个情况没有考虑道：第 $n$ 个村庄不建基站的情况，对于一个小于 $n$ 的 $i$ ，$f_i$ 管不了 $n$ ，那么 $f_n$ 也仅仅表示 $n$ 建站的情况。 所以我们需要在 $n+1$ 的位置上建一个辅助基站，当然 $c_{n+1}=0$ ，这样子就很好计算 第 $n$ 个村庄不建站时全局的花费了 。 Code：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=2e4+2;const int K=1e2+2;const int inf=1e9+9;int head[N],cnt;struct link&#123;int nxt,to;&#125; G[N&lt;&lt;2];void add(int u,int v) &#123;G[++cnt]=(link)&#123;head[u],v&#125;;head[u]=cnt;&#125;int n,k,d[N],c[N],s[N],w[N],f[N],st[N],ed[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;namespace Segment_Tree &#123; #define mid ((l+r)&gt;&gt;1) #define ls(x) ((x)&lt;&lt;1) #define rs(x) ((x)&lt;&lt;1|1) int val[N&lt;&lt;2],tag[N&lt;&lt;2]; void pushdown(int x,int l,int r) &#123; val[ls(x)]+=tag[x],tag[ls(x)]+=tag[x]; val[rs(x)]+=tag[x],tag[rs(x)]+=tag[x]; tag[x]=0; &#125; void build(int x,int l,int r) &#123; tag[x]=0; if(l==r) &#123;val[x]=f[l];return;&#125; build(ls(x),l,mid),build(rs(x),mid+1,r); val[x]=min(val[ls(x)],val[rs(x)]); &#125; void change(int x,int l,int r,int L,int R,int v) &#123; if(L==l&amp;&amp;r==R) &#123;val[x]+=v,tag[x]+=v;return;&#125; if(tag[x]) pushdown(x,l,r); if(R&lt;=mid) change(ls(x),l,mid,L,R,v); else if(L&gt;mid) change(rs(x),mid+1,r,L,R,v); else change(ls(x),l,mid,L,mid,v),change(rs(x),mid+1,r,mid+1,R,v); val[x]=min(val[ls(x)],val[rs(x)]); &#125; int query(int x,int l,int r,int L,int R) &#123; if(L==l&amp;&amp;r==R) return val[x]; if(tag[x]) pushdown(x,l,r); if(R&lt;=mid) return query(ls(x),l,mid,L,R); else if(L&gt;mid) return query(rs(x),mid+1,r,L,R); else return min(query(ls(x),l,mid,L,mid),query(rs(x),mid+1,r,mid+1,R)); &#125;&#125;using namespace Segment_Tree;int main() &#123; IN(n),IN(k); for(int i=2;i&lt;=n;++i) IN(d[i]); for(int i=1;i&lt;=n;++i) IN(c[i]); for(int i=1;i&lt;=n;++i) IN(s[i]); for(int i=1;i&lt;=n;++i) IN(w[i]); ++n;w[n]=d[n]=inf; for(int i=1;i&lt;=n;++i) &#123; st[i]=lower_bound(d+1,d+1+n,d[i]-s[i])-d; ed[i]=lower_bound(d+1,d+1+n,d[i]+s[i])-d; if(d[ed[i]]&gt;d[i]+s[i]) ed[i]--;add(ed[i],i); &#125; int ans=inf; for(int i=1;i&lt;=k;++i) if(i==1) &#123; int res=0; for(int j=1;j&lt;=n;++j) &#123; f[j]=res+c[j]; for(int e=head[j];e;e=G[e].nxt) res+=w[G[e].to]; &#125;ans=f[n]; &#125; else &#123; build(1,1,n); for(int j=1;j&lt;=n;++j) &#123; f[j]=(j&gt;i-1?query(1,1,n,i-1,j-1):0)+c[j]; for(int e=head[j],v;e;e=G[e].nxt) if(st[v=G[e].to]&gt;1) change(1,1,n,1,st[v]-1,w[v]); &#125;ans=min(ans,f[n]); &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 最长上升子序列 状压DP bzoj3591]]></title>
    <url>%2F2019%2F05%2F08%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj3591%2F</url>
    <content type="text"><![CDATA[这题脑洞很大——你需要状压 $\rm{LTS}$ 数组，而且是三进制状压。复杂度很高……大约是 $O(n3^n)$ 左右，当然实际复杂度会小于这个，$1000^+ms$ 是可以通过的。 对于每一个数字，分别记录其三种状态：该数字没有进过 $\rm{LTS}$ 数组记为 $0$ ，该数字在 $\rm{LTS}$ 数组中记为 $1$ ，该数字进过 $\rm{LTS}$ 数组，结果又出来了记为 $2$ 。 设 $f_i$ 表示 $1$ 到 $n$ 所有数字的状态为 $i$ 时的方案数，接下来考虑转移，首先对于这个 $i$ 状态我们还原其 $\rm{LTS}$ 数组，也就是当前位置上为 $1$ 的那些数字。接着我们枚举所有位置上为 $0$ 的数字，并考虑将其插入当前的 $\rm{LTS}$ 当中。替换掉一个状态为 $1$ 的数。 我们就选定这个要被替换的状态为 $1$ 的数为当前 $\rm{LTS}$ 中第一个大于当前要加入的数的数，那么这样替换后 $\rm{LTS}$ 依然满足其性质。 维护一个指针扫一遍就好，碰到需要换的数就将其标记为 $2$ ，然后将当前需要加入的数变成 $1$ 即可。 需要注意的是，我们这里的”加入”并不是只的在原数组中加入，也就是说跟排列什么的几乎扯不上关系，比如说当前序列为 $1,2,3,4,5$ ，$\rm{LTS}$ 数组为 $1,3,4$ ，我们在这里将 $3$ 丢掉，然后加入 $2$ ，其实是不变的。 当所有数字都被考虑过的时候就可以直接统计答案了，普通的 $\rm{LTS}$ 也是所有数字都要考虑一回的。 在做 $\rm{DP}$ 转移的时候我们顺带满足一下题面给出的那些数的递增即可，那么可以保证所有被统计的状态都带有题面要求的 $\rm{LTS}$ 。 Code：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e2+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int n,m,ans,arr[N],pos[N],mul[N];int hep[N],var[N],dp[14348907+3];int main() &#123; freopen("3591.in","r",stdin); freopen("3591.out","w",stdout); IN(n),IN(m); for(int i=0;i&lt;m;++i) IN(arr[i]),--arr[i],pos[arr[i]]=i; mul[0]=dp[0]=1; for(int i=1;i&lt;=n;++i) mul[i]=mul[i-1]*3; for(int i=0;i&lt;mul[n];++i) if(dp[i]) &#123; int state=i,top=0,num=0,per=0; for(int j=0;j&lt;n;++j) &#123; var[j]=state%3,state/=3; if(var[j]) ++num; if(var[j]==1) hep[top++]=j; &#125; if(num==n) &#123;ans+=dp[i];continue;&#125; for(int j=0;j&lt;n;++j) &#123; if(var[j]) continue; if(pos[j]&amp;&amp;!var[arr[pos[j]-1]]) continue; while(hep[per]&lt;j&amp;&amp;per&lt;top) ++per; if(per&gt;=m) continue; state=i+mul[j]; if(per&lt;top) state+=mul[hep[per]]; dp[state]+=dp[i]; &#125; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI2009]双递增序列 线性DP luoguP4728]]></title>
    <url>%2F2019%2F05%2F07%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4728%2F</url>
    <content type="text"><![CDATA[其实这题很容易设出四维的 $\rm{DP}$ ，也就是用 $dp_{i,j,x,y}$ 表示第一个序列的终止位置为 $i$ 且长度为 $x$，第二个序列的终止位置为 $j$ 且长度为 $y$ 是否成立 ，然后也很容易想到降维，枚举当前序列长度 $len$ 的时候知道了 $x$ 就已经知道 $y$ 了—— $y$ 就是 $len-x$ 。也就是说现在的 $DP$ 是 $O(n^3)$ 的，还需要优化。 考虑设 $dp_{i,j}$ 表示第一个序列的最终位置为 $i-1$ 且长度为 $j$ 时第二个序列的最终位置的最小值。枚举当前数字 $i$ ，然后分两种情况进行转移——将 $a_i$ 放到第一个序列末尾 $\texttt{and}$ 将 $a_i$ 放到第二个序列末尾。 放到第一个序列末尾很好想：因为当前第一个序列的结尾处就是 $a_{i-1}$ ，比较一下大小直接转移就好了： dp_{i,j}=min(dp_{i,j},dp_{i-1,j-1}) \ \ \ (a_i>a_{i-1})因为第二个序列的末尾没变，所有直接转移就好。 接下来考虑将第 $i$ 个数放到第二个序列末尾的情况，其实第一个序列和第二个序列没区别，当然除了名字上有一个字的差异，假设第 $i-1$ 个数是第二个序列末尾，当前第一个序列的长度为 $j-1$ ，那么第二个序列的长度因该就是 $(i-1)-(j-1)$ 了，因为我们假设了第 $i-1$ 个数是第二个序列末尾，那么 $dp_{i-1,i-j}$ 又可以被解释为第二个序列的末尾为 $i-1$ 个数且第二个序列的长度为 $i-j$ 的时候第一个序列的末尾的最小值 ，如果这个最小值小于 $a_i$ ，说明 $a_i$ 可以接到第一个序列前面，那么这个时候第二个序列的末尾为 $a_{i-1}$ ，显然又有转移： dp_{i,j}=min(dp_{i,j},a_{i-1}) \ \ \ (a_i>dp_{i-1,i-j})开始的时候我们将 $dp$ 数组赋成极大值，然后最后判断一下 $dp_{n,n/2}$ 这个状态变小没有就好。 Code:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=2e3+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int a[N],f[N][N];int solve() &#123; int n;IN(n); memset(f,0x3f,sizeof(f)); for(int i=1;i&lt;=n;++i) IN(a[i]); a[0]=f[0][0]=-1; for(int i=1;i&lt;=n;++i) &#123; f[i][0]=a[i]; for(int j=1;j&lt;=i&amp;&amp;j&lt;=n/2;++j) &#123; if(a[i]&gt;a[i-1]) f[i][j]=min(f[i][j],f[i-1][j-1]); if(a[i]&gt;f[i-1][i-j]) f[i][j]=min(f[i][j],a[i-1]); &#125; &#125;return f[n][n/2]&lt;0x3f3f3f3f;&#125;int main() &#123; int T;IN(T); while(T--) puts(solve()?"Yes!":"No!"); return 0;&#125; 感觉这道题的确很绕……=。=]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DP进阶必刷题单]]></title>
    <url>%2F2019%2F05%2F07%2FDP%E8%BF%9B%E9%98%B6%E5%BF%85%E5%88%B7%E9%A2%98%E5%8D%95%2F</url>
    <content type="text"><![CDATA[在此输入你的密码以便阅读全文 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HEOI2013]SAO 组合数学+树形DP luoguP4099]]></title>
    <url>%2F2019%2F05%2F06%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4099%2F</url>
    <content type="text"><![CDATA[$loj$ 上没有此题，$bzoj$ 上是权限题，对于不上 $yzoj$ 的我来说只能去洛谷做题了：转送门😄 。 我们先不考虑边的权值(&lt;与&gt;)，这样子 $n-1$ 条边组成的就是树了，很显然是需要我们求出这棵树的合法拓扑序的个数，考虑使用 $\rm{DP}$ ，对于边的方向(即&lt;,&gt;) ，我们分类讨论即可。 首先的一个想法就是设 $f_u$ 表示点 $u$ 的子树的合法拓扑序的总数，但是这个时候如何计算呢，对于一个 $u$ 的儿子 $v$ ，我们虽然知道 $u$ 和 $v$ 的攻克的前后关系，但是合并答案貌似并不好合并。这个时候我们增加一维 $j$ ，$f_{u,j}$ 表示 $u$ 的子树的所有合法拓扑序中 $u$ 在第 $j$ 位上的总状态数。 也就是说，对于一个必须在 $u$ 前面攻克的关卡 $v$ ，我们考虑枚举一个 $j$ ，$v$ 子树中 $j$ 个结点在合并 $u,v$ 后放到 $u$ 前面，另外 $sz_v-j$ 个放到 $u$ 后面，然后枚举一个 $k$ ，表示当前的 $v$ 排在 $v$ 子树的拓扑序中的第 $k$ 位，只有 $k\leq j$ 的时候 $v$ 才可以转移 $u$ ，因为这个时候 $v$ 在 $u$ 前面。 现在再来考虑$“$ $j$ 个结点放在 $u$ 前面 $”$ 的方案数和$“$ $sz_v-j$ 个结点放在 $u$ 后面的方案数$”$，这个显然可以用组合数算，合并 $v$ 的子树后，$u$ 的排名从 $i$ 变成了 $i+j$ ，也就是说我们需要将 $j$ 个乱序插入到 $u$ 前面 $i+j-1$ 个数中，方案数显然为 $C_{i+j-1}^{j}$ ，那么现在总节点数显然为 $sz_u+sz_v$ (现在 $sz_u$ 和 $sz_v$ 还没有并在一起) ，$u$ 后面理所当然有 $sz_u+sz_v-i-j$ 个位置，将 $sz_v-j$ 个数插进去的方案数显然为 $C_{sz_u+sz_v-i-j}^{sz_v-j}$ 个，这两个数再乘上 $f_{u,i}$ 和 $f_{v,k}$ 就好了，这一次合并后 $u$ 的位置显然到了 $i+j$ ，所以 $f_{u,i+j}$ 显然要加上这一组贡献。 经整理后的转移方程如下： pls(f_{u,i+j},f_{u,i}\cdot f_{v,k}\cdot C_{i+j-1}^{j}\cdot C_{sz_u+sz_v-i-j}^{sz_v-j})代码就是这样写： 1234for i=1 to sz[u] for j=1 to sz[v] for k=1 to j pls(f[u][i+j],f[u][i]*f[v][k]*C[i+j-1][j]*C[sz[u]+sz[v]-i-j][sz[v]-j]) 这是 $n^3$ 的，过不去。考虑前缀和优化，几下 $f_v$ 的前缀和，最后的一层循环就可以直接丢掉了。 这个就是 $v$ 要在 $u$ 前面的情况，$u$ 在 $v$ 前面的情况和这个差不多，不过转移的时候 $j$ 就要从 $0$ 开始了，因为那个时候 $u$ 前面是可以不多放任何东西的，还有就是 $u$ 在 $v$ 前面的时候注意 $k\geq j$ 时才可以转移 ! 最后的答案就是 $\sum\limits_{i=1}^{n} f_{1,i}$ 啦。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e3+9;const int mod=1e9+7;int head[N],cnt;struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;1];int C[N][N],f[N][N],pre[N][N],suf[N][N],sz[N],g[N];void add(int u,int v,int w) &#123; G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,w^1&#125;,head[v]=cnt;&#125;namespace OI &#123; void pls(int&amp;x,int y) &#123;x+=y;if(x&gt;=mod)x-=mod;&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI;void dfs(int u,int fa) &#123; sz[u]=f[u][1]=1; for(int l=head[u];l;l=G[l].nxt) &#123; int v=G[l].to,w=G[l].val; if(v==fa) continue; dfs(v,u); memset(g,0,sizeof(g)); if(w) &#123; for(int i=1;i&lt;=sz[u];++i) for(int j=1;j&lt;=sz[v];++j) pls(g[i+j],1ll*f[u][i]*pre[v][j]%mod*C[i+j-1][j]%mod *C[sz[u]+sz[v]-i-j][sz[v]-j]%mod); &#125; else &#123; for(int i=1;i&lt;=sz[u];++i) for(int j=0;j&lt;=sz[v];++j) pls(g[i+j],1ll*f[u][i]*suf[v][j+1]%mod*C[i+j-1][j]%mod *C[sz[u]+sz[v]-i-j][sz[v]-j]%mod); &#125; sz[u]+=sz[v]; memcpy(f[u],g,sizeof(g)); &#125; pre[u][0]=suf[u][sz[u]+1]=0; for(int i=1;i&lt;=sz[u];++i) pre[u][i]=(pre[u][i-1]+f[u][i])%mod; for(int i=sz[u];i&gt;=1;--i) suf[u][i]=(suf[u][i+1]+f[u][i])%mod;&#125;int solve() &#123; memset(head,0,sizeof(head)),cnt=0; memset(f,0,sizeof(f)); int n;IN(n); for(int i=1;i&lt;n;++i) &#123; int u,v;char sign; IN(u),sign=getchar(),IN(v); add(u+1,v+1,sign=='&lt;'?0:1); &#125; dfs(1,0); int ans=0; for(int i=1;i&lt;=n;++i) pls(ans,f[1][i]); return ans;&#125;int main() &#123; /*预处理组合数*/ for(int i=0;i&lt;=N-2;++i) C[i][0]=1; for(int i=1;i&lt;=N-2;++i) for(int j=1;j&lt;=N-2;++j) C[i][j]=(C[i-1][j]+C[i-1][j-1])%mod; int T;IN(T); while(T--) printf("%d\n",solve()); return 0;&#125; 可能有人会问，如果 $u$ 的儿子 $v$ 下面的边全都是 $&gt;$ ，并且 $u$ 连向 $v$ 的边也是 $&gt;$ ，那么这个时候 $v$ 以及其子树的所有点都必须在 $u$ 前面完成，在转移的时候为什么可以 $“$ 提出 $j$ 个结点放到 $u$ 前面 $”$ 呢？ 其实想想就可以明白，在向上统计答案的时候对于一个 $v$ 的儿子 $a$ ，我们只统计了合并后 $a$ 在 $v$ 前面的情况，同样在 $u$ 统计 $v$ 时也只是统计了合并后 $v$ 在 $u$ 前面的情况，所有我们也只是统计了 $“$ $a$ 在 $v$ 前面且 $v$ 在 $u$ 前面 $”$ 的情况，所有被统计的情况一定是合法的。]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>组合数学</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HAOI2018]苹果树 组合数学 loj2526]]></title>
    <url>%2F2019%2F05%2F05%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2526%2F</url>
    <content type="text"><![CDATA[有趣的题目，可爱的传送门：戳这呢=￣ω￣= 刚开始往概率 $\rm{DP}$ 想了，发现对于一个点的概率是好算，但是如果求贡献的话就会很难办。最后万般无赖的点开了题解，发现居然是……组合数学？其实和 $\rm{DP}$ 没有半毛钱关系。 我们考虑一个节点 $i$ ，我们枚举其子树大小 $j$ 。现在考虑最终有多少种合法的情况可以使得 $i$ 的子树大小恰好为 $j$ 。 易知节点数为 $n$ 的二叉树的总形态数为 $n!$ ，而且 $i$ 子树下的所有节点的编号一定要大于 $i$ ，我们考虑”先将 $i$ 子树构造出来再填入节点”的过程，子树的形态数显然为 $j!$ ，然后我们只能选剩下的 $n-i$ 个节点(编号要比 $i$ 大) ，填入剩下的 $j-1$ 个位置( $i$ 占了一个位置) ，显然这样的方案数为 $C_{n-i}^{j-1}$ 。 这样的一个 $i$ ，其子树大小为 $j$ ，那么它可以做出多少贡献呢？考虑 $fa_i \Rightarrow i$ 这条边会经过多少次，显然是 $j\cdot(n-j)$ 次( $j$ 为子树节点个数，$n-j$ 为上面的节点个数) ，也就是说这样的方案可以造成 $j\cdot (n-j)$ 的贡献。 那么现在 $i$ 的子树得到确定了，我们将 $i$ 以及其子树看做一个点，我们考虑 $1$ 到 $i$ 这些节点，它们可以以任意形态组成一棵树，方案数是 $i!$ 。 接着我们需要将剩下的 $n-j-(i-1)$ 个节点挂到树上去。对于第 $i$ 个挂到树上的点，它有 $i$ 个位置可以挂。但是因为 $i$ 一定要占一个位置，所以这个节点只有 $i-1$ 个位置可以挂了，第二个多出来的节点就有 $i$ 个位置可以挂……第 $k$ 个显然有 $i-2+k$ 个位置可以挂。也就是说这些点挂上去的总方案数为 $\prod\limits_{k=1}^{n-j-(i-1)} (i-2+k)$ 。 将上面的乘起来就是这一组 $i,j$ 对答案造成的贡献了： j!\cdot C_{n-i}^{j-1}\cdot j\cdot (n-j)\cdot i!\cdot\prod\limits_{k=1}^{n-j-(i-1)} (i-2+k)$\prod\limits_{k=1}^{n-j-(i-1)} (i-2+k)$ 比较不好计算，但是简单的变化后发现这个是和 $(n-j-1)!/(i-2)!$ 等价的，我们带进原式子。 j!\cdot C_{n-i}^{j-1}\cdot j\cdot (n-j)\cdot i!\cdot(n-j-1)!/(i-2)!\\\\=j!\cdot C_{n-i}^{j-1}\cdot j\cdot (n-j)\cdot i\cdot (i-1)\cdot(n-j-1)!\\\\=j!\cdot C_{n-i}^{j-1}\cdot j\cdot i\cdot (i-1)\cdot (n-j)!这样就很好算了，我们预处理组合数和阶乘，上面的式子 $O(1)$ 算~ 代码很短。 Code：1234567891011121314151617181920212223242526272829303132333435363738#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=2e3+2;const int inf=1e9+9;int n,p,ans,fac[N],C[N][N];namespace OI &#123; void pls(int&amp;x,int y) &#123;x+=y;x%=p;&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI;int main() &#123; IN(n),IN(p); fac[1]=1; for(int i=2;i&lt;=n;++i) fac[i]=1ll*fac[i-1]*i%p; for(int i=0;i&lt;=n;++i) C[i][0]=1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=i;++j) C[i][j]=(C[i-1][j]+C[i-1][j-1])%p; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n-i+1;++j) pls(ans,(ll)fac[j]*fac[n-j]%p*C[n-i][j-1]%p*(i*(i-1))%p*j%p); printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [六省联考2017]分手是祝愿 概率DP loj2145]]></title>
    <url>%2F2019%2F05%2F05%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2145%2F</url>
    <content type="text"><![CDATA[概率神仙题的传送门：别戳偏了 设 $f_i$ 表示还剩下 $i$ 盏灯亮到还剩下 $i-1$ 盏灯亮的期望操作次数，这个时候有 $\frac{i}{n}$ 的概率按中亮的，但是没有按中亮的的话就只能退到 $f_{i+1}$ 。不难列出转移方程： f_i=\frac{i}{n}+(1-\frac{i}{n})\cdot (1+f_i+f_{i+1})因为转移式中有个 $f_i$ ，有些不好办……推一推式子康康。 f_i=\frac{i}{n}+1\cdot (1+f_i+f_{i+1})-\frac{i}{n}\cdot (1+f_i+f_{i+1})\\\\f_i=\frac{i}{n}+1+f_i+f_{i+1}-\frac{i}{n}-\frac{i}{n}f_i-\frac{i}{n}f_{i+1}\\\\f_i=1+f_i+f_{i+1}-\frac{i}{n}f_i-\frac{i}{n}f_{i+1}\\\\\frac{i}{n}f_i=1+f_{i+1}-\frac{i}{n}f_{i+1}\\\\f_i=\frac{1+f_{i+1}-\frac{i}{n}f_{i+1}}{\frac{i}{n}}\\\\f_i=\frac{n\cdot(1+f_{i+1})-i\cdot f_{i+1}}{i}\\\\f_i=\frac{n+(n-i)\cdot f_{i+1}}{i}\\\\f_i=1+\frac{(n-i)\cdot (f_{i+1}+1)}{i}预处理逆元就可以直接计算了，记得最后乘上 $n!$ 。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e5+7;const int inf=1e9+9;const int p=100003;int n,k,step,a[N];long long ans,f[N],inv[N];vector&lt;int&gt; g[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int main() &#123; IN(n),IN(k); inv[0]=0,inv[1]=1; for(int i=2;i&lt;=n;++i) inv[i]=(long long)(p-p/i)*inv[p%i]%p; for(int i=1;i&lt;=n;++i) IN(a[i]); for(int i=1;i&lt;=n;++i) for(int j=i;j&lt;=n;j+=i) g[j].push_back(i); for(int i=n;i&gt;=1;--i) if(a[i]) &#123; for(int j=0;j&lt;g[i].size();++j) a[g[i][j]]^=1; ++step; &#125; if(step&lt;=k) ans=step; else &#123; f[n]=1; for(int i=n-1;i&gt;1;--i) f[i]=(1ll+(1ll*n-i)*(f[i+1]+1)*inv[i])%p; for(int i=step;i&gt;k;--i) ans=(ans+f[i])%p; ans=(ans+k)%p; &#125; for(int i=1;i&lt;=n;++i) ans=(1ll*i*ans)%p; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>概率</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SCOI2014]方伯伯的玉米田 树状数组优化DP luoguP3287]]></title>
    <url>%2F2019%2F05%2F04%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3287%2F</url>
    <content type="text"><![CDATA[以后不要被这种傻逼题给蒙骗了。传送门：方伯伯的传送门=。= 首先要明确一个道理，每一次拔高的右端点一定是 $n$ ，如果是只拔高中间部分，右边的又要尽可能大于中间部分，索性一起拔了，这一定是最优的。 设 $f_{i,j}$ 表示第 $i$ 个玉米被拔高了 $j$ 次时以 $i$ 结尾的最长不下降子序列长度，容易得出转移方程： f_{i,j}=\max\{f_{k,l}+1\} \ \ (k]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>树状数组</tag>
        <tag>二维树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SHOI2014]概率充电器 概率DP loj2192]]></title>
    <url>%2F2019%2F05%2F02%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2192%2F</url>
    <content type="text"><![CDATA[传送门在这：我是传送门$QwQ$ 其实不难发现，我们需要算的就是 $\sum a_i$ (其中 $a_i$ 为点 $i$ 的通电概率) 。我们需要算出每个点的通电概率即可。因为有些点可以自己发电，所以我们要分别考虑父亲和儿子的通电情况。 因为直接设通电概率有些棘手，我们设 $f_i$ 表示点 $i$ 的儿子没有向点 $i$ 通电的概率，这个比较好算，我们顺带算上点 $i$ 自己发电的概率。 枚举每一个儿子，对于这个儿子只有两种情况：该儿子没有通上电，该儿子通上电了且传送失败。两种情况的概率都很好算。我们可以列出转移方程： f_u=(1-q_u)\cdot \prod (f_v+(1-f_v)\cdot(1-G_i.p))其中 $(1-q_u)$ 显然为该点本身不通电的概率，然后枚举儿子 $v$ ，$f_v$ 就是该儿子本来就没有通上电的概率，$(1-f_v)\cdot(1-G_i.p)$ 就是通上电的传送失败(注：$G_i.p$ 是当前连接 $u,v$ 的边的通电概率) 。 那么如何计算父亲传来的电呢？设 $g_i$ 表示点 $i$ 的父亲没有向点 $i$ 通电的概率。计算一下父节点不通电的概率，注意不要计算上该儿子的贡献，不然会乱。计算完不通电的概率后分上面两种情况讨论即可。 res=g_u\cdot f_v / (f_v+(1-f_v)\cdot(1-G_i.p))\\\\g_v=res+(1-res)\cdot(1-G_i.p)两边 $dfs$ 就可以搞定。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=5e5+7;const int inf=1e9+9;double ans,f[N],g[N],q[N];int head[N],cnt,n,tot;struct Edge&#123;int nxt,to;double p;&#125;G[N&lt;&lt;1];void add(int x,int y,double p) &#123;G[++cnt]=(Edge)&#123;head[x],y,p&#125;,head[x]=cnt;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;void dfs1(int u,int fa) &#123; f[u]=1-q[u]; for(int i=head[u],v;i;i=G[i].nxt) if((v=G[i].to)!=fa) dfs1(v,u),f[u]*=(f[v]+(1-f[v])*(1-G[i].p));&#125;void dfs2(int u,int fa) &#123; for(int i=head[u],v;i;i=G[i].nxt) if((v=G[i].to)!=fa) &#123; double res=g[u]*f[u]/(f[v]+(1-f[v])*(1-G[i].p)); g[v]=res+(1-res)*(1-G[i].p);dfs2(v,u); &#125;&#125;int main() &#123; IN(n); for(int i=1;i&lt;n;++i) &#123; int x,y,p;IN(x),IN(y),IN(p); add(x,y,p/100.0),add(y,x,p/100.0); &#125; for(int i=1,x;i&lt;=n;++i) IN(x),q[i]=x/100.0; dfs1(1,1); g[1]=1.0,dfs2(1,1); for(int i=1;i&lt;=n;++i) ans+=1-f[i]*g[i]; printf("%.6f\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>概率</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2015]寿司晚宴 状压DP loj2131]]></title>
    <url>%2F2019%2F05%2F01%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2131%2F</url>
    <content type="text"><![CDATA[首先，两个数不互质同理于两个数的质因子集合没有交集。考虑一下 $n\leq 30$ 的情况，可以发现这里面的质数也只有 $10$ 个，那么我们将每一个寿司分解质因数，然后将质因子压成一个状态。 设 $f[s1][s2]$ 表示小 $\rm{G}$ 吃了的寿司的状态为 $s1$ ，小 $\rm{W}$ 吃了的寿司的状态为 $s2$ 时的方案数。转移的时候枚举寿司，分别判断两个人是否能吃然后转移即可。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e2+2;const int mul=1024;const int pri[]=&#123;0,2,3,5,7,11,13,17,19,23,29&#125;;int n,s[N];ll p,f[2][mul][mul];namespace OI &#123; void pls(ll&amp;x,ll&amp;y) &#123;x+=y;if(x&gt;p)x-=p;&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI;int main() &#123; // freopen("1.in","r",stdin); // freopen("1.out","w",stdout); IN(n),IN(p); for(int i=2;i&lt;=n;++i) for(int j=1;j&lt;=10;++j) if(!(i%pri[j])) s[i]|=1&lt;&lt;(j-1); f[1][0][0]=1; for(int i=2;i&lt;=n;++i) &#123; int now=i&amp;1,lst=!now; memcpy(f[now],f[lst],sizeof(f[lst])); for(int s1=0;s1&lt;mul;++s1)for(int s2=0;s2&lt;mul;++s2) &#123; if(!f[lst][s1][s2]) continue; if(!(s2&amp;s[i])) pls(f[now][s1|s[i]][s2],f[lst][s1][s2]); if(!(s1&amp;s[i])) pls(f[now][s1][s2|s[i]],f[lst][s1][s2]); &#125; &#125; long long ans=0; for(int s1=0;s1&lt;mul;++s1) for(int s2=0;s2&lt;mul;++s2) pls(ans,f[n&amp;1][s1][s2]); printf("%lld\n",ans); return 0;&#125; 可以知道 $n\leq 500$ 的时候，每一个数最多带上一个大于等于 $23$ 的质因子。我们首先将所有的寿司分为两类：带了大于等于 $23$ 的质因子的和没带的。 没带的显然可以向上面那样转移。那么带了的呢？这个显然不能压缩吧。 我们考虑将带了同样的大于等于 $23$ 的质因子的分成一组，这一组要不小 $\rm{G}$ 吃小 $\rm{W}$ 不吃，要不小 $\rm{W}$ 吃小 $G$ 不吃。分别讨论即可。 设 $f1[s1][s2]$ 表示这一组是小 $\rm{G}$ 吃时，小 $\rm{G}$ 吃了的寿司的状态为 $s1$ ， 小 $\rm{W}$ 吃了的寿司的状态为 $s2$ 时的方案数。同理，设 $f2[s1][s2]$ 表示这一组是小 $\rm{W}$ 吃时，小 $\rm{G}$ 吃了的寿司的状态为 $s1$ ， 小 $\rm{W}$ 吃了的寿司的状态为 $s2$ 时的方案数。分别转移就好了。 12345678910111213141516for(int i=pos+1;i&lt;=n;++i) &#123; /*枚举这些寿司*/ if(a[i].t!=a[i-1].t) /*大质因子不同了*/ memcpy(f1,f,sizeof(f)),memcpy(f2,f,sizeof(f)); for(int s1=M-1;~s1;--s1)for(int s2=M-1;~s2;--s2) &#123; /*倒着枚举所以没用滚动数组*/ /*所谓的分别转移*/ if(!(s2&amp;a[i].s)) pls(f1[s1|a[i].s][s2],f1[s1][s2]); if(!(s1&amp;a[i].s)) pls(f2[s1][s2|a[i].s],f2[s1][s2]); &#125; /*这一组结束了，需要合并答案*/ if(a[i].t!=a[i+1].t||i==n) for(int s1=0;s1&lt;M;++s1)for(int s2=0;s2&lt;M;++s2) /*因为f1[s1][s2]和f2[s1][s2]都重复算了一遍原来的 f[s1][s2]，所以减掉后再取膜*/ f[s1][s2]=(f1[s1][s2]+f2[s1][s2]-f[s1][s2]+p)%p;&#125; Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=5e2+2;const int M=256;const int pri[]=&#123;0,2,3,5,7,11,13,17,19&#125;;ll p,f[M][M],f1[M][M],f2[M][M];struct Node &#123;int t,s;&#125;a[N];bool cmp(Node a,Node b) &#123;return a.t&lt;b.t;&#125;namespace OI &#123; void pls(ll&amp;x,ll&amp;y) &#123;x+=y;if(x&gt;=p)x%=p;&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI;int main() &#123; int n;IN(n),IN(p); for(int i=2;i&lt;=n;++i) &#123; a[i].t=i; for(int j=1;j&lt;=8;++j)if(!(i%pri[j])) &#123; a[i].s|=1&lt;&lt;(j-1),a[i].t/=pri[j]; while(!(a[i].t%pri[j])) a[i].t/=pri[j]; &#125; &#125; f[0][0]=1; sort(a+2,a+n+1,cmp); int pos=2; while(a[pos].t==1) ++pos;--pos; for(int i=2;i&lt;=pos;++i) &#123; for(int s1=M-1;~s1;--s1)for(int s2=M-1;~s2;--s2) &#123; if(!(s2&amp;a[i].s)) pls(f[s1|a[i].s][s2],f[s1][s2]); if(!(s1&amp;a[i].s)) pls(f[s1][s2|a[i].s],f[s1][s2]); &#125; &#125; for(int i=pos+1;i&lt;=n;++i) &#123; if(a[i].t!=a[i-1].t) memcpy(f1,f,sizeof(f)),memcpy(f2,f,sizeof(f)); for(int s1=M-1;~s1;--s1)for(int s2=M-1;~s2;--s2) &#123; if(!(s2&amp;a[i].s)) pls(f1[s1|a[i].s][s2],f1[s1][s2]); if(!(s1&amp;a[i].s)) pls(f2[s1][s2|a[i].s],f2[s1][s2]); &#125; if(a[i].t!=a[i+1].t||i==n) for(int s1=0;s1&lt;M;++s1)for(int s2=0;s2&lt;M;++s2) f[s1][s2]=(f1[s1][s2]+f2[s1][s2]-f[s1][s2]+p)%p; &#125; long long ans=0; for(int s1=0;s1&lt;M;++s1) for(int s2=0;s2&lt;M;++s2) pls(ans,f[s1][s2]); printf("%lld\n",(ans+p)%p); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [JSOI2016]灯塔 决策单调性&DP loj2074]]></title>
    <url>%2F2019%2F04%2F30%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2047%2F</url>
    <content type="text"><![CDATA[其实这道题是 $\rm{POI}$ 的原题，$loj$ 传送门链接：在这呢o(￣︶￣)o 刚开始肯定还是看不出这题是什么 $\rm{DP}$ ，感觉很诡异，但是推一推自然就出来了： h_j \leq h_i+p-\sqrt{|i−j|}\\\\p\geq h_j-h_i +\sqrt{|i−j|}\\\\p=\max\{ h_j-h_i +\sqrt{|i−j|}\}设 $f_i$ 表示 $i$ 的 $p$ 值，那么继续： f_i=\max\{ h_j +\sqrt{|i−j|}\}-h_i发现绝对值很烦人，将绝对值拆开。 f_i=\max(\max\limits_{j=1}^{i}\{h_j +\sqrt{i−j}\},\max\limits_{j=i}^{n}\{h_j +\sqrt{j-i}\})-h_i原序列翻转一下就可以直接计算后面的式子，也就是说我们只需要考虑第一个： f_i=\max\limits_{j=1}^{i}\{h_j +\sqrt{i−j}\}-h_i假设对于 $i$ 来说 $j$ 是最优的决策，那么如果存在一个小于 $j$ 的 $k$ ，是否在转移一个大于 $i$ 的 $l$ 会更优呢？显然不会，可以知道 $i-k$ 显然是大于 $i-j$ 的，而且根号是增长的越来越慢的。所以如果在 $i$ 时 $k$ 就没有 $j$ 优了，那么在以后所以大于 $i$ 的 $l$ 转移时 $k$ 也不可能比 $j$ 优。 也就是说上面的式子满足决策单调性，那么我们可以 $O(n\log n)$ 愉快求出了。 这里说明两个方法： 1. 单调队列维护三元组，三元组包含 $v$ (决策点 $v$) ，$l$ (决策点 $v$ 作为最优决策点的最左端点) ，$r$ (决策点 $v$ 作为最优决策点的最右端点) ，每一次排除掉最右端点小于 $i$ 的元素(因为该元素已经没用了) ，插入队列的时候去掉完全劣于 $i$ 的，然后对于折中的二分即可。(具体参见诗人小 $\rm{G}$ 的题解) 。 2. 分治计算答案。设 $slove(al,ar,vl,vr)$ 表示在原数组 $al$ 到 $ar$ 这段区间的最优决策点位于 $vl$ 到 $vr$ 区间。我们每一次找到 $al$ 到 $ar$ 的中间点，也就是 $mid$ ，然后在 $vl$ 到 $vr$ 寻找最优的决策点更新 $f_{mid}$ ( $\rm{DP}$ 数组)，设这个最优点为 $g$ 。因为满足决策单调性，$al$ 到 $mid-1$ 的所有点的最优决策点一定在 $vl$ 到 $g$ 之间，右边 $mid+1$ 到 $ar$ 的也同理，就这么分治下去即可。 实际运用中分治的效率不如三元组，但是代码却好写得多，很短，并且调试难度也大大降低，所以最终我选择了分治……分治的具体细节看代码。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;cmath&gt;#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=6e5+2;const int inf=1e9+9;int n;ll a[N];long double f1[N],f2[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;void solve_f1(int al,int ar,int vl,int vr) &#123; if(al&gt;ar) return; int mid=(al+ar)&gt;&gt;1,g=0; f1[mid]=a[mid]; for(int i=vl;i&lt;=min(vr,mid);++i) &#123; long double calc=a[i]+sqrt(double(mid-i)); if(calc&gt;f1[mid]) f1[mid]=calc,g=i; &#125; if(!g) g=mid;f1[mid]-=a[mid]; solve_f1(al,mid-1,vl,g),solve_f1(mid+1,ar,g,vr);&#125;void solve_f2(int al,int ar,int vl,int vr) &#123; if(al&gt;ar) return; int mid=(al+ar)&gt;&gt;1,g=0; f2[mid]=a[mid]; for(int i=vr;i&gt;=max(vl,mid);--i) &#123; long double calc=a[i]+sqrt(double(i-mid)); if(calc&gt;f2[mid]) f2[mid]=calc,g=i; &#125; if(!g) g=mid;f2[mid]-=a[mid]; solve_f2(al,mid-1,vl,g),solve_f2(mid+1,ar,g,vr);&#125;int main() &#123; IN(n); for(int i=1;i&lt;=n;++i) IN(a[i]); solve_f1(1,n,1,n),solve_f2(1,n,1,n); /*最终没有翻转序列，而是选择做两遍分治*/ for(int i=1;i&lt;=n;++i) printf("%lld\n",(ll)ceil(max(f1[i],f2[i]))); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>决策单调性</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2016]国王饮水记 斜率优化DP loj2087]]></title>
    <url>%2F2019%2F04%2F29%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2087%2F</url>
    <content type="text"><![CDATA[可爱的题目传送门：戳我戳我·(╹▽╹)· 说实话这道题如果单看斜率优化 $\texttt{DP}$ ，但是如果没猜到那么多结论，你是怎么也想不到”斜率优化”是从哪里来的。那么我们开始猜结论吧…… 1. 初始水位小于 $h_1$ 的没有用。 这很显然。 2. 如果 $n\leq k$ ，那么只需要将所以大于 $h_1$ 的跟 $1$ 城市连就好了。 每次连接的城市数越少贡献越大，那么每个逐一连一次一定是最优方案。 3. 每次操作必然跟 $1$ 城市有关系。 不然没贡献。 4. 除了 $1$ 号城市，其他每个城市最多连一次。 因为连过一次的城市的水位已经和 $1$ 城市一样了，简单点说肯定就是废了。 5. 每次连的所有城市中最小的 $h_i$ 必然大于上一次链接的最大的 $h_i$ 。 这很显然，不然不满足最优方案。 6. 将所以城市按水位排序后，每次选择的必然是连续一段区间。 和上一个差不多。 7. 每次选择的区间必然和上一次的选择区间接触。 这很显然。 8. 每次选择的区间的长度必定单调不增。 满足最优，都说了每次连接的城市越少贡献越大。 那么显然就变成了一个区间问题了，我们需要将这个区间分成若干块。 设 $f_{i,j}$ 表示排序后前 $i$ 个城市联通了 $j$ 次后 $1$ 号城市的最大水位高度。那么转移直接枚举一个 $k$ ，在新的一次连接中连接了 $k+1$ 到 $i$ 这些城市。转移方程显然： f_{i,j}=\frac{f_{k,j-1}+(s_i-s_k)}{i-k+1}*注：$s_i$ 为前缀和。 上式的复杂度为 $O(n^2k)$ ，肯定爆炸。但是这个是可以斜率优化的： \frac{f_{k,j-1}+(s_i-s_k)}{i-k+1} =\frac{s_i-(s_k-f_{k,j-1})}{i-(k-1)}\Rightarrow \frac{Y(i)-Y(k)}{X(i)-X(k)}然后通过第 $8$ 条性质可以得知 $\texttt{DP}$ 是有决策单调性的，故复杂度为 $O(nk)$ 。因为恶心的高精度小数的运算还需要 $O(p)$ 的复杂度，所以最终总时间复杂度为 $O(nkp)$ 。 我们发现 $k$ 有 $10^9$ ，所以复杂度带 $k$ 的一定假掉了。 那么观察第 $2$ 条性质会发现，如果 $k$ 大于 $n$ 了直接将 $k$ 设为 $n$ 就好了。也就是说复杂度应该为 $O(n^2p)$ ，这样就是 $86$ 分，通过数据来看会发现这个倾向于大众分，一车厢的人都是这个分数。 那么如果想要 $\texttt{AC}$ 的话需要最后一条很迷的性质： 9. 因为 $h$ 各不同，选择的区间最多只有 $14$ 个区间长度大于 $1$ ，其他的区间均等于 $1$ 。 很迷，准确的说这样的区间是 $O(\log\frac{nh}{\min_i\{h_i-h_{i-1}\}})$ 个。 证明不会……但是这里写了证明(唯一的且很迷的证明)：哈哈我是传送门O(∩_∩)O 那么就丢代码了，实际上是需要高精小数的，这里先给出一个除去高精小数板子的版本： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=8e3+2;Decimal ans;int n,k,p,lim,h[N],s[N],pre[N][16],tot;int q[N],head,tail;double f[N][16];struct point&#123;double x,y;&#125;t[N];double slope(point a,point b) &#123;return (a.y-b.y)/(a.x-b.x);&#125;Decimal solve(int i,int j) &#123; if(!j) return h[1]; return (solve(pre[i][j],j-1)+s[i]-s[pre[i][j]])/(i-pre[i][j]+1);&#125;int main() &#123; scanf("%d%d%d%d",&amp;n,&amp;k,&amp;p,&amp;h[tot=1]); for(int i=2;i&lt;=n;++i) &#123; scanf("%d\n",&amp;h[i]); if(h[i]&gt;h[1]) h[++tot]=h[i]; &#125; n=tot;sort(&amp;h[1],&amp;h[n+1]); for(int i=1;i&lt;=n;++i) f[i][0]=h[1]; for(int i=1;i&lt;=n;++i) s[i]=s[i-1]+h[i]; k=min(k,n),lim=min(k,14); for(int j=1;j&lt;=lim;++j) &#123; q[head=tail=1]=1; for(int i=1;i&lt;=n;++i) t[i]=(point)&#123;i-1,s[i]-f[i][j-1]&#125;; for(int i=2;i&lt;=n;++i) &#123; point now=(point)&#123;i,s[i]&#125;; while(head&lt;tail&amp;&amp;slope(now,t[q[head]])&lt;slope(now,t[q[head+1]])) ++head; f[i][j]=(f[q[head]][j-1]+s[i]-s[q[head]])/(i-q[head]+1); pre[i][j]=q[head]; while(head&lt;tail&amp;&amp;slope(t[q[tail]],t[q[tail-1]])&gt;slope(t[q[tail]],t[i])) --tail; q[++tail]=i; &#125; &#125; int m=n-k+lim,pos; double mx=0; for(int i=0;i&lt;=lim;++i) if(f[m][i]&gt;mx) mx=f[m][i],pos=i; ans=solve(m,pos); for(int i=m+1;i&lt;=n;++i) ans=(ans+h[i])/2; cout&lt;&lt;ans.to_string(p&lt;&lt;1)&lt;&lt;endl; return 0;&#125; 那么高精度小数板子的下载链接就贴这了：$loj$ 的下载地址传送们(～￣▽￣)～]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>题解</tag>
        <tag>决策单调性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法】 小谈斜率优化]]></title>
    <url>%2F2019%2F04%2F28%2F%5B%E7%AE%97%E6%B3%95%5D%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[在此输入你的密码以便阅读全文 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>算法</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI2015]亚瑟王 概率DP loj2112]]></title>
    <url>%2F2019%2F04%2F28%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2112%2F</url>
    <content type="text"><![CDATA[发现 $loj$ 真的好用……比 $luogu$ 不知道清爽到哪里去了，更何况 $loj$ 的题目也更多，而且提供数据和代码，更加开放。估计以后都会在 $loj$ 上多逛逛。( $bzoj$ 是真的丑，除非是做 $bzoj$ 的原创题不然我不会上 $bzoj$ 的) 。 顺便贴一下题目传送门：$loj$的传送门就戳我啦(～￣▽￣)～ 概率 $\texttt{DP}$ ，设 $f_{i,j}$ 表示打了前 $i$ 张牌，还有 $j$ 轮没有打出牌的概率。我们枚举第 $i+1$ 张牌，分别讨论一下该牌打出与不打出的情况即可。 第一种情况：$j$ 轮中都没有打出第 $i+1$ 张牌，由于一轮中不打出第 $i+1$ 张牌的概率为 $1-p_i$ ，那么 $j$ 轮都不打出该牌的概率显然为 $(1-p_i)^j$ 。转移方程显然： f_{i+1,j}+=f_{i,j}\cdot (1-p_i)^j​因为 $f_{i+1,j}$ 可能从多方向转移过来，所以是 $+=$ 。 第二种情况：$j$ 轮中至少有一轮打出了第 $i+1$ 张牌，概率显然为 $1-(1-p_i)^j$ ，转移也就很显然了： f_{i+1,j-1}+=f_{i,j}\cdot （1-(1-p_i)^j）如果我们打出了第 $i+1$ 张牌，那么肯定是要计算贡献的，这个时候直接用这个概率算贡献就好了。 Code:12345678910111213141516171819202122232425262728293031323334#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=3e2+2;int T,n,r,d[N];double f[N][N],p[N],pw[N][N];int main() &#123; scanf("%d",&amp;T); while(T--) &#123; memset(f,0,sizeof(f)); scanf("%d%d",&amp;n,&amp;r); for(int i=1;i&lt;=n;++i) scanf("%lf%d",&amp;p[i],&amp;d[i]); for(int i=1;i&lt;=n;++i) &#123; pw[i][0]=1; for(int j=1;j&lt;=r;++j) pw[i][j]=pw[i][j-1]*(1-p[i]); &#125; f[0][r]=1; double ans=0; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;=r;++j) &#123; f[i+1][j]+=f[i][j]*pw[i+1][j]; if(j) &#123; double calc=f[i][j]*(1-pw[i+1][j]); f[i+1][j-1]+=calc,ans+=calc*d[i+1]; &#125; &#125; printf("%.10f\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>概率</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [CEOI2017]Building Bridges 斜率优化DP loj2483]]></title>
    <url>%2F2019%2F04%2F27%2F%5B%E9%A2%98%E8%A7%A3%5Dloj2483%2F</url>
    <content type="text"><![CDATA[愉快的推式子吧(ﾉ≧∀≦)ﾉ！ 设 $f_i$ 表示前 $i$ 根柱子完工后的最小代价。枚举一个小于 $i$ 的 $j$ ，表示为从 $j$ 向 $i$ 连了一座桥，中间的柱子当然全部推掉，计算一下就好： f_i=\min\{f_j+(s_{i-1}-s_j)+(h_i-h_j)^2\}*其中 $s$ 为 $w$ 的前缀和。 f_i=f_j+(s_{i-1}-s_j)+(h_i-h_j)^2\\\\f_i=f_j+s_{i-1}-s_j+h_i^2+h_j^2-2h_ih_j\\\\f_j+s_{i-1}-s_j+h_i^2+h_j^2=2h_ih_j+f_i于是最终式子变成了 $y=kx+b$ 的形式，斜率优化！ 但是……注意这个式子的 $k$ 不是单调递增的，并且 $x$ 也不是单调递增的！那么我们不能用朴素做法了，也不能用二分……难道用 $Splay$ ？(码量巨大) 。 不，用 $CDQ$ 分治。 对于一个 $i$ ，可能可以对 $i$ 做出贡献的只有所有小于 $i$ 的 $j$ 。为了保证 $x$ 单调我们先大力将原来的数组按照 $x$ 从小到大排个序，然后 $CDQ$ 的时候分左右两边，左边的所有元素在初始数组的位置都小于右边的左右元素，也就是说我们直接用左边元素对右边元素做出贡献。 同时这里也保证了左右两边的 $x$ 一定是单调上增的。 我们使用单调队列，扫一遍左边的元素，留下能做贡献的点(下凸壳上的点)，这时候左边的所有元素可以保证 $x$ 和斜率都是单调上增的。 右边呢？因为直线的斜率是 $2x$ ，而右边的 $x$ 也是单调上增的，所以我们可以愉快的做朴素的单调队列了。 $CDQ$ 分治部分的代码： 12345678910111213141516171819202122232425262728293031323334void CDQ(int l,int r) &#123; if(l==r) &#123;/*一个点的时候直接计算y值*/ a[l].y=f[a[l].id]-s[a[l].id]+S(a[l].x); return; &#125; int mid=(l+r)&gt;&gt;1; for(int i=l,c1=l,c2=mid+1;i&lt;=r;++i) if(a[i].id&lt;=mid) b[c1++]=a[i]; /*编号小的左边去*/ else b[c2++]=a[i]; /*编号大些的右边去*/ for(int i=l;i&lt;=r;++i) a[i]=b[i]; CDQ(l,mid); /*计算出左边所有元素的 f*/ int head=1,tail=0; static int q[N]; for(int i=l;i&lt;=mid;++i) &#123; /*处理出左边所有元素组成的下凸壳*/ while(head&lt;tail&amp;&amp;slope(q[tail-1],q[tail])&gt;slope(q[tail],i)) --tail; q[++tail]=i; &#125; for(int i=mid+1;i&lt;=r;++i) &#123; /*计算左边元素对右边元素产生的贡献*/ while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&lt;2*a[i].x) ++head; /*维护队列*/ int x=a[i].id,y=a[q[head]].id; f[x]=min(f[x],f[y]+s[x-1]-s[y]+S(a[i].x-a[q[head]].x)); /*可能计算多次所以要取min*/ &#125; CDQ(mid+1,r); for(int i=l,c1=l,c2=mid+1;i&lt;=r;++i) /*还原a数组至初始状态*/ if(c2&gt;r||(c1&lt;=mid&amp;&amp;a[c1].x&lt;a[c2].x)) b[i]=a[c1++]; else b[i]=a[c2++]; for(int i=l;i&lt;=r;++i) a[i]=b[i]; return;&#125;//main函数中sort(a+1,a+1+n,cmp),CDQ(1,n); /*排序后CDQ开始*/printf("%lld\n",f[n]); /*输出*/ 最后因为存在 $0$ ，在计算斜率的时候需要特判一下。还需要注意一下 $long\ long$ 的问题，记得将 $f$ 数组初始化。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const ll inf=1e18+9;struct point &#123;int x,id;ll y;&#125;a[N],b[N];ll s[N],w[N],f[N];int n;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;ll S(ll x) &#123;return x*x;&#125;bool cmp(point x,point y) &#123;return x.x&lt;y.x;&#125;double slope(int i,int j) &#123; if(a[i].x==a[j].x) &#123; return a[i].y&lt;a[j].y?inf:-inf; &#125;return double(a[i].y-a[j].y)/double(a[i].x-a[j].x);&#125;void CDQ(int l,int r) &#123; if(l==r) &#123;a[l].y=f[a[l].id]-s[a[l].id]+S(a[l].x);return;&#125; int mid=(l+r)&gt;&gt;1; for(int i=l,c1=l,c2=mid+1;i&lt;=r;++i) if(a[i].id&lt;=mid) b[c1++]=a[i]; else b[c2++]=a[i]; for(int i=l;i&lt;=r;++i) a[i]=b[i]; CDQ(l,mid); int head=1,tail=0; static int q[N]; for(int i=l;i&lt;=mid;++i) &#123; while(head&lt;tail&amp;&amp;slope(q[tail-1],q[tail])&gt;slope(q[tail],i)) --tail; q[++tail]=i; &#125; for(int i=mid+1;i&lt;=r;++i) &#123; while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&lt;2*a[i].x) ++head; int x=a[i].id,y=a[q[head]].id; f[x]=min(f[x],f[y]+s[x-1]-s[y]+S(a[i].x-a[q[head]].x)); &#125; CDQ(mid+1,r); for(int i=l,c1=l,c2=mid+1;i&lt;=r;++i) if(c2&gt;r||(c1&lt;=mid&amp;&amp;a[c1].x&lt;a[c2].x)) b[i]=a[c1++]; else b[i]=a[c2++]; for(int i=l;i&lt;=r;++i) a[i]=b[i]; return;&#125;int main() &#123; IN(n); for(int i=1;i&lt;=n;++i) IN(a[i].x),a[i].id=i,f[i]=inf; f[1]=0; for(int i=1;i&lt;=n;++i) IN(w[i]),s[i]=s[i-1]+w[i]; sort(a+1,a+1+n,cmp),CDQ(1,n); printf("%lld\n",f[n]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI2008]玩具装箱TOY 斜率优化DP luoguP3195]]></title>
    <url>%2F2019%2F04%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3195%2F</url>
    <content type="text"><![CDATA[差不多搞懂了斜率优化吧……说实话网上的文章都写得很迷，还好找到了一个不错的文章：转送门戳我(￣▽￣)~* 。(为什么突然发现这道题和诗人小G很像呢) 这个 $\texttt{DP}$ 方程谁都会设：设 $f_i$ 表示前 $i$ 个玩具的最小费用，转移显然如下： f_i=\min\limits_{j=1}^{i-1}\{f_j+(sum_i-sum_j+i-j-l)^2\}(其中 $sum$ 是前缀和)。这个复杂度是 $O(n^2)$ 的，过不去…… 继续推式子： f_i=\min\limits_{j=1}^{i-1}\{f_j+[(sum_i+i)-(sum_j+j)-l]^2\}设 $s_i=sum_i+i$ ，我们假设 $j$ 为最优决策，将 $\min$ 去掉。 f_i=f_j+(s_i-s_j-l)^2\\f_i=f_j+s_i^2+(s_j+l)^2-2\cdot s_i\cdot(s_j+l)\\f_j+s_i^2+(s_j+l)^2=2\cdot s_i\cdot(s_j+l)+f_i​于是上面的式子变成了 $y=kx+b$ 的形式，其中 $y=f_j+s_i^2+(s_j+l)^2$ ，$k=2\cdot s_i$ ，$x=s_j+l$ ，$b=f_i$ 。 然后将 $x,y$ 两个值作为点 $(x,y)$ 放到平面上即可，因为最终答案是取 $min$ ，所以我们需要维护的是下凸壳。有一点需要注意的是，我们算斜率的时候可以将每个点的常数项或者只和 $i$ 有关的项去掉，因为算斜率是相减的，减的时候这些项同样也没了。 上面的 $x$ 中的 $l$ 是常数项于是可以省略，$y$ 中的 $s_i^2$ 只和 $i$ 有关，于是也省略掉。 Code:1234567891011121314151617181920212223#include &lt;cstdio&gt;#include &lt;iostream&gt;#define S(x) ((x)*(x))using namespace std;const int N=1e5+2;int n,l,head,tail;long long f[N],s[N],q[N];double X(int i) &#123;return s[i];&#125;/*每个点的x坐标*/double Y(int i) &#123;return f[i]+S(s[i]+l);&#125;/*每个点的y坐标*/double slope(int i,int j) &#123;return (Y(j)-Y(i))/(X(j)-X(i));&#125;/*算斜率*/int main() &#123; scanf("%d%d",&amp;n,&amp;l); for(int i=1;i&lt;=n;++i) scanf("%lld",&amp;s[i]),s[i]+=s[i-1]; for(int i=1;i&lt;=n;++i) s[i]+=i; for(int i=1;i&lt;=n;++i) &#123; while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&lt;2*s[i]) ++head; f[i]=f[q[head]]+S(s[i]-s[q[head]]-l-1);/*转移*/ while(head&lt;tail&amp;&amp;slope(q[tail],i)&lt;slope(q[tail],q[tail-1])) --tail; q[++tail]=i; &#125; printf("%lld\n",f[n]); return 0;&#125; 下面来解释一些问题。 1.为什么要维护下凸壳因为我们的 $\texttt{DP}$ 方程是在取 $\min$ ，如果是 $\max$ 的话则维护上凸壳。而且维护下凸壳显然是让 $f_i$ 更小。 以上面为例，我们用 $y=kx+b​$ 的直线从下面网上扫，注意这条直线的斜率就是 $k​$ 。很显然如果我们从下往上这样扫越往上扫 $b​$ 越大(不明白的画画图)，但是我们的目的是使得 $b​$ 最小( $b​$ 就是 $f_i​$ ) 。下凸壳包含了最下面的所有点，显然不是下凸壳上的点一定不能成为最优的。 2.维护队列的过程是什么鬼操作首先第一个过程，也就是下面的代码： 1while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&lt;2*s[i]) ++head; 上面讲了我们需要使得 $b​$ 最小，那么最优的决策点在直线从下往上扫的过程中肯定是最先扫到的，因为那样可以保证 $f_i​$ 最小。假设最优的点为 $i​$ ，上一个点为 $j​$ ，下一个点为 $k​$ ，那么 $i​$ 一定保证 $j​$ 到 $i​$ 的斜率小于直线斜率并且 $i​$ 到 $k​$ 的斜率大于直线斜率。 然后我们会发现对于单调上增的需要更新的 $i​$ ，其直线的斜率 $k​$ 一定是单调上增的，因为前缀和是单调上增的。 所以对于斜率已经不满足要求的点直接踢出队就好了。 然后康康出队的过程。如果在纸上画画会发现，如果满足 slope(q[tail],i)&lt;slope(q[tail],q[tail-1]) ，那么说明 $q[tail]$ 已经不再下凸壳中了！没错吧？那么这个时候 $q[tail]$ 永远也不可能成为最优的转移点了，直接丢掉即可。 最后有一些斜率优化的套路总结(自己总结出来的)： $\texttt{DP}$ 方程取 $\min$ 就维护下凸壳，取 $\max$ 就维护上凸壳 $y=kx+b​$ 中的 $k​$ 一定要是常量或者是完全是 $i​$ 的量(例如 $s_i,2\cdot g_i^2​$ 等)，$b​$ 一定是你需要转移的对象(就是 $f_i​$ )，$x​$ 和 $y​$ 两个值一定要包含和 $j​$ 有关的值，要随 $j​$ 的变化而变化。 提炼出来的 $x,y$ 放到坐标系上之前记得去掉没用的值。 差不多就这些吧，也不知道是不是完全正确，至少这个套路还是过了几道题目的。]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>题解</tag>
        <tag>决策单调性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [APIO2010]特别行动队 斜率优化DP luoguP3628]]></title>
    <url>%2F2019%2F04%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3628%2F</url>
    <content type="text"><![CDATA[依旧是斜率优化的套路。 设 $f_i$ 表示前 $i$ 个士兵的最大贡献，转移显然是枚举一个 $j$ ，将 $j+1$ 到 $i$ 这些士兵组成特别行动队算贡献： f_i=\max\{f_j+a(s_i-s_j)^2+b(s_i-s_j)+c\}​其中 $s_i$ 为战斗力的前缀和。这个方程是 $O(n^2)$ 的，需要优化。发现这个转移式貌似不满足单调队列优化的条件，于是将中间的式子拆开看看可不可以斜率优化。 f_i=\max\{f_j+a(s_i^2+s_j^2-2s_is_j)+b\cdot s_i-b\cdot s_j+c\}\\f_i=\max\{f_j+a\cdot s_i^2+a\cdot s_j^2-2a\cdot s_is_j)+b\cdot s_i-b\cdot s_j+c\}\\f_i=f_j+a\cdot s_i^2+a\cdot s_j^2-2a\cdot s_is_j+b\cdot s_i-b\cdot s_j+c\\f_j+a\cdot s_i^2+a\cdot s_j^2+b\cdot s_i-b\cdot s_j+c=2a\cdot s_i\cdot s_j +f_i​诶，是 $y=kx+b$ 的形式，而且满足斜率优化的条件诶。继续将 $x,y$ 找出来放到坐标系上( $x=s_j$,$y=f_j+a\cdot s_j^2-b\cdot s_j$) 。 因为是 $\max​$ ，所以用单调队列维护一下上凸壳然后转移即可，复杂度 $O(n)​$ 。 Code:1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;#include &lt;iostream&gt;#define S(x) ((x)*(x))using namespace std;const int N=1e6+2;int n,a,b,c,head,tail;long long s[N],f[N],q[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;double X(int i) &#123;return s[i];&#125;double Y(int i) &#123;return f[i]+1ll*S(s[i])*a-1ll*s[i]*b;&#125;double slope(int i,int j) &#123;return (Y(j)-Y(i))/(X(j)-X(i));&#125;inline void calc(int i,int j) &#123; f[i]=f[j]+1ll*S(s[i]-s[j])*a+1ll*(s[i]-s[j])*b+c;&#125;int main() &#123; IN(n),IN(a),IN(b),IN(c); for(int i=1;i&lt;=n;++i) IN(s[i]),s[i]+=s[i-1]; for(int i=1;i&lt;=n;++i) &#123; while(head&lt;tail&amp;&amp;slope(q[head],q[head+1])&gt;2*a*s[i]) ++head; calc(i,q[head]); while(head&lt;tail&amp;&amp;slope(q[tail],i)&gt;slope(q[tail],q[tail-1])) --tail; q[++tail]=i; &#125; printf("%lld\n",f[n]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>题解</tag>
        <tag>决策单调性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SCOI2008]奖励关 状压DP luoguP2473]]></title>
    <url>%2F2019%2F04%2F23%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2473%2F</url>
    <content type="text"><![CDATA[发现数据范围很小，并且涉及到”集合”，很容易可以想到用状压 $\texttt{DP}$ 。 设 $f[i][j]$ 表示已经抛出了 $i$ 次宝物，获得的宝物集合为 $j$ 时的最优分值。那么转移的时候枚举每一个宝物，分两种情况即可——选当前宝物或者不选。注意选当前宝物的前提是必须满足前提，按照最优情况选取即可。注意最后将所有的宝物的贡献加上后还需要$/n$ ，因为题目要求的是”平均”。 Code:12345678910111213141516171819202122232425#include &lt;cstdio&gt;#include &lt;iostream&gt;using namespace std;double f[101][65540];int p[18],d[18],v[18],N,K;int main() &#123; for(int i=1;i&lt;=16;++i) p[i]=1&lt;&lt;(i-1); scanf("%d%d",&amp;K,&amp;N); for(int i=1;i&lt;=N;++i) &#123; int x;scanf("%d%d",&amp;v[i],&amp;x); while(x) &#123;d[i]|=p[x];scanf("%d",&amp;x);&#125; &#125; for(int i=K;i;--i) /*倒着枚举会好些*/ for(int j=0;j&lt;=p[N+1]-1;++j) &#123; /*上面两重循环枚举状态*/ for(int k=1;k&lt;=N;++k)/*枚举所有宝物并计算贡献*/ if((d[k]&amp;j)==d[k]) /*可以选取当前宝物*/ f[i][j]+=max(f[i+1][j],f[i+1][j|p[k]]+v[k]); /*按照最优选取*/ else f[i][j]+=f[i+1][j]; /*不能选取直接转移*/ f[i][j]/=N;/*所谓"平均"*/ &#125; printf("%.6f\n",f[1][0]);/*最终答案*/ return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2011]Noi嘉年华 决策单调性优化DP luoguP1973]]></title>
    <url>%2F2019%2F04%2F22%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1973%2F</url>
    <content type="text"><![CDATA[这道题一共有两问，第一问瞎搞 $\texttt{DP}$ ，第二问如果直接 $\texttt{DP}$ 的话复杂度是 $O(n^4)$ 的过不去，这个时候需要用到决策单调性优化复杂度就可以降低至 $O(n^3)$ ，这样就过了。我们先来讨论一下第一问的做法。 时间的范围太大了，我们需要离散化一下。离散化后时间就控制在 $0$ 到 $2n$ 的范围内了。 首先可以发现最终的答案一定就是一段一段时间，每一段时间内的活动都是在同一个会场举行。我们可以预处理一个 $tot_{l,r}$ 表示完全在时间 $l,r$ 之内的活动有多少个。计算直接暴力，预处理的复杂度为 $O(n^3)$ 。 然后设一个 $pre_{i,j}​$ 表示 $1​$ 到 $i​$ 的时间一个会场的活动数为 $j​$ 时另一个会场的最大活动数。那么转移的话我们枚举一个时间 $k​$ ，然后考虑 $k​$ 到 $i​$ 这段时间中的所有活动分配给哪个会场即可。可以得到转移方程： pre_{i,j}=\max\limits_{k=1}^{i}\{pre_{k,j}+tot_{k,i},pre_{k,j-tot_{k,i}}\}​这里我们 $pre$ 方程的定义中”一个会场”就是一号会场，”另一个会场”就是二号会场$。pre_{k,j}+tot_{k,i}$ 就是将 $k$ 到 $i$ 这段时间中所有活动都分配给了二号会场，$pre_{k,j-tot_{k,i}}$ 很显然就是分配给了一号会场。计算时枚举 $i,j,k$ ，复杂度是 $O(n^3)$ 。(其实准确的复杂度带个常数，因为 $i$ 枚举的是时间，而时间最大是 $2n$ 的) 。 我们设离散化后时间总长为 $m$ ，那么答案显然为 $\max\limits_{i=1}^m\{\min(pre_{m,i},i)\}$ 。接下来我们解决第二问。 我们的 $tot_{l,r}$ 统计的就是完全在时间 $l,r$ 的区间有多少个。那么对于第 $i$ 个活动，设该活动的起始时间与终止时间分别为 $s_i,t_i$ ，那么我们再考虑一对 $x,y \ \ (x\leq s_i,t_i\leq y)$ ，那么如果我们将答案计算上 $tot_{x,y}$ ，那么也就选择了第 $i$ 个活动了。 我们设 $f_{i,j}$ 表示一号会场强制选择 $i$ 到 $j$ 时间中的所有活动时的最优答案。(注意这里的最优答案就是两个会场中活动少的一方的最大值，我们只是考虑在一号会场强制选择 $i$ 到 $j​$ 中的所有活动的情况下考虑最优的全局答案) 。 继续看向一号会场，假设在 $i$ 前面的时间中一号会场已经合法举办了 $x$ 场活动，在 $j$ 后面的时间中也合法举办了 $y$ 场活动。那么我们枚举 $i,j,x,y$ 也可以得到二号会场的活动数：$i$ 前面的时间种有 $pre_{i,x}$ 场活动，$j$ 后面的时间中有……诶这里用 $pre$ 貌似不是很好表示诶，于是我们新定义一个 $suf$ ，$suf_{i,j}$ 表示 $i$ 到 $m$ 的时间一个会场的活动数为 $j$ 时另一个会场的最大活动数，$suf$ 的状态转移方程和 $pre$ 的同理。 枚举 $i,j,x,y$ 后就可以得到两个会场的活动个数，那么就可以直接算答案了： f_{i,j}=\max\limits_{x=1}^{m}\max\limits_{y=1}^{m}\{\min(x+tot_{i,j}+y,pre_{i,x}+suf_{j,y})\}​但是这样子的复杂度是 $O(n^4)​$ 的，过不了。 不过，我们会发现，对于单调递增的 $x$ ，对应的最优的 $y$ 一定是单调递减的 。为什么呢？首先对于一个单调递增的 $i$ ，$pre_{?_i},suf_{?_i}$ 一定是单调递减的( $?$ 为任意数) 。那么如果对于单调递增的 $x$ ，$pre_{i,x}$ 一定是单调递减的，这个时候如果 $y$ 单调递增也就意味着 $suf_{j,y}$ 会单调递减，那么 $x+tot_{i,j}+y$ 和 $pre_{i,x}+suf_{j,y}$ 将会越拉越大，对于答案显然是不利的。反过来，如果 $y$ 是单调递减的，那么就会相对比较均衡。(感性理解理解……) 那么我们就不需要枚举 $y$ 了，只需要扫一扫就好了，最终计算 $f$ 的时间复杂度为 $O(n^3)$ 。 最终统计答案的时候，对于一个活动 $i$ ，我们的答案显然为 $\max\limits_{x=1}^{s_i}\max\limits_{y=t_i}^{m}f_{x,y}$ 。必须满足 $x\leq s_i,t_i\leq y$ ，因为这样就会满足一定会选择第 $i$ 个活动。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;#define F(i,j,k) for((i)=(j);(i)&lt;=(k);++i)#define R(i,j,k) for((i)=(j);(i)&gt;=(k);--i)const int N=4e2+9;const int inf=1e9+9;int n,m,i,j,k,l,r,s[N],t[N],b[N];int tot[N][N],pre[N][N],suf[N][N],f[N][N];inline int IN() &#123; char ch;bool flag=0;int x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;return x;&#125;inline int calc(int x,int y) &#123;return min(x+tot[l][r]+y,pre[l][x]+suf[r][y]);&#125; int main() &#123; n=IN(); F(i,1,n) b[++m]=s[i]=IN(),b[++m]=t[i]=IN()+s[i]; sort(b+1,b+1+m), m=unique(b+1,b+1+m)-b-1;/*离散化去重*/ F(i,1,n) &#123; s[i]=lower_bound(b+1,b+1+m,s[i])-b; t[i]=lower_bound(b+1,b+1+m,t[i])-b; F(l,1,s[i]) R(r,m,t[i]) ++tot[l][r];/*计算出tot*/ &#125; F(i,1,m) F(j,1,n) pre[i][j]=suf[i][j]=-inf;/*初始化*/ /*----------计算出pre和suf----------*/ F(i,1,m) F(j,0,tot[1][i]) F(k,1,i) &#123; pre[i][j]=max(pre[i][j],pre[k][j]+tot[k][i]); if(j&gt;=tot[k][i]) pre[i][j]=max(pre[i][j],pre[k][j-tot[k][i]]); &#125; R(i,m,1) F(j,0,tot[i][m]) F(k,i,m) &#123; suf[i][j]=max(suf[i][j],suf[k][j]+tot[i][k]); if(j&gt;=tot[i][k]) suf[i][j]=max(suf[i][j],suf[k][j-tot[i][k]]); &#125; /*计算f*/ F(l,1,m) F(r,l+1,m) for(int y=n,x=0;x&lt;=n;++x) &#123;/*y当做指针扫一遍*/ int old_calc=calc(x,y),new_calc; while(y&amp;&amp;old_calc&lt;=(new_calc=calc(x,y-1))) --y,old_calc=new_calc; f[l][r]=max(f[l][r],calc(x,y));/*转移*/ &#125; /*输出答案*/ int ans=0; F(i,1,n) ans=max(ans,min(pre[m][i],i)); printf("%d\n",ans);/*第一问*/ F(i,1,n) &#123; ans=0; F(l,1,s[i]) R(r,m,t[i]) ans=max(ans,f[l][r]); printf("%d\n",ans);/*第二问*/ &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>决策单调性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [十二省联考2019]异或粽子 可持久化Trie树 luoguP5283]]></title>
    <url>%2F2019%2F04%2F19%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5283%2F</url>
    <content type="text"><![CDATA[要是我不是 $\texttt{HN}​$ 的该多好，今年十二省联考两道傻逼题，一道异或粽子，一道十二响…… [十二省联考2019]异或粽子，可持久化 $trie​$ 树的板子题，比最大异或和还要板子些。相信 $60​$ 分入门者都会做，那么 $100​$ 分的话我们上可持久化 $trie​$ 树维护前缀异或和，嗯没错就像主席树那样。然后对于每个节点的可持久化 $trie​$ 树我们将其当成区间右端点，然后在此位置上的 $trie​$ 树中贪心寻找左端点即可。 寻找前 $K$ 大区间的具体操作如下： 12345678910for(ll i=1;i&lt;=n;++i) q.push(MKP(T.query(T.root[i],sum[i],qrank[i]=1),i));/*对于每一个右端点，找一个第一大(最优)的左端点放入优先队列*/ll ans=0;while(k--) &#123; ll i=q.top().second;/*取出当前最优元素*/ ans+=q.top().first;q.pop(); if(qrank[i]!=i) q.push(MKP(T.query(T.root[i],sum[i],++qrank[i]),i)); /*更新队列元素*/&#125; 复杂度大约是 $O(nlogn)​$ 级别。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;#define MKP make_pairconst ll N=5e5+2;const ll logN=33;const ll inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;ll n,k,sum[N],qrank[N];priority_queue&lt;pair&lt;ll,ll&gt; &gt; q;struct Trie &#123; ll ch[N*logN][2],sum[N*logN],root[N],tot; ll newnode(ll x) &#123; ++tot,ch[tot][0]=ch[x][0],ch[tot][1]=ch[x][1]; sum[tot]=sum[x];return tot; &#125; void Insert(ll&amp;rt,ll val) &#123; rt=newnode(rt),++sum[rt]; ll now=rt; for(ll i=31;~i;--i) &#123; bool son=(val&gt;&gt;i)&amp;1; ch[now][son]=newnode(ch[now][son]); now=ch[now][son],++sum[now]; &#125;return; &#125; ll query(ll now,ll val,ll k) &#123; ll ans=0; for(ll i=31;~i;--i) &#123; bool son=!((val&gt;&gt;i)&amp;1); if(k&lt;=sum[ch[now][son]]) now=ch[now][son],ans|=(1u&lt;&lt;i); else k-=sum[ch[now][son]],now=ch[now][!son]; &#125;return ans; &#125;&#125;T;int main()&#123; IN(n),IN(k); for(ll i=1,x;i&lt;=n;++i) IN(x),sum[i]=sum[i-1]^x; for(ll i=0;i&lt;=n;++i) &#123; if(i) T.root[i]=T.root[i-1]; T.Insert(T.root[i],sum[i]); &#125; for(ll i=1;i&lt;=n;++i) q.push(MKP(T.query(T.root[i],sum[i],qrank[i]=1),i)); ll ans=0; while(k--) &#123; ll i=q.top().second; ans+=q.top().first;q.pop(); if(qrank[i]!=i) q.push(MKP(T.query(T.root[i],sum[i],++qrank[i]),i)); &#125; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>可持久化Trie树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [十二省联考2019]春节十二响 堆+启发式合并 luoguP5290]]></title>
    <url>%2F2019%2F04%2F19%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5290%2F</url>
    <content type="text"><![CDATA[要是我不是 $\texttt{HN}$ 的该多好，今年十二省联考两道傻逼题，一道异或粽子，一道十二响…… [十二省联考2019]春节十二响，启发式合并裸题。对于树中的一个节点 $u$ ，从其子树中选择一段的方式显然只能是从 $u$ 的所有子树中各选出一个节点。于是我们每一个节点开一个堆，存的就是其子树中(包括自己)的所有段的内存。 然后从下往上启发式合并即可，复杂度大约是 $O(nlogn)$ 。 启发式合并的具体代码实现如下： 12345678910111213141516void merge(int x, int y) &#123; if(q[x].size()&lt;q[y].size()) swap(q[x],q[y]); while(!q[y].empty()) &#123; hep.push_back(max(q[x].top(),q[y].top())); q[x].pop(),q[y].pop(); /*贪心选取*/ &#125; while(hep.size()) q[x].push(hep.back()),hep.pop_back(); /*更新节点*/&#125;void solve(int x) &#123; for(int i=0,sz=G[x].size();i&lt;sz;++i) solve(G[x][i]),merge(x,G[x][i]);/*将当前子树与之前枚举过的子树合并*/ q[x].push(s[x]);&#125; 最后的总代码长度不超过 $40$ 行。 Code:123456789101112131415161718192021222324252627282930313233343536373839#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=2e5+7;int n,f,s[N];vector&lt;int&gt; hep,G[N];priority_queue&lt;int&gt; q[N];void merge(int x, int y) &#123; if(q[x].size()&lt;q[y].size()) swap(q[x],q[y]); while(!q[y].empty()) &#123; hep.push_back(max(q[x].top(),q[y].top())); q[x].pop(),q[y].pop(); &#125; while(hep.size()) q[x].push(hep.back()),hep.pop_back();&#125;void solve(int x) &#123; for(int i=0,sz=G[x].size();i&lt;sz;++i) solve(G[x][i]),merge(x,G[x][i]); q[x].push(s[x]);&#125;int main() &#123; scanf("%d",&amp;n); for(int i=1;i&lt;=n;++i) scanf("%d",&amp;s[i]); for(int i=2;i&lt;=n;++i) scanf("%d",&amp;f),G[f].push_back(i); solve(1); long long ans=0; while(!q[1].empty()) ans+=q[1].top(),q[1].pop(); printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>堆</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】【模板】动态DP LCT+DP+矩阵 luoguP4751]]></title>
    <url>%2F2019%2F04%2F19%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4751%2F</url>
    <content type="text"><![CDATA[看懂了后发现 $\texttt{DDP}$ 其实不难呢…… 其实主要思想就是将 $\texttt{DP}$ 转移式搞到矩阵上，然后如果是树形 $\texttt{DP}$ 的话就可以直接上树剖或者是 $LCT$ 进行维护，当然还可以用全局平衡二叉树(不费) 。如果只是线性的话可以直接用线段树等数据结构进行维护了。 注意这道模板树剖的复杂度是 $O(nlog^2n)$ ，而 $LCT$ 的复杂度为 $O(nlogn)$ ，于是窝选择了 $LCT$ ，跑的还挺快。 开始分析题目，如果没有”动态”限制的话就是一个裸的”没有上司的舞会”，解法显然是设 $f[u][0/1]​$ 表示 $u​$ 不选/选 的时候其子树的最大价值，转移显然为： f[u][0]=\sum \max(f[v][0],f[v][1])\\f[u][1]=val[u]+\sum f[v][0]对于树中的一个节点 $u$ 的所有儿子中有个重儿子，其他的儿子就是轻儿子，我们将重儿子和轻儿子的贡献分开算。设一个 $g[u][0/1]$ ，其值为： g[u][0]=\sum\max(f[v][0],f[v][1])\\g[u][1]=val[u]+\sum f[v][0]注意上式中的 $v$ 只的是轻儿子，然后 $f$ 的转移就变成了以下形式( $x$ 为重儿子)： f[u][0]=\max(f[x][0],f[x][1])+g[u][0]\\f[u][1]=g[u][1]+f[x][0]其实这里的 $g$ 很好维护，我们在 $Access$ 的时候只要计算儿子变化时的贡献就好了。 接着我们构造出转移矩阵： \begin{bmatrix}g[u][0] & g[u][0]\\g[u][1] & -inf\end{bmatrix}\cdot\begin{bmatrix}f[x][0] \\f[x][1]\end{bmatrix}=\begin{bmatrix}f[u][0]\\f[u][1]\end{bmatrix}这样子就可以直接更新了，对于每个节点我们只需要维护两个矩阵即可，一个就是上面乘法中的 $g$ 矩阵，一个就是上面乘法中的 $f$ 矩阵。 需要注意的是这是广义矩阵乘法，也就是说这个矩阵乘法的运算规则为： c[i][j]=max(c[i][j],a[i][k]+b[k][j])很像 $floyd$ ，可以直接算了。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;struct matrix &#123;int c[2][2];matrix()&#123;c[0][0]=c[0][1]=c[1][0]=c[1][1]=-inf;&#125;&#125;;matrix operator * (matrix&amp;a,matrix&amp;b) &#123; matrix ret; for(int i=0;i&lt;2;++i)for(int j=0;j&lt;2;++j)for(int k=0;k&lt;2;++k) ret.c[i][j]=max(ret.c[i][j],a.c[i][k]+b.c[k][j]); return ret;&#125;int v[N],dp[N][2],head[N],nxt[N&lt;&lt;1],to[N&lt;&lt;1],cnt;void add(int u,int v) &#123;nxt[++cnt]=head[u],to[cnt]=v,head[u]=cnt;&#125;struct link_cut_tree &#123; matrix f[N],g[N]; int ch[N][2],fa[N]; inline bool isroot(int x) &#123;return !((ch[fa[x]][0]==x)||(ch[fa[x]][1]==x));&#125; inline void pushup(int x) &#123; f[x]=g[x]; if(ch[x][0]) f[x]=f[ch[x][0]]*f[x];if(ch[x][1]) f[x]=f[x]*f[ch[x][1]]; &#125; inline void rotate(int x) &#123; int y=fa[x],z=fa[y],k=ch[y][1]==x,v=ch[x][!k]; if(!isroot(y)) ch[z][ch[z][1]==y]=x;ch[x][!k]=y,ch[y][k]=v; if(v) fa[v]=y;fa[y]=x,fa[x]=z;pushup(y); &#125; inline void Splay(int x) &#123; while(!isroot(x)) &#123; if(!isroot(fa[x])) rotate((ch[fa[x]][0]==x)^(ch[fa[fa[x]]][0]==fa[x])?x:fa[x]); rotate(x); &#125;pushup(x);return; &#125; inline void Access(int x) &#123; for(int y=0;x;x=fa[y=x]) &#123; Splay(x); if(ch[x][1]) &#123; g[x].c[0][0]+=max(f[ch[x][1]].c[0][0],f[ch[x][1]].c[1][0]); g[x].c[1][0]+=f[ch[x][1]].c[0][0]; &#125; if(y) &#123; g[x].c[0][0]-=max(f[y].c[0][0],f[y].c[1][0]); g[x].c[1][0]-=f[y].c[0][0]; &#125; g[x].c[0][1]=g[x].c[0][0]; ch[x][1]=y,pushup(x); &#125;return; &#125; inline void change(int x,int y) &#123; Access(x),Splay(x),g[x].c[1][0]-=v[x]-y; pushup(x),v[x]=y;return; &#125; inline void build(int u) &#123; dp[u][1]=v[u]; for(int i=head[u];i;i=nxt[i]) &#123; int v=to[i];if(v!=fa[u]) &#123; fa[v]=u,build(v); dp[u][0]+=max(dp[v][0],dp[v][1]); dp[u][1]+=dp[v][0]; &#125; &#125; g[u].c[0][0]=g[u].c[0][1]=dp[u][0]; g[u].c[1][0]=dp[u][1];f[u]=g[u]; &#125;&#125;T;int main() &#123; int n,m;IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(v[i]); for(int i=1,u,v;i&lt;n;++i)IN(u),IN(v),add(u,v),add(v,u); T.build(1); while(m--) &#123; int x,y;IN(x),IN(y); T.change(x,y),T.Splay(1); printf("%d\n",max(T.f[1].c[0][0],T.f[1].c[1][0])); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>LCT</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[HNOI2019]白兔之舞 单位根反演+MTT luoguP5293]]></title>
    <url>%2F2019%2F04%2F17%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5293%2F</url>
    <content type="text"><![CDATA[单位根反演不会啊怎么搞 $FFT$ 吧，还是了解了单位根反演后才可以搞的好吧……居然有人吐槽我说我学了 $FFT​$ 但是不会运用？！，嘤嘤嘤打击有些大…… 实际上所谓的单位根反演就是这个东西： \frac{1}{n}\sum_{i=0}^{n-1}(\omega_n^d)^i=[n|d] 回到题目，我们先考虑正解的简化版—— $n=1$ 的版本，我们先定义 $W=w[1][1]$ 。 现在对于每一个 $t$ 的答案显然为 $\sum_{i=0}^{L}[i\% k=t] W^i (^L_i)$ 这个式子显然等于 $\sum_{i=0}^{L}[k|(i-t)] w^i (^L_i)$ 。会发现 $[k|(i-t)]$ 和上面单位根反演的 $[n|d]$ 一样，于是我们尝试将单位根反演的式子带进去。 =\sum_{i=0}^{L}\frac{1}{k}\sum_{j=0}^{k-1}(\omega_k^{i-t})^j W^i \binom{L}{i}\\\\ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}\sum_{i=0}^{L} \omega_k^{ij} W^i \binom{L}{i}\\\\ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}\sum_{i=0}^{L} \binom{L}{i}(\omega_k^{j} W)^i\\\\ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}\sum_{i=0}^{L} \binom{L}{i}(\omega_k^{j} W)^i 1^{n-i}\\\\ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}(\omega_k^{j} W+1)^L后面的 $(\omega_k^{j} W+1)^L$ 显然可以预处理，记为 $num_j$ 。 然后发现 $-tj=\binom{t}{2}+\binom{j}{2}-\binom{t+j}{2}$ =\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{\binom{t}{2}+\binom{j}{2}-\binom{t+j}{2}}num_j\\\\ =\frac{1}{k}\omega_k^{\binom{t}{2}}\sum_{j=0}^{k-1}num_j\omega_k^{\binom{j}{2}}\cdot\omega_k^{-\binom{t+j}{2}}后面的式子可以用 $FFT$ 加速，但是值域太大这里需要用到 $MTT$ 。现在就有 $40$ 分了，接下来考虑 $n&gt;1$ 的情况。 我们建矩阵，然后会发现 $n&gt;1$ 仅会对 $num_j$ 的计算方式有变化。 我们定义一个 $begin$ 矩阵，该矩阵只有 $(0,x)$ 位置上有值且值为 $1$ ，也就是说这是白兔的起点。那么最后我们需要留下来的也就是矩阵的 $(0,y)$ ，因为只有在第二维为 $y$ 是才会计入答案。 嗯，差不多可以这样写： 12345begin.c[0][x]=1;for(int i=0;i&lt;k;++i) num[i]=(begin*pow(w*num[i]+I,n)).c[0][y]%MOD;/*w就是上文中的W，不过这里是矩阵*//*I是矩阵中的单位'1'*/ Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=65536;const double PI=acos(-1); int m,k,n,x,y,MOD,G,num[N],A[N&lt;&lt;2],B[N&lt;&lt;2];namespace OI &#123; #define F(x,i,j) for((x)=(i);(x)&lt;=(j);++(x)) inline ll IN() &#123; char ch;bool flag=0;ll x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;return x; &#125; struct matrix &#123;int c[3][3];matrix()&#123;memset(c,0,sizeof(c));&#125;&#125;; matrix operator + (const matrix&amp;a,const matrix&amp;b) &#123; matrix ans;int i,j;F(i,0,2)F(j,0,2) &#123; ans.c[i][j]=a.c[i][j]+b.c[i][j]; if(ans.c[i][j]&gt;=MOD) ans.c[i][j]-=MOD; &#125;return ans; &#125; matrix operator * (const matrix&amp;a,const matrix&amp;b) &#123; matrix ans;int i,j,k;F(i,0,2)F(j,0,2)F(k,0,2) ans.c[i][k]=(ans.c[i][k]+1ll*a.c[i][j]*b.c[j][k])%MOD; return ans; &#125; matrix operator * (const matrix&amp;a,const int&amp;b) &#123; matrix ans;int i,j;F(i,0,2)F(j,0,2)ans.c[i][j]=1ll*a.c[i][j]*b%MOD; return ans; &#125; struct complex&#123;complex(long double a=0,long double b=0)&#123;x=a,y=b;&#125;long double x,y;&#125;; complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125; complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125; complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125; matrix I; inline int pow(int x,int y) &#123; int res=1;for(;y;y&gt;&gt;=1,x=1ll*x*x%MOD) if(y&amp;1) res=1ll*res*x%MOD; return res%MOD; &#125; inline matrix pow(matrix x,int y) &#123; matrix res=I;for(;y;y&gt;&gt;=1,x=x*x) if(y&amp;1) res=res*x; return res; &#125;&#125;using namespace OI;namespace MTT &#123; #define BLOCK 32768 int limit=1,cnt=0,filp[N&lt;&lt;2],Ans[N&lt;&lt;2]; complex A1[N&lt;&lt;2],B1[N&lt;&lt;2],A2[N&lt;&lt;2],B2[N&lt;&lt;2],X[N&lt;&lt;2],omg[N&lt;&lt;2]; inline void fft(complex *f,short inv)&#123; for(int i=0;i&lt;limit;++i)if(i&lt;filp[i])std::swap(f[i],f[filp[i]]); for(int p=1;p&lt;limit;p&lt;&lt;=1) for(complex *a=f;a!=f+limit;a+=(p&lt;&lt;1)) for(int l=0;l&lt;p;++l)&#123; complex t=a[l+p]*omg[limit/(p&lt;&lt;1)*l]; a[l+p]=a[l]-t,a[l]=a[l]+t; &#125; &#125; inline void mtt(int *A,int *B)&#123; while(limit&lt;(k*3+5)) limit&lt;&lt;=1,++cnt; for(int i=0;i&lt;limit;++i) filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(cnt-1)); for(int i=0;i&lt;limit;++i) A1[i].x=A[i]&amp;(BLOCK-1),A2[i].x=A[i]&gt;&gt;15; for(int i=0;i&lt;limit;++i) B1[i].x=B[i]&amp;(BLOCK-1),B2[i].x=B[i]&gt;&gt;15; for(int i=0;i&lt;limit;++i) omg[i]=(complex)&#123;cos(i*PI*2/limit),sin(i*PI*2/limit)&#125;; fft(A1,1),fft(B1,1);fft(A2,1),fft(B2,1); for(int i=0;i&lt;limit;++i)&#123; complex a1=A1[i],a2=A2[i],b1=B1[i],b2=B2[i]; A1[i]=a1*b1,A2[i]=a2*b2,B1[i]=a1*b2,B2[i]=a2*b1; &#125; for(int i=0;i&lt;limit;++i) omg[i]=(complex)&#123;cos(i*PI*2/limit),-sin(i*PI*2/limit)&#125;; fft(A1,-1),fft(B1,-1);fft(A2,-1),fft(B2,-1); for(int i=0;i&lt;limit;++i) A1[i].x/=limit,A2[i].x/=limit,B1[i].x/=limit,B2[i].x/=limit; for(int i=0;i&lt;limit;++i) Ans[i]=((ll)(A1[i].x+0.5)%MOD+1073741824ll*((ll)(A2[i].x+0.5)%MOD)%MOD+ 32768ll*((ll)(B1[i].x+0.5)%MOD)%MOD+32768ll*((ll)(B2[i].x+0.5)%MOD)%MOD)%MOD; &#125;&#125;using namespace MTT;int divisor[105],tot;inline int get_G() &#123;/*获取原根*/ for(int i=2,S=MOD-1;i&lt;=S;++i) if(S%i==0) &#123;divisor[++tot]=i;while(!(S%i)) S/=i;&#125; for(int g=2;;++g) &#123; bool ok=true; for(int j=1;j&lt;=tot;++j) if(pow(g,(MOD-1)/divisor[j])==1) &#123;ok=false;break;&#125; if(ok) return g; &#125;&#125;matrix w,s;int main() &#123; I.c[0][0]=I.c[1][1]=I.c[2][2]=1; m=IN(),k=IN(),n=IN(),x=IN(),y=IN(),MOD=IN();--x,--y; /*num其实就是上文中的单位根，这里预处理一下计算方便些*/ num[0]=1,num[1]=pow(G=get_G(),(MOD-1)/k); for(int i=2;i&lt;k;++i) num[i]=1ll*num[1]*num[i-1]%MOD; for(int i=0;i&lt;m;++i) for(int j=0;j&lt;m;++j) w.c[i][j]=IN(); for(int i=0;i&lt;(k&lt;&lt;1|1);++i) A[i]=num[(k-1ll*i*(i-1)/2%k)%k]; s.c[0][x]=1; for(int i=0;i&lt;k;++i) B[i]=1ll*num[1ll*i*(i-1)/2%k]*(s*pow(w*num[i]+I,n)).c[0][y]%MOD; /*计算后面两个多项式的值*/ reverse(B,B+k+1),mtt(A,B); int invk=pow(k,MOD-2); for(int i=0;i&lt;k;++i) printf("%lld\n",1ll*Ans[i+k]*invk%MOD*num[1ll*i*(i-1)/2%k]%MOD); /*计算答案*/ return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>FFT</tag>
        <tag>单位根反演</tag>
        <tag>MTT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI2019]校园旅行 生成树+DP luoguP5292]]></title>
    <url>%2F2019%2F04%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5292%2F</url>
    <content type="text"><![CDATA[$myy$ 出的神题……貌似正解并不难但是没有人切…… $30$ 分可以用 $DP$ ，设 $f[i][j]$ 表示 $i$ 到 $j$ 是否有一条满足条件的路径。对于有一条满足条件的路径的 $i,j$ ，我们枚举连接 $i$ 的点和连接 $j$ 的点，如果这两个点的标记相同，那么既然 $i,j​$ 合法，这两个点也一定合法。 不过这样的复杂度是 $O(m^2)$ 的，所以只能过 $30$ 分。 然后考虑优化，我们发现所有的边也就只有三种： 该边连接的两个点的标记相同 两个点的标记都为 $1$ 两个点的标记都为 $0​$ 改边连接的两个点的标记不同 然后我们开 $3$ 个图，对于每一条读入进来的边，如果属于第一种就插入到第一个图中，其他同理。 然后会发现这三个图都是有若干个连通块组成的，可以知道，如果我们留下来的仅是该连通块的生成树也不会对答案产生影响，但是边数却大大减少！ 但是直接对每个连通块求生成树是不对的，因为生成树上任意两个点之间的路径经过的边的条数的奇偶是确定的，并且只有二分图满足该条件，不过我们无法保证连通块是二分图，也就是说，连通块中的任意两个点之间的路径经过的边的条数的奇偶是不确定的。 那么我们现在需要做的就是，如何使得不是二分图的连通块所求出的生成树可以满足——任意两个点之间的路径经过的边的条数的奇偶是不确定的。 仔细想想后发现并不难，我们只需要在生成树上加上一个奇环就好了，当然也等价于在生成树上的某一个点上加个自环。 这就很好办了，现在我们的边数已经大大减少了，这个时候再跑原先的 $30$ 分算法就可以过了。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;#define MKP make_pairconst int N=5e3+7;const int M=5e5+7;int n,m,q,s[N],vis[N],f[N][N];int flag,sta[N],top;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;struct Graph &#123; int head[N],nxt[M&lt;&lt;1],to[M&lt;&lt;1],from[N],cnt; void ins(int u,int v) &#123; ++cnt,nxt[cnt]=head[u],to[cnt]=v,head[u]=cnt; ++cnt,nxt[cnt]=head[v],to[cnt]=u,head[v]=cnt; &#125; void check(int u,int col) &#123; vis[u]=col,sta[++top]=u; for(int i=head[u];i;i=nxt[i]) if(!vis[to[i]]) from[to[i]]=u,check(to[i],3-col); else flag|=(vis[to[i]]!=3-col); &#125; void solve() &#123; queue&lt;pair&lt;int,int&gt; &gt; q; while(!q.empty()) q.pop(); for(int i=1;i&lt;=n;++i) f[i][i]=1,q.push(MKP(i,i)); for(int i=1;i&lt;=n;++i) for(int j=head[i];j;j=nxt[j]) if(s[i]==s[to[j]]) f[i][to[j]]=1,q.push(MKP(i,to[j])); while(!q.empty()) &#123; int x=q.front().first,y=q.front().second,u,v; q.pop(); for(int i=head[x];i;i=nxt[i]) for(int j=head[y];j;j=nxt[j]) if(!f[u=to[i]][v=to[j]]&amp;&amp;s[u]==s[v]) f[u][v]=f[v][u]=1,q.push(MKP(u,v)); &#125;return; &#125;&#125;G[3],t;char str[N];int main() &#123; IN(n),IN(m),IN(q); scanf("%s",str); for(int i=0;i&lt;n;++i) s[i+1]=str[i]-'0'; for(int i=1;i&lt;=m;++i) &#123; int x,y;IN(x),IN(y); if(s[x]==s[y]) &#123; if(s[x]) G[0].ins(x,y); else G[1].ins(x,y); &#125; else G[2].ins(x,y); &#125; for(int k=0;k&lt;=2;++k) &#123; memset(vis,0,sizeof(vis)); for(int i=1;i&lt;=n;++i) if(!vis[i]) &#123; flag=top=0,G[k].check(i,1); while(top) &#123; int x=sta[top]; if(G[k].from[x]) t.ins(G[k].from[x],x); --top; &#125;if(flag) t.ins(i,i); &#125; &#125; t.solve(); for(int i=1,x,y;i&lt;=q;++i) IN(x),IN(y),printf(f[x][y]?"YES\n":"NO\n"); return 0;&#125; 额……其实这份代码在 $luogu$ 上会被卡成 $70$ ，不过那是在没开 $O2$ 的情况下的，开了 $O2$ 顿时飞起！(幸好这题在考场上就是开 $O2$ 的)。]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2012]魔幻棋盘 二维线段树+差分 luoguP2086/bzoj2788]]></title>
    <url>%2F2019%2F04%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2086%2F</url>
    <content type="text"><![CDATA[细节诸多………… $gcd$ 显然可以用线段树维护，但是如果是区间修改的话就不好办了。这个时候我们需要将原矩阵以棋盘守护者的位置为中心进行差分，那么区间修改就变为单点修改了，$gcd$ 自然好维护多了。 但是当我们整体加的时候，因为我们对原矩阵进行了拆分，所以对于每个点是加是减还是不动的话需要分类讨论一番。 经过观察我们会发现，有三种情况(棋盘守护者的位置为 $(X,Y)$ 询问矩阵不包括 $(X,Y)$ 询问矩阵包含棋盘守护者所在的 $X$ 轴或是 $Y$ 轴。 询问矩阵不包含棋盘守护者所在的 $X$ 轴或是 $Y$ 轴。 询问矩阵包括 $(X,Y)$ 这个时候我们可以自己更改原矩阵，然后输出其差分矩阵寻找规律了。需要注意的是判断的时候的边界情况以及自己修改的点的位置是否正确。细节很多，需要注意。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;#define F(i,x,y) for((i)=(x);(i)&lt;=(y);++(i))#define R(i,x,y) for((i)=(x);(i)&gt;=(y);--(i)) const int N=5e5+7;const int inf=1e9+9; int n,m;LL a[N],b[N];int id(int x,int y) &#123;return (x-1)*m+y;&#125; namespace OI &#123; LL abs(LL x) &#123;return x&gt;=0?x:-x;&#125; LL gcd(LL x,LL y) &#123;return y?gcd(y,x%y):abs(x);&#125; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x; &#125;&#125;using namespace OI; namespace _2D_Segment_tree &#123;/*四分线段树*/ #define midl ((x1+x2)&gt;&gt;1) #define midr ((y1+y2)&gt;&gt;1) int tot,root; struct Node &#123;LL v;int ll,lr,rl,rr;&#125;t[N&lt;&lt;4]; void pushup(int x) &#123; LL vl=gcd(t[t[x].ll].v,t[t[x].lr].v); LL vr=gcd(t[t[x].rl].v,t[t[x].rr].v); t[x].v=gcd(vl,vr);return; &#125; void build(int&amp;x,int x1,int y1,int x2,int y2) &#123; if(x1&gt;x2||y1&gt;y2) return;x=++tot; if(x1==x2&amp;&amp;y1==y2) &#123;t[x].v=a[id(x1,y1)];return;&#125; build(t[x].ll,x1,y1,midl,midr); build(t[x].lr,midl+1,y1,x2,midr); build(t[x].rl,x1,midr+1,midl,y2); build(t[x].rr,midl+1,midr+1,x2,y2); pushup(x);return; &#125; void change(int x,int x1,int y1,int x2,int y2,int X,int Y,LL val) &#123; if(x1&gt;X||X&gt;x2||y1&gt;Y||Y&gt;y2) return; if(x1==x2&amp;&amp;y1==y2) &#123;t[x].v+=val;return;&#125; change(t[x].ll,x1,y1,midl,midr,X,Y,val); change(t[x].lr,midl+1,y1,x2,midr,X,Y,val); change(t[x].rl,x1,midr+1,midl,y2,X,Y,val); change(t[x].rr,midl+1,midr+1,x2,y2,X,Y,val); pushup(x);return; &#125; LL query(int x,int x1,int y1,int x2,int y2,int X1,int Y1,int X2,int Y2) &#123; if(x1&gt;X2||x2&lt;X1||y1&gt;Y2||y2&lt;Y1) return 0; if(X1&lt;=x1&amp;&amp;Y1&lt;=y1&amp;&amp;x2&lt;=X2&amp;&amp;y2&lt;=Y2) return t[x].v; LL vll=query(t[x].ll,x1,y1,midl,midr,X1,Y1,X2,Y2); LL vlr=query(t[x].lr,midl+1,y1,x2,midr,X1,Y1,X2,Y2); LL vrl=query(t[x].rl,x1,midr+1,midl,y2,X1,Y1,X2,Y2); LL vrr=query(t[x].rr,midl+1,midr+1,x2,y2,X1,Y1,X2,Y2); return gcd(vll,gcd(vlr,gcd(vrl,vrr))); &#125;&#125;using namespace _2D_Segment_tree; int main() &#123; IN(n),IN(m); int X,Y,T,i,j;IN(X),IN(Y),IN(T); for(int i=1;i&lt;=n*m;++i) IN(a[i]); /*-------对原矩阵进行差分-------*/ for(int i=1;i&lt;=n*m;++i)&#123; if((i-1)%m+1&lt;Y) b[i]=a[i]-a[i+1]; else if((i-1)%m+1&gt;Y) b[i]=a[i]-a[i-1]; else b[i]=a[i]; &#125; for(int i=1;i&lt;=n*m;++i) &#123; if((i-1)/m+1&lt;X) a[i]=b[i]-b[i+m]; else if((i-1)/m+1&gt;X) a[i]=b[i]-b[i-m]; else a[i]=b[i]; &#125; /*----------------------------*/ build(root,1,1,n,m); while(T--) &#123; int op,x1,y1,x2,y2;IN(op),IN(x1),IN(y1),IN(x2),IN(y2); if(!op) printf("%lld\n",query(1,1,1,n,m,X-x1,Y-y1,X+x2,Y+y2)); else &#123; LL val;IN(val); if(x1&lt;=X&amp;&amp;x2&gt;=X&amp;&amp;y1&lt;=Y&amp;&amp;y2&gt;=Y) &#123;/*包含了(X,Y)*/ change(1,1,1,n,m,X,Y,val); if(y1-1&gt;=1) change(1,1,1,n,m,X,y1-1,-val); if(y2+1&lt;=m) change(1,1,1,n,m,X,y2+1,-val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,Y,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,Y,-val); if(x1-1&gt;=1&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x1-1,y1-1,val); if(x1-1&gt;=1&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x1-1,y2+1,val); if(x2+1&lt;=n&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x2+1,y1-1,val); if(x2+1&lt;=n&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x2+1,y2+1,val); &#125; else if(y1&lt;=Y&amp;&amp;Y&lt;=y2) &#123;/*包含Y轴*/ if(x1&lt;X&amp;&amp;x2&lt;X) &#123;/*在上面*/ change(1,1,1,n,m,x2,Y,val); if(y1-1&gt;=1) change(1,1,1,n,m,x2,y1-1,-val); if(y2+1&lt;=m) change(1,1,1,n,m,x2,y2+1,-val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,Y,-val); if(x1-1&gt;=1&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x1-1,y1-1,val); if(x1-1&gt;=1&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x1-1,y2+1,val); &#125; else if(x1&gt;X&amp;&amp;x2&gt;X) &#123;/*在下面*/ change(1,1,1,n,m,x1,Y,val); if(y1-1&gt;=1) change(1,1,1,n,m,x1,y1-1,-val); if(y2+1&lt;=m) change(1,1,1,n,m,x1,y2+1,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,Y,-val); if(x2+1&lt;=n&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x2+1,y1-1,val); if(x2+1&lt;=n&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x2+1,y2+1,val); &#125; &#125; else if(x1&lt;=X&amp;&amp;X&lt;=x2) &#123;/*包含X轴*/ if(y1&lt;Y&amp;&amp;y2&lt;Y) &#123;/*在左边*/ change(1,1,1,n,m,X,y2,val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,y2,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,y2,-val); if(y1-1&gt;=1) change(1,1,1,n,m,X,y1-1,-val); if(y1-1&gt;=1&amp;&amp;x1-1&gt;=1) change(1,1,1,n,m,x1-1,y1-1,val); if(y1-1&gt;=1&amp;&amp;x2+1&lt;=n) change(1,1,1,n,m,x2+1,y1-1,val); &#125; else if(y1&gt;Y&amp;&amp;y2&gt;Y) &#123;/*在右边*/ change(1,1,1,n,m,X,y1,val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,y1,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,y1,-val); if(y2+1&lt;=m) change(1,1,1,n,m,X,y2+1,-val); if(y2+1&lt;=m&amp;&amp;x1-1&gt;=1) change(1,1,1,n,m,x1-1,y2+1,val); if(y2+1&lt;=m&amp;&amp;x2+1&lt;=n) change(1,1,1,n,m,x2+1,y2+1,val); &#125; &#125; else &#123;//剩下的判断四个角 if(x2&lt;X&amp;&amp;y2&lt;Y) &#123;//左上角 change(1,1,1,n,m,x2,y2,val); if(y1-1&gt;=1) change(1,1,1,n,m,x2,y1-1,-val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,y2,-val); if(x1-1&gt;=1&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x1-1,y1-1,val); &#125; else if(x2&lt;X&amp;&amp;y1&gt;Y) &#123;/*右上角*/ change(1,1,1,n,m,x2,y1,val); if(y2+1&lt;=m) change(1,1,1,n,m,x2,y2+1,-val); if(x1-1&gt;=1) change(1,1,1,n,m,x1-1,y1,-val); if(x1-1&gt;=1&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x1-1,y2+1,val); &#125; else if(x1&gt;X&amp;&amp;y2&lt;Y) &#123;/*左下角*/ change(1,1,1,n,m,x1,y2,val); if(y1-1&gt;=1) change(1,1,1,n,m,x1,y1-1,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,y2,-val); if(x2+1&lt;=n&amp;&amp;y1-1&gt;=1) change(1,1,1,n,m,x2+1,y1-1,val); &#125; else if(x1&gt;X&amp;&amp;y1&gt;Y) &#123;/*右下角*/ change(1,1,1,n,m,x1,y1,val); if(y2+1&lt;=m) change(1,1,1,n,m,x1,y2+1,-val); if(x2+1&lt;=n) change(1,1,1,n,m,x2+1,y1,-val); if(x2+1&lt;=n&amp;&amp;y2+1&lt;=m) change(1,1,1,n,m,x2+1,y2+1,val); &#125; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>二维线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI2019]多边形 组合数学 luoguP5288]]></title>
    <url>%2F2019%2F04%2F12%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5288%2F</url>
    <content type="text"><![CDATA[$\texttt{HNOI2019}$ 终于改出来一道题目了……感谢 $JerryC$ 跟我一起讨论，不然我也看不懂题解。这题真的是 $\texttt{HNOI2019}$ 最可做的题啊，可想而知 $\texttt{HNOI2019}$ 有多么毒瘤了。 $orz yyb$ ，感谢 $yyb$ 大佬的题解。 这一题一共有两问，并且部分分也比较多，接下来我们一起来逐一攻破这些特殊条件。 1.只有第一问且 $m=0$ 的情况其实这个时候我们可以发现，最终的答案是要满足所有的点都连向 $n$ 。 对于每一次旋转操作，可以让 一个没有连向 $n$ 的点连向 $n$ ，并且一次旋转操作也最多可以使得一个没有连向 $n$ 的点连向 $n$ 。既然要求最少步数，我们考虑最优情况：每一次旋转都有一个新的点连向 $n$ 。这个时候最终需要的最少步数显然就是 $n-1-$已经与 $n$ 连接了的点数，为什么 $-1$ ？因为最终需要连向 $n$ 的点不包括 $n$ 。(ps：这里指的已经与 $n$ 连接了的点数其实包括 $1$ 与 $n-1$) 。 至于代码实现的话，我们用个 $vector$ 来存连接的点，最后统计一下 $size$ 即可。 2.有两问且 $m=0$ 的情况初始局面的第一问我们已经解决了，现在我们来看看怎么解决初始局面的第二问。 假设当前与 $n$ 连接了的点的集合为 $S=\{a_1,a_2,\cdots ,a_s\}$ ，这个时候我们将 $1$ 到 $n$ 分成若干个区间：$[1,a_1],[a_1,a_2],\cdots,[a_{s-1},a_s],[a_s,n-1]$ ，我们会发现，每一次旋转操作的四个点一定属于同一个区间 。在最终状态，每一个区间中的所有的点都是连向 $n$ 的。 那么我们考虑计算每一个区间的操作序列，我们设 $[a_i,a_{i+1}]$ 区间的操作序列长度为 $sz(a_i)$ 。注意这个操作序列指的就是一个区间从初始状态到最终状态的所有旋转操作组成的序列。 我们现在考虑方案数，假设我们知道了 $sz(a_i),sz(a_{i+1})$ ，也就是区间 $[a_i,a_{i+1}]$ 和区间 $[a_{i+1},a_{i+2}]$ 的操作序列的长度。那么使得这两个区间都到达最终状态的方案数显然为 $C_{sz(a_i)+sz(a_{i+1})}^{sz(a_i)}$，当然也是 $C_{sz(a_i)+sz(a_{i+1})}^{sz(a_{i+1})}$ 。 这下子计算就变得简单多了，但是我们怎么求出使得单个区间变为最终状态的方案数以及当个区间的操作序列长度呢？这个时候我们可以将每一个区间 $[a_i,a_{i+1}]$ 建成一棵二叉树，每一次将 $[a_i,a_{i+1}]$ 拆成 $[a_i,p],[p,a_{i+1}]$ ，在树中这两个子区间就是 $[a_i,a_{i+1}]$ 的两个儿子。 这下子使得 $[a_i,a_{i+1}]$ 变为最终状态的方案数显然可以从其树中的两个儿子得出了，计算的方法和上面同理。 至于这个 $p$ ，假设当前区间为 $l,r$ ，我们可以选择 第一个比 $l+1$ 大且与 $r$ 连了边的点 ，那么这个时候可以理解为 拆掉 $p,r$ 这条边，然后连起来 $p,n$ 这条边 ，于是 $l,p$ 可以作为一个区间了，$p,r$ 也可以作为一个区间了。 为什么一定要选择第一个比 $l+1$ 大且与 $r$ 连了边的点呢？我们考虑两个点 $a$ 和 $b$ ，其中 $a$ 就是第一个比 $l+1$ 大且与 $r$ 连了边的点，$b$ 则是一个小于 $r$ 大于 $a$ 并且和 $r$ 连了边的点 。如果这个时候选择将 $b,r$ 断开连接 $b,n$ 的话，线段 $a,r$ 和线段 $b,n$ 显然会交叉 ，那么就不合法了。所以我们选择第一个比 $l+1$ 大且与 $r$ 连了边的点，这样至少是合法的。当然如果这个点大于 $r$ 了就没办法了。 代码的话一个 $dfs$ 可以搞定。 3.$m&gt;0$ 且只有第一问的情况首先我们会发现，第一问的答案其实就是我们的树的结点个数。 然后考虑这个旋转操作，现在有 $a&lt;b&lt;c&lt;d​$ ，我们需要求出的就是 $(a,c)​$ 旋转对第一问带来的变化。 既然 $a,c$ 是连了边的，那么在树中也一定有一个节点代表 $[a,c]$ 区间，我们先在树中找到这个节点，然后再分两种情况来讨论。 一.该节点在树中有父节点我们将图画出来： （左边的是原来的，右边的是经过了 $(a,c)$ 旋转的） 可以发现，旋转之后我们损失了 $(a,c)$ 节点，但是多了个 $(b,d)$ 节点，我们的节点数实际上是没有变的。也就是说我们第一问的答案没有变。 二.该节点在树中没有父节点这个时候 $a,c$ 肯定都是已经连向了 $n$ 的，不然不可能没有父节点。那么这个时候 $d$ 要不是 $n$ 要不是其他区间的点了。上文已经讲了，旋转操作只可能在一个区间内进行，也就是说 $d$ 只能等于 $n$ 。 那么 $d=n$ 的话树会怎么变换呢？很显然，$(a,c)$ 会消失，剩下的就是 $(a,b)$ 和 $(b,c)$ 。这个时候是少了一个点的，那么第一问的答案就要减一了。 如果从多边形的角度理解的话，会发现多了一个连接了 $n$ 的点，那么第一问的答案自然就少了一。 这个代码实现就不讲了。 4.$m&gt;0$ 且两问都有的情况解决了这个情况我们就胜利了。 也就是说现在我们需要解决 $m&gt;0$ 时第二问怎么变化。 按照上面的来就行了。 一.该节点在树中有父节点按照上面的图，我们可以先将这些节点的贡献去掉。然后再加上新的贡献即可。 二.该节点在树中没有父节点我们直接去掉 $(a,c)$ 的贡献，然后加上 $(a,b),(b,c)$ 的贡献即可。 这一部分可以参照代码了。 综上，我们解决了所有的问题，接下来贴出代码 $QwQ$ 。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include &lt;map&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const int MOD=1e9+7;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int W,n,Ans1,Ans2=1;vector&lt;int&gt; G[N];/*G[i]表示与i相连接的点的集合*/map&lt;pair&lt;int,int&gt;,int&gt; vis;/*这个是为了方便快速找到代表(a,c)节点所用的map*/inline void solve() &#123;//初始化 for(int i=2;i&lt;n;++i) G[i].push_back(i+1),G[i].push_back(i-1); G[1].push_back(n),G[1].push_back(2); G[n].push_back(n-1),G[n].push_back(1); for(int i=1;i&lt;=n;++i) sort(G[i].begin(),G[i].end());&#125;int inv[N&lt;&lt;1],fct[N&lt;&lt;1],fci[N&lt;&lt;1];/*分别对应逆元，阶乘，逆元的阶乘。主要用于计算组合数*/inline int C(int n,int m) &#123; if(n&lt;0||m&lt;0||n&lt;m) return 0; return 1ll*fct[n]*fci[m]%MOD*fci[n-m]%MOD;&#125;inline int Inv_C(int n,int m) &#123; if(n&lt;0||m&lt;0||n&lt;m) return 0; return 1ll*fci[n]*fct[m]%MOD*fct[n-m]%MOD;&#125;inline int calc(int n,int m) &#123;return C(n+m,n);&#125;inline int Inv_calc(int n,int m) &#123;return Inv_C(n+m,n);&#125;/*上面的组合数不再赘述......*/int root[N],fa[N&lt;&lt;1],sz[N&lt;&lt;1],ch[N&lt;&lt;1][2],tot;/*root[i]就是S集合中的区间ai,ai+1在树中的节点的编号*//*fa表示父节点，sz表示节点子树大小，ch表示节点的左右儿子*/void dfs(int&amp;x,int f,int l,int r) &#123; if(r-l&lt;=1) return; x=++tot,sz[x]=1,fa[x]=f; int p=lower_bound(G[r].begin(),G[r].end(),l+1)-G[r].begin(); /*找到这个p*/ p=G[r][p],vis[make_pair(l,r)]=x; /*找到p在原多边形中对应的点，并记录l,r在树中的点的编号*/ dfs(ch[x][0],x,l,p),dfs(ch[x][1],x,p,r);/*向下计算子树*/ sz[x]+=sz[ch[x][0]]+sz[ch[x][1]];/*统计子树大小*/ Ans2=1ll*Ans2*calc(sz[ch[x][0]],sz[ch[x][1]])%MOD;/*计算贡献*/&#125;int main() &#123; IN(W),IN(n); inv[0]=inv[1]=fct[0]=fci[0]=1; for(int i=2;i&lt;=n+n;++i) inv[i]=1ll*(MOD-MOD/i)*inv[MOD%i]%MOD; for(int i=1;i&lt;=n+n;++i) fct[i]=1ll*fct[i-1]*i%MOD; for(int i=1;i&lt;=n+n;++i) fci[i]=1ll*fci[i-1]*inv[i]%MOD; /*以上为初始化逆元，阶乘，逆元的阶乘*/ for(int i=1;i&lt;=n-3;++i) &#123; int x,y;IN(x),IN(y); G[x].push_back(y),G[y].push_back(x); &#125; solve(),Ans1=n-1-G[n].size(); for(int i=0,len=G[n].size();i&lt;len-1;++i) dfs(root[i],0,G[n][i],G[n][i+1]);/*计算每个区间ai,ai+1的树*/ int Size=0; for(int i=0,len=G[n].size();i&lt;len-1;++i) Ans2=1ll*Ans2*calc(Size,sz[root[i]])%MOD,Size+=sz[root[i]]; /*统计答案*/ if(!W) printf("%d\n",Ans1); else printf("%d %d\n",Ans1,Ans2); int q;IN(q); while(q--) &#123; int a,b;IN(a),IN(b); if(a&gt;b) a^=b^=a^=b; int x=vis[make_pair(a,b)];/*找到在原树中a,b所代表的节点*/ if(!W) &#123;printf("%d\n",Ans1-(fa[x]?0:1));continue;&#125; else &#123; int nowans1=Ans2; if(fa[x]) &#123; int y=fa[x],k=ch[y][1]==x; nowans1=1ll*nowans1*Inv_calc(sz[ch[x][0]],sz[ch[x][1]])%MOD; nowans1=1ll*nowans1*Inv_calc(sz[ch[y][0]],sz[ch[y][1]])%MOD; nowans1=1ll*nowans1*calc(sz[ch[x][!k]],sz[ch[y][!k]])%MOD; nowans1=1ll*nowans1*calc(1+sz[ch[y][!k]]+sz[ch[x][!k]],sz[ch[x][k]])%MOD; /*除掉贡献与增加贡献*/ &#125; else &#123; nowans1=1ll*nowans1*Inv_calc(sz[ch[x][0]],sz[ch[x][1]])%MOD; nowans1=1ll*nowans1*Inv_calc(Size-sz[x],sz[x])%MOD; nowans1=1ll*nowans1*calc(Size-sz[x],sz[ch[x][0]])%MOD; nowans1=1ll*nowans1*calc(Size-sz[x]+sz[ch[x][0]],sz[ch[x][1]])%MOD; /*除掉贡献与增加贡献*/ &#125; printf("%d %d\n",Ans1-(fa[x]?0:1),nowans1);/*输出答案*/ &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】[SDOI2017]数字表格 莫比乌斯反演 luoguP3704]]></title>
    <url>%2F2019%2F04%2F10%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3704%2F</url>
    <content type="text"><![CDATA[我们设 $n \leq m​$ ，然后开始推式子，我们将 $gcd(i,j)​$ 的值作为 “$d​$” 提出来： \prod_{d=1}^{n}\prod_{i=1}^{n}\prod_{j=1}^{m}if(gcd(i,j)=d) f[d]=\prod_{d=1}^{n}\prod_{i=1}^{n}\prod_{j=1}^{m}if(gcd(i,j)=d) f[d]=\prod_{d=1}^{n}\prod_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\prod_{j=1}^{ \lfloor\frac{m}{d}\rfloor }if(gcd(i,j)=1) f[d]=\prod_{d=1}^{n} f[d]^{\sum_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]} $\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]​$ 是个熟悉的式子，我们从这个式子继续开刀： \sum_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{ \lfloor\frac{m}{d}\rfloor }[gcd(i,j)=1]​=\sum_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{ \lfloor\frac{m}{d}\rfloor }\sum_{x|gcd(i,j)} \mu(x)​=\sum_{x=1}^{n}\mu(x)\lfloor\frac{n}{dx}\rfloor\lfloor\frac{m}{dx}\rfloor​于是原来的式子变成了： \prod_{d=1}^{n} f[d]^{\sum_{x=1}^{n}\mu(x)\lfloor\frac{n}{dx}\rfloor\lfloor\frac{m}{dx}\rfloor}​设 $T=dx$ ，并将 $T$ 提出来枚举： \prod_{d=1}^{n} f[d]^{\sum_{x=1}^{n}\mu(x)\lfloor\frac{n}{dx}\rfloor\lfloor\frac{m}{dx}\rfloor}​=\prod_{T=1}^{n}\prod_{d|T} f[d]^{\mu( \lfloor\frac{T}{d}\rfloor )\lfloor\frac{n}{T}\rfloor\lfloor\frac{m}{T}\rfloor}=\prod_{T=1}^{n}(\prod_{d|T} f[d]^{\mu( \lfloor\frac{T}{d}\rfloor )})^{\lfloor\frac{n}{T}{\rfloor\lfloor\frac{m}{T}\rfloor}}这个样子多好啊，我们可以将可爱的 $(\prod_{d|T} f[d]^{\mu( \lfloor\frac{T}{d}\rfloor )})$ 预处理，也就是枚举每一个 $d$ ，然后将可以整除 $d$ 的每一个 $T$ 都算上 $d$ 带来的贡献即可。最后的时候可以整除分块。最终的时间复杂度为 $O(\sqrt{n})$ ，当然不算上预处理时候的复杂度，如果加上预处理的复杂度，最终的复杂度应该为 $O(N(log\ N+log\ mod)+T(\sqrt{n} \ log\ mod))$ ，$log\ mod$ 就是算逆元的复杂度。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e6+2;#define MOD 1000000007template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;bool vis[N+15];int mui[N+15],inv[N+15],fib[N+15],sum[N+15],prime[N],cnt;inline int pow(int x,int y) &#123; int res=1; for(;y;y&gt;&gt;=1,x=1ll*x*x%MOD) if(y&amp;1) res=1ll*res*x%MOD; return res%MOD;&#125;inline void pre() &#123; fib[1]=inv[1]=sum[0]=sum[1]=1; vis[1]=true,mui[1]=1; for(int i=2;i&lt;=N;++i) &#123; fib[i]=(fib[i-1]+fib[i-2])%MOD; inv[i]=pow(fib[i],MOD-2),sum[i]=1; if(!vis[i]) prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=N;++j) &#123; vis[i*prime[j]]=1; if(!(i%prime[j])) break; else mui[i*prime[j]]=-mui[i]; &#125; &#125; for(int d=1;d&lt;=N;++d) &#123; if(!mui[d]) continue; for(int T=d;T&lt;=N;T+=d) sum[T]=1ll*sum[T]*(mui[d]==1?fib[T/d]:inv[T/d])%MOD; &#125; for(int i=2;i&lt;=N;++i) sum[i]=1ll*sum[i]*sum[i-1]%MOD; return;&#125;int T,n,m;int main() &#123; pre(),IN(T); while(T--) &#123; IN(n),IN(m); if(n&gt;m) swap(n,m); int ans=1,res,num; for(int l=1,r=0;l&lt;=n;l=r+1) &#123; r=min(n/(n/l),m/(m/l)); num=1ll*(n/l)*(m/l)%(MOD-1); res=1ll*sum[r]*pow(sum[l-1],MOD-2)%MOD; ans=1ll*ans*pow(res,num)%MOD; &#125; printf("%d\n",(ans+MOD)%MOD); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 不同子串个数 后缀数组.SA luoguP2408]]></title>
    <url>%2F2019%2F04%2F10%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2408%2F</url>
    <content type="text"><![CDATA[后缀数组。 假设我们现在已经求出了 $height$ 数组，我们发现，对两个后缀，其重复了的字串的个数就是 $height$ 数组所记录的数。我们举个例子： 后缀$sa[i-1]$: $aaabbdbs$后缀$sa[i]$ : $aabbdbs$ 会发现，最前面的”$aa$”是两个串都有的，”$aa$”中包含的”$a$”也是两个串都有的，这样子就有两个重复的了，可以发现这个重复个数正好是 $height[i]$ 的值。 但是后面还是有重复的啊？没关系，因为我们有所有的后缀，所以整个串中所有的重复的串都会被统计进来。所以这下子我们可以很容易的求出整个串中重复的串的个数了，就是 $\sum_{i=1}^{n}height[i]$ 。 子串的个数显然是 $\frac{n(n+1)}{2}$ ，这两项相减就是我们需要的答案了，记得开 $longlong$ 。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const int inf=1e9+9;namespace Suffix_array &#123; char s[N]; int sa[N],x[N],y[N],hep[N],height[N],n,m; void Sort() &#123; for(int i=0;i&lt;=m;++i) hep[i]=0; for(int i=1;i&lt;=n;++i) ++hep[x[i]]; for(int i=1;i&lt;=m;++i) hep[i]+=hep[i-1]; for(int i=n;i&gt;=1;--i) sa[hep[x[y[i]]]--]=y[i]; &#125; void Pre_sa() &#123; for(int i=1;i&lt;=n;++i) x[i]=s[i],y[i]=i; m=129;Sort(); for(int w=1,p=0;m=p,p&lt;n;w&lt;&lt;=1) &#123; p=0; for(int i=1;i&lt;=w;++i) y[++p]=n-w+i; for(int i=1;i&lt;=n;++i) if(sa[i]&gt;w) y[++p]=sa[i]-w; Sort(),swap(x,y),x[sa[1]]=p=1; for(int i=2;i&lt;=n;++i) x[sa[i]]=(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+w]==y[sa[i-1]+w])?p:++p; &#125;return; &#125; ll Pre_height() &#123; for(int i=1;i&lt;=n;++i) x[sa[i]]=i; int k=0,res=0; for(int i=1;i&lt;=n;++i) &#123; k-=k&gt;0; int j=sa[x[i]-1]; while(i+k&lt;=n&amp;&amp;j+k&lt;=n&amp;&amp;s[i+k]==s[j+k]) ++k; height[x[i]]=k,res+=k; &#125;return res;//直接返回height数组的和 &#125;&#125;using namespace Suffix_array;int main() &#123; scanf("%d\n",&amp;n); scanf("%s",s+1); Pre_sa(); ll ans=1ll*n*(n+1)/2; ans-=Pre_height(); printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>后缀数组.SA</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【游记】 HNOI2019酱油记]]></title>
    <url>%2F2019%2F04%2F08%2F%5B%E6%B8%B8%E8%AE%B0%5DHNOI2019%2F</url>
    <content type="text"><![CDATA[在此输入你的密码以便阅读全文 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI2012]永无乡 线段树+启发式合并 luoguP3224]]></title>
    <url>%2F2019%2F04%2F04%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3224%2F</url>
    <content type="text"><![CDATA[实际上可以用平衡树做的但是不喜欢平衡树。 还是喜欢可爱的线段树，于是打了一发线段树合并。很久没有这样子的做题感觉了，真是美妙，思路清晰，交上去一遍过(窝不会告诉泥萌窝第一次交的时候忘关文件=。=)。 我们对于每一个点维护一个权值线段树，然后用并查集维护点与点之间的联通关系。对于一个连通块，该连通块的所有结点信息都保留在该连通块的 $root$ 上。 这样子我们合并两个岛的时候 $x,y$ ，可以直接将 $x$ 所在连通块的 $root$ (简称 $fx$ ) 和 $y$ 所在连通块的 $root$ (简称 $fy$ ) 合并起来，也就是将 $fy$ 的线段树并到 $fx$ 上去。这样子 $fx$ 就维护了这两个连通块的信息了，最后我们按照并查集的套路将 $fy$ 的父亲设为 $fx$ 即可。 询问就是基础操作，权值线段树就像主席树那样询问即可。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N=1e5+7;const int Max=N*650;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;struct Seg_Tree &#123; #define mid ((l+r)&gt;&gt;1) int cnt,rt[N],val[Max],lc[Max],rc[Max]; inline void pushup(int x) &#123; val[x]=val[lc[x]]+val[rc[x]]; &#125; void update(int&amp;x,int l,int r,int pos) &#123; if(!x) x=++cnt; if(l==r) &#123;++val[x];return;&#125; if(pos&lt;=mid) update(lc[x],l,mid,pos); else update(rc[x],mid+1,r,pos); pushup(x); &#125; int query(int x,int l,int r,int k) &#123; if(l==r) return l; int th=val[lc[x]]; if(k&lt;=th) query(lc[x],l,mid,k); else return query(rc[x],mid+1,r,k-th); &#125; int merge(int x,int y,int l,int r) &#123; if(!x||!y) return x+y; if(l==r) &#123;val[x]+=val[y];return x;&#125; lc[x]=merge(lc[x],lc[y],l,mid), rc[x]=merge(rc[x],rc[y],mid+1,r); pushup(x);return x; &#125;&#125;T;int fa[N],pos[N],n,m,q;int find(int x) &#123;return fa[x]==x?x:fa[x]=find(fa[x]);&#125;int main() &#123; IN(n),IN(m); for(int i=1,x;i&lt;=n;++i) fa[i]=i,IN(x),pos[x]=i,T.update(T.rt[i],1,n,x); for(int i=1;i&lt;=m;++i) &#123; int u,v;IN(u),IN(v); int fu=find(u),fv=find(v); if(fu!=fv) T.merge(T.rt[fu],T.rt[fv],1,n),fa[fv]=fu; &#125; IN(q); for(int i=1;i&lt;=q;++i) &#123; char op[2];int x,y,k; scanf("%s",op); if(op[0]=='B') &#123; IN(x),IN(y); int fx=find(x),fy=find(y); if(fx!=fy) T.merge(T.rt[fx],T.rt[fy],1,n),fa[fy]=fx; &#125; else if(op[0]=='Q') &#123; IN(x),IN(k); int fx=find(x); if(T.val[T.rt[fx]]&lt;k) printf("-1\n"); else printf("%d\n",pos[T.query(T.rt[fx],1,n,k)]); /*我们query到的是第K大的权值而非岛屿的编号*/ /*于是加个pos数组就好了*/ &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试总结】 Test-2019.4.3 HNOI2019模拟]]></title>
    <url>%2F2019%2F04%2F03%2F%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190403%2F</url>
    <content type="text"><![CDATA[三道题目，一眼出算法。 第一道题目显然是后缀自动机，第二道题目显然是莫比乌斯反演加上杜教筛。第三道题目显然是网络流。 然而考场上都没做出来……自闭了。 真的，现在已经是傍晚了，大后天就是毒瘤的省选了……小学中现在正在举办运动会，班级群中一群人在那里一个劲的喊加油，但是，班上有人给我加油吗？除了几个好朋友之外…… 题目压缩包戳我!!!~\(≧▽≦)/~(有时链接可能会崩，如果崩了的话请稍后尝试QwQ) T1 期望得分：40分实际得分：40分正解：后缀自动机(SAM)+FFT窝的解法：哈希 题解嗯后缀自动机是会的但是感觉不好做。 于是弄了个哈希上去骗分，暴力枚举字串然后玄学哈希即可。 不会正解。。。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;map&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=666;const int inf=1e9+9;const int MOD=100000007;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int k,m,cnt,res[N*N],ans;char s[N],c[N];map&lt;int,int&gt; hash;void dfs(int step,int sum) &#123; if(step==k+1&amp;&amp;sum==m) &#123;++ans;return;&#125; if(step==k+1) return; if(sum&gt;m) return; for(int i=1;i&lt;=cnt;++i) dfs(step+1,sum+res[i]); return;&#125;int main() &#123; freopen("tele.in","r",stdin); freopen("tele.out","w",stdout); IN(k),IN(m); scanf("%s",s+1); int n=strlen(s+1); for(int i=1;i&lt;=n;++i) for(int j=i;j&lt;=n;++j) &#123; int tot=0; for(int k=i;k&lt;=j;++k) tot=(1ll*tot*27%MOD+s[k]-'a'+1)%MOD; /*大力玄学哈希+map判重*/ hash[tot]++; &#125; for(int i=1;i&lt;=n;++i) for(int j=i;j&lt;=n;++j) &#123; int tot=0; for(int k=i;k&lt;=j;++k) tot=(1ll*tot*27%MOD+s[k]-'a'+1)%MOD; res[++cnt]=hash[tot]; &#125; dfs(1,0); /*灵机一动这样写，那么k打于2的时候如果数据小可以多拿一些分*/ /*实验证明这样布星*/ printf("%d\n",ans); return 0;&#125; T2 期望得分：60分实际得分：40分正解：莫比乌斯反演+杜教筛窝的解法：莫比乌斯反演 题解考场上忘记了杜教筛，于是GG。 本来有六十分的……脑抽的窝，预处理 $\sum_{i=1}^{T}\lfloor\frac{T}{i}\rfloor$ 居然用 $O(n\sqrt{n})$ 来解决……实际上改两个字符就变成 $O(n)$ 的复杂度了，就有 $60$ 分了…… 嗯然后筛 $\mu$ 的时候可以搞个杜教筛加速，这样子的话 $\mu$ 函数的前缀和就可以 $O(n^{\frac{2}{3}})$ 筛出。不过估计是标程质量不行，题目范围只有 $10^9$ ……杜教筛可以解决 $O(10^{11})$ 左右的问题……吧? Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;map&gt;#include &lt;cstdio&gt;#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=4e6;const int inf=1e9+9;const int MOD=1000000007;bitset&lt;N+7&gt; vis;int n,mui[N+7],prime[N],cnt;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;inline void pre() &#123; mui[1]=1; for(int i=2;i&lt;N;++i) &#123; if(!vis[i]) prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt&amp;&amp;i*prime[j]&lt;N;++j) &#123; vis[i*prime[j]]=1; if(!(i%prime[j])) &#123;mui[i*prime[j]]=0;break;&#125; else mui[i*prime[j]]=-mui[i]; &#125; &#125;for(int i=1;i&lt;N;++i) mui[i]+=mui[i-1]; return;&#125;ll S(int MX) &#123; ll sum=0; for(int l=1,r;l&lt;=MX;l=r+1) &#123; r=MX/(MX/l); sum=(sum+1ll*(r-l+1)*(MX/l)%MOD)%MOD; &#125;return sum;&#125;map&lt;int,int&gt; MU;int Sum(int x) &#123;/*杜教筛*/ if(x&lt;N) return mui[x]; else if(MU.count(x)) return MU[x]; else if(!x) return 0; else &#123; int s=1; for(int l=2,r;l&lt;=x;l=r+1) &#123; r=x/(x/l); s-=(r-l+1)*Sum(x/l); &#125;return MU[x]=s; &#125;&#125;int main() &#123; freopen("math.in","r",stdin); freopen("math.out","w",stdout); scanf("%d",&amp;n); pre(); ll res=0; for(int l=1,r;l&lt;=n;l=r+1) &#123; r=n/(n/l); ll num=S(n/l); res=(res+1ll*(Sum(r)-Sum(l-1))*num*num%MOD+MOD)%MOD; &#125; printf("%lld\n",(res+MOD)%MOD); return 0;&#125; 嗯实际这题窝觉得是一道莫反板子题，但是没做出来，看来杜教筛还是不会…… T3 期望得分：50分实际得分：0分正解：最小割窝的解法：最小割+爆搜 题解看完题目后，窝决定第一个看这道题。 哇，一眼网络流题目欸！ 咦这题好像小$M$的作物欸，但是第二个操作又不对劲了……(实际上第二个操作就是文理分科那题，但是窝没做那题)。 嗯，需要花费的什么费用……费用流？！然后手画了一下图……自己模拟一下发现根本不好模拟，想着费用流板子也就 $10$ 分钟的事，于是打了个费用流照着窝之前的想法建一下边，跑一下后发现错了…… 然后苦苦思索……转眼间 $30$ 分钟过去了。发现时间过得比较快，于是决定先将暴力 $30$ 打好再想……嗯爆搜一下救过了样例(不过窝的爆搜又打错了以至于窝没拿到分？！) 嗯这个时候感觉前 $30$ 分稳了，于是观察部分分，发现有 $\%20$ 的数据不包含第二个操作，直接上小$M$的作物发现自己忘了，没办法只好自己瞎 $YY$ 一通。最后的结果发现是最小割，然后拆点，拆成牛羊两个点，源点连牛点，边权自然是其收益，羊点同理。然后中间连一条边权为 $inf$ 的边，表示这个要不圈牛要不圈羊只能圈一个。 嗯，发现还挺有道理的。对于，对于限制的话我们只需要再限制的两个牛羊点之间连上一条边权为 $inf$ 的边即可。 一遍过样例，美滋滋地开始造数据拍，嗯第一次和爆搜拍得挺顺利 $500$ 组数据全过了。 没过瘾，再来一组，结果第二组 $500$ 数据，拍到三百多个就 $WA$ 了…… 后面没有想出来，于是弃疗了。 接下来讲一讲正解怎么做 小$M$的作物自然不用讲，我们来讲讲文理分科怎么做。 对于本题的第二个操作，我们需要新建一个结点 $p​$ ，然后如果这个操作的 $a​$ 是 $0​$ 我们就从源点向其连一条边权为 $b​$ 的边，$a​$ 是 $1​$ 的情况同理。 然后呢，对于 $S$ 中的每个点，如果 $a$ 为 $0$ 则从 $p$ 向该点连边，$a$ 是 $1$ 的情况同理。 嗯，然后就是不需要拆点。然后就差不多了。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e5+2;const int inf=1e9+9;int n,m,k,a[N],b[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;namespace Dinic&#123; queue&lt;int&gt; q; int s,t,head[N],dep[N],cnt=1; struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;1]; inline void add(int u,int v,int w) &#123; G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,0&#125;,head[v]=cnt; &#125; int bfs() &#123; memset(dep,0,sizeof(dep)); dep[s]=1,q.push(s); while(!q.empty()) &#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt) &#123; int v=G[i].to; if(!dep[v]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125; &#125;return dep[t]; &#125; int dfs(int u,int flow) &#123; if(u==t||!flow) return flow; int used=0,rlow; for(int i=head[u];i;i=G[i].nxt) &#123; int v=G[i].to; if(dep[v]==dep[u]+1&amp;&amp;G[i].val&gt;0) &#123; used+=(rlow=dfs(v,min(flow-used,G[i].val))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used) dep[u]=-1; return used; &#125;&#125;using namespace Dinic;int main() &#123; freopen("work.in","r",stdin); freopen("work.out","w",stdout); IN(n),IN(m),IN(k); int sum=0,nodetot=n+1;s=0,t=n+1; for(int i=1;i&lt;=n;++i) IN(a[i]),sum+=a[i]; for(int i=1;i&lt;=n;++i) IN(b[i]); for(int i=1;i&lt;=m;++i) &#123; int x,y,z;IN(x),IN(y),IN(z); add(x,y,z),add(y,x,z); &#125; for(int i=1;i&lt;=k;++i) &#123; int size,x,y; IN(size),IN(x),IN(y); sum+=y,++nodetot; x?add(nodetot,t,y):add(s,nodetot,y); for(int j=1;j&lt;=size;++j) &#123; int c;IN(c); x?add(c,nodetot,inf):add(nodetot,c,inf); &#125; &#125; for(int i=1;i&lt;=n;++i) &#123; if(a[i]&gt;=b[i]) add(s,i,a[i]-b[i]); else add(i,t,b[i]-a[i]),sum+=b[i]-a[i]; &#125; int maxflow=0; while(bfs()) maxflow+=dfs(s,inf); printf("%d\n",sum-maxflow); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>考试总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2005]维护数列 Splay luoguP2042]]></title>
    <url>%2F2019%2F04%2F02%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2042%2F</url>
    <content type="text"><![CDATA[神奇的题目。 网上说什么做了这道题 $Splay$ 就差不多了，嗯对窝也这么觉得。于是终于码掉了。 主要涉及的操作还是提取区间，我们组需要将 $l-1$ 提取至 $root$ ， 然后将 $r+1$ 提取至 $l-1$ 的下方，最终询问的 $l,r$ 区间的 $Splay$ 就是 $r+1$ 的左孩子。 这个时候该输出的就输出，该打标记的就打标记就好了。 至于插入的话我们可以先将所有需要插入的结点 $build$ 成一棵树，然后直接挂到 $r+1$ 的左孩子即可。 但是毒瘤出题人卡空间，于是我们需要将删除的结点全部重新应用，就像垃圾回收那样，搞个栈就行了。 最后因为怕 $l-1$ 和 $r+1$ 出界我们还需要新增两个”哨兵结点”，这样子的话需要提取的结点都加上了 $1$ ，提取区间变动的两个节点就变成 $l$ 和 $r+2$ 了。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=5.5e5+7;const int inf=1e8;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;struct Splay &#123; int root,cnt; int ch[N][2],sz[N],fa[N],val[N],tag[N],rev[N]; int sum[N],lmax[N],rmax[N],smax[N]; int date[N],trash[N],top; Splay()&#123;root=cnt=top=0;&#125; bool chk(int x) &#123;return ch[fa[x]][1]==x;&#125; void clear(int node) &#123; ch[node][0]=ch[node][0]=sz[node]=fa[node]=val[node]=0, rev[node]=sum[node]=lmax[node]=rmax[node]=smax[node]=0; tag[node]=inf; &#125; int MKN() &#123; int node; node=top?trash[top--]:++cnt; clear(node);return node; &#125; void pushup(int x) &#123; int l=ch[x][0],r=ch[x][1]; sz[x]=sz[l]+sz[r]+1; sum[x]=sum[l]+sum[r]+val[x]; lmax[x]=max(lmax[l],sum[l]+val[x]+lmax[r]); rmax[x]=max(rmax[r],sum[r]+val[x]+rmax[l]); smax[x]=max(rmax[l]+lmax[r]+val[x],max(smax[l],smax[r])); &#125; void pushdown(int x) &#123; int l=ch[x][0],r=ch[x][1]; if(tag[x]!=inf) &#123; if(l) val[l]=tag[l]=tag[x],sum[l]=tag[x]*sz[l]; if(r) val[r]=tag[r]=tag[x],sum[r]=tag[x]*sz[r]; if(tag[x]&gt;=0) &#123; if(l) lmax[l]=rmax[l]=smax[l]=sum[l]; if(r) lmax[r]=rmax[r]=smax[r]=sum[r]; &#125; else if(tag[x]&lt;0) &#123; if(l) lmax[l]=rmax[l]=0,smax[l]=tag[x]; if(r) lmax[r]=rmax[r]=0,smax[r]=tag[x]; &#125; tag[x]=inf; &#125; if(rev[x]) &#123; if(l) swap(ch[l][0],ch[l][1]),swap(lmax[l],rmax[l]),rev[l]^=1; if(r) swap(ch[r][0],ch[r][1]),swap(lmax[r],rmax[r]),rev[r]^=1; rev[x]=0; &#125; &#125; void rotate(int x) &#123; int y=fa[x],z=fa[y]; pushdown(y),pushdown(x); int k=chk(x),v=ch[x][k^1]; ch[z][chk(y)]=x,fa[x]=z,ch[y][k]=v,fa[v]=y, ch[x][k^1]=y,fa[y]=x;pushup(y),pushup(x); &#125; void splay(int x,int gola=0) &#123; while(fa[x]!=gola) &#123; if(fa[fa[x]]!=gola) rotate(chk(x)^chk(fa[x])?x:fa[x]); rotate(x); &#125;if(!gola) root=x; &#125; int kth(int x) &#123; int pos=root; while(pos) &#123; pushdown(pos); if(x&lt;=sz[ch[pos][0]]) pos=ch[pos][0]; else &#123; x-=sz[ch[pos][0]]+1; if(!x) return pos; pos=ch[pos][1]; &#125; &#125;return 0; &#125; int build(int l,int r,int f) &#123; if(l&gt;r) return 0; int x=MKN(),mid=(l+r)&gt;&gt;1; ch[x][0]=build(l,mid-1,x),ch[x][1]=build(mid+1,r,x); val[x]=date[mid],fa[x]=f,pushup(x); return x; &#125; void trashcan_node(int x) &#123; if(!x) return; trash[++top]=x,trashcan_node(ch[x][0]),trashcan_node(ch[x][1]); &#125; int split(int&amp;l,int&amp;r,int pos,int tot) &#123; l=kth(pos),r=kth(pos+tot+1);splay(l),splay(r,l); &#125; void work_insert() &#123; int pos,tot,l,r; IN(pos),IN(tot); for(int i=1;i&lt;=tot;++i) IN(date[i]); split(l,r,pos+1,0); ch[r][0]=build(1,tot,r),pushup(r),pushup(root); &#125; void work_delete() &#123; int pos,tot,l,r; IN(pos),IN(tot),split(l,r,pos,tot); trashcan_node(ch[r][0]),ch[r][0]=0,pushup(r),pushup(root); &#125; void work_same() &#123; int pos,tot,c,l,r; IN(pos),IN(tot),IN(c),split(l,r,pos,tot); int p=ch[r][0]; if(p) &#123; val[p]=tag[p]=c,sum[p]=c*sz[p]; if(c&gt;=0) lmax[p]=rmax[p]=smax[p]=sum[p]; else if(c&lt;0) lmax[p]=rmax[p]=0,smax[p]=c; &#125;pushup(r),pushup(root); &#125; void work_rev() &#123; int pos,tot,l,r; IN(pos),IN(tot),split(l,r,pos,tot); if(ch[r][0]) &#123; swap(ch[ch[r][0]][0],ch[ch[r][0]][1]); swap(lmax[ch[r][0]],rmax[ch[r][0]]); rev[ch[r][0]]^=1; &#125;pushup(r),pushup(root); &#125; void work_sum() &#123; int pos,tot,l,r; IN(pos),IN(tot),split(l,r,pos,tot); printf("%d\n",sum[ch[r][0]]); &#125; void work_max() &#123; int l=kth(1),r=kth(sz[root]);splay(l),splay(r,l); printf("%d\n",smax[ch[r][0]]); &#125;&#125;T;int n,m;char op[25];int main() &#123; // freopen("testdata.in","r",stdin); // freopen("myout.out","w",stdout); IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(T.date[i+1]); T.smax[0]=T.date[1]=-inf,T.date[n+2]=inf; T.root=T.build(1,n+2,0); while(m--) &#123; scanf("%s",op); if(op[0]=='M') &#123; if(op[3]=='E') T.work_same(); else T.work_max(); &#125; else if(op[0]=='I') T.work_insert(); else if(op[0]=='D') T.work_delete(); else if(op[0]=='R') T.work_rev(); else if(op[0]=='G') T.work_sum(); &#125; return 0;&#125; 哎离 $HNOI2019$ 不远了，感觉多多更博增加 $RP$ …… $QwQ$]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>splay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [Vani有约会]雨天的尾巴 线段树+启发式合并 luoguP4556]]></title>
    <url>%2F2019%2F04%2F02%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4556%2F</url>
    <content type="text"><![CDATA[毒瘤出题人，卡时间卡空间！ 嗯，如果这一题不是在树上的话貌似可以直接权值线段树维护？不过到了树上的话难道可以权值线段树+树链剖分，表示不明白。于是尝试了一发线段树合并，但是我们的线段树是权值线段树。 我们的权值线段树是用来存原树中 $x$ 结点以及其子树中的每种救济粮的个数。 怎么个合并法呢，其实特别简单，两个线段树同时进行，发现到了一个节点的时候一个线段树有这个结点另一个没有这个节点，那么这个节点以及其下面的结点的信息都可以直接作为新线段树的这个节点的信息。 当然如果到了一个叶子节点，直接将两个线段树的这个位置的救济粮的个数加起来即可。 嗯，每个线段树再维护一个值存出现最多次数的救济粮是什么，这样就可以得到答案了。但是为了避免一些结点与其子树压根就没有救济粮的情况，我们需要判断一下这个节点与其子树是否有救济粮即可。 然后直接一遍 $dfs$ ，遍历 $u$ 的所有孩子然后拿 $u$ 的线段树依次去和 $u$ 的儿子的线段树合并。最终合并完的线段树存储的就是 $u$ 以及其子树的信息了。然后就可以获得答案了。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e5+7;const int LogN=27;const int M=6e6+7;int n,m,q,X[N],Y[N],Z[N],Ans[N],head[N],cnt;struct Edge &#123;int nxt,to;&#125;G[N&lt;&lt;1];inline void add(int u,int v) &#123; G[++cnt]=(Edge)&#123;head[u],v&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u&#125;,head[v]=cnt;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=--x;&#125;namespace Lca &#123; int dep[N],fa[N][LogN+4]; void dfs(int u,int f) &#123; fa[u][0]=f,dep[u]=dep[f]+1; for(int i=1;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i-1]][i-1]; for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) dfs(G[i].to,u); &#125; int lca(int x,int y) &#123; if(x==y)return x; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=LogN;i&gt;=0;--i) if(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i]; if(x==y)return x; for(int i=LogN;i&gt;=0;--i) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0]; &#125;&#125;using namespace Lca;struct Segment_Tree &#123; #define mid ((l+r)&gt;&gt;1) int rt[N],lc[M],rc[M],d[M],t[M],tot; void pushup(int x) &#123; if(d[lc[x]]&gt;=d[rc[x]]) d[x]=d[lc[x]],t[x]=t[lc[x]]; else d[x]=d[rc[x]],t[x]=t[rc[x]]; &#125; int update(int x,int l,int r,int pos,int val) &#123; if(!x) x=++tot; if(l==r) &#123;d[x]+=val;t[x]=l;return x;&#125; if(pos&lt;=mid) lc[x]=update(lc[x],l,mid,pos,val); else rc[x]=update(rc[x],mid+1,r,pos,val); pushup(x);return x; &#125; int merge(int x,int y,int l,int r) &#123; if(!x) return y; if(!y) return x; if(l==r) &#123;d[x]+=d[y];t[x]=l;return x;&#125; lc[x]=merge(lc[x],lc[y],l,mid); rc[x]=merge(rc[x],rc[y],mid+1,r); pushup(x);return x; &#125;&#125;T;void calc(int u,int f) &#123; for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) calc(G[i].to,u), T.rt[u]=T.merge(T.rt[u],T.rt[G[i].to],1,m); if(T.d[T.rt[u]]) Ans[u]=T.t[T.rt[u]];&#125;int main() &#123; IN(n),IN(q); for(int i=1,x,y;i&lt;n;++i) IN(x),IN(y),add(x,y); for(int i=1;i&lt;=q;++i) IN(X[i]),IN(Y[i]),IN(Z[i]),m=max(m,Z[i]); //权值线段树离线处理 dfs(1,0); for(int i=1;i&lt;=q;++i) &#123; int lca_xy=lca(X[i],Y[i]); T.rt[X[i]]=T.update(T.rt[X[i]],1,m,Z[i],1); T.rt[Y[i]]=T.update(T.rt[Y[i]],1,m,Z[i],1); T.rt[lca_xy]=T.update(T.rt[lca_xy],1,m,Z[i],-1); if(fa[lca_xy][0]) T.rt[fa[lca_xy][0]]=T.update(T.rt[fa[lca_xy][0]],1,m,Z[i],-1); &#125; calc(1,0); for(int i=1;i&lt;=n;++i) printf("%d\n",Ans[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法】 虚树入门]]></title>
    <url>%2F2019%2F04%2F01%2F%5B%E7%AE%97%E6%B3%95%5D%E8%99%9A%E6%A0%91%2F</url>
    <content type="text"><![CDATA[在此输入你的密码以便阅读全文 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>学习笔记</tag>
        <tag>虚树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HAOI2012]高速公路 线段树 luoguP2221]]></title>
    <url>%2F2019%2F03%2F31%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2221%2F</url>
    <content type="text"><![CDATA[$3$ 月份的最后一篇题解了呢……明天就属于 $4$ 月了，离省选不远了…$QwQ$… 发现窝真的很制杖，我们先来聊聊刚开始窝的想法。 我画了画图，然后发现，对于最后答案的分母(不是最简)，是这个序列中这些数的值(废话)，然后发现了每个点的出现次数，然后线段树维护求和。发现效率很低于是试图将出现次数般到二维平面上，然后曼哈顿距离转切比雪夫距离然后二维树状数组维护然后 $WA$ 了然后弃疗。 你可能认为窝很傻对吧？ 嗯对窝是挺傻的。 正解是线段树，没猜错，但是和什么二维树状数组有什么关系 我们考虑区间中的一个点 $i$ ，权值为 $v_i$ 。然后我们观察当前询问区间中有多少子区间包含了 $v_i$ ，这个个数就是点 $i$ 做出的贡献。现在我们来考虑怎么计算这个包含了 $i$ 的子区间个数。 可以发现，我们从 $i$ 向左扩展若干个点，然后又向右扩展若干个点，这样子一来就成了一个包含了 $i$ 子区间。这个就很好计算了，答案显然为 $(i-l)\times(r-i)$ 。然后还要算进没有向左/右扩展的情况，并且算上权值，最终 $i$ 造成的贡献显然为： v_i\times(i-l+1)\times (r-i+1)那么我们将式子拆开可以得到： v_i\times [i\times (r-i+1)-l\times(r-i+1)+(r-i+1)]v_i\times [i\times r-i\times i+i-l\times r+l\times i-l+r-i+1]v_i\times [i(r+l)-i^2-lr-l+r+1]v_i i(r+l)-v_ii^2-v_ilr+v_i(r-l)+v_i其中 $l,r$ 为当前询问区间，这个是可以直接算出的。我们发现我们需要维护的就是 $v_i\ ,\ v_ii\ ,\ v_ii^2$ 三个值，用线段树维护即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+2;const int inf=1e9+9;int n,m;char op[2];namespace OI &#123; template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x; &#125; template &lt;typename _Tp&gt; _Tp gcd(_Tp x,_Tp y) &#123; return y?gcd(y,x%y):x; &#125;&#125;using namespace OI;struct Segment_Tree &#123; #define mid ((l+r)&gt;&gt;1) #define LS(x) ((x)&lt;&lt;1) #define RS(x) ((x)&lt;&lt;1|1) ll ans1,ans2,ans3; ll sum1[N&lt;&lt;2],sum2[N&lt;&lt;2],sum3[N&lt;&lt;2]; ll tag[N&lt;&lt;2],suq[N&lt;&lt;2],rle[N&lt;&lt;2],len[N&lt;&lt;2]; void build(ll x,ll l,ll r) &#123; if(l==r) &#123; len[x]=1,suq[x]=l,rle[x]=l*l; return; &#125; build(LS(x),l,mid),build(RS(x),mid+1,r); len[x]=len[LS(x)]+len[RS(x)]; suq[x]=suq[LS(x)]+suq[RS(x)], rle[x]=rle[LS(x)]+rle[RS(x)]; &#125; void pushdown(ll x,ll l,ll r) &#123; ll k=tag[x];tag[x]=0; sum1[LS(x)]+=len[LS(x)]*k,sum1[RS(x)]+=len[RS(x)]*k; sum2[LS(x)]+=suq[LS(x)]*k,sum2[RS(x)]+=suq[RS(x)]*k; sum3[LS(x)]+=rle[LS(x)]*k,sum3[RS(x)]+=rle[RS(x)]*k; tag[LS(x)]+=k,tag[RS(x)]+=k; &#125; void update(ll x,ll l,ll r,ll L,ll R,ll v) &#123; if(L&lt;=l&amp;&amp;r&lt;=R) &#123; tag[x]+=v; sum1[x]+=len[x]*v; sum2[x]+=suq[x]*v; sum3[x]+=rle[x]*v; return; &#125; if(tag[x])pushdown(x,l,r); if(L&lt;=mid)update(LS(x),l,mid,L,R,v); if(R&gt;mid)update(RS(x),mid+1,r,L,R,v); sum1[x]=sum1[LS(x)]+sum1[RS(x)]; sum2[x]=sum2[LS(x)]+sum2[RS(x)]; sum3[x]=sum3[LS(x)]+sum3[RS(x)]; &#125; void query(ll x,ll l,ll r,ll L,ll R) &#123; if(L&lt;=l&amp;&amp;r&lt;=R) &#123; ans1+=sum1[x],ans2+=sum2[x],ans3+=sum3[x]; return; &#125; if(tag[x])pushdown(x,l,r); if(L&lt;=mid)query(LS(x),l,mid,L,R); if(R&gt;mid)query(RS(x),mid+1,r,L,R); &#125; &#125;T;int main() &#123; IN(n),IN(m); T.build(1,1,n); for(int i=1;i&lt;=m;++i) &#123; scanf("%s",op); ll l,r;IN(l),IN(r);--r; ll v; if(op[0]=='C') IN(v),T.update(1,1,n,l,r,v); else if(op[0]=='Q') &#123; T.ans1=T.ans2=T.ans3=0; T.query(1,1,n,l,r); ll res1=T.ans1,res2=T.ans2,res3=T.ans3; ll ans=(r-l+1-l*r)*res1+(r+l)*res2-res3; ll len=(r-l+1)*(r-l+2)/2; ll esw=gcd(ans,len); printf("%lld/%lld\n",ans/esw,len/esw); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SDOI2011]消耗战 虚树+树形DP luoguP2495]]></title>
    <url>%2F2019%2F03%2F31%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2495%2F</url>
    <content type="text"><![CDATA[去 $Mina!$ 上了解了一波虚树，$\%\%\% XZY$ 学长太强辣！ 这次总算明白了些虚树，然后 $XZY$ 大佬的例题就是消耗战。 于是看了过来。 首先，考虑普通的树形 $DP$ ，设 $dp[u]$ 表示在 $u$ 为根的子树中满足目标所花费的最小代价 ，那么转移方程也不是很难，我们枚举 $u$ 的孩子 $v$ 。如果 $v$ 本身就是”能源丰富的岛屿”那么 $dp[u]+=G[i].val$ ，其中 $G[i].val$ 表示 $u$ 到 $v$ 的边的边权。为什么这样转移呢？因为 $v$ 必须切断。 那么没有必要切断的岛屿呢？就分切/不切两种情况了： dp[u]+=min(G.val[i],dp[G.to[i]]);这个也很好懂。 这个时候我们打完代码交一发发现只有 $40$ 分……往下看，可以看到 $n$ 到最后的顶尖数据有 $250000$ …… 但是我们可以观察到，$\sum k_i \leq 5*10^5$ ，发现总共的 $k$ 也不过这么大，这个时候我们可以用虚树来解决。 $Qiuly$ ：有关虚树的文章先咕一下蛤，最近有点忙。 建好虚树后直接用上面的转移方程做就得了。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=2.5e5+7;const int LogN=27;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct graph &#123; int head[N],nxt[N&lt;&lt;1],to[N&lt;&lt;1],val[N&lt;&lt;1],cnt; void init() &#123;memset(head,-1,sizeof(head));cnt=0;&#125; graph() &#123;init();&#125; void add(int u,int v,int w) &#123; nxt[cnt]=head[u],to[cnt]=v,val[cnt]=w,head[u]=cnt++; &#125;&#125;G;int n,m,point[N],stack[N],top;ll dp[N];bool vis[N];namespace LCA &#123; int dep[N],fa[N][LogN+3],num[N][LogN+3]; int id[N],dfn,Edge_Mx; void _Pre_Lca(int u,int f) &#123; fa[u][0]=f,dep[u]=dep[f]+1,id[u]=++dfn; for(int i=1;i&lt;=LogN;++i) &#123; fa[u][i]=fa[fa[u][i-1]][i-1]; num[u][i]=min(num[u][i-1],num[fa[u][i-1]][i-1]); &#125; for(int i=G.head[u];~i;i=G.nxt[i]) if(G.to[i]!=f)num[G.to[i]][0]=G.val[i],_Pre_Lca(G.to[i],u); &#125; int lca(int x,int y) &#123; Edge_Mx=inf; if(x==y)return x; if(dep[x]&lt;dep[y])swap(x,y); for(int i=LogN;i&gt;=0;--i) if(dep[fa[x][i]]&gt;=dep[y]) Edge_Mx=min(Edge_Mx,num[x][i]),x=fa[x][i]; if(x==y)return x; for(int i=LogN;i&gt;=0;--i) if(fa[x][i]!=fa[y][i]) Edge_Mx=min(Edge_Mx,min(num[x][i],num[y][i])), x=fa[x][i],y=fa[y][i]; return fa[x][0]; &#125;&#125;using namespace LCA;bool cmp(int x,int y) &#123;return id[x]&lt;id[y];&#125;void solve(int u) &#123;//DP过程 dp[u]=0; for(int i=G.head[u];~i;i=G.nxt[i]) &#123; solve(G.to[i]); if(vis[G.to[i]])dp[u]+=G.val[i]; else dp[u]+=min((ll)G.val[i],dp[G.to[i]]); &#125;return;&#125;void build(int k) &#123;//建立虚树 sort(point+1,point+1+k,cmp); stack[top=1]=1,G.cnt=0,G.head[1]=-1; for(int i=1;i&lt;=k;++i) if(point[i]!=1) &#123; int l=lca(stack[top],point[i]); if(l!=stack[top]) &#123; while(id[l]&lt;id[stack[top-1]]) &#123; lca(stack[top-1],stack[top]); G.add(stack[top-1],stack[top],Edge_Mx); --top; &#125; if(id[l]&gt;id[stack[top-1]]) &#123; G.head[l]=-1,lca(l,stack[top]); G.add(l,stack[top],Edge_Mx),stack[top]=l; &#125; else lca(l,stack[top]),G.add(l,stack[top],Edge_Mx),--top; &#125; G.head[point[i]]=-1,stack[++top]=point[i]; &#125; for(int i=1;i&lt;top;++i) lca(stack[i],stack[i+1]),G.add(stack[i],stack[i+1],Edge_Mx);&#125;int main() &#123; IN(n); for(int i=1;i&lt;n;++i) &#123; int u,v,w;IN(u),IN(v),IN(w); G.add(u,v,w),G.add(v,u,w); &#125; _Pre_Lca(1,0),IN(m); while(m--) &#123; int k;IN(k); for(int i=1;i&lt;=k;++i)IN(point[i]),vis[point[i]]=true; build(k); solve(1),printf("%lld\n",dp[1]); for(int i=1;i&lt;=k;++i)vis[point[i]]=false; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>虚树</tag>
        <tag>题解</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [CQOI2011]动态逆序对 CDQ分治 luoguP3157]]></title>
    <url>%2F2019%2F03%2F30%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3157%2F</url>
    <content type="text"><![CDATA[一个可爱的 $CDQ$ ，我们将原始序列看成一个一个加入，然后后面的操作就是一个一个删除，这么一个一个操作我们都记下来，然后每个操作记一个 $id$ 表示它将为第几个时间点做出贡献。 当然对于原始序列的一个一个插入的操作这里的贡献是 $1$ ，删除操作的贡献自然是 $-1$ 。 每个时间点统计答案，最后输出前做一个前缀和然后依次输出就好了。 这是具体的框架，但是统计 $ans$ 数组具体怎么做呢？ 可以知道对于一个位置 $i$ ，位置上的元素是 $a_i$ 。对于一个 $j$ 满足 $j\leq i$ ，并且 $a_i\leq a_j$ ，而且还要保证 $id_j\leq id_i$ ，那么 $j$ 就可以对 $i$ 做出贡献。这个就是在 $i$ 前面的元素可以做出的贡献。$i$ 后面的元素做出的贡献同理。 这就是一个很普通的三位偏序了，注意要开 $long\ long$ 。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=2e5+2;template &lt;typename _Tp&gt; inline void IN(_Tp &amp;x)&#123; x=0;int flag=0;char ch; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int n,m,cnt,pos[N],a[N];long long ans[N];struct Query&#123;int r,v,d,id;&#125;Q[N];bool cmp(Query a,Query b) &#123;return a.d&lt;b.d;&#125;int C[N];#define lowbit(x) ((x)&amp;(-(x)))void add(int x,int v) &#123;for(;x&lt;=n;x+=lowbit(x))C[x]+=v;&#125;int sum(int x) &#123;int res=0;for(;x;x-=lowbit(x))res+=C[x];return res;&#125;inline void CDQ(int l,int r) &#123; if(l==r)return; int mid=(l+r)&gt;&gt;1; CDQ(l,mid),CDQ(mid+1,r); sort(Q+l,Q+mid+1,cmp),sort(Q+mid+1,Q+r+1,cmp); int j=l; for(int i=mid+1;i&lt;=r;++i) &#123; while(j&lt;=mid&amp;&amp;Q[j].d&lt;=Q[i].d) add(Q[j].v,Q[j].r),++j; ans[Q[i].id]+=Q[i].r*(sum(n)-sum(Q[i].v)); &#125; for(int i=l;i&lt;j;++i) add(Q[i].v,-Q[i].r); j=mid; for(int i=r;i&gt;mid;--i) &#123; while(j&gt;=l&amp;&amp;Q[j].d&gt;=Q[i].d) add(Q[j].v,Q[j].r),--j; ans[Q[i].id]+=Q[i].r*sum(Q[i].v-1); &#125; for(int i=mid;i&gt;j;--i) add(Q[i].v,-Q[i].r);&#125;int main()&#123; IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(a[i]),pos[a[i]]=i,Q[++cnt]=(Query)&#123;1,a[i],i,0&#125;; for(int i=1;i&lt;=m;++i) &#123; int x;IN(x); Q[++cnt]=(Query)&#123;-1,x,pos[x],i&#125;; &#125; CDQ(1,cnt); for(int i=1;i&lt;=m;++i) ans[i]+=ans[i-1]; for(int i=0;i&lt;m;++i) printf("%lld\n",ans[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>CDQ分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [AHOI2013]差异 后缀自动机.SAM luoguP4248]]></title>
    <url>%2F2019%2F03%2F30%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4248%2F</url>
    <content type="text"><![CDATA[刚开始发现 $SA$ 很可做，不过当时没有看范围，心想美滋滋了这个就是 $SA$ 的板子，然后一看范围心就凉了。 不过可以用 $SAM$ ，我们知道，对于两个串，它们的最长公共子串就是它们在前缀树上的 $Lca$ 。这是显然的，不明白的同学可以康康 $Qiuly$ 酱之前写的 $SAM$ ，可以观察观察图片。 我们观察式子，发现 $\sum_{1\leq i&lt;j\leq n} len(T_i)+len(T_j)$ 是等于 $\frac{(n-1)\times n\times(n+1)}{2}$ 的，这个可以 $O(1)$ 算出。 那么 $2\times lcp(T_i,T_j)$ 怎么求呢？ 那么对于一个结点 $x$ ，我们依次统计 $x$ 的儿子，并依次更新 $x$ 的 $size$ ，对于一个 $x$ 的儿子 $y$ ，枚举的时候它对答案的贡献显然是 $size[x]\times len[x]\times size[y]$ ，因为 $y$ 的子树中的任意一结点(包括 $y$ ) ，与 $x$ 之前枚举过的所有儿子的子树中的所有结点的 $Lca$ 都是 $x$ 。并且对于一个 $x$ ，它所造成的贡献就是 $Len[x]$ 。 最后统计出来的答案再乘上 $2$ 就是后面那个式子啦~\(≧▽≦)/~ 。 不过要注意一点，后缀自动机是会复制结点的，这些复制的结点不属于原串因此不能计算贡献。 然后就是代码的问题了。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e6+7;struct SAM &#123; int last,cnt; int ch[N][26],fa[N],len[N],sz[N],hep[N],tot[N]; SAM() &#123;last=cnt=1;&#125; inline void ins(int c) &#123; int p=last,np=++cnt; last=np,len[np]=len[p]+1,sz[np]=1; while(p&amp;&amp;!ch[p][c]) ch[p][c]=np,p=fa[p]; if(!p)fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1)fa[np]=q; else &#123; int nq=++cnt;len[nq]=len[p]+1; memcpy(ch[nq],ch[q],sizeof(ch[q])); fa[nq]=fa[q],fa[q]=fa[np]=nq; while(p&amp;&amp;ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125;return; &#125; inline ll calc() &#123; ll res=0; for(int i=1;i&lt;=cnt;++i) hep[len[i]]++; for(int i=1;i&lt;=cnt;++i) hep[i]+=hep[i-1]; for(int i=1;i&lt;=cnt;++i) tot[hep[len[i]]--]=i; for(int i=cnt;i&gt;=1;--i) &#123; int node=tot[i]; res+=(ll)sz[fa[node]]*sz[node]*len[fa[node]]; sz[fa[node]]+=sz[node]; &#125;return res; &#125;&#125;T;char s[N];int main() &#123; scanf("%s",s); int n=strlen(s); for(int i=0;i&lt;n;++i)T.ins(s[i]-'a'); printf("%lld\n",(ll)(n-1)*n*(n+1)/2-2*T.calc()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>后缀自动机.SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SDOI2013]森林 主席树+启发式合并 luoguP3302]]></title>
    <url>%2F2019%2F03%2F29%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3302%2F</url>
    <content type="text"><![CDATA[初看题面，看到 $K$ 大我们可以想到主席树，但是连边却又符合 $LCT$ ，但是毕竟 $LCT$ 是不能支持 $K$ 大的，因为 $Splay$ 辅助树不是二叉查找树。 不过主席树我们可以大力启发式合并，合并的时候重建节点的倍增数组并且重新建立节点的权值线段树。这样子每个节点要被修改的期望次数为 $logn​$ 次，那么时间复杂度就是 $O(nlog^2n)​$ (貌似是的)，这足以让我们过这道题了。 1.主席树如何上树上树[手动滑稽]…… 首先，对于节点 $u$ 的权值线段树，$ta$ 是由 $fa[u]$ 的权值线段树继承过来的，因为只是多了一个 $u$ ，所以主席树只是多增加了 $logn$ 个节点。 既然是从父亲节点继承过来的话，那么很显然我们可以在预处理倍增数组的时候顺便将主席树建好。 Code-builld:1234567void dfs(int u,int f) &#123; update(root[u],root[f],1,tmp,S(a[u])); fa[u][0]=f,dep[u]=dep[f]+1; for(int i=1;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i-1]][i-1]; for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) dfs(G[i].to,u);&#125; 这个很容易理解，那么我们怎么暴力合并两颗树呢？ 对于要合并的两颗树，我们选择将 $size$ 小的往 $size$ 大的并，对于给出的 $x,y$ ，我们先给 $x,y$ 连好边，然后将 $y$ 的权值线段树从 $x$ 更新，丢掉以前的。最后遍历 $y$ 的子树，更新其倍增数组和权值线段树即可。 至于 $size$ 的维护的话，我们可以找到 $x,y$ 所在的树的根。这个样子 $size$ 谁大谁小只需要判断 $x,y$ 所在的树的根的 $size$ 谁大谁小即可。我们在网下遍历 $y$ 的子树时每次都将$x$ 所在树的根的 $size$ 加一即可。 Code-merge:12345678910111213void merge(int rt,int u,int f) &#123; /*rt:x所在树的根，u:当前需要重构的节点,刚进入函数的时候为y*/ /*f:当前需要重构的节点的父节点，刚进入函数的时候为x*/ fa[u][0]=f,dep[u]=dep[f]+1;//更新深度 for(int i=1;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i-1]][i-1]; /*更新倍增数组*/ size[rt]++,//更新size sta[u]=f,//记录父亲(不是倍增数组,这是用来查询所在树的根的) vis[u]=true;//记录一下 update(root[u],root[f],1,tmp,S(a[u]));//重建 for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) merge(rt,G[i].to,u);//遍历子树&#125; 然后差不多了，至于 $sta$ 的话，因为要查询所在树的根，为了提高效率我们可以将其作为并查集的形式。 还有一点，对于 $vis$ 数组，实际上我们建树的时候就直接用 $merge$ 好了，$vis$ 只是用来判重而已，因为是森林，有很多树。所以说我们可以不用 $dfs$ 就将初始形态的树建好。 Code-pre:12for(int i=1;i&lt;=n;++i) if(!vis[i]) &#123;merge(i,i,0);sta[i]=i;&#125; 最后需要注意的就是主席树的空间要开很大，差不多是 $nlog^2n$ ，因为有很多结点。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=8e4+7;const int LogN=22;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int testcase,lastans,n,m,T,a[N],b[N],tmp,head[N],cnt;int size[N],sta[N],vis[N];struct Edge &#123;int nxt,to;&#125;G[N&lt;&lt;2];inline int S(int x) &#123;return lower_bound(b+1,b+1+tmp,x)-b;&#125;inline void add(int u,int v) &#123; G[++cnt]=&#123;head[u],v&#125;,head[u]=cnt; G[++cnt]=&#123;head[v],u&#125;,head[v]=cnt;&#125;namespace Segment_Tree &#123; #define mid ((l+r)&gt;&gt;1) int root[N],tot; struct tree &#123;int l,r,v;&#125;t[N*601]; void update(int&amp;now,int last,int l,int r,int pos) &#123; now=++tot,t[now]=t[last],t[now].v++; if(l==r) return; if(pos&lt;=mid) update(t[now].l,t[last].l,l,mid,pos); else update(t[now].r,t[last].r,mid+1,r,pos); &#125; int query(int r1,int r2,int r3,int r4,int l,int r,int k) &#123; if(l==r) return l; int th=t[t[r1].l].v+t[t[r2].l].v-t[t[r3].l].v-t[t[r4].l].v; if(k&lt;=th) return query(t[r1].l,t[r2].l,t[r3].l,t[r4].l,l,mid,k); else return query(t[r1].r,t[r2].r,t[r3].r,t[r4].r,mid+1,r,k-th); &#125; #undef mid&#125;using namespace Segment_Tree;int dep[N],fa[N][LogN+4];int lca(int x,int y) &#123; if(x==y)return x; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=LogN;i&gt;=0;--i) if(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i]; if(x==y)return x; for(int i=LogN;i&gt;=0;--i) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0];&#125;void merge(int rt,int u,int f) &#123; fa[u][0]=f,dep[u]=dep[f]+1; for(int i=1;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i-1]][i-1]; size[rt]++, sta[u]=f, vis[u]=true; update(root[u],root[f],1,tmp,S(a[u])); for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=f) merge(rt,G[i].to,u);&#125;int find(int u) &#123;return u==sta[u]?u:sta[u]=find(sta[u]);&#125;int main() &#123; IN(testcase); IN(n),IN(m),IN(T); for(int i=1;i&lt;=n;++i) IN(a[i]),b[i]=a[i],sta[i]=i; sort(b+1,b+1+n); for(int i=1;i&lt;=n;++i) if(b[i]!=b[i-1])b[++tmp]=b[i]; for(int i=1;i&lt;=m;++i) &#123; int x,y;IN(x),IN(y);add(x,y); &#125; for(int i=1;i&lt;=n;++i) if(!vis[i]) &#123;merge(i,i,0);sta[i]=i;&#125; for(int i=1;i&lt;=T;++i) &#123; char op[2];int x,y,k; scanf("%s",op);IN(x),IN(y); if(op[0]=='L') &#123; x^=lastans,y^=lastans; add(x,y); int a=find(x),b=find(y); if(size[a]&lt;size[b])swap(x,y),swap(a,b); merge(a,y,x); &#125; else &#123; IN(k); x^=lastans,y^=lastans,k^=lastans; int lca_xy=lca(x,y); lastans=b[query(root[x],root[y], root[lca_xy],root[fa[lca_xy][0]],1,tmp,k)]; printf("%d\n",lastans); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>启发式合并</tag>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SDOI2008]Sandy的卡片 后缀数组.SA luoguP2463]]></title>
    <url>%2F2019%2F03%2F28%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2463%2F</url>
    <content type="text"><![CDATA[后缀数组，我们可以先将所有的卡片连成一个串，每一个卡片数列之间用一个极大数分开保证不出锅。然后的话，对于相同的定义有些鬼，使得我们不能直接做 $SA$ ，这个时候我们将所有的卡片数列的值都转换为当前位置减去上个位置的值即可。 然后就是统计答案，我们二分这个最长公共子序列的长度，每一次去判断是否合法。怎么判断呢？首先对于 $height$ 数组，如果要满足要求的话选取的这一段的 $height$ 数组的值都不能小于当前的 $mid$ ，这是显然的。 怎么确保我们将所有的卡片数列都选了呢？直接开一个 $vis​$ 数组即可，然后在碰到不合法的地方(也就是 $height[i]​$ 小于了 $mid​$ )全部清空即可。 最后如何判断当前的 $mid$ 是否合法呢？很显然，只有在所有的卡片数列都成功选择的情况下就合法了。我们用一个栈维护 $vis$ ，清空方便，然后当栈顶为卡片序列数的时候，也就是所有的卡片序列都选择的时候，$mid$ 就合法了。 然后有个悲催的事情，窝打二分的时候……打成了这样： 12345while(l&lt;=r) &#123; int mid=(l+r)&gt;&gt;1; if(check(mid)) ans=mid,l=mid+1; r=mid-1;&#125; 很显然，$r$ 前面应该要有 $else$ ，但是窝看了一晚上都没看出来……. Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=2e6+7;const int M=5e2+7;const int G=5e3+7;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace SA &#123; int n,m,S[N],sa[N],height[N],x[N],y[N],hep[N]; inline void pre_sa() &#123; ++m; for(int i=1;i&lt;=n;++i) x[i]=S[i]; for(int i=1;i&lt;=n;++i) hep[x[i]]++; for(int i=1;i&lt;=m;++i) hep[i]+=hep[i-1]; for(int i=n;i&gt;=1;--i) sa[hep[x[i]]--]=i; for(int w=1,p=0;m=p,p&lt;n;w&lt;&lt;=1) &#123; p=0; for(int i=1;i&lt;=w;++i) y[++p]=n-w+i; for(int i=1;i&lt;=n;++i) if(sa[i]&gt;w) y[++p]=sa[i]-w; for(int i=0;i&lt;=m;++i) hep[i]=0; for(int i=1;i&lt;=n;++i) hep[x[i]]++; for(int i=1;i&lt;=m;++i) hep[i]+=hep[i-1]; for(int i=n;i&gt;=1;--i) sa[hep[x[y[i]]]--]=y[i]; swap(x,y); x[sa[1]]=p=1; for(int i=2;i&lt;=n;++i) x[sa[i]]=(y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+w]==y[sa[i-1]+w])?p:++p; &#125;return; &#125; inline void pre_height()&#123; for(int i=1;i&lt;=n;++i)x[sa[i]]=i; int k=0; for(int i=1;i&lt;=n;++i)&#123; k-=k&gt;0; int j=sa[x[i]-1]; while(j+k&lt;=n&amp;&amp;i+k&lt;=n&amp;&amp;S[j+k]==S[i+k])++k; height[x[i]]=k; &#125;return; &#125;&#125;using namespace SA;int vis[G],stack[G],top;int num,len[G],id[N],a[G][M];inline bool check(int x) &#123; while(top) vis[stack[top--]]=0; for(int i=1;i&lt;=n;++i) &#123; if(height[i]&lt;x) &#123; while(top) vis[stack[top--]]=0; &#125; if(!vis[id[sa[i]]]) &#123; stack[++top]=id[sa[i]],vis[id[sa[i]]]=true; if(top==num) return true; &#125; &#125;return false;&#125;int main() &#123; IN(num); int mx=-inf,mi=inf,l=0,r=inf; for(int i=1;i&lt;=num;++i) &#123; IN(len[i]),r=min(r,len[i]-1); for(int j=1;j&lt;=len[i];++j) &#123; IN(a[i][j]); if(j!=1)mx=max(mx,a[i][j]-a[i][j-1]); &#125; &#125; for(int i=1;i&lt;=num;++i) &#123; for(int j=2;j&lt;=len[i];++j) S[++n]=a[i][j]-a[i][j-1],id[n]=i,mi=min(mi,S[n]); S[++n]=++mx; &#125; m=0; for(int i=1;i&lt;=n;++i) S[i]=S[i]-mi+1,m=max(m,S[i]); pre_sa(),pre_height(); int ans=0; while(l&lt;=r) &#123; int mid=(l+r)&gt;&gt;1; if(check(mid))ans=mid,l=mid+1; else r=mid-1; &#125; printf("%d\n",ans+1); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>后缀数组.SA</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试总结】 Test-2019.3.28 HNOI2019模拟]]></title>
    <url>%2F2019%2F03%2F28%2F%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190328%2F</url>
    <content type="text"><![CDATA[今天的题目貌似暴力分好拿写欸，然而……窝只有 $70$ ？不过排名比昨天上升了什么鬼。 $QwQ$ 题目的确很难懂，所以窝听了讲解后也没听懂多少，不过还是改出了第一题(第一题是人就改的出好吧o(≧口≦)o)。 题目压缩包戳我!!!~\(≧▽≦)/~(有时链接可能会崩，如果崩了的话请稍后尝试QwQ) T1 期望得分：30分实际得分：30分正解：找规律??窝的解法：暴力模拟题意 题解：第一眼看到题目，欸，如果按照题面模拟就有 $30$ 分！出题人良心啊。然后看数据范围，$100\%$ 的数据的 $n\leq 3\times10^7$ ，这应该是 $O(n)$ 算法才行啊，于是想，或许是线性 $DP$ ，然后推式子，推出这么一个鬼玩意： f[i]=f[i-1]+sum(a[i])$sum(a[i])$ 就是在 $1$ 到 $i-1$ 中大于 $a[i]$ 的数的个数，然后 $f[i]$ 表示将前 $i$ 个元素进行冒泡需要的交换次数。 很显然这是错的。 然后我就想到了 $NOI$ 往年的冒泡排序(貌似是 $NOI$ 的?)，其实两道题没什么联系。 哎好吧发现过不去直接上暴力吧，题目说什么就做什么，于是把我用来对拍的暴力程序提交了上去，$30$ 分。 接下来讲讲正解。 很显然，对于一个元素 $a_i$ ，它所在的位置为 $i$ ，然而最后排好序后 $ta$ 应该回到的位置为 $a_i$ 。观察冒泡过程，发现对于一个元素，每次冒泡排序都最多会将 $ta$ 向自己的目标位置移动一格。 然后就是，比如说当前序列的最小元素，假设最小元素的起点位置为 $s$ ,我们发现每次冒泡总会将 $ta$ 向前移一格，然后在第 $s-1$ 次冒泡排序的时候 $1$ 归位了。然后发现 $1$ 的移动对 $2$ 的移动次数并没有产生影响，这个时候将 $1$ 删去，发现 $2$ 归位的移动次数变成了 $2$ 的初始位置 $-$ $1$ ，放在原序列中就是 $2$ 的初始位置 $-$ $2$ 。 这至少说明，对于任意一个元素 $i$ ，其所需要的移动次数为 $i-a_i$ 。 那么，如果要使序列有序，所需要的排序次数就是 $max\{ i-a_i \}$ 。直接计算答案即可。 (实际上窝也不是很明白…..貌似是这样的吧 $QwQ$ ) Code：12345678910111213141516171819#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int n,S,B,C,D,A[10006];int main() &#123; freopen("magician.in","r",stdin); freopen("magician.out","w",stdout); scanf("%d%d%d%d%d",&amp;n,&amp;S,&amp;B,&amp;C,&amp;D); for(int i=1;i&lt;=n;++i) &#123; A[i]=i; S=(S*B+C)%D; swap(A[i],A[(S%i)+1]); &#125; int counter=0; for(int i=1;i&lt;=n;++i)counter=max(counter,i-A[i]); printf("%d\n",counter); return 0;&#125; T2 期望得分：30分实际得分：0分正解：容斥+搜索+剪枝窝的解法：暴搜 题解：不会………….然后暴搜打挂了没得分。 所以这不能说是题解，留个坑吧。 T3 期望得分：40分实际得分：40分正解：将所有颜色维护成链，然后分块加速窝的解法：直接维护成链 对于一个 $i$ ，如果 $a_i=k$ ，并且 $a_j=k$ ，而且 $i$ 和 $j$ 是离得最近的，则将它们向前向星那样连起来，最后对询问的区间直接暴力跳即可。 Code：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;map&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=5e5+7;const int LogN=27;vector&lt;int&gt; seq;map&lt;int,int&gt; hashs;int n,q,a[N],head[N],nxt[N],f[LogN+7][N],logs[N],ans;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline void pre_st()&#123; logs[0]=-1; for(int i=1;i&lt;=n;++i)logs[i]=logs[i&gt;&gt;1]+1; for(int i=1;i&lt;=n;++i)f[0][i]=a[i]; for(int t=1;t&lt;LogN;++t) for(int i=1;i&lt;=n;++i) if(i+(1&lt;&lt;t)-1&lt;=n) f[t][i]=max(f[t-1][i],f[t-1][i+(1&lt;&lt;(t-1))]);&#125; inline int query(int x,int y)&#123; int t=logs[y-x+1]; return max(f[t][x],f[t][y-(1&lt;&lt;t)+1]);&#125; inline void solve(int x,int lim) &#123; for(int now=x,last=nxt[x];last&gt;=lim;last=nxt[last]) &#123; while(now&gt;last&amp;&amp;query(last,now)&gt;a[last]) now=nxt[now]; ans=max(ans,now-last+1); &#125;&#125; inline void make_hashs() &#123; sort(seq.begin(),seq.end()); seq.erase(unique(seq.begin(),seq.end()),seq.end()); for(int i=0;i&lt;seq.size();++i) hashs[seq[i]]=i+1; for(int i=1;i&lt;=n;++i) a[i]=hashs[a[i]]; memset(head,-1,sizeof head);&#125;int main() &#123; freopen("spiral.in","r",stdin); freopen("spiral.out","w",stdout); IN(n),IN(q); for(int i=1;i&lt;=n;++i) IN(a[i]),seq.push_back(a[i]); make_hashs(); for(int i=1;i&lt;=n;++i) nxt[i]=head[a[i]],head[a[i]]=i; pre_st(); while(q--) &#123; ans=1; int x,y;IN(x),IN(y); for(int i=y;i&gt;=x;--i) solve(i,x); printf("%d\n",ans); &#125; return 0;&#125; 正解不费………………………………….]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>考试总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【考试总结】 Test-2019.3.27 HNOI2019模拟]]></title>
    <url>%2F2019%2F03%2F27%2F%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190327%2F</url>
    <content type="text"><![CDATA[今天全是原题，然而窝几乎都没做过，于是挂了…… 丢人的是考场上组合数的式子 $C[i][j]$=$C[i$-$1][j]$+$C[i$-$1][j$-$1]$ 写成了 $C[i][j]$=$C[i][j$-$1]$+$C[i$-$1][j$-$1]$ ，然后第一题光荣爆 $0​$ ……TAT。 吸取教训！ 题目压缩包戳我!!!~\(≧▽≦)/~(有时链接可能会崩，如果崩了的话请稍后尝试QwQ) T1 期望得分：100分实际得分：0分正解：Purfer+DP+组合数学窝的解法：Purfer+DP+组合数学 题解：十年OI一场空，组合数打错见祖宗。 上面的正解有误，听说 $DP$ 不是正解，不过，$DP$ 复杂度高达 $O(n^4)$ ，本应该 $T$ 的，却仗着小常数不仅 $AC$ ，还爆踩标程？这究竟是道德的沦丧还是人性的扭曲？ 不了不了，正经一点。众所周知，有个东西叫 $Purfer$ 序列，对于每一个不同的树，都有不同的 $Purfer$ 序列。所以每个树都可以用其 $Purfer$ 序列来表示，这个树中的每个结点在 $Purfer$ 序列中的出现次数为其度数减一。至于$Purfer​$ 序列具体是什么就不赘述了。 那么 $DP​$ 方程怎么设？ 我们设 $f[i][j][k]$ 表示 从前 $i$ 个结点中选出 $j$ 个结点，并且这 $j$ 个结点共在原树的 $Purfer$ 序列出现了 $k$ 次的合法 $Purfer$ 序列的数量 。 那么转移呢？很显然分为两种情况： 没选第 $i​$ 个点。 选了第 $i​$ 个点。 然后分别进行转移，这就很简单了： 没选：$f[i][j][k]+=f[i-1][j][k]​$ 选了：$f[i][j][k]+=f[i-1][j-1][k-d]\times C[k][d]​$ 其中 $d​$ 为我们正在枚举的第 $i​$ 个点的出现次数 $(0​$ ~ $du[i]-1)​$ ，然后就是下面的组合数，就是代表着在 $k-d​$ 长度的序列中插入 $d​$ 个 $i​$ 的方案数 。当然也可以这么写： f[i][j+1][d+k]+=C[d+k][d]\times f[i-1][j][k]​ 我们知道一棵 $n​$ 个结点的树的 $Purfer​$ 序列的长度是 $n-2​$ 的，所以我们的答案应该就是 $f[n][i][i-2]​$ 。 最后，记得随时膜模！ Code:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=57;const int MOD=1000000007;int du[N],n,T;ll C[N][N],f[N][N][N];int main() &#123; C[0][0]=1; for(int i=1;i&lt;=50;++i)&#123; C[i][0]=C[i][i]=1; for(int j=1;j&lt;i;++j) C[i][j]=(C[i-1][j]+C[i-1][j-1])%MOD;//就是这儿! &#125; scanf("%d",&amp;T); while(T--)&#123; scanf("%d",&amp;n); for(int i=1;i&lt;=n;++i) scanf("%d",&amp;du[i]); memset(f,0,sizeof(f)); f[0][0][0]=1; for(int i=1;i&lt;=n;++i) for(int j=0;j&lt;i;++j) for(int k=0;k&lt;=n-2;++k) &#123; f[i][j][k]=(f[i][j][k]+f[i-1][j][k])%MOD; for(int d=0;d&lt;du[i]&amp;&amp;d+k&lt;=n-2;++d) f[i][j+1][d+k]=(f[i][j+1][d+k]+C[d+k][d]*f[i-1][j][k]%MOD)%MOD; &#125; printf("%d ",n); for(int i=2;i&lt;=n;++i)printf("%lld ",f[n][i][i-2]); printf("\n"); &#125; return 0;&#125; T2 期望得分：5分实际得分：30分正解：???没发sol……窝的解法：手玩小数据+瞎搞 题解：一看就是懵逼题……但是看到 $30$ 分的数据很小，并且还有菊花图，所以我们来瞎搞吧！刚开始的时候以为前六个点都是菊花图，然后都手玩，到后面才看清，只能说数据太弱了啊。 正解表示不明白……贴一发考场上的代码： Code:123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123; freopen("b.in","r",stdin); freopen("b.out","w",stdout); int n,k; scanf("%d%d",&amp;n,&amp;k); int x,flag=0; for(int i=1;i&lt;n;++i)&#123; scanf("%d",&amp;x); if(x!=0)flag=1; &#125; if(k==0)&#123;printf("1\n");exit(0);&#125; if(!flag) &#123;//菊花图输出瞎搞手玩？ if(n==1&amp;&amp;k&gt;=0)&#123;printf("1\n"),exit(0);&#125; if(n==2&amp;&amp;k&gt;=0)&#123;printf("1\n"),exit(0);&#125; if(n==3&amp;&amp;k==0)&#123;printf("1\n"),exit(0);&#125; if(n==3&amp;&amp;k&gt;=1)&#123;printf("3\n"),exit(0);&#125; if(n==4&amp;&amp;k==0)&#123;printf("1\n"),exit(0);&#125; if(n==4&amp;&amp;k==1)&#123;printf("7\n"),exit(0);&#125; if(n==4&amp;&amp;k&gt;=2)&#123;printf("10\n"),exit(0);&#125; if(n==5&amp;&amp;k==0)&#123;printf("1\n"),exit(0);&#125; if(n==5&amp;&amp;k==1)&#123;printf("13\n"),exit(0);&#125; &#125; else &#123;//其他情况输出样例？？ if(n==4)&#123;printf("8\n");exit(0);&#125; if(n==6)&#123;printf("28\n");exit(0);&#125; &#125; return 0;&#125; 实际上玩到 $n​$=$5\&amp;\&amp;k​$=$2​$ 的时候我就崩了，玩不下去了。 T3 期望得分：0分实际得分：0分正解：最小割窝的解法：没做…. 题解：真的看不出来是最小割啊 $QwQ$ ，以为是数论题，还看到质因子了感觉就更不像最小割了……但是在想题目的时候最小割的确出现在了我的脑海中，但是一闪就过了…… 一个有趣的事情：考试期间高二机房神仙一度怀疑此题为数论题，这个时候 $chl$神仙 和另一位 $Dalao$ 走了出去，站在门外讨论此题中的”物理”，说什么重心和”物理”有关因此此题不可做，然后树王神仙表示不懂”物理”中的”重心”准备弃疗，然而最终树王神仙还是选择了网络流…… 好吧不扯淡了，我们来讨论一下这题的粗略解法。 可以发现题目给出了一个限制：$N$ 最多有两个质因子。这个限制有什么用呢？ 对于一个有 $N$ 个扇叶的风扇，我们考虑平衡的并且独立扇叶只有一个的风扇： 左边的就是有 $(N=8)$ 个扇叶的风扇，右边的呢就是在 $8$ 个扇叶中有 $2$ 个扇叶的风扇 ($(A_1,D_1,F_1),$$(A_1,H_1,B_1)$)，可以知道这个 $2$ 个扇叶的风扇是一定平衡的，因为 $2$ 是 $8$ 的因子。 可以知道，对于 $8$ 的其他因子(例如 $4$ )是可以被质因子 $2$ 组成的，因此也是平衡的风扇。 那么对于两个不同的质因子，可以组成两个不同样式的且平衡的 $N$ 个扇叶的风扇的子风扇。 当然还有位置不同，对于上图中 $2$ 个扇叶的子风扇根据不同的位置有很多个： 这个时候我们的问题就可以转化如下了： 有两种类型的风扇 $p,q$ ，风扇类型等于 $2$ 的样子如上图，现在我们需要用这两种风扇无重叠的覆盖尽可能多的剩下的残缺扇叶。 这个时候考虑建图，我们从 $S$ 向所有不同位置的 $p$ 类风扇连一条边，边权为 $p$ ，表示选择了这个风扇可以多覆盖一共 $p$ 个扇叶。所有不同位置的 $q$ 类风扇向 $T$ 连边，边权为 $q$ ，和上面同理。 然后这个时候的最小割是什么呢？对于一个起点为 $x$ 的 $p$ 类风扇，我们将 $S$ 连向Ta的边切断，表示不使用起点为 $x$ 的 $p$ 类风扇，$q$ 类风扇同理。当然是不使用的风扇越少越好，剩下的可用的风扇当然是越多越好，所以成了最小割。 那么怎么表示无重叠呢？ 可以知道同类风扇是不可能重叠的，我们考虑异类风扇。我们对于一个 $p$ 类风扇和一个 $q$ 类风扇，如果其重叠了，那么只能选择其中一个，于是我们在这两个风扇间连一条边，边权为 $inf$ ，这个时候跑最大流的时候必定有流经过此地，也就是说这两个风扇必然要割掉一个才行。 所以什么事情都解决了，就差代码了。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;cmath&gt;#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=2e6+2;const int inf=2e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace Dinic &#123;//Dinic板子封装 queue&lt;int&gt; Que; int s,t,sum,head[N&lt;&lt;1],cnt=1,dep[N&lt;&lt;1]; struct Edge &#123;int nxt,to,val;&#125;G[N&lt;&lt;2]; inline void add(int u,int v,int w) &#123; G[++cnt]=&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=&#123;head[v],u,0&#125;,head[v]=cnt; &#125; inline int bfs() &#123; memset(dep,0,sizeof(dep)); dep[s]=1,Que.push(s); while(!Que.empty()) &#123; int u=Que.front(),v;Que.pop(); for(int i=head[u];i;i=G[i].nxt) if(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,Que.push(v); &#125;return dep[t]; &#125; int dfs(int u,int flow) &#123; if(!flow||u==t) return flow; int used=0,rlow,v; for(int i=head[u];i;i=G[i].nxt) if(dep[v=G[i].to]==dep[u]+1&amp;&amp;G[i].val&gt;0) &#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; if(!used) dep[u]=-1; return used; &#125; inline void dinic() &#123; while(bfs()) sum-=dfs(s,inf); &#125;&#125;using namespace Dinic;int n,m,p,q,point,bock[N],vis[N],fan[N];inline void pre() &#123; for(int i=1;i&lt;=n/p;++i) if(!bock[i]) &#123;//起点扇叶没有损坏 for(int j=i;j&lt;=n;j+=n/p) if(bock[j]) goto end1; //枚举每个扇叶，如果损坏的那么该风扇就不合法 ++point,add(s,point,p),sum+=p;//连边 for(int j=i;j&lt;=n;j+=n/p) fan[j]=point;//标记 end1:; &#125; for(int i=1;i&lt;=n/q;++i) if(!bock[i]) &#123; for(int j=i;j&lt;=n;j+=n/q) if(bock[j]) goto end2; ++point,add(point,t,q),sum+=q;//连边 for(int j=i;j&lt;=n;j+=n/q) vis[fan[j]]=false; //清理标记，防止有风扇被连两次边 for(int j=i;j&lt;=n;j+=n/q) if(fan[j]&amp;&amp;!vis[fan[j]]) vis[fan[j]]=true,add(fan[j],point,inf);//连边 end2:; &#125;return;&#125;int main() &#123; IN(n),IN(m);s=0,t=N-2; for(int i=1;i&lt;=m;++i) &#123;int x;IN(x),bock[x]=true;&#125; int copy=n,sqr=sqrt(n),first=0; for(int i=2;i&lt;=sqr;++i) &#123;/*寻找两个质因子p和q*/ if(!(n%i)&amp;&amp;!first) &#123; first=true,p=i; while(!(n%p))n/=p; &#125; else if(!(n%i)) &#123; q=i; while(!(n%q))n/=q; break; &#125; &#125; if(n!=1)q=n;n=copy; pre(),dinic(); if(!sum)printf("-1"); else printf("%d\n",n-m-sum); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>考试总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 「网络流24题」最长不下降子序列问题 网络流 luoguP2766]]></title>
    <url>%2F2019%2F03%2F26%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2766%2F</url>
    <content type="text"><![CDATA[第一问显然是一个很简单的 $DP$ ，但是第二问和第三问就要用最大流来求了，怎么求呢？ 首先我们 $DP$ 出来的 $f$ 数组，$f[i]$ 表示以i结尾的最长不下降子序列的长度 ，然后就是网络流的连边了。首先因为一个点只能经过两次，我们需要将其拆为入点和出点，中间连的边的边权自然是 $1$ ，然后对于一个 $i$ ，如果 $f[i]$ 等于最长长度($s$)，那么很显然这个 $i$ 就可以给答案做出一个贡献，这个时候 $i$ 的出点向 $t$ 连一条边权为 $1$ 边。 如果 $i$ 等于 $1$ ，那么自然 $1$ 是可以作为一个起点的，那么 $s$ 向 $i$ 的入点连一条边权为 $1$ 的边即可。 然后就是剩下的情况了，可以想到让 $i$ 向 $i$ 能够最优转移的位置连边，也就是说，如果有一个 $j$ ，使得 $f[j]=f[i]+1$ 并且 $a[i]&lt;=a[j]$ ，这个时候如果是在最优方案中 $i$ 是可以转移到 $j$ 的，这个时候从 $i$ 的出点向 $j$ 的入点连一条边，边权依旧是 $1$ 。 然后我们这个时候跑最大流，就是第二问的答案。 那么第三问呢？ 很显然，对于 $1$ ，如果它是连向 $s$ 的，则将其连向 $s$ 的边的边权改为 $inf$ ，并将入点连出点的边权改为 $inf$ ，表示可以取无限次。然后 $n$ 如果连向了 $t$ ，也将边权改为 $inf$ ，并将入点连出点的边权改为 $inf$ ，和上面同理。这个时候再跑一次最大流即可，这就是第三问的答案了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e5+7;const int M=5e2+7;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace Dinic &#123; queue&lt;int&gt; q; int s,t,head[N],cnt=1,dep[N]; struct Edge &#123;int nxt,to,val;&#125;G[N]; inline void add(int u,int v,int w) &#123; G[++cnt]=&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=&#123;head[v],u,0&#125;,head[v]=cnt; &#125; inline int bfs() &#123; memset(dep,0,sizeof(dep)); dep[s]=1,q.push(s); while(!q.empty()) &#123; int u=q.front(),v;q.pop(); for(int i=head[u];i;i=G[i].nxt) if(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125;return dep[t]; &#125; int dfs(int u,int flow) &#123; if(!flow||u==t) return flow; int used=0,rlow,v; for(int i=head[u];i;i=G[i].nxt) if(dep[v=G[i].to]==dep[u]+1&amp;&amp;G[i].val&gt;0) &#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; if(!used) dep[u]=-1; return used; &#125; inline int dinic() &#123; int maxflow=0; while(bfs()) maxflow+=dfs(s,inf); return maxflow; &#125;&#125;using namespace Dinic;int n,l,ans,a[N],f[N];inline int id(int type,int x) &#123; return type*n+x;&#125;int main() &#123; IN(n);s=0,t=2*n+1; for(int i=1;i&lt;=n;++i) &#123; IN(a[i]); for(int j=0;j&lt;i;++j) if(a[j]&lt;=a[i]) f[i]=max(f[i],f[j]+1); l=max(l,f[i]); &#125; printf("%d\n",l);/*Q1*/ for(int i=1;i&lt;=n;++i) &#123; add(id(0,i),id(1,i),1); if(f[i]==1) add(s,id(0,i),1); if(f[i]==l) add(id(1,i),t,1); for(int j=1;j&lt;i;++j) if(a[j]&lt;=a[i]&amp;&amp;f[i]==f[j]+1)add(id(1,j),id(0,i),1); &#125; ans=dinic(); printf("%d\n",ans);/*Q2*/ if(f[1]==1)add(s,id(0,1),inf),add(id(0,1),id(1,1),inf); if(f[n]==l)add(id(1,n),t,inf),add(id(0,n),id(1,n),inf); ans+=dinic(); printf("%d\n",ans);/*Q3*/ return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法】 浅谈K-D Tree&学习笔记]]></title>
    <url>%2F2019%2F03%2F26%2F%5B%E7%AE%97%E6%B3%95%5DKD-Tree%2F</url>
    <content type="text"><![CDATA[又是一个神奇的数据结构…… $K$-$D \ Tree$ 中 $D$ 是维度($Dimension$)的缩写，所以 $K$-$D \ Tree$ 的实际意思就是 $K$ 维树。当然 $K$-$D \ Tree $ 一般用于维护二维平面上的信息，所以我们平常用的 $K$-$D\ Tree$ 又叫 $2$-$D \ Tree$ 。 假设我们现在有一个二维平面，二维平面上有若干个点 ，现在怎么用 $2​$-$D \ Tree​$ 维护这些点呢？很简单，我们将这些点建成一颗树，最好是一颗二叉搜索树，但是怎么建树呢？我们就来分割这个平面，横着一刀，竖着一刀，每次选取最优的结点当根即可。 可能很抽象，我们以下图为例，假设我们需要将下图的 $7$ 个点建成二叉搜索树： 首先我们准备竖着切，这个竖着切切哪里呢？我们会发现 $D$ 是最中间的结点，于是我们对着 $D$ 就是一刀，现在的矩阵分割成了两半，那么自然的 $A,B,C$ 就是 $D$ 的左子树中的结点，$E,F,G$ 就是 $D$ 的右子树中的结点。 然后我们先建 $D$ 的左子树，由于上一次是竖着切的，这一次我们需要横着切。我们递归下去，发现 $A,B,C$ 这一块 $B$ 是最中间的(以横着的视角，因为需要横着切嘛)，那么很显然 $D$ 的左儿子就是 $B$ 了，$A,C$ 分别是 $B$ 的两孩子，由于 $A,C$ 已经在 $B$ 的左右了并且只有一个点了，那么理所当然 $C$ 就是 $B$ 的左孩子，$A$ 就是 $B$ 的右儿子(横着看就好了)。 同样的，我们发现 $G$ 是 $D$ 左边横着切时最合适的结点(因为在横着的视角中 $G$ 是最中间的 )，于是我们将 $D$ 的右儿子定为 $G$ ，同样的，$F,E$ 为 $G$ 的两孩子。 那么这样子我们的树就建好了。 Code-build-kdt:123456789int build(int l,int r,int wd) &#123;//lr:当前对应的结点区间,wd:当前需要切的方向 if(l&gt;r) return 0; int x=new_node(),mid=(l+r)&gt;&gt;1;//新建结点 WD=wd,nth_element(p+l,p+mid,p+r+1),//重载了运算符，按照当前切的方向排序 tr[x].tp=p[mid];//找到最合适切割的最中间的结点 tr[x].l=build(l,mid-1,wd^1);//建立左子树 tr[x].r=build(mid+1,r,wd^1);//建立右子树 return pushup(x),x;//上传信息&#125; 但是怎么查询呢？实际上查询跟普通的二叉搜索树差不多，按照方位坐标查找即可。 对于一个结点的信息是这样的： Code-node-kdt1234struct node &#123; int mi[2],mx[2],l,r,sz; point tp;&#125;tr[N]; l,r,sz 就是左右儿子以及子树大小，point 显然是该结点代表的二维平面上的点，但是 $mi,mx$ 是干什么的呢？我们用 $mi,mx$ 记录的就是当前结点已经它的子树中的所有节点中，最大/最小的 $x$ 坐标以及最大/最小的 $y$ 坐标。 这样记录有什么用呢？假设我们将这个看成一个矩形，那么对于一个我们需要搜索的坐标，如果这个需要搜索坐标 已经不属于 $mi,mx$ 围城的矩阵中，那么这个需要搜索的坐标就跟当前子树没关系了，这也就相当于一个剪枝。 我们的 $pushup$ 上传时就是对 $mi,mx$ 进行更新，所以 $pushup$ 应该这样写： Code-pushup-kdt1234567891011121314151617inline void pushup(int x) &#123; int l=tr[x].l,r=tr[x].r;//简写左右儿子 tr[x].sz=tr[l].sz+tr[r].sz+1;//更新size for(int i=0;i&lt;=1;++i) &#123;//枚举方向，节省码量 /*---------更新mi[x],mx[x]---------*/ tr[x].mi[i]=tr[x].mx[i]=tr[x].tp.x[i]; if(l) &#123; tr[x].mi[i]=min(tr[x].mi[i],tr[l].mi[i]); tr[x].mx[i]=max(tr[x].mx[i],tr[l].mx[i]); &#125; if(r) &#123; tr[x].mi[i]=min(tr[x].mi[i],tr[r].mi[i]); tr[x].mx[i]=max(tr[x].mx[i],tr[r].mx[i]); &#125; /*---------更新mi[x],mx[x]---------*/ &#125;&#125; 然后呢，这里不待修改的，那么如果说要兹磁插入节点怎么办？ 需要兹磁插入节点的题目：[Violet]天使玩偶/SJY摆棋子 这道题因为允许离线，我们可以使用 $CDQ​$ ，但是如果强制在线的话就只能用 $K​$-$D \ Tree​$ 了。我们来讨论 $K​$-$D \ Tree​$ 的做法。 实际上 $K​$-$D \ Tree​$ 插入节点非常简单，就像普通的二叉搜索树那样找个位置插就好了。 Code-Insert-kdt12345678910void Insert(point tmp,int&amp;x,int wd) &#123;//tmp:当前需要插入的点,x:当前树中结点,wd:当前切割方向 if(!x) &#123;//找到要插入的位置了 x=new_node();//新建结点 tr[x].tp=tmp,tr[x].l=tr[x].r=0; pushup(x);return; &#125; if(tr[x].tp.x[wd]&lt;tmp.x[wd]) Insert(tmp,tr[x].r,wd^1);//应该往右插 else Insert(tmp,tr[x].l,wd^1); //否则往左插 pushup(x);//更新结点信息&#125; 但是呢，你会发现就像一般的二叉搜索树一样，这个插入很容易被卡，卡成一条链，这就很不舒服了。于是我们需要一些平衡树的思想，使得 $K$-$D \ Tree$ 保持平衡。 “我会 $Splay$ ！我会 无旋$Treap$ ！” 呸呸呸，今天我们讲的是替罪羊树，跟你俩没关系。 没错，就是用替罪羊树的思想，将 $K​$-$D \ Tree​$ 拍扁重建。差不多就是 $insert​$ 的时候，在 $insert​$ 的最后 $check​$ 一下子树是否平衡，如果当前结点的子树已经”不平衡”了，那么拍扁该结点以及该结点子树，重建。 这里的 $\alpha$ 的值一般定为 $0.75$ 左右，但是也不能确定，如果实在要掐得准的话就得看看询问多还是插入多了。不过一般用 $0.75$ 是没问题的。 Code-check&amp;pia-kdt:123456789void pia(int x,int num) &#123;//就是拍扁的意思,sto litble orz if(tr[x].l) pia(tr[x].l,num);//先拍左子树 p[num+tr[tr[x].l].sz+1]=tr[x].tp,trh[++top]=x;//再拍自己 if(tr[x].r) pia(tr[x].r,num+tr[tr[x].l].sz+1);//然后拍右子树&#125;void check(int&amp;x,int wd) &#123;//判断x的子树是否满足"平衡",wd记录当前切割方向,建树的时候有用 if(alph*tr[x].sz&lt;tr[tr[x].l].sz||alph*tr[x].sz&lt;tr[tr[x].r].sz)//判断 pia(x,0),x=build(1,tr[x].sz,wd);//拍扁 and 重新build建树&#125; 然后就是应用了，值得注意的是，如果维护的不是点而是矩形，那么有些地方(例如边界，$mi,mx​$ 都要注意)。 就像这道题：[APIO2018] Circle selection 选圆圈，注意一下细节就好。]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>K-D Tree</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SCOI2010]股票交易 单调队列优化DP luoguP2569]]></title>
    <url>%2F2019%2F03%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2569%2F</url>
    <content type="text"><![CDATA[我们一起来推一推。 设 $f[i][j]$ 表示：现在是第 $i$ 天，手上拥有的股票数为 $j$ 时赚到的最多的钱 我们考虑转移几个方向：空手买，不买不卖，之前买过了现在继续买，买过后需要卖 空手买空手买就是第一次买，显然不要考虑 “间隔 $w$ 天” 的限制，直接买就好。 那么很容易得到转移式： f[i][j]= - AP_i\times j因为是买入，所以是负数。 不买不卖很显然可以直接从 $f[i-1][j]$ 转移过来。 转移式： f[i][j]=f[i-1][j]之前买过了现在继续买很显然这次我们需要考虑 $w$ 的限制了，不过我们可以直接从 $i-w-1$ 天转移。 假设我们是从 $f[i-w-1][k]$ 转移过来的，那么这次转移我们多买了 $j-k$ 张股票，容易得到转移式： f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}当然因为规定了一天最多买入 $AS_i$ 股，上面的式子必须满足 $j-AS_i\leq k \leq j$ 买过之后需要卖同样的有 $w$ 的限制，但是跟上面的第三种情况没什么两样，转移式： f[i][j]=max\{ f[i-w-1][k] + (k-j)\times BP_i\}因为 $BS_i$ 的限制条件，上面的式子必须满足 $j\leq k \leq j+BS_i$ 时间复杂度？枚举 $i,j$ 状态就需要 $n^2$ 的复杂度，在这个基础上转移的复杂度为： 空手买 ： $O(1)$ 不买不卖 ： $O(1)$ 之前买过了现在继续买 ：$O(n)$ 买过之后需要卖 ：$O(n)$ 会发现如果加上枚举状态的复杂度，后面两个转移的总复杂度为 $O(n^3)$ ！ 于是考虑优化。 我们观察第三个转移式： f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}对于当前的 $i,j$ ，假设有 $a,b$ 作为 $k$ 的两个选项对 $f[i][j]$ 进行转移，我们算一算 $a$ 比 $b$ 优的条件是什么： f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}=max\{f[i-w-1][k]+k\times AP_i-j\times AP_i\}这里我们会发现 $j\times AP_i$ 跟里面的式子没有任何关系，提出来不会产生仍和影响 =max\{f[i-w-1][k]+k\times AP_i\}-j\times AP_i​于是我们发现我们只需要得到最大的 $f[i-w-1][k]+k\times AP_i$ 就好了，这里我们可以用到单调队列优化DP 。 具体代码实现如下： 1234567l=1,r=0;for(int j=0;j&lt;=MaxP;++j) &#123;/*枚举所有的合法的j*/ while(l&lt;=r&amp;&amp;q[l]&lt;j-AS) ++l;/*淘汰掉过期的队头*/ while(l&lt;=r&amp;&amp;f[i-W-1][q[r]]+q[r]*AP&lt;=f[i-W-1][j]+j*AP) --r;/*淘汰掉不如当前决策优的队尾*/ q[++r]=j;/*当前决策进队*/ if(l&lt;=r) f[i][j]=max(f[i][j],f[i-W-1][q[l]]+q[l]*AP-j*AP);/*转移*/&#125; 因为每一个状态都只进队/出队了一次，所以可以证明时间复杂度现在变为 $O(n^2)$ 了。 第四个操作一样可以这样优化，可以尝试一下，不贴解释了。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=2e3+2;const int inf=1e9+9;int T,MaxP,W,AP,BP,AS,BS,l,r;int q[N],f[N][N];int main() &#123; memset(f,128,sizeof(f));/*赋极小值*/ scanf("%d%d%d",&amp;T,&amp;MaxP,&amp;W); for(int i=1;i&lt;=T;++i) &#123; scanf("%d%d%d%d",&amp;AP,&amp;BP,&amp;AS,&amp;BS); for(int j=0;j&lt;=AS;++j) f[i][j]=-AP*j; for(int j=0;j&lt;=MaxP;++j) f[i][j]=max(f[i][j],f[i-1][j]); if(i&lt;=W)continue; l=1,r=0; for(int j=0;j&lt;=MaxP;++j) &#123; while(l&lt;=r&amp;&amp;q[l]&lt;j-AS) ++l; while(l&lt;=r&amp;&amp;f[i-W-1][q[r]]+q[r]*AP&lt;=f[i-W-1][j]+j*AP) --r; q[++r]=j; if(l&lt;=r) f[i][j]=max(f[i][j],f[i-W-1][q[l]]+q[l]*AP-j*AP); &#125; l=1,r=0; for(int j=MaxP;j&gt;=0;--j) &#123; while(l&lt;=r&amp;&amp;q[l]&gt;j+BS) ++l; while(l&lt;=r&amp;&amp;f[i-W-1][q[r]]+q[r]*BP&lt;=f[i-W-1][j]+j*BP) --r; q[++r]=j; if(l&lt;=r) f[i][j]=max(f[i][j],f[i-W-1][q[l]]+q[l]*BP-j*BP); &#125; &#125; int ans=0; for(int i=0;i&lt;=MaxP;++i)ans=max(ans,f[T][i]); printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2009]植物大战僵尸 网络流 luoguP2805]]></title>
    <url>%2F2019%2F03%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2805%2F</url>
    <content type="text"><![CDATA[前置芝士：网络流-最大权闭合子图定义：对于一个图的子图，当且仅当这个子图中的任意一点都不会与该子图外的点联通时，称这个子图为该图的闭合子图。在该图所有的闭合子图中，点权和最大的那个我们称作最大权闭合子图。 那么最大权闭合子图怎么求呢？ 对于给出的图，如果要求将 $u,v$ 连一条边，那么从 $u$ 向 $v$ 连一条边权为 $inf$ 的边。 然后对于每个点如果该点的点权为正，那么从 $s$ 向该点连一条边权为该点点权的边，否则从该点向 $t$ 连一条边权为$-1\times$该点权的边。 跑最小割，这个时候最大权闭合子图的”最大权”为正点点权和-最小割。 最大权闭合子图跟这一题有什么关系呢？ 可以发现，对于一个植物，僵尸必须先吃掉它右边的植物和保护它的植物才能吃它，那么这个植物就像它右边的植物与保护它的植物连边，这个连好边的图的最大权闭合子图就是答案！ 但是值得注意的一点是，可能存在互相保护的关系，比如说样例中的 $(2,0)$ 保护 $(2,1)$ ，但是 $(2,1)$ 又作为 $(2,0)$ 右边的植物保护 $(2,0)$ ，然后这对关系怎么都是攻不破的，这是一个环！ 于是我们可以先建好图后拓扑一边，然后再在访问过的点之间连边(该点访问过意味着该点不在环内)，最后再跑最小割即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include &lt;cmath&gt;#include &lt;queue&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N=1e5+7;const int inf=1e9+9;int Score[N],n,m,s,t;#define id(x,y) (((x)-1)*m+(y))template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;namespace Dinic &#123; queue&lt;int&gt; q; int head[N],dep[N],cnt=1; struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;4]; inline void add(int u,int v,int w) &#123; G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,0&#125;,head[v]=cnt; &#125; inline int bfs() &#123; memset(dep,0,sizeof(dep)); dep[s]=1;q.push(s); while(!q.empty()) &#123; int u=q.front(),v;q.pop(); for(int i=head[u];i;i=G[i].nxt) if(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125;return dep[t]; &#125; int dfs(int u,int flow) &#123; if(!flow||u==t) return flow; int used=0,rlow; for(int i=head[u];i;i=G[i].nxt) &#123; int v=G[i].to; if(dep[v]==dep[u]+1&amp;&amp;G[i].val&gt;0) &#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[u]=-1; return used; &#125; inline int dinic() &#123; int maxflow=0; while(bfs()) maxflow+=dfs(s,inf); return maxflow; &#125;&#125;namespace Topology &#123; int vis[N],in[N]; vector&lt;int&gt; out[N]; queue&lt;int&gt; q; inline void topology()&#123; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) if(!in[id(i,j)]) q.push(id(i,j)),vis[id(i,j)]=true; while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=0;i&lt;out[u].size();++i) &#123; int v=out[u][i];--in[v]; if(!vis[v]&amp;&amp;!in[v]) &#123;vis[v]=true;q.push(v);&#125; &#125; &#125;return; &#125;&#125;using namespace Topology;using namespace Dinic;int main() &#123; // freopen("test.in","r",stdin); IN(n),IN(m);s=0,t=n*m+7; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) &#123; int tot,x,y; IN(Score[id(i,j)]),IN(tot); for(int k=1;k&lt;=tot;++k) &#123; IN(x),IN(y);++x,++y; out[id(i,j)].push_back(id(x,y)); ++in[id(x,y)]; &#125; if(j&lt;m) &#123; out[id(i,j+1)].push_back(id(i,j)); ++in[id(i,j)]; &#125; &#125; topology(); int sum=0; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) if(vis[id(i,j)])&#123; int u=id(i,j); if(Score[u]&lt;0) &#123;add(u,t,-Score[u]);&#125; else &#123;add(s,u,Score[u]);sum+=Score[u];&#125; for(int k=0;k&lt;out[u].size();++k) &#123; int v=out[u][k]; if(vis[v])add(v,u,inf); &#125; &#125; printf("%d\n",max(sum-dinic(),0)); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [AH2017/HNOI2017]大佬 搜索+DP luoguP3724/bzoj4828]]></title>
    <url>%2F2019%2F03%2F21%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4828%2F</url>
    <content type="text"><![CDATA[首先可以发现，刷水题跟打伤害是可以分开处理的。 我们先用 $DP$ 预处理出能打伤害的最大天数，其余的天数都只能用刷水题的方式恢复。 于是设 $dp[i][j]$ 表示前 $i$ 天，信心值还剩 $j$ 的能够打伤害的最大天数。 可以知道一天只有两种情况，我们枚举 $i,j​$ 然后进行转移： 如果可以坚持到下一天：dp[i+1][j-a[i+1]]=max(dp[i+1][j-a[i+1]],dp[i][j]+1) 如果是要刷水题：dp[i+1][j-a[i+1]+w[i+1]]=max(dp[i+1][j-a[i+1]+w[i+1]],dp[i][j]) 当然，如果要做第一个转移的话得先判断一下 j-a[i+1] 是否超了界，超界了的话当然就不能转移了。第二个转移也要注意，j-a[i+1]+w[i+1] 先要跟信心上界($mc$) 取 $min$ 。 最后在所有的状态中取一个最大值即可。 Code-DP12345678910111213141516inline void DP_maxday()&#123; memset(dp,-1,sizeof(dp));//初始化 dp[0][mc]=0; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;=mc;++j)&#123; if(dp[i][j]&lt;0)continue; int t1=j-a[i+1];if(t1&lt;0)continue; dp[i+1][t1]=max(dp[i+1][t1],dp[i][j]+1); int t2=min(t1+w[i+1],mc); dp[i+1][t2]=max(dp[i+1][t2],dp[i][j]); &#125; for(int i=1;i&lt;=n;++i) for(int j=0;j&lt;=mc;++j) d=max(d,dp[i][j]); return;&#125; 这个 $d$ 就是我们能够打伤害的最大天数。 然后我们需要预处理出打出伤害的所有状态，这里我用广搜。 队列的结构体 $Node$ 由三个元素组成：$F,L,D$ ，表示在第 $D$ 天，你的 $F$ 的值为 $F$ ，$L$ 的值为 $L$ 。 然后就是转移，这里也是两种情况： 使讽刺能力乘上等级：F,L,D -&gt; F*L,L,D+1 (L&gt;0) 使等级加一：F,L,D -&gt; F,L+1,D+1 直接这样转移就好了，注意我们需要开个数组将这些打出伤害的方案记下来，当然，记录的时候不用记 $L$ ，因为后面打伤害的时候 $L$ 是没太多用的。 还有就是每次需要判断一下当前的天数，如果当前状态的天数已经大于了 $d$ 那么当前状态显然是不合法的。 最后就是需要用 $map$ 判个重，不然的话会爆炸，当然判重的时候也不要判 $L$ 。 Code-Bfs1234567891011121314151617181920map&lt;pair&lt;int,int&gt;,int&gt; vis;inline void BFS_maxhurt()&#123; q.push((Node)&#123;1,0,1&#125;);//初始化 while(!q.empty())&#123; Node x=q.front();q.pop(); if(x.D&gt;d)continue; else if(x.D==d)&#123;T[++cnt]=(Data)&#123;x.F,x.D&#125;;continue;&#125; else T[++cnt]=(Data)&#123;x.F,x.D&#125;; /*第一种转移*/ if(x.L&amp;&amp;(ll)x.F*x.L&lt;=1e8&amp;&amp;!vis[pair&lt;int,int&gt;(x.F*x.L,x.L)])&#123; q.push((Node)&#123;x.F*x.L,x.L,x.D+1&#125;); vis[pair&lt;int,int&gt;(x.F*x.L,x.L)]=x.D;//标记 &#125; /*第二种转移*/ if(!vis[pair&lt;int,int&gt;(x.F,x.L+1)])&#123; q.push((Node)&#123;x.F,x.L+1,x.D+1&#125;); vis[pair&lt;int,int&gt;(x.F,x.L+1)]=x.D;//标记 &#125; &#125;return;&#125; 抱歉我的英语真的不好 然后我们已经将所有可行的打伤害的方案记录到 $T​$ 数组里面了，接下来就是看看怎么用这些方案打大佬了。 首先还嘴是可以直接算的，这个是不用考虑的。我们唯一要处理的就是怼大佬，我们可以选择怼一次还是两次。可以发现怼一次的话直接枚举 $T​$ 数组中的方案即可，算上天数，剩下的天数当然是每天还嘴，看看这样可不可以干掉大佬： 1if(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)return true; ( $C$ 为当前大佬的信心值) 首先，T[i].F&lt;=C 是为了保证你不被虐飞，然后 T[i].D&lt;=d 当然就是你有足够的天数来实现这个方案，最后的 C-T[i].F&lt;=d-T[i].D 就是看看打完这个方案后剩下的天数能否通过仅剩的还嘴来干掉大佬。 那么如果是怼两次大佬呢？ 可以发现其实跟上面差不多，设两次中一次是第 $i$ 套方案，一次是第 $j$ 套方案。那么首先这两套方案的 $F$ 的和不能超过 $C$ ，然后就是要保证剩下的天数中可以通过还嘴干掉大佬，于是我们可以列出式子： T[i].F+T[j].F \leq C \ , \ T[i].F+T[j].F+(d-T[i].D-T[j].D) \geq C​然后前式很容易满足，我们来看看后式： T[i].F+T[j].F+d-T[i].D-T[j].D \geq CT[i].F-T[i].D+T[j].F-T[j].D+d \geq C我们枚举一个 $i$ ，寻找 $j$ 。既然 $i$ 已经确定，最优的 $j$ 一定满足 $T[j].F-T[j].D$ 最大，取 $max$ 就好。 至于代码的问题，我们先将 $T[i]$ 按照 $F$ 排序，然后按顺序寻找 $j$ ，代码实现就不是很难了。 Code-Solve:12345678910111213inline bool solve(int C)&#123; if(C&lt;=d)return true;//可以全程顶嘴干掉大佬，直接retrun int l=0,mx=-inf;//初始化 for(int i=cnt;i&gt;=1;--i)&#123; /*用第i方案怼一次可以干掉大佬，return*/ if(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)return true; /*按顺序扫描满足要求的 j*/ while(l&lt;cnt&amp;&amp;T[i].F+T[l+1].F&lt;=C) l++,mx=max(mx,T[l].F-T[l].D);//取max /*可以怼两次干掉大佬，return*/ if(T[i].F-T[i].D+mx+d&gt;=C)return true; &#125;return false;//干不掉大佬了&#125; 当然这个时间复杂度很玄学，大概是 $O($状态数$)$ 。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;map&gt;#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1.5e2+2;const int S=1e7+5;const int inf=1e9+9;int n,m,mc,a[N],w[N];int d,dp[N][N],cnt;struct Node&#123;int F,L,D;&#125;;struct Data&#123; int F,D; bool operator &lt; (const Data&amp;x)const&#123;return F&lt;x.F;&#125;&#125;T[S];map&lt;pair&lt;int,int&gt;,int&gt; vis;queue&lt;Node&gt; q;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline void DP_maxday()&#123; memset(dp,-1,sizeof(dp)); dp[0][mc]=0; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;=mc;++j)&#123; if(dp[i][j]&lt;0)continue; int t1=j-a[i+1];if(t1&lt;0)continue; dp[i+1][t1]=max(dp[i+1][t1],dp[i][j]+1); int t2=min(t1+w[i+1],mc); dp[i+1][t2]=max(dp[i+1][t2],dp[i][j]); &#125; for(int i=1;i&lt;=n;++i) for(int j=0;j&lt;=mc;++j) d=max(d,dp[i][j]); return;&#125;inline void BFS_maxhurt()&#123; q.push((Node)&#123;1,0,1&#125;); while(!q.empty())&#123; Node x=q.front();q.pop(); if(x.D&gt;d)continue; else if(x.D==d)&#123;T[++cnt]=(Data)&#123;x.F,x.D&#125;;continue;&#125; else T[++cnt]=(Data)&#123;x.F,x.D&#125;; if(x.L&amp;&amp;(ll)x.F*x.L&lt;=1e8&amp;&amp;!vis[pair&lt;int,int&gt;(x.F*x.L,x.L)])&#123; q.push((Node)&#123;x.F*x.L,x.L,x.D+1&#125;); vis[pair&lt;int,int&gt;(x.F*x.L,x.L)]=x.D; &#125; if(!vis[pair&lt;int,int&gt;(x.F,x.L+1)])&#123; q.push((Node)&#123;x.F,x.L+1,x.D+1&#125;); vis[pair&lt;int,int&gt;(x.F,x.L+1)]=x.D; &#125; &#125;return;&#125;inline bool solve(int C)&#123; if(C&lt;=d)return true; int l=0,mx=-inf; for(int i=cnt;i&gt;=1;--i)&#123; if(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)return true; while(l&lt;cnt&amp;&amp;T[i].F+T[l+1].F&lt;=C) l++,mx=max(mx,T[l].F-T[l].D); if(T[i].F-T[i].D+mx+d&gt;=C)return true; &#125;return false;&#125;int main()&#123; IN(n),IN(m),IN(mc); for(int i=1;i&lt;=n;++i)IN(a[i]); for(int i=1;i&lt;=n;++i)IN(w[i]); DP_maxday(); BFS_maxhurt(); sort(T+1,T+cnt+1); for(int i=1;i&lt;=m;++i)&#123; int C;IN(C); if(solve(C))printf("1\n"); else printf("0\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [Violet]天使玩偶/SJY摆棋子 K-D Tree luoguP4169/bzoj2648]]></title>
    <url>%2F2019%2F03%2F21%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4169%2F</url>
    <content type="text"><![CDATA[$KDT$ 大法好！ 直接建 $KDT$ 维护一下所有的可能存在玩偶的结点，该插入的时候插入，查询的时候只需要沿着 $KDT$ 往下走，然后随时对 $ans$ 取 $min$ 即可。 注意这题有插入，这意味着 $KDT$ 到后面或许会不平衡，这个时候我们就需要用替罪羊树的思想——拍扁重建即可。注意这里判断是否平衡的 $check$ 函数需要放在 $insert$ 的最后，也就是还要在 $pushup$ 以后再 $check$ 即可。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long ll;const int N=1e6+7;const int inf=1e9+9;#define alph (0.75)template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x) &#123; char ch=0;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch)) if(ch=='-') flag=1; while(isdigit(ch)) x=x*10+ch-'0',ch=getchar(); if(flag) x=-x;&#125;int root,ans,WD,trh[N],top,cnt;struct point&#123;int x[2];&#125;p[N];struct node &#123; int mi[2],mx[2],l,r,sz; point tp;&#125;tr[N];int operator &lt; (point a,point b) &#123;return a.x[WD]&lt;b.x[WD];&#125;inline int new_node() &#123; if(top) return trh[top--]; else return ++cnt;&#125;inline void pushup(int x) &#123; int l=tr[x].l,r=tr[x].r; tr[x].sz=tr[l].sz+tr[r].sz+1; for(int i=0;i&lt;=1;++i) &#123; tr[x].mi[i]=tr[x].mx[i]=tr[x].tp.x[i]; if(l) &#123; tr[x].mi[i]=min(tr[x].mi[i],tr[l].mi[i]); tr[x].mx[i]=max(tr[x].mx[i],tr[l].mx[i]); &#125; if(r) &#123; tr[x].mi[i]=min(tr[x].mi[i],tr[r].mi[i]); tr[x].mx[i]=max(tr[x].mx[i],tr[r].mx[i]); &#125; &#125;&#125;int build(int l,int r,int wd) &#123; if(l&gt;r) return 0; int x=new_node(),mid=(l+r)&gt;&gt;1; WD=wd,nth_element(p+l,p+mid,p+r+1),tr[x].tp=p[mid]; tr[x].l=build(l,mid-1,wd^1); tr[x].r=build(mid+1,r,wd^1); return pushup(x),x;&#125;void pia(int x,int num) &#123; if(tr[x].l) pia(tr[x].l,num); p[num+tr[tr[x].l].sz+1]=tr[x].tp,trh[++top]=x; if(tr[x].r) pia(tr[x].r,num+tr[tr[x].l].sz+1);&#125;void check(int&amp;x,int wd) &#123; if(alph*tr[x].sz&lt;tr[tr[x].l].sz||alph*tr[x].sz&lt;tr[tr[x].r].sz) pia(x,0),x=build(1,tr[x].sz,wd);&#125;void Insert(point tmp,int&amp;x,int wd) &#123; if(!x) &#123; x=new_node(); tr[x].tp=tmp,tr[x].l=tr[x].r=0; pushup(x);return; &#125; if(tr[x].tp.x[wd]&lt;tmp.x[wd]) Insert(tmp,tr[x].r,wd^1); else Insert(tmp,tr[x].l,wd^1); pushup(x);check(x,wd);&#125;int getdist(point tmp,int x) &#123; int res=0; for(int i=0;i&lt;=1;++i) res+=max(0,tmp.x[i]-tr[x].mx[i])+max(0,tr[x].mi[i]-tmp.x[i]); return res;&#125;int dist(point a,point b) &#123; return abs(a.x[0]-b.x[0])+abs(a.x[1]-b.x[1]);&#125;void query(point tmp,int x) &#123; ans=min(ans,dist(tmp,tr[x].tp)); int disl=inf,disr=inf; if(tr[x].l) disl=getdist(tmp,tr[x].l); if(tr[x].r) disr=getdist(tmp,tr[x].r); if(disl&lt;disr) &#123; if(disl&lt;ans) query(tmp,tr[x].l); if(disr&lt;ans) query(tmp,tr[x].r); &#125; else &#123; if(disr&lt;ans) query(tmp,tr[x].r); if(disl&lt;ans) query(tmp,tr[x].l); &#125;&#125;int main() &#123; int n,m,op; IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(p[i].x[0]),IN(p[i].x[1]); root=build(1,n,0); for(int i=1;i&lt;=m;++i) &#123; point tmp; IN(op),IN(tmp.x[0]),IN(tmp.x[1]); if(op==1) Insert(tmp,root,0); else &#123; ans=inf;query(tmp,root); printf("%d\n",ans); &#125; &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>K-D Tree</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI/AHOI2018]转盘 线段树 luoguP4425]]></title>
    <url>%2F2019%2F03%2F20%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4425%2F</url>
    <content type="text"><![CDATA[首先再来讲明一下题意： 给定一个长度为 $n$ 的环，环上的每个点有一个权值 $T_i$ ，要求你从环上选中任意一个点为起点开始，每个时间可以顺时钟到下一个点，或者停留不动。对于一个点，如果到这个点的时间大于等于了 $T_i$ ，那么这个点将被标记，问最少什么时候可以让所有物品都被标记。 可以发现，这个问题的答案跟以下问题的答案是等价的： 给定一个长度为 $n​$ 的环，环上的每个点有一个权值 $T_i​$ ，要求你从环上选中任意一个点为起点开始，，开始的时间为 $t​$ ，每个时间可以逆时针到下一个点，或者停留不动。对于一个点，它将在 $T_i​$ 时间损坏 ，求一个最小的 $t​$ 使得我们能够在没有点损坏的情况下遍历所有点。 我们算一下每一个点离起点的距离，那么这个时候我们就可以在起点等，等一段时间后再出发，这样子我们转一圈就够了，这个方案显然是最优的。 我们断环为链，枚举起点 $s$ ，对于一个点 $i$ ，$s$ 到达 $i$ 的耗时显然是 $(i-s)$ ，那么我们如果想要等一段时间出发后正好标记该点，这一段等待的时间当然就是 $T_i-(i-s)$ 。我们对所有的点 $i$ 的 $T_i-(i-s)$ 取 $max$ ，最后的结果就是我们应该在 $s$ 等的时间。 那么很显然我们的答案为： Ans=min_{s \in [1,n]}\{ max_{i \in [s,s+n-1]}[T_i-(i-s)] \}+n-1$min_{s \in [1,n]}\{ max_{i \in [s,s+n-1]}[T_i-(i-s)] \}​$ 这显然是在选择一个最优的起点使得等待时间最小，$n-1​$ 就是等待完后转一圈的时间。 这个时候暴力枚举就可以得到 $30$ 分。 不过我们继续： Ans=min_{s \in [1,n]}\{ max_{i \in [s,s+n-1]}[T_i-i+s] \}+n-1我们设 $A_i$ 为 $T_i-i$ 。 Ans=min_{s \in [1,n]}\{ max_{i \in [s,s+n-1]}[A_i+s] \}+n-1假设现在有一对 $A_i,A_{i+n}$ ，我们可以发现 $A_{i+1}$ 是必然比 $A_i$ 小的，也就是说 $A_{s+n}$ 到 $A_{2n}$ 这一段数就算算进来也造不成影响。 也就是说原式跟这个式子是等价的： Ans=min_{s \in [1,n]}\{ max_{i \in [s,2n]}[A_i+s] \}+n-1发现 $max$ 里面 $s$ 并没有什么卵用，直接提出来。 Ans=min_{s \in [1,n]}\{ max_{i \in [s,2n]}A_i +s\}+n-1​这个的话……因为 $A_i$ 的值跟 $s$ 没有关系……所以……所以我们可以预处理一个 $ST$ 表……嗯……然后枚举 $s$ ……结果我们是 $O(n)$ 搞定？？？ 哦哦哦作者脑抽了，这题是待修改的。 不过没关系，我们还有出路。 现在考虑用线段树来维护，假设结点 $x$ 代表的区间为 $l,r$ ，维护一个 $val[x]$ 表示区间 $[l,r]$ 中 $A_i$ 的最大值，这个是线段树基本操作不再赘述，然后再维护一个 $ans[x]$ 表示区间 $min_{s \in [l,mid]}\{ max_{i \in [s,r]} \}$ 。$1$ 号结点的区间为 $1,2n$ ，我们的答案就是 $ans[1]$ 。 那么怎么上传 $ans$ 呢。 我们对于 $[mid,r]$ 区间的最大值 $A_x$ ，这个 $A_x$ 显然可以 $O(1)$ 求出，然后再找到一个 $A_y$ ，表示当 $s$ 为 $y$ 的时候，整个 $[s,r]$ 的 $A_i$ 的最大值为 $A_x$ 。在寻找 $y$ 的时候顺便更新一下 $s\in [l,y-1]$ 的区间的答案就好。 当 $s\in [y,r]​$ 的时候答案明显为 $A_x+s​$ ，要满足最小嘛。 有关这一部分的代码实现： 123456inline void calc(int k,int l,int r,int Ax)&#123; if(l==r)return l+max(val[k],Ax); int mid=(l+r)&gt;&gt;1; else if(val[k&lt;&lt;1|1]&gt;=Ax)return min(calc(k&lt;&lt;1|1,mid+1,r,Ax),ans[k&lt;&lt;1]); else return min(calc(k&lt;&lt;1,l,mid,Ax),(mid+1)+Ax);&#125; 我们来剖析一下代码。 1inline void calc(int k,int l,int r,int Ax)&#123; 这一句表示当前的结点为 $k$ ，$k$ 代表的区间为 $l,r$ ，$Ax$ 为上文中的 $A_x$ 。 1if(l==r)return l+max(val[k],Ax); 这个显然就是找到了 $y$ ，这个时候答案为 $A_x+s$ ，上文也讲了，这里的 $s$ 就是 $y$ 的位置，$A_x$ 已经在函数中了直接调用就好。但是为什么要取 $max$ 呢？因为怕 $A_y$ 是大于 $A_x$ 的! ，所以加个 $max$ 就好。 1else if(val[k&lt;&lt;1|1]&gt;=Ax)return min(calc(k&lt;&lt;1|1,mid+1,r,Ax),ans[k&lt;&lt;1]); 这个就是当前结点的右区间有比 $A_x$ 大的数，那么这个时候 $y$ 就不可能到左区间去了，不然的话 $[y,r]$ 中 $max\{A_i\}$ 就不是 $A_x$ 了，所以我们往右子树走。这个时候可以发现 $s$ 属于左区间的时候的答案为 $ans[k&lt;&lt;1]$ ，顺带更新一下。 1else return min(calc(k&lt;&lt;1,l,mid,Ax),(mid+1)+Ax); 这个时候 $y$ 就是在左区间了，那么我们往左区间走，右区间的答案呢？右区间为 $[mid,r]$ ，显然这一段的最大值肯定都为 $A_x$ ——包括 $mid+1$ ，所以不要跟 $mid+1$ 取一下 $max$ 了——尽管第一句是与 $A_y$ 取了 $max$ 的。 这个时候因为要 $s$ 尽量的小，所以就是右区间的左端点——$mid+1$ 了。 这个时候 $pushup$ 就应该这么写： 12345inline void pushup(int x,int l,int r)&#123; val[x]=max(val[x&lt;&lt;1],val[x&lt;&lt;1|1]); int mid=(l+r)&gt;&gt;1; ans[x]=calc(x&lt;&lt;1,l,mid,val[x&lt;&lt;1|1]);&#125; Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define min(x,y) ((x)&lt;(y)?(x):(y))#define max(x,y) ((x)&gt;(y)?(x):(y))typedef long long ll;const int N=4e5+2;const int inf=1e9+9;int n,m,p,lastans,a[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct Seg_Tree&#123; #define mid ((l+r)&gt;&gt;1) int ans[N&lt;&lt;2],val[N&lt;&lt;2]; int calc(int x,int l,int r,int Mx)&#123; if(l==r)return l+max(val[x],Mx); if(val[x&lt;&lt;1|1]&gt;=Mx)return min(calc(x&lt;&lt;1|1,mid+1,r,Mx),ans[x]); else return min(calc(x&lt;&lt;1,l,mid,Mx),mid+1+Mx); &#125; inline void pushup(int x,int l,int r)&#123; val[x]=max(val[x&lt;&lt;1],val[x&lt;&lt;1|1]); ans[x]=calc(x&lt;&lt;1,l,mid,val[x&lt;&lt;1|1]); &#125; inline void build(int x,int l,int r)&#123; if(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;return;&#125; build(x&lt;&lt;1,l,mid),build(x&lt;&lt;1|1,mid+1,r); pushup(x,l,r);return; &#125; inline void updata(int x,int l,int r,int pos)&#123; if(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;return;&#125; if(pos&lt;=mid)updata(x&lt;&lt;1,l,mid,pos); else if(pos&gt;mid)updata(x&lt;&lt;1|1,mid+1,r,pos); pushup(x,l,r); &#125;&#125;T;int main()&#123; IN(n),IN(m),IN(p); for(int i=1;i&lt;=n;++i)IN(a[i]),a[i+n]=a[i]; for(int i=1;i&lt;=(n&lt;&lt;1);++i)a[i]-=i; T.build(1,1,(n&lt;&lt;1)); lastans=T.ans[1]+n-1,printf("%d\n",lastans); for(int i=1;i&lt;=m;++i)&#123; int x,y;IN(x),IN(y); if(p)x^=lastans,y^=lastans; a[x]=y-x,a[x+n]=y-x-n; T.updata(1,1,(n&lt;&lt;1),x),T.updata(1,1,(n&lt;&lt;1),x+n); printf("%d\n",lastans=T.ans[1]+n-1); &#125; return 0;&#125; 但是这份代码是 TLE 的。 这玩意坑了我好久，你知道为什么 TLE 吗？ 就是这个鬼东西！： 12#define min(x,y) ((x)&lt;(y)?(x):(y))#define max(x,y) ((x)&gt;(y)?(x):(y)) 这里的 $x$ 和 $y$ 是调用了两次的，然后我们发现 $calc$ 函数…… 12345int calc(int x,int l,int r,int Mx)&#123; if(l==r)return l+max(val[x],Mx); if(val[x&lt;&lt;1|1]&gt;=Mx)return min(calc(x&lt;&lt;1|1,mid+1,r,Mx),ans[x]); else return min(calc(x&lt;&lt;1,l,mid,Mx),mid+1+Mx);&#125; $min$ 里面有 $calc$ 函数………..然后 $calc$ 函数调用了两次……….然后………..爆炸！ 所以 $Qiuly$ 提醒您：代码千万条，时间第一条，$define$ 不规范，$OIer$ 两行泪 。 还是跟着 $std$ 走好嘿嘿嘿，$using\ namespace\ std$ 万岁！ 最终 $AC$ 的代码。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;typedef long long ll;const int N=4e5+2;const int inf=1e9+9;int n,m,p,lastans,a[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct Seg_Tree&#123; #define mid ((l+r)&gt;&gt;1) int ans[N&lt;&lt;2],val[N&lt;&lt;2]; int calc(int x,int l,int r,int Mx)&#123; if(l==r)return l+max(val[x],Mx); if(val[x&lt;&lt;1|1]&gt;=Mx)return min(calc(x&lt;&lt;1|1,mid+1,r,Mx),ans[x]); else return min(calc(x&lt;&lt;1,l,mid,Mx),mid+1+Mx); &#125; inline void pushup(int x,int l,int r)&#123; val[x]=max(val[x&lt;&lt;1],val[x&lt;&lt;1|1]); ans[x]=calc(x&lt;&lt;1,l,mid,val[x&lt;&lt;1|1]); &#125; inline void build(int x,int l,int r)&#123; if(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;return;&#125; build(x&lt;&lt;1,l,mid),build(x&lt;&lt;1|1,mid+1,r); pushup(x,l,r);return; &#125; inline void updata(int x,int l,int r,int pos)&#123; if(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;return;&#125; if(pos&lt;=mid)updata(x&lt;&lt;1,l,mid,pos); else if(pos&gt;mid)updata(x&lt;&lt;1|1,mid+1,r,pos); pushup(x,l,r); &#125;&#125;T;int main()&#123; IN(n),IN(m),IN(p); for(int i=1;i&lt;=n;++i)IN(a[i]),a[i+n]=a[i]; for(int i=1;i&lt;=(n&lt;&lt;1);++i)a[i]-=i; T.build(1,1,(n&lt;&lt;1)); lastans=T.ans[1]+n-1,printf("%d\n",lastans); for(int i=1;i&lt;=m;++i)&#123; int x,y;IN(x),IN(y); if(p)x^=lastans,y^=lastans; a[x]=y-x,a[x+n]=y-x-n; T.updata(1,1,(n&lt;&lt;1),x),T.updata(1,1,(n&lt;&lt;1),x+n); printf("%d\n",lastans=T.ans[1]+n-1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 历史研究 回滚莫队 luoguAT1219]]></title>
    <url>%2F2019%2F03%2F20%2F%5B%E9%A2%98%E8%A7%A3%5DluoguAT1219%2F</url>
    <content type="text"><![CDATA[回滚莫队板子题，在此不再赘述。 关于回滚莫队的文章戳这 $QwQ$ :[算法]浅谈4种莫队及例题 可以算作一个回滚莫队的板子来参考。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;typedef long long ll;using namespace std;const int N=1e5+2;const int inf=1e9+9;int n,m,block,a[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(flag)x=-x; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace MO&#123; ll ans,Ans[N]; int v[N],b[N],blo[N],cnt[N],hep[N]; struct Query&#123;int l,r,id;&#125;q[N]; bool cmp(Query x,Query y)&#123; return blo[x.l]==blo[y.l]?x.r&lt;y.r:blo[x.l]&lt;blo[y.l]; &#125; inline void roll(int pos)&#123;--cnt[b[pos]];&#125; inline void add(int pos)&#123; ++cnt[b[pos]]; ans=max(ans,1ll*a[pos]*cnt[b[pos]]); &#125; inline ll query(int l,int r)&#123; ll res=0; for(int i=l;i&lt;=r;++i)hep[b[i]]=0; for(int i=l;i&lt;=r;++i)&#123; ++hep[b[i]]; res=max(res,1ll*a[i]*hep[b[i]]); &#125;return res; &#125; inline int solve(int num,int bloid)&#123; int L=min(block*bloid,n); int i=num,l=L+1,r=l-1; for(int k=1;k&lt;=n;++k)cnt[k]=0; ans=0; for(;blo[q[i].l]==bloid;++i)&#123; if(blo[q[i].l]==blo[q[i].r])&#123; Ans[q[i].id]=query(q[i].l,q[i].r); continue; &#125; while(r&lt;q[i].r)add(++r); ll tmp=ans; while(l&gt;q[i].l)add(--l); Ans[q[i].id]=ans; while(l&lt;L+1)roll(l++); ans=tmp; &#125;return i; &#125; inline void Main()&#123; sort(v+1,v+1+n); int tot=unique(v+1,v+1+n)-(v+1); for(int i=1;i&lt;=n;++i) b[i]=lower_bound(v+1,v+1+tot,a[i])-v; sort(q+1,q+1+m,cmp); int num=1; for(int i=1;i&lt;=blo[n];++i)num=solve(num,i); for(int i=1;i&lt;=m;++i)printf("%lld\n",Ans[i]); return; &#125;&#125;using namespace MO;int main()&#123; IN(n),IN(m);block=sqrt(n); for(int i=1;i&lt;=n;++i)IN(a[i]),v[i]=a[i]; for(int i=1;i&lt;=n;++i)blo[i]=(i-1)/block+1; for(int i=1;i&lt;=m;++i)&#123; IN(q[i].l),IN(q[i].r); q[i].id=i; &#125;return Main(),0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [AH2017/HNOI2017]礼物 FFT luoguP3723/bzoj4827]]></title>
    <url>%2F2019%2F03%2F15%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4827%2F</url>
    <content type="text"><![CDATA[题目背景有些……………通过题目我们可以知道最终我们要求的式子就是： \sum_{i=1}^{n}(a_i+c-b_i)^2于是我们将式子拆开： (a_i+c-b_i)^2=a_i^2+b_i^2+c^2+2a_ic-2b_ic-2a_ib_i \sum_{i=1}^{n}(a_i+c-b_i)^2=\sum_{i=1}^{n}a_i^2+\sum_{i=1}^{n}b_i^2+nc^2+2c(\sum_{i=1}^{n}a_i-\sum_{i=1}^{n}b_i)-2\sum_{i=1}^{n}a_ib_i​前面的这些都很容易求出，但是最后的 $\sum_{i=1}^{n}a_ib_i​$ 无法很快算出，我们算答案的时候枚举 $c​$ 以及手环旋转了多少，这个时候如果在里面直接大力计算 $\sum_{i=1}^{n}a_ib_i​$ 可以拿到 $30​$ 分。如果将这个式子在之前拿出来预处理一下，将会拿到 $70​$ 分。 这个时候将 $a_i$ 反向，式子变为：$\sum_{i=1}^{n}a_{n-i+1}b_i$ ，可以发现这是一个卷积，是可以用 $FFT$ 跑的，众所周知 $FFT$ 的复杂度是 $O(nlogn)$ ，是能跑过的。 具体实现的时候我们需要将 $a​$ 拉成两倍长，或者说是断环为链？至于为什么的话，是因为题目要求了这个数列是可以旋转的。然后按照上式将 $b​$ 反向就好了。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#define PI 3.1415926535898#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))typedef long long ll;const int N=5e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;int n,m,limit=1,a[N],b[N],filp[N];ll a1=0,a2=0,b1=0,b2=0;complex A[N],B[N];inline void FFT(complex *f,short inv)&#123; for(int i=0;i&lt;limit;++i) if(i&lt;filp[i])&#123;complex tmp=f[i];f[i]=f[filp[i]];f[filp[i]]=tmp;&#125; for(int p=2;p&lt;=limit;p&lt;&lt;=1)&#123; int len=p/2; complex tmp=complex(cos(PI/len),inv*sin(PI/len)); for(int k=0;k&lt;limit;k+=p)&#123; complex buf=complex(1,0); for(int l=k;l&lt;k+len;++l)&#123; complex t=buf*f[len+l]; f[len+l]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp; &#125; &#125; &#125;return;&#125;int main()&#123; IN(n),IN(m); for(int i=1;i&lt;=n;++i) IN(a[i]),a1+=a[i]*a[i],a2+=a[i]; for(int i=1;i&lt;=n;++i) IN(b[i]),b1+=b[i]*b[i],b2+=b[i]; for(int i=1;i&lt;=n;++i) A[i].x=A[i+n].x=a[i],B[i]=b[n-i+1]; while(limit&lt;=(3*n))limit&lt;&lt;=1; for(int i=0;i&lt;limit;++i)filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?limit&gt;&gt;1:0); FFT(A,1),FFT(B,1); for(int i=0;i&lt;=limit;++i)A[i]=A[i]*B[i]; FFT(A,-1); for(int i=0;i&lt;=limit;++i)A[i].x=(ll)(A[i].x/limit+0.5); ll ans=inf; for(int i=1;i&lt;=n;++i) for(int j=-m;j&lt;=m;++j) ans=min(ans,a1+b1+1ll*j*j*n+2ll*j*(a2-b2)-2ll*(ll)A[i+n].x); printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [AH2017/HNOI2017]影魔 线段树 luoguP3722/bzoj4826]]></title>
    <url>%2F2019%2F03%2F15%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4826%2F</url>
    <content type="text"><![CDATA[真心巧妙，不看题解准做不出(之前题解都看不懂QwQ) 这道题貌似有许多的做法，都不费，主席树的话不知道怎么搞，于是建了 $3$ 棵线段树，实测是不会炸的。 30分做法： 小学生都能轻易想出来的解法，对于一个询问的区间，暴力枚举其子区间，然后按照题面的要求算贡献，区间最大值可以用 $ST$ 表预处理，复杂度爆炸，但是仍然可以拿到 $30$ 暴力分。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e5+2;const int LogN=23;const int inf=1e9+9; int v[N],n,m,p1,p2;struct ST&#123; int logs[N],f[N][LogN+2]; inline void make()&#123; logs[0]=-1; for(int i=1;i&lt;=n;++i) f[i][0]=v[i],logs[i]=logs[i&gt;&gt;1]+1; for(int j=1;j&lt;=LogN;++j) for(int i=1;i+(1&lt;&lt;j)-1&lt;=n;++i) f[i][j]=max(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]); &#125; inline int query(int x,int y)&#123; int ans=logs[y-x+1]; return max(f[x][ans],f[y-(1&lt;&lt;ans)+1][ans]); &#125;&#125;T;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; int main()&#123; IN(n),IN(m),IN(p1),IN(p2); for(int i=1;i&lt;=n;++i)IN(v[i]); T.make(); for(int i=1;i&lt;=m;++i)&#123; int l,r,ans=0; IN(l),IN(r); for(int a=l;a&lt;=r;++a) for(int b=a+2;b&lt;=r;++b)&#123; int sum=T.query(a+1,b-1); if(v[a]&gt;=sum&amp;&amp;v[b]&gt;=sum)ans+=p1; if((v[a]&lt;sum&amp;&amp;sum&lt;v[b])||(v[b]&lt;sum&amp;&amp;sum&lt;v[a]))ans+=p2; &#125; printf("%d\n",ans+(r-l)*p1); &#125; return 0;&#125; 100分做法 对于一个点 $i$ ，我们设 $lmax[i]$ 为 $i$ 向左走遇到的第一个大于自己的数(没有的话为 $0$) ，同样的，设 $rmax[i]$ 为 $i$ 向右走遇到的第一个大于自己的数(没有的话为 $n+1$) 。这两个数组比较容易求出，搞个单调栈求就好。 12345678910top=0,stack[0]=0;for(int i=1;i&lt;=n;++i)&#123; while(top&amp;&amp;k[stack[top]]&lt;k[i])--top; lmax[i]=stack[top],stack[++top]=i;&#125;top=0,stack[0]=n+1;for(int i=n;i&gt;=1;--i)&#123; while(top&amp;&amp;k[stack[top]]&lt;k[i])--top; rmax[i]=stack[top],stack[++top]=i;&#125; 然后可以发现，如果枚举点 $i$ 的话，有了上面的两个数组后有关 $i$ 的贡献就好求些了，首先我们可以知道 $i$ 是区间 $[lmax[i]+1,rmax[i]-1]$ 的最大值，那么对于每种贡献： 如果 $lmax[i]$ 和 $rmax[i]$ 都在当前询问区间内，那么就可以做出 $p_1$ 的贡献。 如果 $lmax[i]$ 在当前询问区间中，那么显然 $lmax[i]$ 为区间 $[lmax[i],rmax[i]-1]$ 的最大值，这个时候右端点如果在 $[i+1,rmax[i]-1]$ 区间中，那么可以保证右端点不是 $[lmax[i],rmax[i]-1]$ 的次大值，这个时候可以产生多个 $p_2$ 的贡献。 如果 $rmax[i]$ 在当前询问区间中，那么显然当左端点为 $[lmax[i]+1,i-1]$ 的时候该子区间均能产生 $p_2$ 的贡献，原因跟上面一样的。 但是这样的话复杂度依旧是 $O(n^2)$ 的，所以还要优化。 考虑用线段树维护，我们离线处理询问，把每个询问按左端点排个序，然后反着扫一遍，如果遇到了一个点 $x$ ，它是 某个点/某些点 的 $lmax$ ，假设 $x$ 是 $i$ 的 $lmax$ ，那么我们依次在第一颗线段树中实现区间加：将 $[i+1,rmax[i]-1]$ 区间正题加上 $p_2$ ，因为当前的左端点为 $x$ ，这个时候我们将要计算的是所有的左端点为 $x$ 的区间对答案的贡献，因为对于 $i$ 来说右端点的范围就是 $[i+1,rmax[i]-1]$，这些区间均可以做出贡献，于是都在线段树中加上。当然在做贡献的之前不要忘记判断 $i+1&lt;rmax[i]$ ，如果不满足的话就没有右端点了…… 那么接下来讨论怎么计算 $p_1$ 的贡献，对于询问区间来说，现在我们确定了左端点为 $x$ ，这个时候当右端点落在 $[rmax[i],n+1]$ 的时候询问区间都可以算上 $[lmax[i],rmax[i]]$ 区间的贡献，也就是 $p_1$ 的贡献，于是我们可以在另一个线段树中将 $[rmax[i],n+1]$ 全都加上 $p_1$ 即可。 按照上面的方法，再正着扫一遍计算 $rmax$ 的情况就好，当然反着扫的时候就不要算 $p_1$ 的贡献了，不然就会重复了，想想就可以明白。最后就是一定要开 $longlong$ 。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define swap(x,y) ((x)^=(y)^=(x)^=(y))typedef long long ll;const int N=2e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; struct Seg_Tree&#123;//线段树板子 #define mid ((l+r)&gt;&gt;1) ll v[N&lt;&lt;2];int tag[N&lt;&lt;2]; inline void pushdown(int x,int l,int r)&#123; if(tag[x])&#123; tag[x&lt;&lt;1]+=tag[x],tag[x&lt;&lt;1|1]+=tag[x]; v[x&lt;&lt;1]+=tag[x]*(mid-l+1),v[x&lt;&lt;1|1]+=tag[x]*(r-mid); &#125;tag[x]=0;return; &#125; inline void updata(int x,int l,int r,int L,int R)&#123; if(L&lt;=l&amp;&amp;r&lt;=R)&#123;v[x]+=r-l+1,++tag[x];return;&#125; pushdown(x,l,r); if(L&lt;=mid)updata(x&lt;&lt;1,l,mid,L,R); if(R&gt;mid)updata(x&lt;&lt;1|1,mid+1,r,L,R); v[x]=v[x&lt;&lt;1]+v[x&lt;&lt;1|1]; &#125; inline ll query(int x,int l,int r,int L,int R)&#123; if(L&lt;=l&amp;&amp;r&lt;=R)return v[x]; pushdown(x,l,r); ll ans=0; if(L&lt;=mid)ans+=query(x&lt;&lt;1,l,mid,L,R); if(R&gt;mid)ans+=query(x&lt;&lt;1|1,mid+1,r,L,R); return ans; &#125;&#125;st1,st2,st3;//三棵线段树[滑稽]int n,m,k[N];ll p1,p2;struct Query&#123;int l,r;ll ans;&#125;q[N];int lmax[N],rmax[N],stack[N],top;std::vector&lt;int&gt; li[N],ri[N],lq[N],rq[N];inline void _Pre_lmax_rmax()&#123; top=0,stack[0]=0; for(int i=1;i&lt;=n;++i)&#123; while(top&amp;&amp;k[stack[top]]&lt;k[i])--top; lmax[i]=stack[top],li[stack[top]].push_back(i);//统计上文中的x stack[++top]=i; &#125; top=0,stack[0]=n+1; for(int i=n;i&gt;=1;--i)&#123; while(top&amp;&amp;k[stack[top]]&lt;k[i])--top; rmax[i]=stack[top],ri[stack[top]].push_back(i); stack[++top]=i; &#125;&#125;int main()&#123; //freopen("code.in","r",stdin); IN(n),IN(m),IN(p1),IN(p2); for(int i=1;i&lt;=n;++i)IN(k[i]); _Pre_lmax_rmax(); for(int i=1;i&lt;=m;++i)&#123; IN(q[i].l),lq[q[i].l].push_back(i); IN(q[i].r),rq[q[i].r].push_back(i); &#125; for(int i=n;i&gt;=1;--i)&#123; for(int j=0;j&lt;li[i].size();++j)&#123;//计算左端点在i的区间的贡献 if(li[i][j]+1&lt;rmax[li[i][j]]) st1.updata(1,0,n+1,li[i][j]+1,rmax[li[i][j]]-1); st3.updata(1,0,n+1,rmax[li[i][j]],n+1); &#125; for(int j=0;j&lt;lq[i].size();++j)&#123;//统计左端点在i的询问区间的答案 q[lq[i][j]].ans+=st1.query(1,0,n+1,i,q[lq[i][j]].r)*p2; q[lq[i][j]].ans+=st3.query(1,0,n+1,q[lq[i][j]].r,q[lq[i][j]].r)*p1; &#125; &#125; for(int i=1;i&lt;=n;++i)&#123; for(int j=0;j&lt;ri[i].size();++j) if(ri[i][j]-1&gt;lmax[ri[i][j]]) st2.updata(1,0,n+1,lmax[ri[i][j]]+1,ri[i][j]-1); for(int j=0;j&lt;rq[i].size();++j) q[rq[i][j]].ans+=st2.query(1,0,n+1,q[rq[i][j]].l,i)*p2; &#125; for(int i=1;i&lt;=m;++i)//输出答案，不要忘了漏统计的长度为2的区间 printf("%lld\n",q[i].ans+1ll*(q[i].r-q[i].l)*p1); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [AH2017/HNOI2017]单旋 线段树 luoguP3721/bzoj4825]]></title>
    <url>%2F2019%2F03%2F15%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4825%2F</url>
    <content type="text"><![CDATA[$Spaly​$ 是不会用的，这辈子也不会用的。 这道题当然可以用 $Splay​$ 做，然而不会。 于是考虑怎么来做这道题，我们先来观察一下所有的操作： 1.插入操作：很普通的插入操作……2.单旋最小值： 结点的深度的变化如下： 需要旋转的结点 $(4)$ ：变为 $root$ ，深度变为 $1$ 。 需要旋转的结点的子树 $(7)$ ：深度不变。 其他结点 $(1,2,3,5,6)$ ：深度加 $1$ 。 3.单旋最大值：变化和上面的 “单旋最小值” 一样。 4.5 删除最大/最小值先将需要删除的 最大/最小值 转到树根，这个时候我们将树根删掉，可以发现整棵树的深度全部都减了 $1$ ，一起计算上旋转造成的深度的影响会得到： 删掉的结点的子树 $(7)$ ：深度减 $1$ 其他节点 $(1,2,3,5,6)$ ：深度不变 发现深度的变化也不是很大，于是我们考虑用线段树维护每一个节点的深度。线段树不易寻找最大/最小值，这个地方我们用 $set$ 来辅助即可，操作的时候更新一下 $set$ 中树的形态就好。 线段树的要求很低，一个很普通的兹磁区间修改的线段树即可： 123456789101112131415161718192021222324252627struct Segment_Tree&#123; #define mid ((l+r)&gt;&gt;1) int dep[N&lt;&lt;2]; inline void pushdown(int x,int l,int r)&#123; if(dep[x])&#123; dep[x&lt;&lt;1]+=dep[x],dep[x&lt;&lt;1|1]+=dep[x],dep[x]=0; &#125;return; &#125; void add(int x,int l,int r,int L,int R,int res)&#123; if(L&lt;=l&amp;&amp;r&lt;=R)&#123;dep[x]+=res;return;&#125; pushdown(x,l,r); if(L&lt;=mid)add(x&lt;&lt;1,l,mid,L,R,res); if(R&gt;mid)add(x&lt;&lt;1|1,mid+1,r,L,R,res); &#125; void change(int x,int l,int r,int pos,int res)&#123; if(l==r)&#123;dep[x]=res;return;&#125; pushdown(x,l,r); if(pos&lt;=mid)change(x&lt;&lt;1,l,mid,pos,res); else change(x&lt;&lt;1|1,mid+1,r,pos,res); &#125; int query(int x,int l,int r,int pos)&#123; if(l==r)return dep[x]; pushdown(x,l,r); if(pos&lt;=mid)return query(x&lt;&lt;1,l,mid,pos); else return query(x&lt;&lt;1|1,mid+1,r,pos); &#125;&#125;T; 1.插入操作的实现：12345678910111213141516std::set&lt;int&gt; Spaly;inline int Insert(int x)&#123; std::set&lt;int&gt;::iterator it=Spaly.insert(x).first; if(!root)&#123;//还没有树根 T.change(1,1,tmp,x,1);//修改x的深度 root=x;return 1;//深度为1 &#125; if(it!=Spaly.begin())&#123;//不是最小值，所以可能成为其他结点的右儿子 if(!ch[*--it][1])ch[fa[x]=*it][1]=x;//成为右儿子 *it++;//维持it不变 &#125; if(!fa[x])ch[fa[x]=*++it][0]=x;//成为右儿子失败，于是成为左儿子 int dep_x=T.query(1,1,tmp,fa[x])+1;//x的深度就是它父节点的深度加1 T.change(1,1,tmp,x,dep_x);//在线段树中修改x的深度 return dep_x;//题目要求&#125; 2.单旋最小/最大值的实现：1234567891011121314151617181920inline int Rotate_min()&#123; int x=*Spaly.begin(),ans=T.query(1,1,tmp,x);//获取当前的最小值和需要返回的答案 if(x==root)return 1;//是根就直接返回 if(x+1&lt;fa[x])T.add(1,1,tmp,x+1,fa[x]-1,-1);//x有子树，先给x的子树的深度整体减1 T.add(1,1,tmp,1,tmp,1);//整棵树深度加1，这个时候x的子树深度不变了 ch[fa[x]][0]=ch[x][1],fa[ch[x][1]]=fa[x];//将x的子树接到x的父亲上 ch[x][1]=root,fa[root]=x,root=x;//更新root T.change(1,1,tmp,x,1);//修改x的深度，变为1 return ans;//题目要求&#125;inline int Rotate_max()&#123;//与上面的Rotate_min操作同理 int x=*Spaly.rbegin(),ans=T.query(1,1,tmp,x); if(x==root)return 1; if(x-1&gt;fa[x])T.add(1,1,tmp,fa[x]+1,x-1,-1); T.add(1,1,tmp,1,tmp,1); ch[fa[x]][1]=ch[x][0],fa[ch[x][0]]=fa[x]; ch[x][0]=root,fa[root]=x,root=x; T.change(1,1,tmp,x,1); return ans;&#125; 3.删除最小/最大值的实现：12345678910inline void Delete_min()&#123; printf("%d\n",Rotate_min());//先旋上来，按照题目要求输出 T.add(1,1,tmp,1,tmp,-1);//整棵树的深度发生变化 Spaly.erase(root),root=ch[root][1],fa[root]=0;//更新root&#125;inline void Delete_max()&#123;//与上面的Delete_min操作同理 printf("%d\n",Rotate_max()); T.add(1,1,tmp,1,tmp,-1); Spaly.erase(root),root=ch[root][0],fa[root]=0;&#125; Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;set&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;const int N=1e5+2;const int inf=1e9+9;int m,tmp,v[N],a[N],op[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct Segment_Tree&#123; #define mid ((l+r)&gt;&gt;1) int dep[N&lt;&lt;2]; inline void pushdown(int x,int l,int r)&#123; if(dep[x])&#123; dep[x&lt;&lt;1]+=dep[x],dep[x&lt;&lt;1|1]+=dep[x],dep[x]=0; &#125;return; &#125; void add(int x,int l,int r,int L,int R,int res)&#123; if(L&lt;=l&amp;&amp;r&lt;=R)&#123;dep[x]+=res;return;&#125; pushdown(x,l,r); if(L&lt;=mid)add(x&lt;&lt;1,l,mid,L,R,res); if(R&gt;mid)add(x&lt;&lt;1|1,mid+1,r,L,R,res); &#125; void change(int x,int l,int r,int pos,int res)&#123; if(l==r)&#123;dep[x]=res;return;&#125; pushdown(x,l,r); if(pos&lt;=mid)change(x&lt;&lt;1,l,mid,pos,res); else change(x&lt;&lt;1|1,mid+1,r,pos,res); &#125; int query(int x,int l,int r,int pos)&#123; if(l==r)return dep[x]; pushdown(x,l,r); if(pos&lt;=mid)return query(x&lt;&lt;1,l,mid,pos); else return query(x&lt;&lt;1|1,mid+1,r,pos); &#125;&#125;T;struct Spaly_Tree&#123; std::set&lt;int&gt; Spaly; int root,fa[N],ch[N][2]; inline int Insert(int x)&#123; std::set&lt;int&gt;::iterator it=Spaly.insert(x).first; if(!root)&#123; T.change(1,1,tmp,x,1); root=x;return 1; &#125; if(it!=Spaly.begin())&#123; if(!ch[*--it][1])ch[fa[x]=*it][1]=x; *it++; &#125; if(!fa[x])ch[fa[x]=*++it][0]=x; int dep_x=T.query(1,1,tmp,fa[x])+1; T.change(1,1,tmp,x,dep_x); return dep_x; &#125; inline int Rotate_min()&#123; int x=*Spaly.begin(),ans=T.query(1,1,tmp,x); if(x==root)return 1; if(x+1&lt;fa[x])T.add(1,1,tmp,x+1,fa[x]-1,-1); T.add(1,1,tmp,1,tmp,1); ch[fa[x]][0]=ch[x][1],fa[ch[x][1]]=fa[x]; ch[x][1]=root,fa[root]=x,root=x; T.change(1,1,tmp,x,1); return ans; &#125; inline int Rotate_max()&#123; int x=*Spaly.rbegin(),ans=T.query(1,1,tmp,x); if(x==root)return 1; if(x-1&gt;fa[x])T.add(1,1,tmp,fa[x]+1,x-1,-1); T.add(1,1,tmp,1,tmp,1); ch[fa[x]][1]=ch[x][0],fa[ch[x][0]]=fa[x]; ch[x][0]=root,fa[root]=x,root=x; T.change(1,1,tmp,x,1); return ans; &#125; inline void Delete_min()&#123; printf("%d\n",Rotate_min()); T.add(1,1,tmp,1,tmp,-1); Spaly.erase(root),root=ch[root][1],fa[root]=0; &#125; inline void Delete_max()&#123; printf("%d\n",Rotate_max()); T.add(1,1,tmp,1,tmp,-1); Spaly.erase(root),root=ch[root][0],fa[root]=0; &#125;&#125;S;int main()&#123; IN(m); for(int i=1,x;i&lt;=m;++i)&#123; IN(op[i]); if(op[i]==1)IN(x),v[++tmp]=a[i]=x; &#125; std::sort(v+1,v+1+tmp); for(int i=1;i&lt;=m;++i) if(op[i]==1)a[i]=std::lower_bound(v+1,v+1+tmp,a[i])-v; for(int i=1;i&lt;=m;++i)&#123; if(op[i]==1)printf("%d\n",S.Insert(a[i])); if(op[i]==2)printf("%d\n",S.Rotate_min()); if(op[i]==3)printf("%d\n",S.Rotate_max()); if(op[i]==4)S.Delete_min(); if(op[i]==5)S.Delete_max(); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI2016]序列 莫队+ST表 luoguP3246]]></title>
    <url>%2F2019%2F03%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3246%2F</url>
    <content type="text"><![CDATA[一道莫队………. 最主要的就是怎么从当前区间推到相邻区间。 假设当前区间为 $[l,r]$ ，目标区间为 $[l,r+1]$ 。那么很显然这样子就会增加： [l,r+1],[l+1,r+1],[l+2,r+1]\cdots \cdots这些区间，现在我们要做的就是尽快的算出这些区间的答案。 假设 $p$ 为区间 $[l,r+1]$ 的最小值的位置，那么在上面的区间中，$[l,r+1] \cdots [p,r+1]$ 这些区间显然都包含了 $p$ ，也就是说这些区间的最小值都为 $p$ ，那么这一段区间的贡献显然为 $a[p]\cdot (p-l+1)$ ，其中 $a[p]$ 为 $p$ 位置上的权值。 很显然我们可以预处理一个 $ST$ 表，通过 $ST$ 表上面的 $p$ 就可以 $O(1)$ 求出。 然后接下来考虑剩下的 $[p+1,r+1]\cdots [r+1,r+1]$ 这些区间。 我们设 $f[i][j]$ 表示右端点为 $j$ ，左端点的位置在 $[i,j]$ 范围内的所有区间所造成的贡献。 我们可以用单调栈预处理出位置 $i$ 的 $lmin$ 和 $rmin$ ，$lmin[i]$ 表示 $i$ 往左走遇到的第一个比 $i$ 小的数的位置，$rmin$ 同理。 那么我们很轻易的可以得到： f[i][j]=f[i][lmin_j-1]+a[lmin_j]\cdot (j-lmin_j)发现 $i$ 是没有影响的，于是我们将 $i$ 丢掉。 f[j]=f[lmin_j-1]+a[lmin_j]\cdot (j-lmin_j)这个式子 $DP$ 与处理一下就好了。 那么最后我们从 $[l,r]$ 移向 $[l,r+1]$ 产生的贡献为： a[p]\cdot (p-l+1) + f[r+1]-f[p]至于为什么要减去 $f[p]$ ，差不多是容斥的道理。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))typedef long long ll;const int N=1e5+2;const int inf=1e9+9;int n,m,block,a[N];struct MO&#123;int l,r,id;&#125;q[N];int top,stack[N],lmin[N],rmin[N];ll res,Ans[N],fl[N],fr[N];bool cmp(MO a,MO b)&#123; return a.l/block==b.l/block?a.l/block&amp;1?a.r&lt;b.r:a.r&gt;b.r:a.l/block&lt;b.l/block;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; namespace ST&#123; const int LogN=23; int logs[N],f[N][LogN+2]; inline void Make()&#123; logs[0]=-1; for(int i=1;i&lt;=n;++i) f[i][0]=i,logs[i]=logs[i&gt;&gt;1]+1; for(int j=1;j&lt;=logs[n];++j) for(int i=1;i+(1&lt;&lt;j)-1&lt;=n;++i) f[i][j]=a[f[i][j-1]]&lt;a[f[i+(1&lt;&lt;(j-1))][j-1]]?f[i][j-1]:f[i+(1&lt;&lt;(j-1))][j-1]; &#125; inline ll query(int x,int y)&#123; int ans=logs[y-x+1]; return a[f[x][ans]]&lt;a[f[y-(1&lt;&lt;ans)+1][ans]]?f[x][ans]:f[y-(1&lt;&lt;ans)+1][ans]; &#125;&#125;inline void __Pre_lmin_rmin()&#123; for(int i=1;i&lt;=n;++i)&#123; while(top&amp;&amp;a[stack[top]]&gt;a[i]) rmin[stack[top--]]=i; lmin[i]=stack[top],stack[++top]=i; &#125;while(top)lmin[stack[top]]=stack[top-1],rmin[stack[top--]]=n+1;&#125;inline ll left(int l,int r)&#123; int p=ST::query(l-1,r); return (ll)a[p]*(r-p+1)+fl[l-1]-fl[p];&#125;inline ll right(int l,int r)&#123; int p=ST::query(l,r+1); return (ll)a[p]*(p-l+1)+fr[r+1]-fr[p];&#125; int main()&#123; IN(n),IN(m);block=sqrt(n); a[0]=a[n+1]=inf; for(int i=1;i&lt;=n;++i)IN(a[i]); __Pre_lmin_rmin(); ST::Make(); for(int i=1;i&lt;=n;++i)fr[i]=(ll)a[i]*(i-lmin[i])+fr[lmin[i]]; for(int i=n;i&gt;=1;--i)fl[i]=(ll)a[i]*(rmin[i]-i)+fl[rmin[i]]; for(int i=1;i&lt;=m;++i) IN(q[i].l),IN(q[i].r),q[i].id=i; std::sort(q+1,q+1+m,cmp); int L=q[1].l,R=L-1;res=0; for(int i=1;i&lt;=m;++i)&#123; int x=q[i].l,y=q[i].r; while(L&gt;x)res+=left(L,R),L--; while(R&lt;y)res+=right(L,R),R++; while(L&lt;x)res-=left(L+1,R),++L; while(R&gt;y)res-=right(L,R-1),--R; Ans[q[i].id]=res; &#125; for(int i=1;i&lt;=m;++i) printf("%lld\n",Ans[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫队</tag>
        <tag>ST表</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [CQOI2015]网络吞吐量 网络流 luoguP3171]]></title>
    <url>%2F2019%2F03%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3171%2F</url>
    <content type="text"><![CDATA[题目要求你做什么就做什么呗。 我们先跑最短路，然后按照最短路的边连网络流的边就好了。 这里我选择跑堆优 $Dij$ ，然后我们枚举每一条边，判断着一条边是否为最短路的边，判断的方式很显然，就是看这条边的起点的 $dis$ 加上边权是否等于终点的 $dis$ 就好。 网络流要拆点，除了拆了的点之间连一条该点的权值的边之外，其余的边全部都是 $inf$ ，当然第一个点和第 $n$ 个点拆点后连边也是 $inf$ 而非点权。连完边之后跑最大流即可。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long long#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e5+2;const ll inf=1e18+9;int n,m,s,t;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace Dinic&#123; std::queue&lt;int&gt; q; struct Edge&#123;int nxt,to;ll val;&#125;G[N&lt;&lt;1]; int cnt(1),dep[N],head[N]; inline void add(int u,int v,ll w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125; inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t]; &#125; inline ll dfs(int x,ll flow)&#123; if(x==t||!flow)return flow; ll used=0,rlow; for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used; &#125; inline ll dinic()&#123; ll maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow; &#125;&#125;namespace Dijstra&#123; #define P std::pair&lt;int,int&gt; std::priority_queue&lt;P,std::vector&lt;P&gt;,std::greater&lt;P&gt; &gt; q; int vis[N],head[N],cnt; ll dis[N]; struct Edge&#123;int nxt,to;ll w;&#125;G[N&lt;&lt;1]; inline void add(int u,int v,ll w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].w=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].w=w,head[v]=cnt; &#125; inline void dijstra(int s)&#123; for(int i=1;i&lt;=n;++i)dis[i]=inf; memset(vis,false,sizeof(vis)); dis[s]=0; q.push(std::make_pair(dis[s],s)); while(!q.empty())&#123; int x=q.top().second; q.pop();if(vis[x])continue;vis[x]=true; for(int i=head[x];i;i=G[i].nxt) if(dis[G[i].to]&gt;dis[x]+G[i].w)&#123; dis[G[i].to]=dis[x]+G[i].w; if(!vis[G[i].to])q.push(std::make_pair(dis[G[i].to],G[i].to)); &#125; &#125; for(int x=1;x&lt;=n;++x) for(int i=head[x];i;i=G[i].nxt) if(dis[x]+G[i].w==dis[G[i].to]) Dinic::add(x+n,G[i].to,inf); return; &#125;&#125;int main()&#123; IN(n),IN(m),s=1,t=n&lt;&lt;1; for(int i=1;i&lt;=m;++i)&#123; int u,v,w;IN(u),IN(v),IN(w); Dijstra::add(u,v,w); &#125; Dijstra::dijstra(1); for(int i=1,x;i&lt;=n;++i) IN(x),Dinic::add(i,i+n,(i!=1&amp;&amp;i!=n)?x:inf); printf("%lld\n",Dinic::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 货车运输 最大生成树+倍增Lca luoguP1967]]></title>
    <url>%2F2019%2F03%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1967%2F</url>
    <content type="text"><![CDATA[题目大意就是，有多组询问，每组询问包含两个整数 $x,y​$ ，求出 $x​$ 到 $y​$ 的一条路径，满足这条路径在所有的 $x​$ 到 $y​$ 的路径中，边权最小的边权值最大。 这个很显然我们可以先求出图的最大生成树，那么 $x$ 到 $y$ 的目标路径肯定在最大生成树上，也只能在最大生成树上。 那么我们需要在最大生成树上找到这条路径，最大生成树是一棵树，很显然的我们可以想到在这棵树上做 $Lca$ ，那么这样就超级简单了。 我们在求 $lca$ 的时候顺带维护一下 $sum$ 数组，$sum[x][i]$ 表示在最大生成树 $x$ 到 $fa[x][i]$ 这条路径上的所有边的边权最小值。转移的方法也很简单：$sum[x][i]=min(sum[x][i-1],sum[fa[x][i-1]][i-1])$ 。 对于不能到达的情况特判一下就好了。 于是这题就做完了。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt; #define ll long long#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define swap(x,y) ((x)^=(y)^=(x)^=(y))const int N=1e5+2;const int log=30;const int inf=1e9+9;int n,m,q,cnt,f[N];int dep[N],fa[N][log+2],sum[N][log+2];struct Edge&#123;int from,to,val;&#125;G[N&lt;&lt;1];std::vector&lt;int&gt; E[N],V[N];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;bool cmp(Edge a,Edge b)&#123;return a.val&gt;b.val;&#125;int find(int x)&#123;return f[x]==x?x:f[x]=find(f[x]);&#125;void dfs(int u,int f,int dis)&#123; dep[u]=dep[f]+1, fa[u][0]=f,sum[u][0]=dis; for(int i=1;i&lt;log;++i) fa[u][i]=fa[fa[u][i-1]][i-1], sum[u][i]=min(sum[u][i-1],sum[fa[u][i-1]][i-1]); int size=E[u].size(); for(int i=0;i&lt;size;++i)&#123; int v=E[u][i]; if(v!=f)dfs(v,u,V[u][i]); &#125;return;&#125;inline int solve(int x,int y)&#123; int ans=inf; if(dep[x]&lt;dep[y])swap(x,y); for(int i=log-1;i&gt;=0;--i) if(dep[fa[x][i]]&gt;=dep[y]) ans=min(ans,sum[x][i]),x=fa[x][i]; if(x==y)return ans; for(int i=log-1;i&gt;=0;--i) if(fa[x][i]!=fa[y][i])&#123; ans=min(ans,min(sum[x][i],sum[y][i])); x=fa[x][i],y=fa[y][i]; &#125; ans=min(ans,min(sum[x][0],sum[y][0])); if(fa[x][0]==0)return -1; else return ans;&#125;int main()&#123; IN(n),IN(m); for(int i=1;i&lt;=n;++i)f[i]=i; for(int i=1;i&lt;=m;++i) IN(G[i].from),IN(G[i].to),IN(G[i].val); std::sort(G+1,G+1+m,cmp); for(int i=1;i&lt;=m;++i)&#123; int fx=find(G[i].from),fy=find(G[i].to); if(fx!=fy)&#123; f[fy]=fx;++cnt; E[G[i].from].push_back(G[i].to),V[G[i].from].push_back(G[i].val); E[G[i].to].push_back(G[i].from),V[G[i].to].push_back(G[i].val); if(cnt==n-1)break; &#125; &#125; for(int i=1;i&lt;=n;++i) if(!dep[i])dfs(i,0,0); IN(q); for(int i=1;i&lt;=q;++i)&#123; int x,y;IN(x),IN(y); printf("%d\n",solve(x,y)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>lca</tag>
        <tag>倍增</tag>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [ZJOI2009]狼和羊的故事 网络流 luoguP2598]]></title>
    <url>%2F2019%2F03%2F11%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2598%2F</url>
    <content type="text"><![CDATA[这题真的是裸的网络流……连我这种制杖都可以立刻想到正解。 如果不考虑领地问题的话，这显然是一道很裸的最小割———割断最少的边使 $S$ 和 $T​$ 不连通。 但是现在有了领地的问题……就是说限制了有些格子是一起的，不能被割开。 既然不能被割开，就连一条 $inf$ 的边啊，这样就割不开了啊。 于是我们可以让 $S$ 向所有的狼的领地连一条边权为 $inf$ 的边，然后所有的羊的领地向 $T$ 连一条边权为 $inf$ 的边。然后就是网格边连边了…… Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define id(x,y) (((x)-1)*m+(y))const int N=1e5+2;const int inf=1e9+9;const int dx[4]=&#123;0,0,-1,1&#125;;const int dy[4]=&#123;-1,1,0,0&#125;;int n,m,s,t;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;namespace Dinic&#123; std::queue&lt;int&gt; q; struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;1]; int cnt(1),dep[N],head[N]; inline void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125; inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t]; &#125; inline int dfs(int x,int flow)&#123; if(x==t||!flow)return flow; int used=0,rlow; for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used; &#125; inline int dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow; &#125;&#125;int main()&#123; IN(n),IN(m);s=n*m+1,t=n*m+2; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j)&#123; int a;IN(a); if(a==1)Dinic::add(s,id(i,j),inf); if(a==2)Dinic::add(id(i,j),t,inf); &#125; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) for(int k=0;k&lt;4;++k)&#123; int tx=i+dx[k],ty=j+dy[k]; if(tx&lt;1||tx&gt;n||ty&lt;1||ty&gt;m)continue; Dinic::add(id(i,j),id(tx,ty),1); &#125; printf("%d\n",Dinic::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 Willem, Chtholly and Seniorious 珂朵莉树 luoguCF896C]]></title>
    <url>%2F2019%2F03%2F11%2F%5B%E9%A2%98%E8%A7%A3%5DluoguCF896C%2F</url>
    <content type="text"><![CDATA[神奇的珂朵莉树，优雅的暴力。 珂朵莉树的主要思想就是对于一段连续的值相同的区间，将其缩为一个结点，然后丢到 $set$ 里面，主要的操作有拆分区间操作…….这货很强大，码量不短但极好写，而且一般不会出什么问题，调试也很方便。 但是珂朵莉树的思想很暴力，比如说区间第 $K$ 大，珂朵莉树的做法就是直接将区间拿出来排一波序！当然，这样暴力的东西只能在随机数据的情况下食用，或者数据水的情况下，不然分分钟给你 $T$ 飞！ 好吧来看看这道题的操作该怎么办： 第一个操作的话属于傻逼操作，珂朵莉树，先 $split$ 提取 $l,r$ 区间，然后直接暴力访问，加上 $x$ 即可。 第二个操作完全就是珂朵莉树的基本操作，跟上面一样，暴力访问然后直接将权值改为 $x$ 即可，更简单的方法就是删除 $l,r$ 区间，然后把权值统一为 $x$ 后再插入 $l,r$ 。 第三个操作第 $K$ 大，上面说了，直接拿出来排个序就好了，炒鸡暴力。 第四个操作……仍然是暴力，可以参考第一二个操作，注意 $longlong$ 的问题，不要爆 $long long$ 了。 对于初始的序列，我们先用题目要求的随机化函数得到序列中每一个位置的值，然后插入到 $set$ 中，这个时候第 $i$ 个元素区间是 $i,i$ 。 还有一个需要注意的地方，就是在插入完整个序列后还要在最后面插入一个边界的哨兵结点，当然哨兵结点的权值为 $0$ 。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;set&gt;#include&lt;vector&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))typedef long long ll;const int N=1e5+7;const int inf=1e9+9;ll seed,vmax;inline ll rnd()&#123; ll ret=seed; seed=(seed*7+13)%1000000007; return ret;&#125;struct ODT&#123; struct Node&#123; int l,r; mutable ll v; Node(int L,int R=-1,ll V=0):l(L),r(R),v(V) &#123;&#125; bool operator &lt; (const Node&amp;x) const &#123;return l&lt;x.l;&#125; &#125;; std::set&lt;Node&gt; s; #define IT std::set&lt;Node&gt;::iterator inline IT split(int pos)&#123; IT it=s.lower_bound(Node(pos)); if(it!=s.end()&amp;&amp;it-&gt;l==pos)return it; else --it; int L=it-&gt;l,R=it-&gt;r;ll V=it-&gt;v; s.erase(it); return s.insert(Node(L,pos-1,V)),s.insert(Node(pos,R,V)).first; &#125; inline void assign(int l,int r,ll val)&#123; IT itr=split(r+1),itl=split(l); s.erase(itl,itr); s.insert(Node(l,r,val)); &#125; inline void add(int l,int r,ll val)&#123; IT itr=split(r+1),itl=split(l); for(;itl!=itr;++itl)itl-&gt;v+=val; &#125; inline ll rank(int l,int r,int k)&#123; std::vector&lt;std::pair&lt;ll,int&gt; &gt; hep; IT itr=split(r+1),itl=split(l); for(;itl!=itr;++itl) hep.push_back(std::make_pair(itl-&gt;v,itl-&gt;r-itl-&gt;l+1)); std::sort(hep.begin(),hep.end()); for(std::vector&lt;std::pair&lt;ll,int&gt; &gt;::iterator it=hep.begin();it!=hep.end();++it)&#123; k-=it-&gt;second; if(k&lt;=0)return it-&gt;first; &#125; &#125; inline ll pow(ll x,ll y,ll mod)&#123; ll res=1ll;x%=mod; for(;y;y&gt;&gt;=1,x=x*x%mod)if(y&amp;1)res=res*x%mod; return res%mod; &#125; inline ll sum(int l,int r,int ex,int mod)&#123; IT itr=split(r+1),itl=split(l); ll res=0; for(;itl!=itr;++itl) res=(res+(ll)(itl-&gt;r-itl-&gt;l+1)*pow(itl-&gt;v,ll(ex),ll(mod)))%mod; return res; &#125; inline void pre(int n)&#123; int a; for(int i=1;i&lt;=n;++i) a=(rnd()%vmax)+1,s.insert(Node(i,i,a)); s.insert(Node(n+1,n+1,0)); return; &#125;&#125;T;int main()&#123; int n,m; scanf("%d%d%lld%lld",&amp;n,&amp;m,&amp;seed,&amp;vmax); T.pre(n); for(int i=1;i&lt;=m;++i)&#123; int op=(rnd()%4)+1,l=(rnd()%n)+1,r=(rnd()%n)+1,x,y; if(l&gt;r)std::swap(l,r); if(op==3)x=(rnd()%(r-l+1))+1; else x=(rnd()%vmax)+1; if(op==4)y=(rnd()%vmax)+1; if(op==1)T.add(l,r,ll(x)); else if(op==2)T.assign(l,r,ll(x)); else if(op==3)printf("%lld\n",T.rank(l,r,x)); else if(op==4)printf("%lld\n",T.sum(l,r,x,y)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>珂朵莉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [国家集训队]聪聪可可 树形DP luoguP2634]]></title>
    <url>%2F2019%2F03%2F10%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2634%2F</url>
    <content type="text"><![CDATA[别人都说，什么淀粉质啊之类的轻松水过，然而我有码量恐惧症，不适合如此数据结构(主要也是太弱了QvQ) 那就上树形DP吧！$f[i][j]$表示点i为根的子树中到i路径权值和%3=j的点数.状态转移：Dfs，直接从子树转移即可，具体看代码。 真是炒鸡简单的啦~~ CODE:1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int#define A printf("A")using namespace std;const int N=2e4+2;inline ll gcd(int x,int y)&#123;return y?gcd(y,x%y):x;&#125;struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;2];int n,cnt,head[N];ll f[N][3],ans;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline void add(int x,int y,int v)&#123; G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt; G[++cnt].nxt=head[y],G[cnt].to=x,G[cnt].val=v,head[y]=cnt;&#125;inline void Dfs(int x,int fa)&#123; f[x][0]=1; for(register int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to;if(y==fa)continue;Dfs(y,x); for(int j=0;j&lt;3;++j)ans+=(ll)(f[y][j]*f[x][(((3-j-G[i].val)%3)+3)%3]*2); //从子树转移过来，注意取模，看不懂的同学画图秒懂 for(int j=0;j&lt;3;++j)f[x][(G[i].val+j)%3]+=f[y][j]; //跟新 f[x] &#125;return;&#125;int main()&#123; IN(n);ll s=(ll)n*n,g; for(register int x,y,v,i=1;i&lt;n;++i) IN(x),IN(y),IN(v),add(x,y,v); Dfs(1,0);ans+=n,g=gcd(ans,s);//一定要是最简分数 printf("%lld/%lld\n",ans/g,s/g);//输出答案 return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 「网络流24题」餐巾计划问题 网络流 luoguP1251]]></title>
    <url>%2F2019%2F03%2F09%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1251%2F</url>
    <content type="text"><![CDATA[实际上这道题可以用贪心解的……但是码量惊人 $QwQ$ 。 于是上网络流吧……这题显然是费用流。 对于每一天，我们将其拆成两个点，一个表示这天的早晨，一个表示这天的晚上。 我们从源点向每一天的晚上连一条边权为 $x$ 费用为 $0​$ 的边，表示这一天我们需要处理的餐巾数，就是白天用掉的餐巾。 每一天的早晨，这些餐巾来自题目给出的地方，并且最终连向汇点，边权为 $x$ 费用为 $0$ 。 然后考虑每天早上餐巾的来源，现在题目给了四个操作： 买新的 丢到快洗店 丢到慢洗店 弃疗 对于买新的，我们只需要从源点连一条边权为 $inf$ 费用为 $p$ 的边到这一天的白天，我们餐巾的获取都来自源点。 丢到快洗店，也就是说第 $i$ 天晚上这些没有处理的毛巾丢到快洗店，那么第 $i+m$ 天将洗完，这个时候可以在早晨收到餐巾，于是从 $i$ 的晚上连一条边权为 $inf$ 费用为 $f$ 的边连向 $i+m$ 的白天。 丢到慢洗店，这个跟快洗店是一个道理。 关于弃疗，就是说放着不管了，可以理解为第 $i$ 天晚上的餐巾留到了第 $i+1$ 天，并且这些餐巾是不能用的，那么不会连向 $i+1$ 的早晨，于是从 $i$ 的晚上连一条边权为 $inf$ 费用为 $f$ 的边连向 $i+1$ 的晚上。 然后跑一边费用流板子就好了，注意要开 $long long$ 。 至于上面四个选项为什么边的容量都设为 $inf$ ，我们就拿买新的来说吧，题目又没有限制你最多买多少，所以就是允许你可以一直买，买无限条，就当成 $inf$ 啦。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define id(type,x) ((type)*n+x)#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y)) const int N=1e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int s,t,r[N],tot(1),head[N],vis[N],dist[N];struct Edge&#123;int nxt,to,val,cot;&#125;G[N&lt;&lt;8];struct Pre&#123;int last,edge;&#125;pre[N];inline void add(int u,int v,int val,int cot)&#123; G[++tot].nxt=head[u],G[tot].to=v,G[tot].val=val,G[tot].cot=cot,head[u]=tot; G[++tot].nxt=head[v],G[tot].to=u,G[tot].val=0,G[tot].cot=-cot,head[v]=tot;&#125; inline bool Spfa()&#123; memset(pre,0,sizeof(pre)); memset(dist,0x3f,sizeof(dist)); memset(vis,0,sizeof(vis)); std::queue&lt;int&gt; q; q.push(s),vis[s]=1,dist[s]=0; while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(G[i].val&gt;0&amp;&amp;dist[v]&gt;dist[u]+G[i].cot)&#123; dist[v]=dist[u]+G[i].cot; pre[v].last=u,pre[v].edge=i; if(!vis[v])&#123;q.push(v),vis[v]=1;&#125; &#125; &#125;vis[u]=0; &#125;return dist[t]!=0x3f3f3f3f;&#125;inline ll EK()&#123; ll maxflow=0; ll cost=0; int min_flow; while(Spfa())&#123; min_flow=inf; for(int i=t;i!=s;i=pre[i].last) min_flow=min(min_flow,G[pre[i].edge].val); for(int i=t;i!=s;i=pre[i].last)&#123; G[pre[i].edge].val-=min_flow; G[pre[i].edge^1].val+=min_flow; &#125; maxflow+=min_flow; cost+=min_flow*dist[t]; &#125;return cost; &#125;int main()&#123; int n,_n,_p,_m,_f,_s; IN(n);s=0,t=n*2+1; for(int i=1;i&lt;=n;++i)&#123; int x;IN(x); add(s,id(1,i),x,0),add(id(0,i),t,x,0); &#125; IN(_p),IN(_m),IN(_f),IN(_n),IN(_s); for(int i=1;i&lt;=n;++i)&#123; if(i+1&lt;=n)add(id(1,i),id(1,i+1),inf,0); if(i+_m&lt;=n)add(id(1,i),id(0,i+_m),inf,_f); if(i+_n&lt;=n)add(id(1,i),id(0,i+_n),inf,_s); add(s,id(0,i),inf,_p); &#125; printf("%lld\n",EK()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法】 浅谈4种莫队及例题]]></title>
    <url>%2F2019%2F03%2F08%2F%5B%E7%AE%97%E6%B3%95%5D%E8%8E%AB%E9%98%9F%26%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%2F</url>
    <content type="text"><![CDATA[在此输入你的密码以便阅读全文 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>算法</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [WC2013]糖果公园 树上带修改莫队 luoguP4074/Uoj58]]></title>
    <url>%2F2019%2F03%2F08%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4074%2F</url>
    <content type="text"><![CDATA[毒瘤题目，树上带修改莫队板子题。 关于树上莫队和带修改莫队的文章戳这 $QwQ​$ :[算法]莫队&amp;树上莫队 然后就是将其结合在一起了，结合的话炒鸡简单，就是码量增大… 可以算作一个树上莫队/树上带修改莫队的板子来看。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cctype&gt;#include&lt;bitset&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define swap(x,y) ((x)^=(y)^=(x)^=(y))const int N=1e5+24;const int LogN=20;const int inf=1e9+9;inline int IN()&#123; int x=0;char ch;bool flag=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); return flag?-x:x;&#125;int n,m,q,v[N],w[N],c[N];/*test*/int id[N&lt;&lt;1],in[N],out[N],dep[N],f[N][LogN],sequencelong;/*dfs&amp;lca*/int head[N],cnt;/*Tree Edge*/struct Edge&#123;int nxt,to;&#125;G[N&lt;&lt;1];/*Tree Edge*/int c0,c1,block,tot[N],cl[N],cr[N],vis[N],modify[N];/*MO*/struct MO&#123;int l,r,lbe,rbe,time,id,lca,ans;&#125;Q[N];/*MO*/ll now,Ans[N];bool cmp(MO a,MO b)&#123; if(a.lbe^b.lbe)return a.lbe&lt;b.lbe; if(a.rbe^b.rbe)return a.rbe&lt;b.rbe; if(a.time^b.time)return a.time&lt;b.time;&#125;inline void add(int u,int v)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,head[v]=cnt;&#125;void Get_Lca_and_sequence(int u,int fa)&#123; dep[u]=dep[fa]+1,f[u][0]=fa; for(int i=1;i&lt;20;++i)f[u][i]=f[f[u][i-1]][i-1]; id[in[u]=++sequencelong]=u; for(int i=head[u];i;i=G[i].nxt) if(G[i].to!=fa)Get_Lca_and_sequence(G[i].to,u); id[out[u]=++sequencelong]=u; return;&#125;int Lca(int u,int v)&#123; if(dep[u]&lt;dep[v])swap(u,v); for(int i=19;~i;--i) if(dep[u]-(1&lt;&lt;i)&gt;=dep[v])u=f[u][i]; for(int i=19;~i;--i) if(f[u][i]!=f[v][i])u=f[u][i],v=f[v][i]; return u==v?u:f[u][0];&#125;inline void _Main_input()&#123; n=IN(),m=IN(),q=IN();/*line 1*/ for(int i=1;i&lt;=m;++i)v[i]=IN();/*line 2*/ for(int i=1;i&lt;=n;++i)w[i]=IN();/*line 3*/ for(int i=1;i&lt;n;++i)add(IN(),IN());/*line 4 to n+2*/ for(int i=1;i&lt;=n;++i)c[i]=IN();/*line n+3*/ Get_Lca_and_sequence(1,0); block=std::ceil(std::pow(sequencelong,0.66666)); for(int i=1;i&lt;=q;++i)&#123;/*line n+4 to n+4+q*/ int Type=IN(),x=IN(),y=IN(); if(Type==1)&#123; Q[++c1].id=c1,Q[c1].time=c0; if(x==y)&#123; Q[c1].lbe=(Q[c1].l=in[x])/block; Q[c1].rbe=(Q[c1].r=in[x])/block; &#125;else&#123; if(in[x]&lt;in[y]&amp;&amp;out[y]&lt;out[x])&#123; Q[c1].lbe=(Q[c1].l=in[x])/block; Q[c1].rbe=(Q[c1].r=in[y])/block; &#125; else if(in[y]&lt;in[x]&amp;&amp;out[x]&lt;out[y])&#123; Q[c1].lbe=(Q[c1].l=in[y])/block; Q[c1].rbe=(Q[c1].r=in[x])/block; &#125; else&#123; if(out[x]&lt;in[y])&#123; Q[c1].lbe=(Q[c1].l=out[x])/block; Q[c1].rbe=(Q[c1].r=in[y])/block; Q[c1].lca=Lca(x,y); &#125; else if(out[y]&lt;in[x])&#123; Q[c1].lbe=(Q[c1].l=out[y])/block; Q[c1].rbe=(Q[c1].r=in[x])/block; Q[c1].lca=Lca(x,y); &#125; &#125; &#125; &#125;else modify[++c0]=x,cl[c0]=c[x],cr[c0]=y,c[x]=y; &#125;return;&#125;inline void work(int x)&#123; if(vis[x])now-=1ll*v[c[x]]*w[tot[c[x]]--]; else now+=1ll*v[c[x]]*w[++tot[c[x]]]; vis[x]^=1;return;&#125;inline void add(int x)&#123; if(vis[modify[x]])&#123;work(modify[x]);c[modify[x]]=cr[x];work(modify[x]);&#125; else c[modify[x]]=cr[x];&#125;inline void del(int x)&#123; if(vis[modify[x]])&#123;work(modify[x]);c[modify[x]]=cl[x];work(modify[x]);&#125; else c[modify[x]]=cl[x];&#125;inline void _Main_Mo_Solve()&#123; std::sort(Q+1,Q+c1+1,cmp); int l=1,r=0,nowtime=c0; for(int i=1;i&lt;=c1;++i)&#123; while(nowtime&gt;Q[i].time)del(nowtime--); while(nowtime&lt;Q[i].time)add(++nowtime); while(l&lt;Q[i].l)work(id[l++]); while(l&gt;Q[i].l)work(id[--l]); while(r&lt;Q[i].r)work(id[++r]); while(r&gt;Q[i].r)work(id[r--]); if(Q[i].lca)work(Q[i].lca); Ans[Q[i].id]=now; if(Q[i].lca)work(Q[i].lca); &#125;&#125;inline void _Main_output()&#123; for(int i=1;i&lt;=c1;++i) printf("%lld\n",Ans[i]);&#125;int main()&#123; _Main_input(); _Main_Mo_Solve(); _Main_output(); return 0;&#125; 当然，尽管再毒瘤，这个也只是入门的树上带修改莫队的题目。]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SCOI2007]蜥蜴 网络流 luogu2472]]></title>
    <url>%2F2019%2F03%2F06%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2472%2F</url>
    <content type="text"><![CDATA[网络流……..题目要求我们求出能逃离的蜥蜴数量的最大值，不就是最大流吗？ 然后考虑怎么建模。 首先来看看蜥蜴，我们将这些蜥蜴的点跟 $s$ 连边，边权是多少呢？想一想，由于一个位置只有一只蜥蜴，那么边权就当然是 $1$ 了。 然后考虑逃离的这些柱子，题目说什么石柱都不稳定，每次当蜥蜴跳跃时，所离开的石柱高度减 $1$ ，看似很不好办，但是这恰恰就是网络流。对于柱子间的一条边，从 $s$ 经过蜥蜴的点的时候，流量就只有 $1$ 了，这个 $1$ 的流量流过柱子中的边的时候就会让这条边的边权减 $1$ ，减到 $0$ 当然就不能流了。 那么柱子之间怎么连边呢？ 对于一个柱子，我们将它拆成两个点，一个入点，一个出点。其中入点向出点连一条边，边权为这个柱子的高度。如果一个柱子，判断一下，发现从它这里可以跳出去，那么就将这个柱子的出点向 $t$ 连一条边，这条边仅仅是代表找到了答案，对答案没有影响，边权为 $inf$ 。 然后我们再看一下，这个柱子能到达的柱子有哪些，这里直接算曼哈顿距离就好了。然后由这条柱子的出点向能到达的柱子的入点连一条边，边权呢？还是为 $inf$ 。因为我们对一个柱子的影响就是入点到出点的那一条边，那一条边的边权已经限制了这个柱子的使用量，所以中间的边权为 $inf$ 。 注意数组大小，要开大一点。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118/*---[SCOI2007]蜥蜴.网络流-最大流 毒瘤题目*/#include&lt;queue&gt;#include&lt;vector&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define ID(ty,x,y) ((ty)*r*c+id[(x)][(y)])const int N=55;const int S=1e5+2;const int inf=1e9+9;std::queue&lt;int&gt; q;std::vector&lt;std::pair&lt;int,int&gt; &gt; lizard;std::vector&lt;std::pair&lt;int,int&gt; &gt; Pillar;int r,c,d,s,t;int dep[S],head[S],cnt=1;int val[N][N],id[N][N],tot=0,total=0;char str;struct Edge&#123;int nxt,to,val;&#125;G[N*N*8];inline void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int bfs()&#123; std::memset(dep,0,sizeof(dep)); dep[s]=1;q.push(s); while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(!dep[v]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125; &#125;return dep[t];&#125;int dfs(int u,int flow)&#123; if(u==t||!flow)return flow; int used=0,rlow; for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(dep[v]==dep[u]+1&amp;&amp;G[i].val&gt;0)&#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[u]=-1; return used;&#125;int dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow;&#125;void _pre_in()&#123; IN(r),IN(c),IN(d); s=0,t=r*c*2+1; Pillar.clear();//柱子 lizard.clear();//蜥蜴 for(int i=1;i&lt;=r;++i) for(int j=1;j&lt;=c;++j)&#123; std::cin&gt;&gt;str; id[i][j]=++tot,val[i][j]=str-'0'; if(val[i][j]&gt;0)Pillar.push_back(std::make_pair(i,j)); &#125; for(int i=1;i&lt;=r;++i) for(int j=1;j&lt;=c;++j)&#123; std::cin&gt;&gt;str; if(str=='L')++total,lizard.push_back(std::make_pair(i,j)); &#125; return;&#125;void _pre_add_line()&#123;//连边 for(int i=0;i&lt;Pillar.size();++i)&#123; int x=Pillar[i].first,y=Pillar[i].second; add(ID(0,x,y),ID(1,x,y),val[x][y]); if(x&lt;=d||y&lt;=d||x+d&gt;r||y+d&gt;c)add(ID(1,x,y),t,inf);//可以逃出去 &#125; for(int i=0;i&lt;Pillar.size();++i) for(int j=0;j&lt;Pillar.size();++j)&#123; if(i==j)continue; int xi=Pillar[i].first,yi=Pillar[i].second; int xj=Pillar[j].first,yj=Pillar[j].second; if((xi-xj)*(xi-xj)+(yi-yj)*(yi-yj)&lt;=d*d) add(ID(1,xi,yi),ID(0,xj,yj),inf);//柱子之间可以互相到达 &#125; for(int i=0;i&lt;lizard.size();++i)&#123; int x=lizard[i].first,y=lizard[i].second; add(s,ID(0,x,y),1);//源点向蜥蜴连边 &#125;return;&#125;int main()&#123; _pre_in(); _pre_add_line(); printf("%d\n",total-dinic()); /*注意最终要算的是最少的未逃离的数，不是逃离的最大数*/ return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [HNOI2013]切糕 网络流 bzoj3144]]></title>
    <url>%2F2019%2F03%2F04%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj3144%2F</url>
    <content type="text"><![CDATA[话说切糕有很多细菌，并且高价，现在不让买了，也不让卖了…….. 好吧我们来解决一下这题吧。 额……感觉题意有点不可读，实际上题目就是说给你一个立方体，然后立方体中的每一个点都有一个权值，表示如果要切这个点的话所花费的代价，那么这时需要让你横着切，将这个立方体切成两半，求最小代价。 这就是很明显的最小割了，切成两半使得 $s$ 和 $t$不连通嘛。 于是我们可以考虑这样建边：对于这个立方体，我们建一个虚拟层—第 $0$ 层，对于第 $0$ 层的每一个点，我们用 $s$ 与其相连，这个连接的边是不能被割掉的，所以边权为 $inf$ 。然后对于第 $R$ 层的所有点，我们都将其与 $t$ 相连，同样的道理，边权为 $inf$ 。然后中间的点的话，考虑一个点 $(x,y,z)$ ，我们连一条 $(x−1,y,z)$ 到 $(x,y,z)$ 的边，权值为 $v(x,y,z)$ (即点 $(x,y,z)$ 的权值) 。 这个就是基本的了，如果没有第二个光滑性的限制，直接跑 $Dinic$ 就好了。 但是现在有了这个限制，怎么办呢？ 对于一个竖轴，假设这个竖轴的横竖坐标为 $(x,y)$ ，现在在这个竖轴上有一个高度为 $z$ 的点，这个点的坐标显然为 $(x,y,z)$ ，那么现在的情况就是，如果选了 $z$ ，那么相邻竖轴上的 $z−d,z+d$ 都必须选。 于是我们考虑，从 $(x,y,z)$ 向相邻数轴的 $z−d,z+d$ 连一条 $inf$ 的边，这样就可以保证正确性了。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int dx[5]=&#123;0,0,0,-1,1&#125;;const int dy[5]=&#123;0,-1,1,0,0&#125;;const int N=8e4+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int P,Q,R,D,s,t,pointval[42][42][42];inline int point(int x,int y,int z)&#123;return x*P*Q+y*Q+z;&#125;namespace Dinic&#123; std::queue&lt;int&gt; q; struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;2]; int cnt(1),dep[N],head[N]; inline void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125; inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t]; &#125; inline int dfs(int x,int flow)&#123; if(x==t||!flow)return flow; int used=0,rlow; for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used; &#125; inline int dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow; &#125;&#125;int main()&#123; IN(P),IN(Q),IN(R),IN(D);s=0,t=N-1; for(int i=1;i&lt;=R;++i) for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) IN(pointval[i][j][k]); for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) Dinic::add(s,point(0,j,k),inf); for(int i=1;i&lt;=R;++i) for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) Dinic::add(point(i-1,j,k),point(i,j,k),pointval[i][j][k]); for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) Dinic::add(point(R,j,k),t,inf); for(int i=D;i&lt;=R;++i) for(int j=1;j&lt;=P;++j) for(int k=1;k&lt;=Q;++k) for(int l=0;l&lt;5;++l)&#123; int tx=dx[l]+j,ty=dy[l]+k; if(tx&lt;1||tx&gt;P||ty&lt;1||ty&gt;Q)continue; Dinic::add(point(i,j,k),point(i-D,tx,ty),inf); &#125; printf("%d\n",Dinic::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [国家集训队]Crash的数字表格 莫比乌斯反演 luoguP1829]]></title>
    <url>%2F2019%2F03%2F01%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1829%2F</url>
    <content type="text"><![CDATA[吐槽一下Typora这个编辑器：码了一上午的题解，居然突然卡机，并且自动关掉了，然后重新打开，发现保存的也没了。然后弹出一个“Typora意外关闭”的窗口，真想一拳上去。 只好重新自己码了……。(以上是吐槽，请不要在意) 算了算了，重新写吧。所以你看到的这是第二份稿子。 仍然上莫比乌斯反演。 众所周知： lcm(i,j)=\frac{ij}{gcd(i,j)}​那么我们将这个带进原式： \sum_{i=1}^{n}\sum_{j=1}^{m}lcm(i,j) = \sum_{i=1}^{n}\sum_{j=1}^{m}\frac{ij}{gcd(i,j)}​我们枚举 $gcd(i,j)$ 的值： \sum_{d=1}^{n}\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)=d]\frac{ij}{d}=\sum_{d=1}^{n}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ijd=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij设： f(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=x]ijg(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[x|gcd(i,j)]ij可得： g(x)=\sum_{x|d}f(d)考虑怎么计算 $g(x)$ ： g(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[x|gcd(i,j)]ijg(x)=\sum_{i=1}^{\lfloor\frac{n}{dx}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{dx}\rfloor}ij \cdot x^2g(x)=x^2\sum_{i=1}^{\lfloor\frac{n}{dx}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{dx}\rfloor}ij这个显然是可以 $O(1)$ 算出的。 继续： ans=\sum_{d=1}^{n}d\cdot f(1)f(1)=\sum_{d=1}^{\lfloor\frac{n}{}\rfloor}\mu(d)g(d)这个时候的复杂度只是 $O(n^2)$ ，继续优化。 将 $ans$ 写出： ans=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij发现后面可以整除分块！ 继续，将 $f(1)$ 写出： f(1)=\sum_{i=1}^{n}\mu(i)g(i)f(1)=\sum_{i=1}^{n}\mu(i)i^2\sum_{a=1}^{\lfloor\frac{n}{di}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{di}\rfloor}ab将 $g$ 拆开后，我们可以发现后面又可以整除分块！ 那么现在就是 $O(n)$ 了，可以过。 Code-$O(n)$123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define MOD 20101009#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e7+2;const int inf=1e9+9;int mui[N],sum[N];int vis[N],prime[N],cnt;inline void _pre_mui(int n)&#123; mui[1]=1; for(int i=2;i&lt;=n;++i)&#123; if(!vis[i])prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;n)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;mui[i*prime[j]]=0;break;&#125; mui[id*prime[j]]=-mui[i]; &#125; &#125;return;&#125;inline int solve(int n,int m)&#123; ll ans=0; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); int res=1ll*(1ll*(n/l)*(n/l+1)/2%MOD)*(1ll*(m/l)*(m/l+1)/2%MOD)%MOD; ans+=1ll*(sum[r]-sum[l-1])%MOD*res%MOD; ans%=MOD; &#125;return (ans+MOD)%MOD;&#125;int main()&#123; int n,m,ans=0; scanf("%d%d",&amp;n,&amp;m); if(n&gt;m)n^=m^=n^=m; _pre_mui(n); for(int i=1;i&lt;=n;++i) sum[i]=(sum[i-1]+1ll*i*i%MOD*mui[i]%MOD+MOD)%MOD; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); int res=1ll*(l+r)*(r-l+1)/2%MOD; ans=(ans+1ll*solve(n/l,m/l)*res%MOD)%MOD; &#125; printf("%d\n",ans); return 0;&#125; 毒瘤出题人不会放过我们，这个毒瘤更改了数据： $n,m \leq 10^{10}$ 。 “哇咔咔咔卡掉你们的 O(n) !” 真想一拳上去这个智障。 $O(\sqrt{n})$ 是过的了的，故考虑向着这个方向前进。 继续推式子： ans=\sum_{d=1}^{n}d\sum_{i=1}^{n}\mu(i)i^2\sum_{a=1}^{\lfloor\frac{n}{di}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{di}\rfloor}ab看见这个 $di$ 了吗？我们令 $T=di$ ，然后将 $T$ 扔到前面去枚举一下。 然后就是后面的两个 $\sum$ ，这玩意跟 $i,d$ 没关系，一起扔到前面去。 于是就变成了： ans=\sum_{T=1}^{n}\sum_{a=1}^{\lfloor\frac{n}{T}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{T}\rfloor}ab\sum_{i|T}i^2\frac{T}{i}\mu(i)？？？？？？？ 首先前面的这段是没有问题的对吧，那么后面的呢？ 后面的原来是不是： \sum_{d=1}^{n}d\sum_{i=1}^{n}\mu(i)i^2那么……现在我们枚举的 $T$ 是 $i \cdot d$ ，我们枚举了一下可能的 $i$ ，成为 $i$ 的必备条件肯定是能被 $T$ 整除对吧？那么这个时候的 $d$ 呢？很显然是 $\frac{T}{i}$ 对吧？ 所以啊……就是这么写了。 但是这样写有什么用啊 $QwQ$ 首先，我们来看，$i^2$ 是个什么鬼？我们设一个函数 $Q(i)=i^2$ ，于是我们可以发现，这个东西是个完全积性函数，然后看 $\frac{T}{i}$ ，显然是 $id(\frac{T}{i})$ ，也是完全积性函数。于是两个完全积性函数用狄利克雷卷积卷起来，它们的狄利克雷卷积是一定可以筛出来的。后面的 $\mu$ 是积性函数，然后呢？后面的那一坨都可以筛出来！ 于是美滋滋。 我们设 $sum[k]$ 表示当 $T$ 为 $k$ 的时候后面那一坨的值。 那么现在分三种情况： $k$ 是质数，这下子后面的 $i$ 只能是 $1$ 和 $k$ ，$1$ 的时候的值就是 $k$ ，$k$ 的时候的值是 $k^2\cdot \frac{k}{k}\cdot \mu(k)$ ，很显然这个时候的 $\mu(k)$ 的值是 $-1$ ，于是这个时候的值是 $-k^2$ ，那么这个时候 $sum[k]$ 的值是 $k-k^2$ 。 $\mu(k)$ 为 $0$ ，这下子的话就肯定有一个 $j$ ，使得 $k$ 可以整除 $j^2$ ，这个时候假设就只能整除 $j^2$ ，也就是说 $\mu(k/j)$ 的值非 $0$ 。那么我们看看，在 $sum$ 所计算的式子中，只有 $T$ 的因子对 $T$ 产生贡献。考虑 $k/j$ 到 $k$ 多了什么因子。这个时候多的因子有两类，一类是包含了 $j^2$ 的，一类是只包含了 $j$ 的。第二类的可以先不管，因为之前 $k/j$ 中有了一个 $j$ ，这类因子的贡献已经算过了。那么对于第一类因子，因为包含了 $j^2$ ，所以 $\mu$ 值为 $0$ ，对答案没有任何贡献。 那么这个时候对答案有贡献的还是 $k/j$ 的因子，乘上一个 $j$ 后没有更多的对答案造成贡献的因子。 但是我们发现上限 $T$ 变了，增大了 $j$ 倍，对于原来的每份贡献的值也增大了 $j$ 倍。由于没有其他的贡献，$k$ 的所有的贡献都来自 $k/j$ ，那么直接转移就好。 所以是$sum[k]=sum[k/j]\cdot j$ 对于剩下的情况，我们发现，这个可以直接转移了。当我们枚举 $k$ 的时候，考虑怎么用 $k$ 来转移 $k\cdot j$ ，这个时候 $j$ 是质数，并且 $k$ 中不包含 $j$ ，也就是说 $k$ 与 $j$ 互质。于是根据积性函数的性质，$sum[k]=sum[k/j]\cdot sum[j]$ 就好。 于是这个时候前面再整出分块一下，复杂度 $O(\sqrt{n})$ 。 听说有人被卡住 $O(n)$ 后没有推式子了，直接上了个杜教筛，这人一看就是杜教士了，并且也说明不珂学的上杜教筛是布星的 Code-$O(\sqrt{n})$123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #define ll long long#define MOD 20101009#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y)) const int N=1e7+3;const int inf=1e9+9; int sum[N],vis[N],prime[N],cnt; inline void _pre_mui_sum()&#123; vis[1]=sum[1]=1; for(int i=2;i&lt;=N;++i)&#123; if(!vis[i])prime[++cnt]=i,sum[i]=(i-1ll*i*i%MOD+MOD)%MOD; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;=N)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;sum[i*prime[j]]=1ll*sum[i]*prime[j]%MOD;break;&#125; else sum[i*prime[j]]=1ll*sum[i]*sum[prime[j]]%MOD; &#125; &#125; for(int i=1;i&lt;=N;++i) sum[i]=(sum[i-1]+sum[i])%MOD;&#125; int main()&#123; int n,m; _pre_mui_sum(); scanf("%d%d",&amp;n,&amp;m); if(n&gt;m)std::swap(n,m); long long ans=0; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); int res=(1ll*(1+n/l)*(n/l)/2%MOD)*(1ll*(1+m/l)*(m/l)/2%MOD)%MOD; ans+=1ll*(sum[r]-sum[l-1]+MOD)%MOD*res%MOD; ans%=MOD; &#125; printf("%lld\n",(ans+MOD)%MOD); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SDOI2015]约数个数和 莫比乌斯反演 luoguP3327]]></title>
    <url>%2F2019%2F03%2F01%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3327%2F</url>
    <content type="text"><![CDATA[又是一道神奇的题目。 一句话题意：给定 $n,m$ 求 $\sum_{i=1}^{n}\sum_{j=1}^{m}d(ij)$ 于是开始推式子： 有这么一条公式： d(ij)=\sum_{x|i}\sum_{y|j}[gcd(x,y)=1]这个非常重要，至于证明的话，本人太弱，留个坑，到时候再填，请大家谅解 $QwQ$ 。 然后呢？发现题目求的式子后面正好是 $d(ij)$ ，于是美滋滋的套进去。 \sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{x|i}\sum_{y|j}[gcd(i,j)=1]$x$ 和 $y$ 我们扔到前面去枚举，后面来计算它们对它们的倍数做出的贡献。 可以知道前面的 $x$ 在 $n$ 以内的倍数有 $\lfloor\frac{n}{x}\rfloor$ 个，$y$ 在 $m$ 以内的倍数有 $\lfloor\frac{m}{y}\rfloor$，于是： \sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{x|i}\sum_{y|j}[gcd(i,j)=1]=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[gcd(i,j)=1]按照套路，我们设： f(x)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[gcd(i,j)=k]g(k)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[k|gcd(i,j)]那么显然有： g(k)=\sum_{k|d} f(d)这个式子很有熟悉的味道，显然是反演常见的第二种形式。 所以就有： f(k)=\sum_{k|d}\mu(\frac{d}{k})g(d)我们的答案是$f(1)$，那么就是： f(1)=\sum_{d=1}^{n}\mu(d)g(d)现在来考虑怎么计算 $g$ 。 g(k)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[k|gcd(i,j)]后面的 $k$ 很碍眼，消掉他。 g(k)=\sum_{x=1}^{\lfloor\frac{n}{k}\rfloor}\sum_{y=1}^{\lfloor\frac{m}{k}\rfloor}\lfloor\frac{n}{xk}\rfloor\lfloor\frac{m}{yk}\rfloor于是我们预处理一个函数 $s$ ： s(k)=\sum_{i=1}^{k}\lfloor\frac{k}{i}\rfloor那么 $g(k)$ 就很好算了： g(k)=s(n/k) \cdot s(m/k)复杂度的话还好，预处理 $s$ 时可以整出分块，$O(\sqrt{n})$ 爽歪歪。然后的话，发现统计答案的时候 $g$ 函数也可以整出分块，$O(\sqrt{n})$ 。最后总时间复杂度 $O(T\sqrt{n})$ (???)反正过了就行，我也不会算 $QwQ$ 。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=5e4+2;const int inf=1e9+9;int T,n,m,cnt;int mui[N],vis[N],prime[N];ll s[N]; inline void _pre_mui()&#123; mui[1]=1; for(int i=2;i&lt;=N;++i)&#123; if(!vis[i])prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;5e4)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;mui[i*prime[j]]=0;break;&#125; mui[i*prime[j]]=-mui[i]; &#125; &#125; for(int i=1;i&lt;=N;++i)mui[i]+=mui[i-1]; for(int x=1;x&lt;=N;++x)&#123;//实际上这里是O(n sqrt(n))，不过影响不大。 ll res=0; for(int l=1,r=0;l&lt;=x;l=r+1) r=(x/(x/l)),res+=1ll*(r-l+1)*(x/l); s[x]=res; &#125;return;&#125;inline ll solve(int n,int m)&#123; ll ans=0; if(n&gt;m)n^=m^=n^=m; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); ans+=1ll*(mui[r]-mui[l-1])*s[n/l]*s[m/l]; &#125;return ans;&#125;int main()&#123; _pre_mui(); scanf("%d",&amp;T); while(T--)&#123; scanf("%d%d",&amp;n,&amp;m); printf("%lld\n",solve(n,m)); &#125;return 0;&#125; =\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 士兵占领 网络流 luogu4311]]></title>
    <url>%2F2019%2F03%2F01%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4311%2F</url>
    <content type="text"><![CDATA[讨厌死权限题了，然而这题又是 $bzoj$ 的权限题。 $QwQ$ 只好去洛谷上做了，幸好洛谷收的题目比较多。 这题就是网络流，我们先假设棋盘上摆满了士兵，这个时候需要拿走一些士兵，使得棋盘仍然是合法的，求拿走的最多数。 额……最多数让我想起了最大流，不过现在还是先来考虑怎么建图。 我们建两排点，第一排表示行，一共 $M$ 个点，第二排表示列，一共 $N$ 个点。对于一个点 $(x,y)$ ，就像从第一排的第 $x$ 号点向第二排的第 $y$ 号点连一条边权为 $1$ 的边。 这个显然是没有问题的。 然后就是限制，对于第 $k$ 行，至少要有 $L_k$ 个士兵，于是我们从 $s$ 连一条边权为 $L_k$ 的边，连向第一排的第 $k$ 号点。同样的道理，对于第二排的点，我们也像这样连边，连向 $t$ 。 然后就是跑 $dinic$ 了，别忘了跑出来的不是答案，而是最多拿走的士兵数，这个时候用整个棋盘的空位置的个数减去跑出来的 $maxflow$ 才是答案。 需要注意几个点： 当我们在看到了一个行/列的时候，需要判断一下。假设这个是行，那么这行的位置显然有 $n$ 个，如果 $n$ 减去这行障碍的个数，再减去最少要放的士兵数后为负数，那么显然就怎么也不可能有合法的方案，于是直接输出 “JIONG” 就好了。 注意整个棋盘的空位置不是 $N\cdot M$ ，而是 $N\cdot M-K$! 数组大小的话只需要开到 $2n$ ，并不需要开到 $n^2$ ，因为只有两排点。但是边的数组大小需要开到 $n^2$ ，因为我们对于棋盘上的一个点就要连一条边表示它！ Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define A printf("A")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=2e2+5;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;std::queue&lt;int&gt; q;struct Edge&#123;int nxt,to,val;&#125;G[N*N];int n,m,k,s,t,cnt(1),dep[N],head[N];int map[N][N],Li[N],Ci[N],Lm[N],Cm[N];inline void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125;inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t];&#125; inline int dfs(int x,int flow)&#123; if(x==t||!flow)return flow; int used=0,rlow; for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used;&#125;inline int dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow;&#125;int main()&#123; IN(m),IN(n),IN(k); s=1,t=n+m+1; int atot=n*m-k; for(int i=1;i&lt;=m;++i)IN(Li[i]); for(int i=1;i&lt;=n;++i)IN(Ci[i]); for(int i=1;i&lt;=k;++i)&#123; int x,y;IN(x),IN(y); map[x][y]=1,Lm[x]++,Cm[y]++; &#125; for(int i=1;i&lt;=m;++i) for(int j=1;j&lt;=n;++j) if(!map[i][j])add(i,j+m,1); for(int i=1;i&lt;=m;++i)&#123; int flow=n-Li[i]-Lm[i]; if(flow&lt;0)&#123;printf("JIONG!");exit(0);&#125; else add(s,i,flow); &#125; for(int i=1;i&lt;=n;++i)&#123; int flow=m-Ci[i]-Cm[i]; if(flow&lt;0)&#123;printf("JIONG!");exit(0);&#125; else add(i+m,t,flow); &#125; printf("%d\n",atot-dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 YY的GCD 莫比乌斯反演 luogu2257]]></title>
    <url>%2F2019%2F02%2F28%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2257%2F</url>
    <content type="text"><![CDATA[又是一道反演题，显然，题目要求我们求出下式： \sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)\in prime]​这个不好求，我们来推式子。 设 $n \leq m$ \sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)\in prime]=\sum_{k=1}^{n}\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)=k] \cdot[k \in prime]​=\sum_{k=1}^{n}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[gcd(i,j)=1]\cdot[k \in prime]我们知道 $\mu$ 函数的一个性质： [n=1]=\sum_{d|n} \mu(d)将 $n$ 换为 $gcd(i,j)$ ，然后扔回原式。 [n=1]=\sum_{d|n} \mu(d) \ \Rightarrow \ [gcd(i,j)=1]=\sum_{d|gcd(i,j)} \mu(d)\sum_{k=1}^{n}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}\sum_{d|gcd(i,j)}\mu(d) \ \ \ (k \in prime)​=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[d|gcd(i,j)]\cdot \mu(d) \ \ \ (k \in prime)=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}[1|gcd(i,j)]\cdot \mu(d) \ \ \ (k \in prime)=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}\mu(d) \ \ \ (k \in prime)我们知道，这里的 $\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}​$ 可以变成 $\lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor​$ 的，这是等价的。于是： =\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\mu(d)\cdot \lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor \ \ \ (k \in prime)​这个式子依旧不可做，因为会超时，考虑如何再一步优化。 设 $T=kd$ ，那么我们枚举 $T$ ： =\sum_{T=1}^{n}\sum_{k|T,k\in prime}\mu(\frac{T}{k})\cdot \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor$QvQ​$ 我们将 $\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor​$ 扔到前面去。 =\sum_{T=1}^{n}\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor\sum_{k|T,k\in prime}\mu(\frac{T}{k}) ​显然后面的可以预处理，预处理好了后，我们所需要计算的就是这一块： \sum_{T=1}^{n}\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T}\rfloor这个特别好处理，整除分块优化一波，复杂度 $O(\sqrt(n))$ 。 开始居然感觉这题不可做，然后想要不要用毒教筛来筛 $\mu$ 的前缀和，不过显然我是不会这种黑科技的 $QwQ$ Code：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e7+2;const int inf=1e9+9;int vis[N],sum[N],mui[N],f[N],prime[N],cnt;inline void _pre_mui()&#123; mui[1]=1; for(int i=2;i&lt;=N;++i)&#123; if(!vis[i])prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;N)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;mui[i*prime[j]]=0;break;&#125; else mui[i*prime[j]]=-mui[i]; &#125; &#125; for(int i=1;i&lt;=cnt;++i) for(int j=1;prime[i]*j&lt;=N;++j) f[j*prime[i]]+=mui[j]; for(int i=1;i&lt;=N;++i)sum[i]=sum[i-1]+f[i]; return;&#125;inline ll solve(int n,int m)&#123; ll ans=0; for(int l=1,r=0;l&lt;=n;l=r+1)&#123; r=min(n/(n/l),m/(m/l)); ans+=(ll)(sum[r]-sum[l-1])*(ll)(n/l)*(ll)(m/l); &#125;return ans;&#125;int main()&#123; _pre_mui(); int n,m,T; scanf("%d",&amp;T); while(T--)&#123; scanf("%d%d",&amp;n,&amp;m); if(n&gt;m)std::swap(n,m); printf("%lld\n",solve(n,m)); &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [POI2007]ZAP-Queries 莫比乌斯反演 luogu3455]]></title>
    <url>%2F2019%2F02%2F27%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3455%2F</url>
    <content type="text"><![CDATA[很显然是让我们求出下式： ans=\sum_{i=1}^{A}\sum_{j=1}^{B}[gcd(i,j)=K]根据性质可以得到： ans=\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[gcd(i,j)=1]我们设两个函数： 函数 $f$，$f(x)$ 表示 $\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[gcd(i,j)=x]$ 函数 $g$ ，$g(x)$ 表示 $\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[x|gcd(i,j)]$ 我们可以得到： g(x)=\sum_{x|d} f(x)这是莫比乌斯反演的第二个形式： g(n)=\sum_{n|d} f(n) \ \Rightarrow \ f(n)=\sum_{n|d}g(d) \cdot \mu(\frac{d}{n})于是： g(x)=\sum_{x|d} f(x) \ \Rightarrow \ f(x)=\sum_{x|d}g(x) \cdot \mu(\frac{d}{x})=g(x)=\sum_{x|d} f(x) \ \Rightarrow \ f(x)=\sum_{x|d}g(\frac{d}{x}) \cdot \mu(x)设 $n=\lfloor\frac{A}{K}\rfloor\ ,\ m=\lfloor\frac{B}{K}\rfloor$ 那么： g(x)=\sum_{i=1}^{n}\sum_{i=1}^{m} [x|gcd(i,j)]=\sum_{i=1}^{\lfloor\frac{n}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{K}\rfloor}[1|gcd(i,j)]=\sum_{i=1}^{\lfloor\frac{n}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{K}\rfloor}[1|gcd(i,j)]=\lfloor\frac{A}{K}\rfloor \times\lfloor\frac{B}{K}\rfloorans=f(1)f(1)=\sum_{i=1}^{n}\mu(i)*g(i)=\sum_{i=1}^{n}\mu(i)*\lfloor\frac{A}{K}\rfloor *\lfloor\frac{B}{K}\rfloor这个式子是 $O(n)$ 的。 发现 $\lfloor\frac{A}{K}\rfloor \times\lfloor\frac{B}{K}\rfloor$ 可以整除分块，于是我们便可以做到 $O(\sqrt{x})$ Code：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;const int N=1e5+2;const int inf=1e9+9;int T,cnt;int prime[N],mui[N],vis[N];long long sum[N];inline int _Pre_mui()&#123; mui[1]=1; for(int i=2;i&lt;=N;++i)&#123; if(!vis[i])prime[++cnt]=i,mui[i]=-1; for(int j=1;j&lt;=cnt;++j)&#123; if(i*prime[j]&gt;=N)break; vis[i*prime[j]]=1; if(!(i%prime[j]))&#123;mui[i*prime[j]]=0;break;&#125; else mui[i*prime[j]]=-mui[i]; &#125; &#125;for(int i=1;i&lt;=N;++i)sum[i]=sum[i-1]+mui[i]; return 0;&#125;#define min(x,y) ((x)&lt;(y)?(x):(y))inline void solve(int n,int m,int k)&#123; long long ans=0; n/=k,m/=k; int lim=min(n,m); for(int i=1;i&lt;=lim;)&#123; long long j=min(n/(n/i),m/(m/i)); ans+=1ll*(sum[j]-sum[i-1])*(n/i)*(m/i); i=j+1; &#125;printf("%lld\n",ans); return;&#125;int main()&#123; _Pre_mui(); scanf("%d",&amp;T); while(T--)&#123; int n,m,k; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); solve(n,m,k); &#125;return 0; &#125; 所以就没了。]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【数论】 从狄利克雷卷积到莫比乌斯反演]]></title>
    <url>%2F2019%2F02%2F27%2F%5B%E6%95%B0%E8%AE%BA%5DDirichley%E5%88%B0Mobius%2F</url>
    <content type="text"><![CDATA[在此输入你的密码以便阅读全文 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>总结</tag>
        <tag>莫比乌斯反演</tag>
        <tag>狄利克雷卷积</tag>
        <tag>莫比乌斯函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 tower 网络流 bzoj4657]]></title>
    <url>%2F2019%2F02%2F26%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj4657%2F</url>
    <content type="text"><![CDATA[考试的时候正好考了这道题，全场仅有 $lys$ 大佬 $AC$ 。 都 $GG$ 了（当然我最惨，暴力分居然被卡了，只有 $10$ 分 $QwQ$）。 我们来看一下题目： 题目的阶梯数据真良心！ 20分做法很显然，$n,m \le 5$ ，分明是摆着让我们爆搜，那么直接暴力枚举打那个，处理一下路线的交叉问题就好了。 然而我菜爆了，这个居然打挂了，然后就只剩下 $10$ 分了 $QvQ$。 40分做法可以加一个剪枝，怎么剪呢？ 对于一个炮塔，假设我们之前在其打击范围内已经找到了一个点，该点跟该炮塔的曼哈顿距离是 $x$ ，其权值为 $a$ ,然后现在我们继续 $dfs$ ，发现又找到了一个点也在打击范围内，该点的与该炮的曼哈顿距离是 $y$ ，其权值是 $b$ 。 那么现在我们假设 $xb$ ，那么显然，对于最优的方案，该炮塔肯定不会打 $b$ 权值的点。也就是说，$b$ 权值的点没有 $a$ 权值的点优，因为权值少了，收益没那么大，并且风险(距离)(指容易被打断的风险)增加了。这时我们便可以放弃 $b$ 点，这就是一个小小的剪枝优化。 100分做法考虑最小割。 对于每一个炮塔，我们将其能打出去的范围的所有点连成一条链，这条链的两端分别连着 $s$ 和 $t$ 。 这个时候的 “割” 就是说你这个炮打到哪里结束。 如下图： 那么网络流的图中，这条链中 $3-4$ 的这条边被切断了。 所以我们每一个炮有一个打到的地方(当然可以不打)，这个时候每一条链都断了，所以图就断了。 但是关系并没有那么简单，假设现在又有一个炮塔，其轨迹跟现在的炮相交了，如果相交的点的编号 $&lt;3$，显然这个红炮是不可以打到小蓝点( $3$ 号点)的，我们该如何表示这种关系呢？ 现在所表示的状况： 现在的状况就是，相交点上面的点都打不到了(红炮)，相交点右边的点都打不到了(蓝炮)。 但是我们一定要保证 $S$ 到 $T$ 的联通。 那么就可以确定，如果红炮所在的点连接 $S$ ，那么蓝炮就连 $T$，这样才可以使 $S$ 和 $T$ 连通。 然后来解决怎么处理相交点的连边问题。 但是，如果按照上面的 “红炮连 $S$ ，蓝炮连 $T$” 的话，直接这样连不就好了吗？ 仔细想一想，这其实是布星的，因为我们要保证这个相交点的关系不会被割掉，那么就因该将边值设为 $inf$，但是设哪条边呢？这里所有的边的值都是这个点的权值，我们不可能直接改点的权值吧？ 那么很显然，我们将相交点拆成两个点，这两个点中间连有一条边权为 $inf$ 的边，这时无论如何都割不掉这个点了。 最后就是，既然要求最小割，对于如果炮不启动的话边权是 $0$ ，那么就达成了 “最小” 的效果，这是错的。所以我们设一个常量 $T$ ，将每条边的边权都设为 $T-v_i$ 就好。 然后就是板子 $Dinic$。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))#define id(i,j,type) type*n*m+(i-1)*m+j const int N=5e1+6;const int inf=1e9+9;const int dx[4]=&#123;-1,1,0,0&#125;;const int dy[4]=&#123;0,0,-1,1&#125;; int map[N][N],ans,n,m,s,t;int cnt(1),head[N*N*2],dep[N*N*2];struct Edge&#123;int nxt,to,val;&#125;G[N*N&lt;&lt;2];std::queue&lt;int&gt; q; bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(!dep[v]&amp;&amp;G[i].val&gt;0) dep[v]=dep[u]+1,q.push(v); &#125; &#125;return dep[t];&#125;int dfs(int u,int flow)&#123; if(u==t||!flow)return flow; int used=0,rlow; for(int i=head[u];i;i=G[i].nxt)&#123; int v=G[i].to; if(dep[v]==dep[u]+1&amp;&amp;G[i].val&gt;0)&#123; used+=(rlow=dfs(v,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[u]=-1; return used;&#125; int Dinic()&#123; int maxflow=0; while(bfs())maxflow+=dfs(s,inf); return maxflow;&#125; void add(int u,int v,int w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt;&#125; int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) scanf("%d",&amp;map[i][j]); s=0,t=n*m*2+1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j)&#123; if(map[i][j]&lt;0)&#123; int direction=-map[i][j]-1; int x=i,y=j,Mx_val=0; while(true)&#123; x+=dx[direction],y+=dy[direction]; if(x&lt;1||x&gt;n||y&lt;1||y&gt;m)break; Mx_val=max(Mx_val,map[x][y]); &#125;ans+=Mx_val; if(direction&lt;2)add(s,id(i,j,0),inf); else add(id(i,j,1),t,inf); x=i,y=j; while(true)&#123; int tx=x,ty=y; x+=dx[direction],y+=dy[direction]; if(x&lt;1||x&gt;n||y&lt;1||y&gt;m)break; if(direction&lt;2)add(id(tx,ty,0),id(x,y,0),Mx_val-max(0,map[tx][ty])); else add(id(x,y,1),id(tx,ty,1),Mx_val-max(0,map[tx][ty])); &#125; &#125;else add(id(i,j,0),id(i,j,1),inf); &#125; printf("%d\n",ans-Dinic()); return 0;&#125; 为什么之前没想出来呢？]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2009]诗人小G 四边形不等式/决策单调性优化DP luoguP1912]]></title>
    <url>%2F2019%2F02%2F25%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1912%2F</url>
    <content type="text"><![CDATA[神奇的题目 $QvQ$ ，卡了我好久。 哎，主要是细节要处理到位，否则就会 WA 声满片。 记录一下我壮观的提交记录： 太杯具了 $QvQ$ (扯谈扯不下去了…….) 进入正题吧。 路人甲：$bzoj$ 上居然没有这道题？导演：赶紧走开，不管你的事 这题明显是 $DP$，我们可以很简单的得到 $DP$ 方程： 设 $f[i]$ 表示对前 $i$ 句诗排版后的最小不协调度，那么很显然，对于一个现在我们需要转移的 $i$，我们会找到一个最优的 $j$ ，使得第 $j+1$ 句到第 $i$ 句组成一个新的行。那么之前的行的总共的最小不协调度显然是 $f[j]$，现在我们就来计算一下 $f[i]$ 的最小不协调度。 显然，是下式(其中 $sum$ 是句子长度的前缀和)： f[i]=f[j]+{|sum[i]-sum[j]-L-1|}^P这就是状态转移方程，的确很好理解。但是……这样子做是 $O(N^2)$ 的复杂度，只能拿 $30$ 分。 而按照题目的数据范围，正解的复杂度因该是 $O(n log n)$ 左右。接下来考虑怎么优化。 经打表观察发现，如果我们将每次用作转移 $i$ 的最优的 $j$ 存起来，输出时会发现，$j$ 是单调递增的。 证明的话的确不好证，可以看看 $lyd$ 的书。但是按照实际理解一下是可以的，我们将 $j$ 后面的一直到 $i$ 的句子组成了新的一行，那么如果 $j$ 不单调上升的话，新的一句将会变的很长很长很长，那么这时这句造成的不协调度将会以几何数的形式疯狂增长，那么唯一的方法就是将这句长句断句，这样子 $j$ 就会变大，可以感性理解一下 $QvQ$。 但是我们知道了 $j$ 是单调上升的这条性质有什么用呢？ 很显然，每一次转移的时候不必往前找了，直接往后找。 我们维护一个队列，队列里的每一个元素有三个变量：$l,r,c$ ，其中 $l$ 和 $r$ 表示 $c$ 这个决策的适用范围，并且在这个范围中 $c$ 是最优的 $j$。 那么现在有了一个新的 $i$，考虑怎么维护这个队列。 我们可以先找到 $i$ 所在的范围的最优的 $j$，那么这时我们检查队头，如果队头的范围已经不包括 $i$ 了，那么直接弹出，因为既然队头的范围不包括 $i$ 了，那么这个队头对 $i+1$ 及后面的元素都不能产生贡献，故直接弹出。 弹出无用的队头后，转移的话就是 $O(1)$ 了：直接取队头转移不就好了吗？ 那么现在考虑怎么将 $i$ 加入这个队列，或许这个 $i$ 也会对后面的元素产生贡献。 我们检查当前的队尾，怎么判断这个队尾是否比 $i$ 更优呢？现在队尾的范围是 $l,r$ ，如果 $i$ 更新 $l$ 比 $c$ 更新 $l$ 更优，显然 $i$ 会比当前 $l,r$ 范围类的所有的 $c$ 更优，故弹出队尾。 那么，假设现在我们碰到了一个队尾，其中 $i$ 更新 $r$ 更优， $c$ 更新 $l$ 更优，怎么办呢？也就是说这个元素的范围中分成两半，前一半 $c$ 更新更优，后一半 $i$ 更新更优，显然要拆成两个队列元素。那么我们怎么知道这个位置呢？二分！ 那么这个时候我们可以得到答案了，只是输出怎么办呢？ 很简单，每次转移的时候记录一下转移自哪里，这就是分行，然后输出即可。 最后就是精度问题。 题目要求，如果 $f[n]$ (即所有句子排版后的最小不协调度) 还是大于了 $1e18$ ，那么输出 “$Too \ hard\ to\ arrange$”，但是如果在 $DP$ 的过程中就炸了 $long \ long$，那就 $GG$ 了。所以我们使用 $long \ double$ ，精度更高，(不会 $int$ 的，这辈子也不会用 $int$ 的)。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;typedef long long ll;typedef long double ld;const int NS=1e5+2;const int inf=1e9+9;int T,N,L,P;int head,tail;int last[NS],ans[NS],Next[NS];struct Node&#123;int c,l,r;&#125;q[NS];char s[NS][35];ld sum[NS],f[NS];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;void clear()&#123; memset(last,0,sizeof(last)); memset(sum,0,sizeof(sum)); memset(q,0,sizeof(q)); memset(s,0,sizeof(s)); memset(f,0,sizeof(f));&#125;ld pows(ld x,int y)&#123;//快速幂 ld ans=1; for(;y;y&gt;&gt;=1,x*=x)if(y&amp;1)ans*=x; return ans;&#125;ld val(int j,int i)&#123;//转移函数 return f[j]+pows(abs(sum[i]-sum[j]-L-1),P);&#125;void half(int i)&#123;//二分过程 int now=q[tail].c,ls=q[tail].l,rs=q[tail].r;//当前队尾范围 int ret=q[tail].r+1; while(ls&lt;=rs)&#123; int mid=(ls+rs)&gt;&gt;1; if(val(i,mid)&lt;=val(now,mid))rs=mid-1,ret=mid;//i更优 else ls=mid+1;//c更优 &#125; if(ret!=q[tail].l)q[tail].r=ret-1;//分成了两半 else --tail;//整个元素都比不过i if(ret&lt;=N)q[++tail]=(Node)&#123;i,ret,N&#125;;//i分了一个区间时，加入新元素&#125;void output()&#123;//值得拥有的鬼畜输出 if(f[N]&gt;1e18)puts("Too hard to arrange");//无解，放心判1e18 else&#123; printf("%lld\n",(ll)(f[N]+0.5));//注意精度问题 for(int i=N;i;i=last[i])Next[last[i]]=i;//输出 int now=0; for(int i=1;i&lt;=N;++i)&#123; now=Next[now]; for(int j=i;j&lt;now;++j)printf("%s ",s[j]); printf("%s\n",s[now]); i=now; &#125; &#125; puts("--------------------");//注意 return;&#125;int main()&#123; IN(T); while(T--)&#123; clear(); IN(N),IN(L),IN(P); for(int i=1;i&lt;=N;++i)&#123; scanf("%s",s[i]); sum[i]=sum[i-1]+strlen(s[i])+1;//做前缀和 /*因为输出是有空格的，所以加上一个1*/ &#125; q[head=tail=1]=(Node)&#123;0,1,N&#125;;//初始元素 for(int i=1;i&lt;=N;++i)&#123; while(head&lt;tail&amp;&amp;q[head].r&lt;i)++head;//淘汰无用队头 ++q[head].l; f[i]=val(q[head].c,i);//O(1) 转移 last[i]=q[head].c;//记录“转移自哪里” while(head&lt;tail&amp;&amp;val(i,q[tail].l)&lt;=val(q[tail].c,q[tail].l))tail--;//弹出劣质队尾 half(i);//二分 &#125; output();//鬼畜输出 &#125; return 0;//终于结束&#125; 最后，我有个问题。 这是写的什么文章啊 $QvQ$ ，让我们来猜测一下。 白日依山尽，黄河入海流，欲穷千里目，更上一层楼。 这是 小 $G$ 写的？作者明明不是小 $G$ 好不好。 $QvQ$ 有毒啊……]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
        <tag>决策单调性</tag>
        <tag>四边形不等式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [USACO4.4]Pollutant Control 网络流 luoguP1344]]></title>
    <url>%2F2019%2F02%2F24%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1344%2F</url>
    <content type="text"><![CDATA[有必要么……直接打个电话给零售商：”我的牛奶不对，不要收牛奶！”不久可以了吗…… (好了好了这是扯淡) 显然这个运输图的 $1$ 号点就是公司发送牛奶的地方，$n$ 号点就是零售商，然后每一条边就是这个货车的出发点与到达点，边权即为拦截这个货车的代价。 然后呢？ 最小的损失……使 $1$ 到不了 $n$ ，这显然就是最小割啊 $QwQ$ 那么这样损失数就很容易得到了，那么最少要停的卡车数怎么求呢？很显然，我们任然跑最小割，那么这个图我们将所有边都设为 $1$ ，显然现在的最小割就是最少要停的卡车数。 很显然，时间爆炸，满屏惊喜！ 这里有一种方法！我们设一个常数 $T$ ，假设当前边的边权是 $w$ ，那么我们实际连一条边权为 $w \times T+1$ 的边，其中最小损失数显然为 $maxflow/T$ ，那么最少要停的卡车数呢？显然就是 $maxflow\ \%\ T$。 这里的 $T$ 要足够大，否则如果每条边后面的 $+1$ 乘上割的边数大于了 $T$ ，然后 $\%$ 一下，恭喜你！你 $GG$ 了。实际上 “足够大” 只要大于边数就好了，显然这样子建边是要开 $long long$ 的，否则会炸。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define A printf("A")#define ll long long#define RI register int#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const ll N=1e5+5;const ll inf=1e9+9;const ll T=2019;//2019新年快乐(尽管现在不是时候了)template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;std::queue&lt;int&gt; q;struct Edge&#123;ll nxt,to,val;&#125;G[N];ll n,m,s,t,cnt(1),dep[N],head[N];inline void add(ll u,ll v,ll w)&#123; G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt; G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=0,head[v]=cnt; &#125;inline bool bfs()&#123; memset(dep,0,sizeof(dep)); q.push(s);dep[s]=1; while(!q.empty())&#123; ll x=q.front();q.pop(); for(ll i=head[x];i;i=G[i].nxt)&#123; ll y=G[i].to; if(dep[y]||G[i].val&lt;=0)continue; dep[y]=dep[x]+1,q.push(y); &#125; &#125;return dep[t];&#125; inline ll dfs(ll x,ll flow)&#123; if(x==t||!flow)return flow; ll used=0,rlow; for(ll i=head[x];i;i=G[i].nxt)&#123; ll y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used;&#125;int main()&#123; IN(n),IN(m);s=1,t=n; for(ll i=1;i&lt;=m;++i)&#123; ll u,v,w;IN(u),IN(v),IN(w); add(u,v,w*T+1); &#125; ll maxflow=0; while(bfs())maxflow+=dfs(s,inf); printf("%lld %lld\n",maxflow/T,maxflow%T); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2001]食物链 并查集 luoguP2024]]></title>
    <url>%2F2019%2F02%2F22%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2024%2F</url>
    <content type="text"><![CDATA[并不是很难。 首先，我们将一个点 $x$ 拆分成三个点：$x_{eat},x_{sim},x_{emy}$， $x_{eat}$ 表示 $x$ 的食物，$x_{sim}$ 表示 $x$ 的同类，$x_{emy}$ 表示 $x$ 的天敌。 然后，对于一句真话： 如果是表示 $x​$ 是 $y​$ 的同类，那么很显然，$x​$ 的食物就是 $y​$ 的食物， $x​$ 的天敌就是 $y​$ 的天敌，于是讲 $x_{sim}​$ 和 $y_{sim}​$ 所在的并查集合并，将 $x_{eat}​$ 和 $y_{eat}​$ 所在的并查集合并，最后将 $x_{emy}​$ 和 $y_{emy}​$ 所在的并查集合并即可。 如果这句表示 $x$ 吃 $y$ ，那么很显然，$x$ 的食物就是 $y$ 的同类，$x$ 的天敌就是 $y$ 的食物(因为是环形)，$x$ 的同类都是 $y$ 的天敌，故将这些关系的并查集一次合并即可。 怎么判断一句话的真假呢？ 显然，如果 $x&gt;n||y&gt;n$ 就是假话，对于两个操作： 如果表示 $x​$ 是 $y​$ 的同类，那么 $x_{eat}​$ 不能和 $y_{sim}​$ 在同一个并查集中，$x_{sim}​$ 不能和 $y_{eat}​$ 在同一个并查集中，否则就与前面的话冲突了。 如果表示 $x$ 吃 $y$ ，首先 $x$ 和 $y$ 不能是同类(即 $x_{sim}$ 不能和 $y_{sim}$ 在一个并查集中)，然后 $y_{eat}$ 不能和 $x_{sim}$ 在一个并查集中，显然违反了以上的就是假话。 然后码量极小： Code：123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;const int N=5e4+2;const int inf=1e9+9;const int K=1e5+2;int fa[N*3],ans,n,k;inline int sim(int x)&#123;return x;&#125;;inline int eat(int x)&#123;return x+n;&#125;;inline int emy(int x)&#123;return x+n+n;&#125;;int find(int x)&#123;return x==fa[x]?x:fa[x]=find(fa[x]);&#125;;int main()&#123; scanf("%d%d",&amp;n,&amp;k); for(int i=1;i&lt;=n*3;++i)fa[i]=i; for(int i=1;i&lt;=k;++i)&#123; int op,x,y; scanf("%d%d%d",&amp;op,&amp;x,&amp;y); if(x&gt;n||y&gt;n)&#123;++ans;continue;&#125; if(op==1)&#123; if(find(eat(x))==find(sim(y))||find(sim(x))==find(eat(y)))&#123;++ans;&#125; else&#123; fa[find(sim(x))]=find(sim(y)); fa[find(eat(x))]=find(eat(y)); fa[find(emy(x))]=find(emy(y)); &#125; &#125;else&#123; if(find(sim(x))==find(sim(y))||find(sim(x))==find(eat(y)))&#123;++ans;&#125; else&#123; fa[find(eat(x))]=find(sim(y)); fa[find(emy(x))]=find(eat(y)); fa[find(sim(x))]=find(emy(y)); &#125; &#125; &#125; printf("%d\n",ans); return 0;&#125; 我绝对不会告诉你们，我有一处地方 $sim$ 写成了 $sin$ 而调了半个小时]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [BOI2007]Mokia CDQ分治 luogu4390]]></title>
    <url>%2F2019%2F02%2F22%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4390%2F</url>
    <content type="text"><![CDATA[BBQ烤翅，CDQ分治。 一道很裸的三位偏序，允许离线的话，就上CDQ分治，当然想当码农可以敲树套树。 很显然，三维就是 $x$ 轴，$y$ 轴，和时间。 然后将一个矩阵的询问拆成四个询问，按照容斥的方式搞，这显然是可以且简单的，但是询问数将会爆炸 $QvQ$ (但是没有炸，不舒服) $long long$ 也要开，不然会炸。 然后就这样了。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const ll N=2e6+2;const ll inf=1e9+9;ll s,w,tot,c[N];struct Node&#123; ll x,y,ans,pos,type;&#125;q[N],hep[N];bool cmp(const Node&amp;x,const Node&amp;y)&#123;return x.pos&lt;y.pos;&#125;;struct BIT&#123; void add(ll x,ll v)&#123;for(;x&lt;=w;x+=(x&amp;-x))c[x]+=v;&#125;; ll sum(ll x)&#123;ll res=0;for(;x;x-=(x&amp;-x))res+=c[x];return res;&#125;; void clr(ll x)&#123;for(;x&lt;=w;x+=(x&amp;-x))c[x]=0;&#125;;&#125;T;void CDQ(ll l,ll r)&#123; if(l==r)return; int mid=(l+r)&gt;&gt;1; CDQ(l,mid);CDQ(mid+1,r); ll i=l,j=mid+1,cnt=l; /*CDQ的主要流程*/ while(i&lt;=mid&amp;&amp;j&lt;=r)&#123; if(q[i].x&lt;=q[j].x)&#123; /*注意这一题询问和修改是不一样的，不像陌上花开那题，每个元素即使修改对答案做贡献，也是询问*/ if(!q[i].type)T.add(q[i].y,q[i].ans);/*这是修改，树状数组标记一下*/ hep[cnt++]=q[i++];/*归并排序*/ &#125;else&#123; if(q[j].type)q[j].ans+=T.sum(q[j].y);/*询问，更新答案*/ hep[cnt++]=q[j++]; &#125; &#125; /*将剩下的元素排序好，更新好答案*/ while(i&lt;=mid)&#123; if(!q[i].type)T.add(q[i].y,q[i].ans); hep[cnt++]=q[i++]; &#125; while(j&lt;=r)&#123; if(q[j].type)q[j].ans+=T.sum(q[j].y); hep[cnt++]=q[j++]; &#125; for(ll o=l;o&lt;=mid;++o)/*清除本次操作在树状数组上留下的痕迹*/ if(!q[o].type)T.clr(q[o].y); for(ll o=l;o&lt;=r;++o)q[o]=hep[o];/*更新原数组*/&#125;int main()&#123; ll op; scanf("%lld%lld",&amp;s,&amp;w); while(scanf("%lld",&amp;op),op^3)&#123; ll x,y,z,x1,x2,y1,y2; if(op==1)&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;z); q[++tot]=(Node)&#123;x,y,z,tot,0&#125;; &#125;else&#123; scanf("%lld%lld%lld%lld",&amp;x1,&amp;y1,&amp;x2,&amp;y2); /*四个询问*/ q[++tot]=(Node)&#123;x2,y2,0,tot,1&#125;; q[++tot]=(Node)&#123;x1-1,y2,0,tot,1&#125;; q[++tot]=(Node)&#123;x2,y1-1,0,tot,1&#125;; q[++tot]=(Node)&#123;x1-1,y1-1,0,tot,1&#125;; &#125; &#125; CDQ(1,tot); std::sort(q+1,q+tot+1,cmp); for(ll i=1;i&lt;=tot;++i) if(q[i].type)&#123; printf("%lld\n",q[i].ans-q[i+1].ans-q[i+2].ans+q[i+3].ans+s*(q[i].y-q[i+3].y)*(q[i].x-q[i+3].x)); i+=3; //printf("%lld\n",q[i].ans); &#125; return 0;&#125; 然而我还是太弱了，调半个小时的原因既然是 树状数组打错了$QvQ$]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>CDQ分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 陌上花开 CDQ分治 bzoj3262]]></title>
    <url>%2F2019%2F02%2F22%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj3262%2F</url>
    <content type="text"><![CDATA[陌上花开，可缓缓归矣 ——吴越王 每日一学语文[滑稽]。 当然这题 $KDT​$ 是可以做的，但是不费，所以用 $CDQ​$ 算了吧。 很显然这道题是 $CDQ$ 三维偏序的板子题(luogu上它本来就是板子题) $CDQ$ 分治的三维偏序怎么做？ 对于其中的第一维，$CDQ$之前直接 $sort$ 排好序，那么这就可以保证对于一个 $i&lt;j$ ，位置 $j$ 的元素一定是对位置 $i$ 的元素做不出贡献的，因为 $x_i &lt;x_j$ 。 然后第二维，进入 $CDQ$ ，很显然当前的区间 $l - r$ 是会分成两个子区间分别做 $CDQ$ 的，那么当两个子区间合并的时候，左子区间是可能会对右子区间做出贡献的，但是右子区间对左子区间做不出任何贡献，原因是我们在之前已经按 $x$ 排好了序，那么显然左子区间的元素的 $x$ 始终小于右子区间的元素的 $x$。 外面排好了第一维，那么我们就在 $CDQ$ 中排第二维，由于我们是分成了两个子区间递归处理，往上面合并的时候，正好可以归并排序。第三位只需要在树状数组中记录一下，然后统计答案的时候调用树状数组的查询，看看比当前元素小的有多少个即可。 1234567891011121314151617181920void CDQ(int l,int r)&#123; if(l==r)return; int mid=(l+r)&gt;&gt;1; CDQ(l,mid);CDQ(mid+1,r);/*分成两个子区间*/ int i=l,j=mid+1,cnt=l; while(i&lt;=mid&amp;&amp;j&lt;=r)&#123;/*归并+统计答案*/ if(v[i].b&lt;=v[j].b)add(v[i].c,size[v[i].id]),hep[cnt++]=v[i++]; /*左子区间的当前元素可能会有贡献，记录一下*/ else ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++]; /*接下来的左子区间的b是比当前的j.b要大的了，没有贡献了*/ /*因为在子区间中使用了归并，所以两个子区间中b肯定是升序的*/ &#125; while(j&lt;=r)ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++]; /*将剩下的归并排序完*/ for(int h=l;h&lt;i;++h)add(v[h].c,-size[v[h].id]); /*清除树状数组留下的痕迹*/ while(i&lt;=mid)hep[cnt++]=v[i++]; for(int i=l;i&lt;=r;++i)v[i]=hep[i]; /*更新原数组*/&#125; $QvQ$ 就这样了，只是这题需要离散化一下，$Code$ 中的 $size$ 就是元素出现的个数。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long longconst int N=1e5+2;const int K=2e5+2;int n,k;struct Node&#123;int a,b,c,id;&#125;v[N],hep[N];int tre[K],ans[N],num[N],size[N];inline void add(int x,int v)&#123;for(;x&lt;=k;x+=(x&amp;-x))tre[x]+=v;&#125;;inline ll sum(int x)&#123;ll res=0;for(;x;x-=(x&amp;-x))res+=tre[x];return res;&#125;;template&lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;bool cmp(Node x,Node y)&#123; if(x.a!=y.a)return x.a&lt;y.a; if(x.b!=y.b)return x.b&lt;y.b; return x.c&lt;y.c;&#125;void CDQ(int l,int r)&#123; if(l==r)return; int mid=(l+r)&gt;&gt;1; CDQ(l,mid);CDQ(mid+1,r); int i=l,j=mid+1,cnt=l; while(i&lt;=mid&amp;&amp;j&lt;=r)&#123; if(v[i].b&lt;=v[j].b)add(v[i].c,size[v[i].id]),hep[cnt++]=v[i++]; else ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++]; &#125; while(j&lt;=r)ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++]; for(int h=l;h&lt;i;++h)add(v[h].c,-size[v[h].id]); while(i&lt;=mid)hep[cnt++]=v[i++]; for(int i=l;i&lt;=r;++i)v[i]=hep[i];&#125;int main()&#123; IN(n),IN(k); for(int i=1;i&lt;=n;++i) scanf("%d%d%d",&amp;v[i].a,&amp;v[i].b,&amp;v[i].c); std::sort(v+1,v+n+1,cmp); int tot=0; for(int i=1;i&lt;=n;++i)&#123; if(v[i].a!=v[i-1].a||v[i].b!=v[i-1].b||v[i].c!=v[i-1].c)hep[++tot]=v[i]; ++size[tot]; &#125; for(int i=1;i&lt;=tot;++i)v[i]=hep[i],v[i].id=i; CDQ(1,tot); for(int i=1;i&lt;=tot;++i) num[ans[v[i].id]+size[v[i].id]-1]+=size[v[i].id]; for(int i=0;i&lt;n;++i) printf("%d\n",num[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>CDQ分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【数论】 乘法逆元]]></title>
    <url>%2F2019%2F02%2F20%2F%5B%E6%95%B0%E8%AE%BA%5D%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83%2F</url>
    <content type="text"><![CDATA[真的我也不知道标题怎么起 $QvQ……$ 本文将介绍两种求乘法逆元的方式。 0XFF 乘法逆元是什么？ 乘法逆元，一般用于求 \frac{a}{b} \ \ (mod \ p)的值 ($p$ 通常为质数) 。 对于加、减、乘法的取模直接取就好了，但是对于除法(上面的分数形式)取模的话，显然直接取模是错的，那么这个时候就需要用到乘法逆元。 如果 $a \times x \equiv 1 \ \ (mod \ p) $，且 $a$ 与 $p$ 互质，那么就可以定义 $p$ 为 $x$ 的逆元，记为 $a^{-1}$，所以我们也可以称 $x$ 为 $a$ 在 $mod \ p$ 意义下的倒数。 对于 $\frac{a}{b} \ \ (mod \ p)​$，这个分数的值就是 $(b^{-1} \times a) \ mod \ p​$，即 $b​$ 在 $mod \ p​$ 意义下的逆元乘上 $a​$ ，最后对 $p​$ 取模。 0X1F 求乘法逆元的两种方法(我只会这两种)…… 0X1F-1 费马小定理求乘法逆元费马小定理： 若 $p​$ 为质数，$a​$ 为正整数，且 $a​$ 与 $p​$ 互质。 那么 $a^{p-1} \equiv 1 \ \ (mod \ p)$。 我们将 $a^{p-1} \equiv 1 \ \ (mod \ p)$ 代入原式： a \times x \equiv 1 \ \ (mod \ p)a \times x\equiv a^{p-1} \ \ (mod \ p)x\equiv a^{p-2} \ \ (mod \ p)那么直接跑一遍快速幂即可。 Code:1234567891011#define ll long longll pow(ll x,ll y,ll p) &#123; x%=p; ll ans=1; for(;y;y&gt;&gt;=1,x=x*x%mod) if(power&amp;1)ans=ans*x%mod; return ans;&#125;int main()&#123; ll x=pow(a,p-2,p);&#125; 0X1F-2 线性求乘法逆元这个算法的时间复杂度是线性的：$O(n)$ 设 $p=s \times i + r$ ，$(1&lt;r&lt;i&lt;p)$. 将此式套入 $(mod \ p)​$ 意义下的式子就可以得到： s \times i +r \equiv 0 \ \ (mod \ p)​两边同时乘上 $i^{-1}$： s + r \times i^{-1} \equiv 0 \ \ (mod \ p)​然后再同时乘上 $r^{-1}​$： s \times r^{-1} + i^{-1} \equiv 0 \ \ (mod \ p)​移项得到： i^{-1} \equiv -s \times r^{-1} \ \ (mod \ p)很显然 $s$ 等于 $[\frac{p}{i}]$，$r$ 等于 $p \ mod \ i$，那么 $r^{-1}$ 就等于 $inv[p \ mod \ i]$ ($inv[i]$ 表示 $i$ 在 $mod \ p$ 意义下的乘法逆元) 然后代入公式： inv[i] \equiv - [\frac{p}{i}] \times inv[p \ mod \ i] \ \ (mod \ p)于是代码就很短了： 123inv[0]=0,inv[1]=1;for(int i=2;i&lt;=n;++i) inv[i]=(long long)(p-p/i)*inv[p%i]%p; 一般来说线性的或许会优秀些，建议使用线性的算法，而且代码也比较短，容易写，处理组乘法逆元的时候，第一种的复杂度为 $O(nlogn)$，第二种只需 $O(n)$。但是在处理单组乘法逆元的时候，第一种复杂度为 $O(logn)$，但是第二种因为要讲 $p \ mod \ i$ 求出来，复杂度…..或许还是 $O(n)$。(实际上我也不会证 $QvQ…$)]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>乘法逆元</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [国家集训队]Tree LCT luogu1501/bzoj2631]]></title>
    <url>%2F2019%2F02%2F17%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1501%2F</url>
    <content type="text"><![CDATA[Link-Cut-Tree 的懒标记下传正确食用方法。 1：+ u v c：将$u$到$v$的路径上的点的权值都加上自然数$c$; 解决方法： 很显然，我们可以$split(u,v)$来提取u,v这一段区间,提取完了将$Splay(v)$,然后直接在v上打加法标记$add$即可。 代码： 1234567891011121314inline void pushadd(ll x,ll val)&#123;//打标记 s[x]+=sz[x]*val,v[x]+=val,add[x]+=val; s[x]%=MOD,v[x]%=MOD,add[x]%=MOD;&#125;inline void split(ll x,ll y)&#123;//LCT基本操作split,不再赘述 makeroot(x);Access(y);Splay(y);&#125;//(main函数中)：if(op[0]=='+')&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;v);//输入信息 split(x,y);pushadd(y,v);//提取链条&amp;打标记&#125; 2：- u1 v1 u2 v2：将树中原有的边$(u1,v1)$删除，加入一条新边$(u2,v2)$，保证操作完之后仍然是一棵树； 解决方法： 删除边即$cut$操作，加边即$link$操作。 代码： 1234567891011121314inline void link(ll x,ll y)&#123; makeroot(x);if(findroot(x)!=y)f[x]=y;&#125;inline void cut(ll x,ll y)&#123; makeroot(x);split(x,y); if(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][1]) f[x]=ch[y][0]=0;return;&#125;//LCT基本操作link&amp;cut，不再赘述//(main函数中)：if(op[0]=='-')&#123; scanf("%lld%lld",&amp;x,&amp;y);cut(x,y);//删边 scanf("%lld%lld",&amp;x,&amp;y);link(x,y);//加边&#125; 3：* u v c：将$u$到$v$的路径上的点的权值都乘上自然数$c$； 解决方法： 很显然，我们可以$split(u,v)$来提取u,v这一段区间,提取完了将$Splay(v)$,然后直接在v上打乘法标记$mul$即可。(跟第一个操作基本同理) 代码： 12345678910inline void pushmul(ll x,ll val)&#123;//打标记 s[x]*=val,v[x]*=val,mul[x]*=val,add[x]*=val; s[x]%=MOD,v[x]%=MOD,mul[x]%=MOD,add[x]%=MOD;&#125;//(main函数中)：if(op[0]=='*')&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;v); split(x,y);pushmul(y,v);&#125; 4：/ u v：询问$u$到$v$的路径上的点的权值和，求出答案对于51061的余数。 解决方法： $Splay(v)$时已经将所有节点更新过了(懒标记下传过了)，所以最后只需输出$s[v]$即可。 代码： 12345//(main函数中)：if(op[0]=='/')&#123; scanf("%lld%lld",&amp;x,&amp;y); split(x,y);printf("%lld\n",s[y]);&#125; Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register ll#define A printf("A")#define C printf(" ") #define MOD 51061using namespace std;const ll N=1e5+2;template&lt;typename _Tp&gt; inline void IN(_Tp&amp; dig)&#123; char c;bool flag=0;dig=0; while(c=getchar(),!isdigit(c))if(c=='-')flag=1; while(isdigit(c))dig=dig*10+c-'0',c=getchar(); if(flag)dig=-dig;&#125;ll f[N],s[N],v[N],sz[N],rev[N],mul[N],add[N],hep[N],ch[N][2];inline ll get(ll x)&#123;return ch[f[x]][0]==x||ch[f[x]][1]==x;&#125;inline ll chk(ll x)&#123;return ch[f[x]][1]==x;&#125;inline void pushfilp(ll x)&#123; swap(ch[x][0],ch[x][1]);rev[x]^=1;&#125;inline void pushup(ll x)&#123; s[x]=(s[ch[x][0]]+s[ch[x][1]]+v[x])%MOD; sz[x]=sz[ch[x][0]]+sz[ch[x][1]]+1;&#125;inline void pushmul(ll x,ll val)&#123; s[x]*=val,v[x]*=val,mul[x]*=val,add[x]*=val; s[x]%=MOD,v[x]%=MOD,mul[x]%=MOD,add[x]%=MOD;&#125;inline void pushadd(ll x,ll val)&#123; s[x]+=sz[x]*val,v[x]+=val,add[x]+=val; s[x]%=MOD,v[x]%=MOD,add[x]%=MOD;&#125;inline void pushdown(ll x)&#123; if(mul[x]!=1)pushmul(ch[x][0],mul[x]),pushmul(ch[x][1],mul[x]); if(add[x])pushadd(ch[x][0],add[x]),pushadd(ch[x][1],add[x]); if(rev[x])&#123; if(ch[x][0])pushfilp(ch[x][0]); if(ch[x][1])pushfilp(ch[x][1]); &#125;rev[x]=0,add[x]=0,mul[x]=1;return;&#125;inline void rotate(ll x)&#123; ll y=f[x],z=f[y],k=chk(x),v=ch[x][!k]; if(get(y))ch[z][chk(y)]=x;ch[x][!k]=y,ch[y][k]=v; if(v)f[v]=y;f[y]=x,f[x]=z;pushup(y),pushup(x);&#125;inline void Splay(ll x)&#123; ll y=x,top=0;hep[++top]=y; while(get(y))hep[++top]=y=f[y]; while(top)pushdown(hep[top--]); while(get(x))&#123; y=f[x],top=f[y]; if(get(y))rotate((ch[y][0]==x)^(ch[top][0]==y)?y:x); rotate(x); &#125;pushup(x);return;&#125;inline void Access(ll x)&#123; for(register ll y=0;x;x=f[y=x]) Splay(x),ch[x][1]=y,pushup(x);&#125;inline ll findroot(ll x)&#123; Access(x);Splay(x); while(ch[x][0])pushdown(x),x=ch[x][0]; return x;&#125;inline void makeroot(ll x)&#123; Access(x);Splay(x);pushfilp(x);&#125;inline void split(ll x,ll y)&#123; makeroot(x);Access(y);Splay(y);&#125;inline void link(ll x,ll y)&#123; makeroot(x);if(findroot(x)!=y)f[x]=y;&#125;inline void cut(ll x,ll y)&#123; makeroot(x);split(x,y); if(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][1]) f[x]=ch[y][0]=0;return;&#125;char op[2];int main()&#123; ll n,m,x,y;scanf("%lld%lld",&amp;n,&amp;m); for(register int i=1;i&lt;=n;++i) mul[i]=sz[i]=v[i]=1;ll v; for(register int i=1;i&lt;n;++i) scanf("%lld%lld",&amp;x,&amp;y),link(x,y); for(register int i=1;i&lt;=m;++i)&#123; scanf("%s",op); if(op[0]=='+')&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;v); split(x,y);pushadd(y,v); &#125;else if(op[0]=='-')&#123; scanf("%lld%lld",&amp;x,&amp;y);cut(x,y); scanf("%lld%lld",&amp;x,&amp;y);link(x,y); &#125;else if(op[0]=='*')&#123; scanf("%lld%lld%lld",&amp;x,&amp;y,&amp;v); split(x,y);pushmul(y,v); &#125;else if(op[0]=='/')&#123; scanf("%lld%lld",&amp;x,&amp;y); split(x,y);printf("%lld\n",s[y]); &#125; &#125;return 0;&#125; 因为$51061 * 51061$是会越过$int$界限的，所以我开的$longlong$(当然也可以开无符号$int$)所以就没了。。。。。。]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法】 浅谈后缀数组(SA)&学习笔记]]></title>
    <url>%2F2019%2F02%2F16%2F%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84SA%2F</url>
    <content type="text"><![CDATA[在此输入你的密码以便阅读全文 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>算法</tag>
        <tag>学习笔记</tag>
        <tag>后缀数组.SA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法】 浅谈后缀自动机(SAM)&学习笔记]]></title>
    <url>%2F2019%2F02%2F16%2F%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BASAM%2F</url>
    <content type="text"><![CDATA[在此输入你的密码以便阅读全文 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>算法</tag>
        <tag>学习笔记</tag>
        <tag>后缀自动机.SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 「网络流24题」骑士共存问题 网络流 luoguP3355]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3355%2F</url>
    <content type="text"><![CDATA[最大流于最小割的转换。 假设现在棋盘上非障碍的位置全部摆满了骑士，我们拿走 $x$ 个的骑士可以使棋盘上的所有骑士互不冲突，求最小的 $x$. 可以跑匈牙利，也可以跑最大流算法，我选择跑 $Dinic$。 所有编号为奇数的点向源点 $s$ 连边，所有编号为偶数的点向汇点 $t$ ，连边，边权为 $1$.可以知道，同奇偶编号的点是无法互相攻击的，我们将在奇数和偶数之间可以攻击到彼此的点连一条边权无限大的边。 然后跑一遍 $Dinic$ 。 然后就没了。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int #define ID(i,j) ((i-1)*n+j)#define A printf("A")using namespace std;const int M=5e5+2;const short dx[8]=&#123;1,1,-1,-1,2,2,-2,-2&#125;;const short dy[8]=&#123;2,-2,2,-2,1,-1,1,-1&#125;;int n,m,s,t,sum,cnt,dep[M],head[M];short ok[202][202];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct Edge&#123;int nxt,to,val;&#125;G[M];inline void add(int x,int y,int v)&#123; G[cnt].to=y,G[cnt].val=v,G[cnt].nxt=head[x],head[x]=cnt++; G[cnt].to=x,G[cnt].val=0,G[cnt].nxt=head[y],head[y]=cnt++;&#125; inline bool bfs()&#123; memset(dep,-1,sizeof(dep)); queue&lt;int&gt;q;q.push(s);dep[s]=0; while(q.size())&#123; int x=q.front();q.pop(); for(int i=head[x];i!=-1;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]!=-1||!G[i].val)continue; else&#123;dep[y]=dep[x]+1,q.push(y);if(y==t)return true;&#125; &#125; &#125;return false;&#125; inline int dfs(int x,int flow)&#123; if(x==t||!flow)return flow; int used=0,rlow; for(int i=head[x];i!=-1;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]==dep[x]+1&amp;&amp;G[i].val)&#123; used+=(rlow=dfs(y,min(G[i].val,flow-used))); G[i].val-=rlow,G[i^1].val+=rlow; &#125; &#125;if(!used)dep[x]=-1; return used;&#125;inline int dinic()&#123; int maxlow=0; while(bfs())maxlow+=dfs(s,1e9); return maxlow; &#125;int main()&#123; memset(head,-1,sizeof(head)); IN(n),IN(m);s=0,t=n*n+1;sum=n*n-m; for(int x,y,i=1;i&lt;=m;++i)IN(x),IN(y),ok[x][y]=1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j)&#123; if(ok[i][j])continue; if((i+j)&amp;1)&#123; add(s,ID(i,j),1); for(int k=0;k&lt;8;++k)&#123; int nx=i+dx[k],ny=j+dy[k]; if(nx&lt;1||ny&lt;1||nx&gt;n||ny&gt;n||ok[nx][ny])continue; add(ID(i,j),ID(nx,ny),1e9); &#125; &#125;else add(ID(i,j),t,1); &#125;printf("%d\n",sum-dinic()); return 0; &#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SDOI2010]地精部落 线性DP luogu2467]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2467%2F</url>
    <content type="text"><![CDATA[好巧的一道思维题啊！ 思维量极大但是码量极小，真的好巧妙啊！(好了不废话进入主题) 在下文，因为为了方便代码的理解同步，所以应用了百度翻译： summit: 顶点 valley: 流域; 山谷，溪谷，峡谷，谷地，深谷; 这显然是道 $DP$ 题(又是废话) 可以知道题目要求的合法山脉其实是一个波动数列。 很容易的可以想到，设 $summit[i][j]$ 表示长度为 $j$ 的波动数列，此波动数列的第一个数为 $i$，且在题目中，$i$ 为山峰，这样状态下的方案总数。 同样的，我们同时设 $valley[i][j]$ 表示长度为 $j$ 的波动数列，此波动数列的第一个数为 $i$，且在题目中，$i$ 为山谷，这样状态下的方案总数。 那么答案是多少呢？由于数列中的每一个元素都可以做第一个元素，且都有可能做”山峰”或者是”山脉”，所以我们的答案应该是： \sum_{i=1}^{n} summit[i][n]+valley[i][n]现在来考虑怎么转移。 以 $summit$ 的转移为例子，假设现在需要转移 $summit[i][n]$. 那么这个波动数列的第二项肯定严格小于 $i$ ，而第三项又严格大于第二项，所以如果不看第一项的话，这个数列就变成了由第二项起头，并且第二项是”山谷”，设第二项的数为 $j$ ，那么其方案数可以用 $valley[j][n-1]$ 来表示。 由于第二项可以是数列中严格小于 $i$ 的任何数，因此我们可以列出转移式： summit[i][n] = \sum_{k=1}^{i-1} valley[k][n-1]因为题目说了是严格小于，所以可以这样子统计。 同样的，$valley[i][j]$ 也是这样转移： valley[i][n] = \sum_{k=i}^{n-1} summit[k][n-1]我们现在可以很轻易的打出正解了，但是想象一下，我们有那么大的空间吗？$2\cdot 4200\cdot 4200$？貌似很紧诶(虽然我是踩线没有 $MLE$) 那就使用滚动数组！还有，这样子统计，复杂度将会是 $O(n^3)$ ！怎么优化呢？ 前缀和就好了呀！然后……然后就没有然后了…… Code:12345678910111213141516171819202122232425262728#include&lt;bits/stdc++.h&gt;#define ll long long#define RI register int #define A printf("A")using namespace std;const int N=4205;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int summit[N][2],valley[N][2],ans,sum,p;int main()&#123; scanf("%d%d",&amp;sum,&amp;p); summit[2][0]=1,valley[1][0]=1,valley[2][0]=1; for(int n=3;n&lt;=sum;++n) for(int i=1;i&lt;=n;++i)&#123; int sum_val,sum_sum; sum_val=(summit[n-1][(n-1)&amp;1]-summit[i-1][(n-1)&amp;1]+p)%p; valley[i][n&amp;1]=(valley[i-1][n&amp;1]+sum_val)%p; sum_sum=valley[i-1][(n-1)&amp;1]%p; summit[i][n&amp;1]=(summit[i-1][n&amp;1]+sum_sum)%p; &#125; ans=(valley[sum][sum&amp;1]+summit[sum][sum&amp;1])%p; printf("%d\n",ans); return 0; &#125; 注意取模，不然会出锅!]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法】 浅谈FFT&学习笔记]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E7%AE%97%E6%B3%95%5DFFT%2F</url>
    <content type="text"><![CDATA[$QvQ$ 之前就对这个东西感兴趣，然后被一堆公式踩爆，这样高逼格的名字简直让人无法靠近。终于在 $1$ 月的时候，教练扯着我搞这个，没想到一天左右就会了。 我们进入正题。 0XFF—-FFT是啥? FFT是一种DFT的高效算法，称为快速傅立叶变换（fast Fourier transform），它根据离散傅氏变换的奇、偶、虚、实等 特性，对离散傅立叶变换的算法进行改进获得的。 —-百度百科 对于两个多项式 $F(x)$ 和 $G(x)$ ，要求你将他们乘起来。 那还不简单？直接暴力相乘啊： 设 $F(x)$ 的系数数列为 $C$。 $F(x) \times G(x) = C_nx^nG(x) + C_{n-1}x^{n-1}G(x) + C_{n-2}x^{n-2}G(x) \cdots C_2x^2G(x) + C_1x^1G(x) + C_0G(x)$ 这样下来需要做做 $n$ 次单项式乘多项式，每次的时间复杂度 $O(n)$ ，则总复杂度高达 $O(n^2)$ 基本上 $n$ 上了$4000$ 就会被卡吧……那怎么提速呢？ 这就需要我们伟大而又神奇的神器：$FFT$ (快速博立叶变换) 复杂度就只有 $O(nlogn)$ 了。 0X1F—-FFT的前置知识. 1.复数是什么? 我们把形如 $z=a+bi$（ $a,b$ 均为实数）的数称为复数，其中 $a$ 称为实部， $b$ 称为虚部， $i$ 称为虚数单位。当虚部等于零时，这个复数可以视为实数；当z的虚部不等于零时，实部等于零时，常称z为纯虚数。复数域是实数域的代数闭包，即任何复系数多项式在复数域中总有根。 复数是由意大利米兰学者卡当在十六世纪首次引入，经过达朗贝尔、棣莫弗、欧拉、高斯等人 的工作，此概念逐渐为数学家所接受。 —-百度百科 想必大家都知道实数是啥(不知道重读幼儿园吧……)，实数位于数轴上，就像下图这样： 我们稍微观察一下，$1$ 是怎么变到 $-1$ 的呢？ 在数轴上转了 180°。 如果，是 90° 的话，会发生什么呢？ 这个时候，会转到 $0$ 上面的位置，但是那里，好像没有数啊! 不对，其实是有的，只不过这个数不在实数轴上，而是在虚数轴上！ 虚数轴的单位是 $i$ ，我们可以这么表示： 嗯，对。这显然是一个平面坐标系。现在我们的数仅限于数轴上，如果是这个平面坐标系上的一个点怎么表达呢？ 对于下面的红色点： 这个点的坐标很容易的可以得到：$(2,i)$ ，也可以表示成 $2+i$ . 你没猜错！这个就叫复数！ 一个很重要的结论：复数相乘时，模长相乘，幅角相加！ 2.点值表示法是什么?我们用一个二维平面坐标系，在上面画 $N+1$ 个点，最终可以解出一个 $n$ 元的函数。证明略。 同样，我们可以用 $N-1$ 个点来表达一个多项式。 因为点值相乘的复杂度只有 $O(n)$ 显然优秀许多。 3.单位根是什么?*n次单位根(n为正整数)是n次幂为1的复数!*n次单位根(n为正整数)是n次幂为1的复数!*n次单位根(n为正整数)是n次幂为1的复数! 我们先在复平面上画个点，就像这样： Ta叫做单位圆。 圆边上的任意一点的模长都是 $1$. 只有单位圆上的点表示的复数才有可能成为$n$次单位根! 单位根的基本符号：$ω$ 一个单位圆，我们将它切成 $n$ 份，从 $(1,0)$ 开始旋转，每次旋转 $\frac{1}{n} \times 360$ 度，每次旋转后的点都记为 $ω_{n}^{k}$，特别的，$ω_{n}^{0}$ 和 $ω_{n}^{n}$ 都是 $(1,0)$ 点。 还有，当 $k&gt;=n$ 或者 $k&lt;0$ 时，$ω_{n}^{k}$ 也是合法的。 单位根的性质：$1.$ 对于任意的 $n$ , $ω_{n}^{0}$ 都为 $(1,0)$ 点。$2.$ $ω_{n}^{a} \times ω_{n}^{b} = ω_{n}^{a+b} $$3.$ $ω_{an}^{ak} = ω_{n}^{k} $$4.$ $(ω_{n}^{x})^y = (ω_{n}^{y})^x $$5.$ $ω_{n}^{k+n/2} = -ω_{n}^{k} $ if(n%2==0) 0X2F—-FFT的求解过程. 分治思想很重要！ 我们将多项式 $F(x)$ 按位置分成两块。 那么变成了(保证n是2的正整数次幂)： $F(x) = (C_0+C_2x^2+C_4x^4+ \cdots +C_{n-2}x^{n-2}) + (C_1x+C_3x^3+C_5x^5+ \cdots +C_{n-1}x^{n-1})$ 设两个多项式 $F1(x),F2(x)$。 $F1(x) = C_0+C_2x+C_4x^2+ \cdots +C_{n-2}x^{n/2-1}$$F2(x) = C_1x+C_3x+C_5x^2+ \cdots +C_{n-1}x^{n/2-1}$ 则我们可以得出： $F(x) = F1(x^2) + F2(x^2) \times x$ 设 $k&lt;n/2$ ， 将 $ω_{n}^{k}$ 带入多项式 $F(x)$. $F(ω_{n}^{k}) = F1((ω_{n}^{k})2) + F2((ω_{n}^{k})^2) \times ω_{n}^{k}$ 简化得： $F(ω_{n}^{k}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k}$ 再假设 $k&lt;n/2$ ，将 $ω_{n}^{k+n/2}$ 带入多项式 $F(x)$. $F(ω_{n}^{k+n/2}) = F1((ω_{n}^{k+n/2})2) + F2((ω_{n}^{k+n/2})^2) \times ω_{n}^{k}$$F(ω_{n}^{k+n/2}) = F1(ω_{n}^{2k+n}) + F2(ω_{n}^{2k+n}) \times ω_{n}^{k+n/2}$$F(ω_{n}^{k+n/2}) = F1(ω_{n}^{2k}) + F2(ω_{n}^{2k}) \times ω_{n}^{k+n/2}$$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k+n/2}$$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) - F2(ω_{n/2}^{k}) \times ω_{n}^{k}$ 比较一下两个式子： $F(ω_{n}^{k}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k}$ $F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) - F2(ω_{n/2}^{k}) \times ω_{n}^{k}$ 等式右边只有一个负号的差别! 这两个式子很关键！ 0X3F—-FFT的代码实现.对于复数的使用虽然 $C++ STL$ 里面有复数 $(complex)$ 但是太慢不建议大家使用。 你可以自己手打 $complex$ 手打的 $complex$ : 1234struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125; FFT: 123456789101112131415complex a[N],b[N];inline void FFT(complex *f,int len,short inv)&#123; if(!len)return;complex f1[len+1],f2[len+2]; for(int k=0;k&lt;len;++k)f1[k]=f[k&lt;&lt;1],f2[k]=f[k&lt;&lt;1|1];//按位置分 FFT(f1,len&gt;&gt;1,inv);FFT(f2,len&gt;&gt;1,inv);//递归处理子问题 complex tmp=complex(cos(PI/len),inv*sin(PI/len)),buf=complex(1,0); /*tmp:做一次平方后坐标的变换*/ /*buf:初始位置*/ for(RI k=0;k&lt;len;++k)&#123; complex t=buf*f2[k]; f[k]=f1[k]+t,f[k+len]=f1[k]-t;buf=buf*tmp;//按照公式还原 &#125;return;&#125;//注意，inv的作用是判断是 "系数转点值" 还是 "点值转系数" $Code$ 中提到的公式是这两项： $F(ω_{n}^{k}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k}$ $F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) - F2(ω_{n/2}^{k}) \times ω_{n}^{k}$ 对于文中的”坐标的变换”：我们依旧来看单位圆： 实际上，这个坐标的变换，直接用园中的三角形，运用三角函数就可以得出解了。 过程略. 最后我们得到的结果是：$ω_{n}^{1} = (cos(\frac{2π}{n}),sin(\frac{2π}{n}))$ 求出 $ω_{n}^{1}$ 后将它乘 $n$ 次，可以得到：$ {ω_{n}^{0},ω_{n}^{1},ω_{n}^{2},ω_{n}^{3},ω_{n}^{4},ω_{n}^{5} \cdots ω_{n}^{n-1}} $ 贴出最终的代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#define ll long long#define RI register int #define inf 0x3f3f3f3f#define PI 3.1415926535898using namespace std;const int N=6e4+2;template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;complex a[N],b[N];inline void FFT(complex *f,int len,short inv)&#123; if(!len)return;complex f1[len+1],f2[len+2]; for(int k=0;k&lt;len;++k)f1[k]=f[k&lt;&lt;1],f2[k]=f[k&lt;&lt;1|1]; FFT(f1,len&gt;&gt;1,inv);FFT(f2,len&gt;&gt;1,inv); complex tmp=complex(cos(PI/len),inv*sin(PI/len)),buf=complex(1,0); for(RI k=0;k&lt;len;++k)&#123; complex t=buf*f2[k]; f[k]=f1[k]+t,f[k+len]=f1[k]-t;buf=buf*tmp; &#125;return;&#125;int n,m;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(RI i=0;i&lt;=n;++i)scanf("%lf",&amp;a[i].x); for(RI i=0;i&lt;=m;++i)scanf("%lf",&amp;b[i].x); for(m+=n,n=1;n&lt;=m;n&lt;&lt;=1); FFT(a,n&gt;&gt;1,1);FFT(b,n&gt;&gt;1,1); for(int i=0;i&lt;n;++i)a[i]=a[i]*b[i]; FFT(a,n&gt;&gt;1,-1); for(int i=0;i&lt;=m;++i)printf("%.0f ",fabs(a[i].x)/n); putchar('\n'); return 0;&#125; 听说可以优化，那啥的我还不会，就到这吧. 过了一会儿…… “原来FFT小优化这么简单啊!” 0X4F—-FFT的一些小优化. 不用递归：12345递归版(数组下标，先偶后奇，从0开始)：0 1 2 3 4 5 6 7 --第1层0 2 4 6 |1 3 5 7 --第2层0 4 |2 6 |1 5 |3 7 --第3层0 |4 |2 |6 |1 |5 |3| 7 --第4层 发现了什么吗？ 最后的序列是原序列的二进制反转! 比如： $6 = (110)_2$ 反过来变成了 $(011)_2 = 3$ ！ 如何得到二进制翻转后的数列？递推即可! 12for(RI i=0;i&lt;n;++i)filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?n&gt;&gt;1:0); //filp[i] 即为 i 的二进制位翻转 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#define ll long long#define RI register int #define inf 0x3f3f3f3f#define PI 3.1415926535898using namespace std;const int N=3e6+2;int n,m,filp[N]; template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125; struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;complex a[N],b[N];inline void FFT(complex *f,short inv)&#123; for(RI i=0;i&lt;n;++i)if(i&lt;filp[i])&#123;complex tmp=f[i];f[i]=f[filp[i]];f[filp[i]]=tmp;&#125; /*换位置*/ for(RI p=2;p&lt;=n;p&lt;&lt;=1)&#123;//每局区间长度 RI len=p/2;//合并子区间的长度(所以是p/2) complex tmp=complex(cos(PI/len),inv*sin(PI/len)); for(RI k=0;k&lt;n;k+=p)&#123;//每局左端点 complex buf=complex(1,0); for(RI l=k;l&lt;k+len;++l)&#123;//遍历区间 complex t=buf*f[len+l]; f[len+l]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp;//赋值有微小的变化，注意顺序！ &#125; &#125; &#125;return;&#125;/*主程序不变*/int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(RI i=0;i&lt;=n;++i)scanf("%lf",&amp;a[i].x); for(RI i=0;i&lt;=m;++i)scanf("%lf",&amp;b[i].x); for(m+=n,n=1;n&lt;=m;n&lt;&lt;=1); for(RI i=0;i&lt;n;++i)filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?n&gt;&gt;1:0); FFT(a,1);FFT(b,1); for(RI i=0;i&lt;n;++i)a[i]=a[i]*b[i]; FFT(a,-1); for(RI i=0;i&lt;=m;++i)printf("%.0f ",fabs(a[i].x)/n); putchar('\n'); return 0;&#125; luogu上的题，递归的总是T最后一个点，改成非递归版的就A了？emmmmmmmmmmmmmm 所有优化全开：很作死，建议不要轻易尝试[滑稽] 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#pragma GCC optimize(2)#pragma GCC optimize(3)#pragma GCC optimize("Ofast")#pragma GCC optimize("inline")#pragma GCC optimize("-fgcse")#pragma GCC optimize("-fgcse-lm")#pragma GCC optimize("-fipa-sra")#pragma GCC optimize("-ftree-pre")#pragma GCC optimize("-ftree-vrp")#pragma GCC optimize("-fpeephole2")#pragma GCC optimize("-ffast-math")#pragma GCC optimize("-fsched-spec")#pragma GCC optimize("unroll-loops")#pragma GCC optimize("-falign-jumps")#pragma GCC optimize("-falign-loops")#pragma GCC optimize("-falign-labels")#pragma GCC optimize("-fdevirtualize")#pragma GCC optimize("-fcaller-saves")#pragma GCC optimize("-fcrossjumping")#pragma GCC optimize("-fthread-jumps")#pragma GCC optimize("-funroll-loops")#pragma GCC optimize("-fwhole-program")#pragma GCC optimize("-freorder-blocks")#pragma GCC optimize("-fschedule-insns")#pragma GCC optimize("inline-functions")#pragma GCC optimize("-ftree-tail-merge")#pragma GCC optimize("-fschedule-insns2")#pragma GCC optimize("-fstrict-aliasing")#pragma GCC optimize("-fstrict-overflow")#pragma GCC optimize("-falign-functions")#pragma GCC optimize("-fcse-skip-blocks")#pragma GCC optimize("-fcse-follow-jumps")#pragma GCC optimize("-fsched-interblock")#pragma GCC optimize("-fpartial-inlining")#pragma GCC optimize("no-stack-protector")#pragma GCC optimize("-freorder-functions")#pragma GCC optimize("-findirect-inlining")#pragma GCC optimize("-fhoist-adjacent-loads")#pragma GCC optimize("-frerun-cse-after-loop")#pragma GCC optimize("inline-small-functions")#pragma GCC optimize("-finline-small-functions")#pragma GCC optimize("-ftree-switch-conversion")#pragma GCC optimize("-foptimize-sibling-calls")#pragma GCC optimize("-fexpensive-optimizations")#pragma GCC optimize("-funsafe-loop-optimizations")#pragma GCC optimize("inline-functions-called-once")#pragma GCC optimize("-fdelete-null-pointer-checks") [滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽] NNT———学习笔记———关于FFT兄弟的那些事 0X5F—-NTT是啥? NTT(快速数论变换)一种快速数论变换算法，这种算法是以数论为基础，对样本点为的数论变换，按时间抽取的方法，得到一组等价的迭代方程，有效高速简化了方程中的计算公式·与直接计算相比，大大减少了运算次数。（见快速傅里叶变换）。在计算机实现多项式乘法中，我们所熟知的快速傅里叶变换(FFT)是基于n次单位根$ω_{n}$ $(omega)$ 的优秀性质实现的，而由于其计算时会使用正弦函数和余弦函数，在不断运算时无法避免地会产生精度误差。而多项式乘法有些时候会建立在模域中，在对一些特殊的大质数取模时，便可以考虑用原根g来代替$ω_{n}$，而这些特殊的大质数的原根恰好满足$ω_{n}$的某些性质，这使得多项式乘法在模域中也可以快速的分治合并。 ———百度百科 实际上，$NTT$ 跟 $FFT$ 没啥差别，优缺点各有。优点，就是省掉了大精度的操作，常数较小。 贴出我在luogu的P3803测评记录： O2—-FFT: 无优化—NTT: (速度不在一个服务器……) 当然，什么东西都是有缺点的，$NTT$ 的缺点就是多项式的系数只能是整数 ，而且普通的 $NTT$ 并不能做到任意模数，比较有限制(但是像XZY这样的奆佬随手可以水过任意模数NTT)，不过对于一般的像998244353这样的模数可以跑。 实现的基础———原根 原根是一种数学符号，设 $m$ 是正整数，$a$ 是整数，若 $a$ 模 $m$ 的阶等于 $φ(m)$ ，则称 $a$ 为模 $m$ 的一个原根。（其中 $φ(m)$ 表示 $m$ 的欧拉函数）———百度百科 为什么 $FFT$ 可以如此优秀？那是因为单位根有着神奇的性质。原根也是如此！ 合并的时候，$p=2len$ . 单位根：$cos\frac{2π}{P}+i sin\frac{2π}{P} = cos\frac{π}{len} + i sin\frac{π}{len}$ 原根：$g^{\frac{MOD-1}{P}} = g^{\frac{MOD-1}{2len}}$ $NTT$ 的学习是建立在 $FFT$ 上的，建议大家先理解 $FFT$ 再来看 $NTT$ 多说无益，贴板子吧…… 1234567891011121314151617181920212223#define MOD 998244353#define G 3inline int pow(int x,int y)//快速幂&#123;ll z=1ll*x,ans=1ll;for(;y;y/=2,z=z*z%MOD)if(y&amp;1)ans=ans*z%MOD;return (int)ans%MOD;&#125;inline void NTT(int *f,short inv)&#123;//NTT板子 int bit=0;while((1&lt;&lt;bit)&lt;n)bit++; for(RI i=0;i&lt;n;++i)&#123; filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(bit-1)); if(i&lt;filp[i])swap(f[i],f[filp[i]]); &#125; for(RI len=1;len&lt;n;len&lt;&lt;=1)&#123; RI tmp=pow(G,(MOD-1)/(len&lt;&lt;1)); if(inv==-1)tmp=pow(tmp,MOD-2);//是逆运算的话就套逆元 for(RI k=0;k&lt;n;k+=len*2)&#123; int buf=1; for(RI l=0;l&lt;len;++l,buf=1ll*buf*tmp%MOD)&#123; int t=f[l+k],d=1ll*buf*f[l+k+len]%MOD; f[l+k]=t+d,f[l+k+len]=t-d,//注意差别 f[l+k]=(f[l+k]%MOD+MOD)%MOD,f[l+k+len]=(f[l+k+len]%MOD+MOD)%MOD; &#125; &#125; &#125;&#125; 那一题的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#define ll long long#define RI register int #define inf 0x3f3f3f3f#define MOD 998244353#define G 3using namespace std;const int N=3e6+2;int n=1,len1,len2,filp[N],a[N],b[N];template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline int pow(int x,int y)&#123;ll z=1ll*x,ans=1ll;for(;y;y/=2,z=z*z%MOD)if(y&amp;1)ans=ans*z%MOD;return (int)ans%MOD;&#125;inline void NTT(int *f,short inv)&#123; int bit=0;while((1&lt;&lt;bit)&lt;n)bit++; for(RI i=0;i&lt;n;++i)&#123; filp[i]=(filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(bit-1)); if(i&lt;filp[i])swap(f[i],f[filp[i]]); &#125; for(RI len=1;len&lt;n;len&lt;&lt;=1)&#123; RI tmp=pow(G,(MOD-1)/(len&lt;&lt;1)); if(inv==-1)tmp=pow(tmp,MOD-2); for(RI k=0;k&lt;n;k+=len*2)&#123; int buf=1; for(RI l=0;l&lt;len;++l,buf=1ll*buf*tmp%MOD)&#123; int t=f[l+k],d=1ll*buf*f[l+k+len]%MOD; f[l+k]=t+d,f[l+k+len]=t-d, f[l+k]=(f[l+k]%MOD+MOD)%MOD,f[l+k+len]=(f[l+k+len]%MOD+MOD)%MOD; &#125; &#125; &#125;&#125;int main()&#123; IN(len1),IN(len2);len1++,len2++; while(n&lt;len1+len2)n&lt;&lt;=1; for(RI i=0;i&lt;=len1-1;++i)IN(a[i]); for(RI i=0;i&lt;=len2-1;++i)IN(b[i]); NTT(a,1);NTT(b,1); for(RI i=0;i&lt;n;++i)a[i]=1ll*a[i]*b[i]%MOD; NTT(a,-1); for(RI i=0;i&lt;=len1+len2-2;++i)printf("%d ",1ll*a[i]*pow(n,MOD-2)%MOD); putchar('\n'); return 0;&#125; 0X3f3f3f3f 附记来一张表吧： 模数 G的值 3 2 5 2 17 3 97 5 193 5 257 3 7681 17 12289 11 40961 3 65537 3 786433 10 5767169 3 7340033 3 23068673 3 104857601 3 167772161 3 469762049 3 998244353 3 1004535809 3 2013265921 31 2281701377 3 3221225473 5 75161927681 3 77309411329 7 最后，因为本人实在太弱了，太蒟了，所以实在写不出啥了。 $by Qiuly$]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>算法</tag>
        <tag>学习笔记</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 跳楼机 同余最短路 luogu3403]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3403%2F</url>
    <content type="text"><![CDATA[对于 $x,y,z$ 三个操作，我们先考虑 $y,z$ 两个操作的情况。 $f[i]$ 表示通过 $y,z$ 两个操作可以到达的 $mod x=i$ 最小的楼层。 可以得知：$f[i+y]=f[i]+y,f[i+z]=f[i]+z.$ 对于最短路，我们可以用一下形式建边： 1add(i,(i+y)%x,y); add(i,(i+z)%x,z); 没问题吧？%x是必须要做的操作，上文讲了。 那如何统计答案呢？ 首先，如果这个 “最小的楼层” 超出了 $H$ ，那么显然是不用统计的。否则，我们将这样统计：ans+=(H-f[i])/x+1; 为什么要这样写呢？想想，现在我们知道了这个最小楼层，我们可以到达这个最小楼层，对吧？如果现在以这个最小楼层为起点，我们可以选择在往上跳 $x$ 层，或者是 $2x$ 层….知道 $nx$ 层，$(n+1)x$就会超出 $H$，这时上面的式子就好理解多了。 Code:(可以不用 堆优$Dijstra$，没必要，用 $Spfa$ 就行了)12345678910111213141516171819202122232425262728293031323334#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register intusing namespace std;const int N=1e5+3;ll H,x,y,z,ans,f[N];int vis[N],head[N],cnt;struct Edge&#123;int nxt,to,val;&#125;G[N&lt;&lt;1]; inline void add(int x,int y,int v)&#123;G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt;&#125;inline void spfa()&#123; memset(f,127,sizeof(f)); queue&lt;int&gt; q;f[1]=1,vis[1]=1,q.push(1); while(q.size())&#123; int x=q.front();q.pop();vis[x]=0; for(RI i=head[x];i;i=G[i].nxt)&#123; if(f[G[i].to]&gt;f[x]+G[i].val)&#123; f[G[i].to]=f[x]+G[i].val; if(!vis[G[i].to])q.push(G[i].to),vis[G[i].to]=1; &#125; &#125; &#125;return;&#125;int main()&#123; scanf("%lld%lld%lld%lld",&amp;H,&amp;x,&amp;y,&amp;z); if(x==1||y==1||z==1)&#123;printf("%lld\n",H);return 0;&#125; for(int i=0;i&lt;x;++i)&#123;add(i,(i+y)%x,y);add(i,(i+z)%x,z);&#125; spfa(); for(int i=0;i&lt;x;++i) if(f[i]&lt;=H)ans+=(H-f[i])/x+1; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>同余最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 Qtree3 LCT luoguP4116]]></title>
    <url>%2F2019%2F02%2F15%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4116%2F</url>
    <content type="text"><![CDATA[第一个操作显然是不要考虑的…… 考虑第二个操作怎么办(实际上是超级easy的) 每个节点维护一个值sum，表示 $Splay$ 中它子树的和，每个点的权值为1(黑)0(白)。 对于这个操作，我们可以先 $split(1,x)$ ，现在x是这个 $Splay$ 的根。我们将要找的就是这颗 $Splay$ 中深度最小且为黑点的节点。 找Answer之前先特判一下s[x]是否大于0，如果为0，直接跳过即可。 不然进入循环，分三种情况： 1.如果s[ch[x][0]]大于0，说明有更优的答案(左子树深度小于x)，x=ch[x][0]。 2.否则，如果x本身就是黑点，那么x就是答案了，直接break。 3.不然，如果x到1的节点都是白色，那就只能去x的右子树找了，x=ch[x][1]。 退出循环时x即为答案，输出即可。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int#define A printf("A") using namespace std;const int N=1e5+2;int n,m,f[N],s[N],v[N],r[N],ch[N][2];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline int chk(int x)&#123;return ch[f[x]][1]==x;&#125;inline int isroot(int x)&#123;return ch[f[x]][0]==x||ch[f[x]][1]==x;&#125;inline void pushup(int x)&#123;s[x]=s[ch[x][0]]+s[ch[x][1]]+v[x];&#125;inline void pushdown(int x)&#123; if(!r[x])return;r[x]=0; r[ch[x][0]]^=1,r[ch[x][1]]^=1,swap(ch[x][0],ch[x][1]);&#125;inline void Splay_push(int x)&#123;if(isroot(x))Splay_push(f[x]);pushdown(x);&#125;inline void rotate(int x)&#123; int y=f[x],z=f[y],k=chk(x),v=ch[x][!k]; if(isroot(y))ch[z][chk(y)]=x;ch[x][!k]=y,ch[y][k]=v; if(v)f[v]=y;f[y]=x,f[x]=z;pushup(y);&#125;inline void Splay(int x)&#123; int y=x;Splay_push(x); while(isroot(x))&#123; if(isroot(y=f[x])) rotate((ch[y][0]==x)^(ch[f[y]][0]==y)?x:y); rotate(x); &#125;pushup(x);return;&#125;inline void Access(int x)&#123; for(register int y=0;x;x=f[y=x]) Splay(x),ch[x][1]=y,pushup(x); &#125;inline int findroot(int x)&#123; Access(x);Splay(x); while(ch[x][0])pushdown(x),x=ch[x][0]; Splay(x);return x;&#125;inline void makeroot(int x)&#123;Access(x);Splay(x);r[x]^=1;&#125;inline void split(int x,int y)&#123;makeroot(x);Access(y);Splay(y);&#125;inline void link(int x,int y)&#123;makeroot(x);if(findroot(x)!=findroot(y))f[x]=y;&#125;inline void cut(int x,int y)&#123;split(x,y);if(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][1])f[x]=ch[y][0]=0;&#125;int main()&#123; IN(n),IN(m); for(register int x,y,i=1;i&lt;n;++i) &#123;IN(x),IN(y);link(x,y);&#125; for(register int op,x,i=1;i&lt;=m;++i)&#123; IN(op),IN(x); if(op==0)&#123; makeroot(x);v[x]^=1;pushup(x); &#125;else if(op==1)&#123; split(1,x); if(!s[x])&#123;printf("-1\n");continue;&#125; while(s[x])&#123; pushdown(x); if(s[ch[x][0]])x=ch[x][0]; else if(v[x])break; else x=ch[x][1]; &#125;printf("%d\n",x); &#125; &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法】 浅谈树套树(线段树套平衡树)&学习笔记]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E7%AE%97%E6%B3%95%5D%E6%A0%91%E5%A5%97%E6%A0%91(%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91)%2F</url>
    <content type="text"><![CDATA[唉还是太弱了，毕竟只会初级的线段树套平衡树，码量巨大，超级不适合我这种天生码量恐惧症的人……那么我们开始正文 码量巨大，超级不适合我这种天生码量恐惧症的人…… 那么我们开始正文 0XFF 前言 *如果本文有不好的地方，请在下方评论区提出，Monlights感激不尽！ 0X1F 这个东西有啥用? 树套树———线段树套平衡树，可以用于解决待修改区间$K$大的问题，当然也可以用 树套树———树状数组套可持久化线段树，但是 线段树套平衡树 更加容易理解，更加便于新手理解，所以一般也作为树套树的入门类别。对于静态区间$K$大，我们可以用小巧精悍的主席树来做，也可以用强大无比的$Splay$来做。如果带修改，主席树就无能为力了，$Splay$也会变得很棘手难打。如果用普通线段树，每个节点都有着一课包含子节点的$Splay$，对于一个区间，直接调用线段树上的$Splay$就迎刃而解了。这时的$Splay$不是对全局，而是只对这个线段树节点代表的区间。 当然，树套树———线段树套平衡树并不是那么的好打，还是要动纸笔 and 动脑筋。缺点也是有的：因为要打$Splay$和线段树，模板的码量就有 $150$ 行！因为线段树本来就是易手滑的数据结构，稍不留神可能会让你调上好久！另外，因为$Splay$的常数极大，再这么通过线段树一罩，效率就下来了许多，常数巨大无比……总之 树套树 是一个很强的数据结构，但是如果题目不是强制在线的话，$CDQ$分治和整体二分会将树套树吊起来打！ ——————Qiuly 0X2F 这个东西怎么实现?首先，线段树套平衡树可以解决的一般问题如下： 查询 $k$ 在区间 $l,r$ 内的排名 查询区间 $l,r$ 内排名为 $k$ 的值 修改某一位置上的数值 查询 $k$ 在区间 $l,r$ 内的前驱 查询 $k$ 在区间 $l,r$ 内的后继 修改区间 $l,r$ 的值(集体加减)(不会) ………… 我们今天来讲讲前五个基础操作怎么实现(我只会前五个操作) 0X2f-1 查询 $k$ 在区间 $l,r$ 内的排名我们先将一个外面的线段树画下来： (叶子节点中的数字是序列各个元素的权值) 假设我们现在要查询区间 $3,8$ 中 $5$ 的排名。 查询一个数的排名，很显然，就是查询这个区间内有多少个数比 Ta 小，然后在+1(即自己)。 那怎么查询 $3,8$ 区间内有多少个数比他小呢？$3,8$ 不是整个线段树节点啊。 我们可以将它分成若干个线段树节点来处理。 Code:123456789101112131415161718inline int Splay_rank(int i,int k)&#123;//i表示以线段树的i号节点为根的Splay int x=rt[i],cal=0;//板子就不再赘述了 while(x)&#123; if(v[x]==k)return cal+((ch[x][0])?s[ch[x][0]]:0); else if(v[x]&lt;k)&#123; cal+=((ch[x][0])?s[ch[x][0]]:0)+c[x];x=ch[x][1]; &#125;else x=ch[x][0]; &#125;return cal;&#125;;inline void Seg_rank(int x,int l,int r,int L,int R,int Kth)&#123; if(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);return;&#125;//是整个线段树节点 if(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);//情况1：完全属于左子树 else if(L&gt;mid)Seg_rank(rc,mid+1,r,L,R,Kth);//情况2：完全属于右子树 else Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+1,r,mid+1,R,Kth);//情况3：横跨两子树区间&#125;;//Main 函数中case 1:&#123;IN(v);ans=0;Seg_rank(1,1,n,x,y,v);printf("%d\n",ans+1);&#125;break; 没看懂？我们来一步一步解读。 首先，进入线段树。 不是整个线段树节点，跳过第一条语句。发现 $3,8$ 横跨了两个子树，拆开询问区间，先询问左子树。这个时候往左子树递归，目标询问区间 $3,4$ ，右子树目标询问区间 $5,8$ 。分别处理。 进入左子树： 然后，发现询问区间完全属于右子树(当前区间：$1,4$ , 询问区间：$3~4$)，所以直接递归右子树： 这个时候，发现当前区间和询问区间合并了(当前区间：$3,4$ , 询问区间：$3~4$)，$Splay$ 询问小于 $5$ 的数的个数。 区间：$3,4$ 的 $Splay$ : 至于 $Splay$ 里面的操作不在模拟，因为 $(4,6)$ 中比 $5$ 小的只有一个数，所以 $ans+=1$ ，现在 $ans=1$ 左子树的任务完成，现在处理在右子树的询问区间 $(5,8)$ ，发现一下去 当前区间：$5,8$ , 询问区间：$5,8$ 合并了！直接跳进 $Splay$。 跑完 $Splay$ 后，发现有两个数小于 $5$ ($=$的不算)，$ans+=2$ ，现在 $ans=3$ 。 所以询问区间全部处理完了，退出函数。main函数输出：$ans(3)+1=4$ 即答案为 $4$ . 0X2f-2 查询区间 $l,r$ 内排名为 $k$ 的值这个我们需要用到二分来实现，我们不能讲询问区间拆成两个区间(像第一个操作那样)，因为合并不了答案啊。 所以我们依靠二分来实现。 Code: 1234567891011inline int Get_Kth(int x,int y,int k)&#123; int L=0,R=MX+1,M;//MX为序列权值的最大值，上图中MX为9. while(L&lt;R)&#123; M=(L+R)&gt;&gt;1; ans=0;Seg_rank(1,1,n,x,y,M);//询问M的排名 if(ans&lt;k)L=M+1;else R=M;//二分 &#125;return L-1;//return&#125;;//Main函数中case 2:&#123;IN(v);printf("%d\n",Get_Kth(x,y,v));&#125;break; 这个我就不贴图了，不好画图解释。理解不难，多读几遍代码就好了。 0X2f-3 修改某一位置上的数值这个很简单，跟普通的线段树单点修改几乎一模一样，只是要同时更新 $Splay$。 123456789inline void Seg_change(int x,int l,int r,int pos,int val)&#123; Splay_Delete(x,a[pos]);Splay_Insert(x,val);//更新 Splay if(l==r)&#123;a[pos]=val;return;&#125;;//修改序列的值 if(pos&lt;=mid)Seg_change(lc,l,mid,pos,val);//普通的线段树 else Seg_change(rc,mid+1,r,pos,val);&#125;;//Main函数中case 3:&#123;Seg_change(1,1,n,x,y);&#125;break; 0X2f-4 查询 $k$ 在区间 $l,r$ 内的前驱对于这个操作，我们依旧可以拆开来操作，合并的时候对于每个拆分后的询问区间的答案取个最大值，因为是求前驱，肯定是越接近 $k$ 越好。 123456789inline void Seg_pre(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));return;&#125; if(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_pre(rc,mid+1,r,L,R,val); else Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+1,r,mid+1,R,val);&#125;;//Main函数中case 4:&#123;IN(v);ans=-inf;Seg_pre(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; 0X2f-4 查询 $k$ 在区间 $l,r$ 内的后继 跟 $4$ 操作同理. 0X3F 一些题目 BZOJ3196: Tyvj 1730 二逼平衡树LUOGU P3380【模板】二逼平衡树(树套树) 这道题就是上面讲的那道啊! Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define RI register int #define A printf("A")#define C printf(" ")#define inf 2147483647#define PI 3.1415926535898using namespace std;const int N=4e6+2;//template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; //template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int n,m,a[N],ans,MX;/*----------------------------------Splay-------------------------------------*/int f[N],c[N],s[N],v[N],ch[N][2],rt[N],tot;inline int chk(int x)&#123;return ch[f[x]][1]==x;&#125;;inline void Splay_del_node(int x)&#123;f[x]=s[x]=c[x]=v[x]=ch[x][0]=ch[x][1]=0;&#125;;inline void Splay_pushup(int x)&#123;s[x]=(ch[x][0]?s[ch[x][0]]:0)+(ch[x][1]?s[ch[x][1]]:0)+c[x];&#125;;inline void Splay_rotate(int x)&#123; int y=f[x],z=f[y],k=chk(x),v=ch[x][k^1]; ch[y][k]=v;if(v)f[v]=y;f[x]=z;if(z)ch[z][chk(y)]=x; f[y]=x,ch[x][k^1]=y;Splay_pushup(y),Splay_pushup(x);&#125;;inline void Splay(int i,int x,int top=0)&#123; while(f[x]!=top)&#123; int y=f[x],z=f[y]; if(z!=top)Splay_rotate((ch[z][0]==y)==(ch[y][0]==x)?y:x); Splay_rotate(x); &#125;if(!top)rt[i]=x;&#125;;inline void Splay_Insert(int i,int x)&#123; int pos=rt[i]; if(!rt[i])&#123; rt[i]=pos=++tot;v[pos]=x;s[pos]=c[pos]=1; f[pos]=ch[pos][0]=ch[pos][1]=0;return; &#125;int last=0; while(1)&#123; if(v[pos]==x)&#123;++c[pos];Splay_pushup(last);break;&#125; last=pos;pos=ch[pos][x&gt;v[pos]]; if(!pos)&#123; pos=++tot;v[pos]=x;s[pos]=c[pos]=1; ch[last][x&gt;v[last]]=pos; f[pos]=last;ch[pos][0]=ch[pos][1]=0; Splay_pushup(last);break; &#125; &#125;Splay(i,pos);return;&#125;;inline int Splay_rank(int i,int k)&#123; int x=rt[i],cal=0; while(x)&#123; if(v[x]==k)return cal+((ch[x][0])?s[ch[x][0]]:0); else if(v[x]&lt;k)&#123; cal+=((ch[x][0])?s[ch[x][0]]:0)+c[x];x=ch[x][1]; &#125;else x=ch[x][0]; &#125;return cal;&#125;;inline int Splay_find(int i,int x)&#123; int pos=rt[i];while(x)&#123; if(v[pos]==x)&#123;Splay(i,pos);return pos;&#125;; pos=ch[pos][x&gt;v[pos]]; &#125;return 0;&#125;;inline int Splay_pre(int i)&#123;int x=ch[rt[i]][0];while(ch[x][1])x=ch[x][1];return x;&#125;inline int Splay_suc(int i)&#123;int x=ch[rt[i]][1];while(ch[x][0])x=ch[x][0];return x;&#125;inline int Splay_Get_pre(int i,int x)&#123; int pos=rt[i];while(pos)&#123; if(v[pos]&lt;x)&#123;if(ans&lt;v[pos])ans=v[pos];pos=ch[pos][1];&#125; else pos=ch[pos][0]; &#125;return ans;&#125;;inline int Splay_Get_suc(int i,int x)&#123; int pos=rt[i];while(pos)&#123; if(v[pos]&gt;x)&#123;if(ans&gt;v[pos])ans=v[pos];pos=ch[pos][0];&#125; else pos=ch[pos][1]; &#125;return ans;&#125;;inline void Splay_Delete(int i,int key)&#123; int x=Splay_find(i,key); if(c[x]&gt;1)&#123;--c[x];Splay_pushup(x);return;&#125; if(!ch[x][0]&amp;&amp;!ch[x][1])&#123;Splay_del_node(rt[i]);rt[i]=0;return;&#125; if(!ch[x][0])&#123;int y=ch[x][1];rt[i]=y;f[y]=0;return;&#125; if(!ch[x][1])&#123;int y=ch[x][0];rt[i]=y;f[y]=0;return;&#125; int p=Splay_pre(i);int lastrt=rt[i]; Splay(i,p,0);ch[rt[i]][1]=ch[lastrt][1];f[ch[lastrt][1]]=rt[i]; Splay_del_node(lastrt);Splay_pushup(rt[i]);&#125;;/*------------------------------Seg_Tree--------------------------------------*/ #define lc ((x)&lt;&lt;1)#define rc ((x)&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)inline void Seg_Insert(int x,int l,int r,int pos,int val)&#123; Splay_Insert(x,val);if(l==r)return; if(pos&lt;=mid)Seg_Insert(lc,l,mid,pos,val); else Seg_Insert(rc,mid+1,r,pos,val);&#125;;inline void Seg_rank(int x,int l,int r,int L,int R,int Kth)&#123; if(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);return;&#125; if(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth); else if(L&gt;mid)Seg_rank(rc,mid+1,r,L,R,Kth); else Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+1,r,mid+1,R,Kth);&#125;;inline void Seg_change(int x,int l,int r,int pos,int val)&#123; // printf("QvQ:: %d %d %d %d %d\n",x,l,r,pos,val); Splay_Delete(x,a[pos]);Splay_Insert(x,val); if(l==r)&#123;a[pos]=val;return;&#125;; if(pos&lt;=mid)Seg_change(lc,l,mid,pos,val); else Seg_change(rc,mid+1,r,pos,val);&#125;;inline void Seg_pre(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));return;&#125; if(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_pre(rc,mid+1,r,L,R,val); else Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+1,r,mid+1,R,val);&#125;;inline void Seg_suc(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=min(ans,Splay_Get_suc(x,val));return;&#125; if(R&lt;=mid)Seg_suc(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_suc(rc,mid+1,r,L,R,val); else Seg_suc(lc,l,mid,L,mid,val),Seg_suc(rc,mid+1,r,mid+1,R,val);&#125;;/*---------------------------------ask----------------------------------------*/inline int Get_Kth(int x,int y,int k)&#123; int L=0,R=MX+1,M; while(L&lt;R)&#123; M=(L+R)&gt;&gt;1; ans=0;Seg_rank(1,1,n,x,y,M); if(ans&lt;k)L=M+1;else R=M; &#125;return L-1;&#125;;/*-------------------------------main-------------------------------------*/int main(int argc,char const* argv[])&#123; IN(n),IN(m); for(RI i=1;i&lt;=n;++i)&#123;IN(a[i]);Seg_Insert(1,1,n,i,a[i]);MX=max(MX,a[i]);&#125; while(m--)&#123; int op,x,y,v;IN(op),IN(x),IN(y); switch(op)&#123; case 1:&#123;IN(v);ans=0;Seg_rank(1,1,n,x,y,v);printf("%d\n",ans+1);&#125;break; case 2:&#123;IN(v);printf("%d\n",Get_Kth(x,y,v));&#125;break; case 3:&#123;Seg_change(1,1,n,x,y);&#125;break; case 4:&#123;IN(v);ans=-inf;Seg_pre(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; case 5:&#123;IN(v);ans=inf;Seg_suc(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; &#125; &#125;return 0;&#125; 然后就是这道题，跟上面的那道题差不多，大家可以拿来练练手： BZOJ3196: 1901 Dynamic RankingsLUOGU P2617 Dynamic Rankings 不贴代码了。 一道不错的细节题： LUOGU P3332 [ZJOI2013]K大数查询 $———by Qiuly$]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>算法</tag>
        <tag>学习笔记</tag>
        <tag>树套树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [ZJOI2014]力 FFT bzoj3527/luogu3338]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3338%2F</url>
    <content type="text"><![CDATA[这个式子有点……乱。 嗯，我们来推一推式子……推一推式子。 原式推一推，那么就是： E_i = \frac{F_i}{q_i} = \sum_{j=1}^{i} \frac{q_j}{(i-j)^2} - \sum_{j=i+1}^{n} \frac{q_j}{(i-j)^2}​ 令 $x = \frac{1}{y^2}​$ ， 那么： E_i = \frac{F_i}{q_i} = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} q_j x_{j-i}​还可以写成： E_i = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} q_j x_{j-i}​令 $S_i = q_{n-i+1} ​$，那么式子变成了： E_i = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} p_{n-j+1} x_{j-i}这个时候我们可以发现，$\sum_{j=1}^{i} q_j x_{i-j}​$ 和 $\sum_{j=i+1}^{n} p_{n-j} x_{j-i}​$ 都是卷积，那么我们可以跑两遍 $FFT​$，分别求出上面的两个式子，记录为 $A,B​$ 。最后的答案就是 $A[i].x - B[n+1-i].x​$ 了。 FFT不用做太多修改，套模板跑就行(本来就是模板)。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;cstdio&gt; #include&lt;cmath&gt;#include&lt;string&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int #define PI 3.1415926535898using namespace std;const int N=4e5+2;int n,limit=1,filp[N];template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct complex&#123;complex(double a=0,double b=0)&#123;x=a,y=b;&#125;double x,y;&#125;;complex operator + (complex a,complex b)&#123;return complex(a.x+b.x,a.y+b.y);&#125;;complex operator - (complex a,complex b)&#123;return complex(a.x-b.x,a.y-b.y);&#125;;complex operator * (complex a,complex b)&#123;return complex(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;;complex A[N],B[N],C[N];inline void FFT(complex *f,short inv)&#123; for(RI i=0;i&lt;limit;++i)if(i&lt;filp[i])&#123;complex t=f[i];f[i]=f[filp[i]],f[filp[i]]=t;&#125; for(RI p=2;p&lt;=limit;p&lt;&lt;=1)&#123; RI len=p/2; complex tmp=complex(cos(PI/len),inv*sin(PI/len)); for(RI k=0;k&lt;limit;k+=p)&#123; complex buf=complex(1,0); for(RI l=k;l&lt;k+len;++l)&#123; complex t=buf*f[l+len]; f[l+len]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp; &#125; &#125; &#125;&#125;int main()&#123; scanf("%d",&amp;n);int cnt=0; for(RI i=1;i&lt;=n;++i)&#123;scanf("%lf",&amp;A[i].x),B[n+1-i].x=A[i].x;&#125; for(RI i=1;i&lt;=n;++i)C[i].x=(1.0/double(i))/double(i); while(limit&lt;=(n&lt;&lt;1))limit&lt;&lt;=1,cnt++; for(RI i=0;i&lt;limit;++i)filp[i]=((filp[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(cnt-1))); FFT(A,1);FFT(B,1);FFT(C,1); for(RI i=0;i&lt;=limit;++i)A[i]=A[i]*C[i],B[i]=B[i]*C[i]; FFT(A,-1);FFT(B,-1); for(RI i=0;i&lt;=limit;++i)A[i].x/=limit,B[i].x/=limit; for(RI i=1;i&lt;=n;++i)printf("%.3lf\n",-B[n+1-i].x+A[i].x); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [ICPC-Beijing 2006]狼抓兔子 网络流 bzoj1001/洛谷P4001]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4001%2F</url>
    <content type="text"><![CDATA[网络流水题。 既然要抓到所有的兔子，又要用最少的狼，很容易想到，这是在让我们求最小割。 那么如何求最小割呢？ 有一条定理是这样的：最大流=最小割 所以我们只要用 $Dinic$ 跑出最大流，然后直接输出就行了。 不过，为什么最大流=最小割呢？ 网上的一名 $Dalao$ 给出了答案： $Q:$ 如何凭直觉解释最大流等于最小割? $A:$ $1.$ 最大流不可能大于最小割, 因为最大流所有的水流都一定经过最小割那些割边, 流过的水流怎么可能比水管容量还大呢? $2.$ 最大流不可能小于最小割, 如果小, 那么说明水管容量没有物尽其用, 可以继续加大水流. $Q:$ 如何严谨证明最大流等于最小割? $A:$ $1.$ 证明任意的 $s-t$ 流量小于 $s-t$ 割容量, 证明方法: 根据定义即可; $2.$ 根据 $Ford-Fulkerson$ 算法求出的流来选出一个 $s-t$ 割, $S$ 为残余网络中 $s$ 可达的顶点集合, 这样就可以证出算法求出的流$=$这个割的容量, 再根据已经证明的 $1$ 来得出算法求出的流是最大流, 对应的割是最小割. $Dalao——Jecvay Notes$ 现在要注意的一点就是，直接跑朴素的 $Dinic$ 是会 T 的，这个时候或许会要一些优化，比如说用当前弧优化，或者可以跑$ISAP$，如果还过不了，吸氧算了[滑稽]。 Code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;bits/stdc++.h&gt;#define RI register int#define ll long longconst int N=1e6+2;const int inf=1e9+9;struct Edge&#123; int nxt,to,val;&#125;G[N*6];int n,m,s,t,cnt=1,dep[N],head[N];#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y)) template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;inline int id(int x,int y)&#123;return (x-1)*m+y;&#125;inline void add(int x,int y,int v)&#123; G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt; G[++cnt].nxt=head[y],G[cnt].to=x,G[cnt].val=v,head[y]=cnt;&#125;inline bool bfs()&#123; std::memset(dep,0,sizeof(dep)); std::queue&lt;int&gt;q;q.push(s),dep[s]=1; while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=head[x];i;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]||!G[i].val)continue; dep[y]=dep[x]+1;q.push(y); if(y==t)return true; &#125; &#125;return false;&#125;inline int dfs(int x,int flow)&#123; if(x==t)return flow; int used=0; for(int i=head[x];i&amp;&amp;used&lt;flow;i=G[i].nxt)&#123; int y=G[i].to; if(dep[y]!=dep[x]+1||!G[i].val)continue; else&#123; int rlow=dfs(y,min(G[i].val,flow-used)); if(!rlow)&#123;dep[y]=-1;continue;&#125; G[i].val-=rlow,G[i^1].val+=rlow,used+=rlow; &#125; &#125;return used;&#125;inline int Dinic()&#123; int ans=0; while(bfs())ans+=dfs(s,inf); return ans;&#125;int main()&#123; int v; IN(n),IN(m);s=1,t=n*m; for(int i=1;i&lt;=n;++i) for(int j=2;j&lt;=m;++j) IN(v),add(id(i,j-1),id(i,j),v); for(int i=2;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) IN(v),add(id(i-1,j),id(i,j),v); for(int i=2;i&lt;=n;++i) for(int j=2;j&lt;=m;++j) IN(v),add(id(i-1,j-1),id(i,j),v); printf("%d\n",Dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SDOI2016]生成魔咒 后缀自动机.SAM bzoj4516/luogu4070]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4070%2F</url>
    <content type="text"><![CDATA[一眼题目。 题目简述如下： 任务一：支持询问当前本质不同的子串的个数 任务二：支持插入 很显然后缀自动机可以解决胜任，正好今天刚学了后缀自动机，那么就将它定为练手题了。 插入是很简单的，至于询问本质不同的字串的个数，我们知道新插入一个节点 $now$ 对答案的贡献是: $ |max(now)| - |min(now)| + 1$ 。我们建后缀自动机的时候只保存了 $max(now)$ ，难道还要保存一个 $min(now)$ 吗？其实不需要，根据其性质可以得到：$|max(now)| - |max(fa[now])|$，直接计算即可。 注意数据范围较大，记得开 $longlong​$ ！ *注：文中的 $|S|​$ 指的是字符串 $S​$ 的长度。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;map&gt;#include&lt;set&gt;#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=2e5+2;const int inf=1e9+9;template&lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;struct SAM&#123; ll ans; std::map&lt;int,int&gt; ch[N]; int last,cnt,len[N],fa[N]; inline void Insert(int c)&#123; int p=last,now=last=++cnt; len[now]=len[p]+1; while(p&amp;&amp;!ch[p][c])ch[p][c]=now,p=fa[p]; if(!p)fa[now]=1; else&#123; int q=ch[p][c]; if(len[q]==len[p]+1)fa[now]=q; else&#123; int copy=++cnt; len[copy]=len[p]+1,ch[copy]=ch[q]; fa[copy]=fa[q],fa[q]=fa[now]=copy; while(p&amp;&amp;ch[p][c]==q)ch[p][c]=copy,p=fa[p]; &#125; &#125; ans+=len[now]-len[fa[now]]; return; &#125;&#125;sam;int main()&#123; int n;IN(n); sam.last=sam.cnt=1; for(int i=1;i&lt;=n;++i)&#123; int c;IN(c); sam.Insert(c); printf("%lld\n",sam.ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>后缀自动机.SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [JSOI2008]球形空间产生器 高斯消元 洛谷P4035]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP4035%2F</url>
    <content type="text"><![CDATA[“你要求出这个n维球体的球心坐标“，这使我想到的解方程…… 先假设n=2，这是一个二维平面。设圆心的坐标为$(x,y)$，有两个坐标$(a_1,b_1)$和$(a_2,b_2)$，显然两个坐标的关系为： (x-a_1)^2+(y-b_1)^2=(x-a_2)^2+(y-b_2)^2考虑如何化简上面的式子。 (x-a_1)^2-(x-a_2)^2+(y-b_1)^2-(y-b_2)^2=0根据完全平方公式： (x-a_1)^2=x^2+a_1^2-2 \times x \times a_1(x-a_1)^2-(x-a_2)^2=x^2+a_1^2-2 \times x \times a_1-x^2-a_2^2+2 \times x \times a_2(x-a_1)^2-(x-a_2)^2=a_1^2-2 \times x \times a_1-a_2^2+2 \times x \times a_2(x-a_1)^2-(x-a_2)^2=a_1^2-a_2^2-2(a_1-a_2)x同理 (y-b_1)^2-(y-b_2)^2=b_1^2-b_2^2-2(b_1-b_2)y整理后： a_1^2-a_2^2-2(a_1-a_2)x+b_1^2-b_2^2-2(b_1-b_2)y=0移项后： a_1^2-a_2^2+b_1^2-b_2^2=2(a_1-a_2)x+2(b_1-b_2)y这个式子最终为： 2(a_1-a_2)x+2(b_1-b_2)y=a_1^2-a_2^2+b_1^2-b_2^2由于 $a_1^2-a_2^2+b_1^2-b_2^2​$ 是已知的，我们将 $a_1^2-a_2^2+b_1^2-b_2^2​$ 设为$Sum​$. $2(a_1-a_2)​$ 和 $2(b_1-b_2)​$都是已知的项，分别设为 $a​$ 和 $b​$ . 所以它又变成了我们亲切的小学奥数之解方程：$ax+by=Sum$ 对于二维的答案是 $(x,y)​$ ，$x​$ 和 $y​$ 都可以通过高斯消元的模板来解出。 对于更高的维数，跟二维同理，只不过”元”多了几个而已。 所以就这样愉快的A掉了这道大水题。Code:1234567891011121314151617181920212223242526272829303132333435#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register intusing namespace std;const int N=25;const double eps=1e-8;double v[N][N],f[N][N],s[N],del;int n;inline bool Gauss()&#123; for(RI k=1,i=1;i&lt;=n;++i,k=i)&#123; for(RI j=i+1;j&lt;=n;++j)if(abs(f[j][i])&gt;abs(f[k][i]))k=j; if(fabs(del=f[k][i])&lt;eps)return false;//不判就出BUG，不知道为啥 swap(f[i],f[k]);swap(s[i],s[k]); for(RI j=i;j&lt;=n;++j)f[i][j]/=del;s[i]/=del; for(k=1;k&lt;=n;++k)if(k!=i)&#123; del=f[k][i]; for(RI j=i;j&lt;=n;++j)f[k][j]-=f[i][j]*del; s[k]-=s[i]*del; &#125; &#125;return true;&#125;int main()&#123; scanf("%d",&amp;n); for(RI i=1;i&lt;=n+1;++i)for(RI j=1;j&lt;=n;++j)scanf("%lf",&amp;v[i][j]); for(RI i=1;i&lt;=n;++i) for(RI j=1;j&lt;=n;++j)&#123; s[i]+=(v[i][j]*v[i][j]-v[i+1][j]*v[i+1][j]);//求上面的 "Sum" f[i][j]=2*(v[i][j]-v[i+1][j]);//求上面的 "a"、"b"等 &#125; Gauss(); for(RI i=1;i&lt;n;++i)printf("%.3lf ",s[i]);//注意输出格式! printf("%.3lf",s[n]); return 0;&#125; 这题啥都好，就是输出格式有点制杖……请各位小心……]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [USACO18DEC]Balance Beam 期望+凸包 洛谷P5155]]></title>
    <url>%2F2019%2F02%2F14%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP5155%2F</url>
    <content type="text"><![CDATA[被概率冲昏的头脑~~~ 我们先将样例在图上画下来： 会发现，最大收益是： ) 看出什么了吗？ 这不就是凸包吗？ 跑一遍凸包就好了呀，这些点中，如果i号点是凸包上的点，那么它的ans就是自己(第二个点)，不然的话，从上图来看，i的ans肯定和他相邻的两个是凸包边界的点有关(0节点和2节点)，那么怎么求这个ans呢？(第x号点为横坐标为x的点) 实际上我也不知道就是个期望公式啊! l[i]记录i号点往左走第一个为凸包边界的点(如果i为1号，那么l[i]为0，特殊的，如果i为2号，那么l[i]就是本身)，r[i]同理。当l[x]==r[x]时，x时边界。 就是这个方程： (f[l[i]])*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);基础的期望方程，在此不再赘述(实际上是不会证) 关于凸包，在这贴一波yyb大神的博客：传送门戳我QwQ(顺便膜一波yyb大神%%%) 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int#define F 100000using namespace std;const int NS=1e5+5;ll f[NS],l[NS],r[NS],hep[NS];//f如题,l[i]/r[i]如上文,hep为凸包 template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int main()&#123; int n,top=0;IN(n);hep[++top]=0;//注意先加入0! for(int i=1;i&lt;=n;++i)IN(f[i]); for(int i=1;i&lt;=n+1;++i)&#123;//凸包 while(top&gt;=2)&#123; int a=hep[top],b=hep[top-1]; if(((f[a]-f[b])*(i-a))&lt;((f[i]-f[a])*(a-b)))--top; else break; &#125;hep[++top]=i; &#125; for(int i=1;i&lt;top;++i)&#123; //中间的节点的l,r值都为hep[i]/hep[i+1] for(int j=hep[i]+1;j&lt;hep[i+1];++j)&#123; l[j]=hep[i],r[j]=hep[i+1]; &#125;l[hep[i]]=hep[i],r[hep[i]]=hep[i]; &#125; for(int i=1;i&lt;=n;++i)&#123; ll ans=0;//记得LL! if(l[i]==r[i])ans=f[i]*F;//为边界，直接跳下最优 else ans=(F*(f[l[i]]*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);//否则用方程算 printf("%lld\n",ans); &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>概率</tag>
        <tag>期望</tag>
        <tag>凸包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [SDOI2008]Cave洞穴勘测 LCT bzoj2049/洛谷P2147]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2147%2F</url>
    <content type="text"><![CDATA[Link-Cut-Tree的模板题啊……(听说还可以用其他的方法做，不管了，直接上LCT) 没有要求维护点权，只需要维护点的连通性即可。 就是朴素的LCT，居然还不要pushup。 感觉有些不适应啊…….不得不说LCT是个神器。 简单分析一下。 对于每种命令: 如果是Connect x y (链接 x y):直接 link(x,y)即可。 如果是Destroy x y (切断 x y):直接 cut(x,y)即可。 如果是Query x y (询问 x y 的连通性):判断findroot(x)和findroot(y)是否一致，一致输出Yes，否则输出No。 然后就A了。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define RI register int#define A printf("A")#define C printf(" ") using namespace std;const int N=2e5+2;template &lt;typename Tp&gt; inline void IN(Tp &amp;x)&#123; int f=1;x=0;char ch=getchar(); while(ch&lt;'0'||ch&gt;'9')if(ch=='-')f=-1,ch=getchar(); while(ch&gt;='0'&amp;&amp;ch&lt;='9')x=x*10+ch-'0',ch=getchar();x*=f;&#125;int n,m,f[N],r[N],hep[N],ch[N][2];inline int chk(int x)&#123;return ch[f[x]][1]==x;&#125;inline int get(int x)&#123;return ch[f[x]][0]==x||ch[f[x]][1]==x;&#125;inline void filp(int x)&#123;swap(ch[x][0],ch[x][1]);r[x]^=1;&#125; inline void pushdown(int x)&#123; if(!r[x])return;r[x]=0; if(ch[x][0])filp(ch[x][0]); if(ch[x][1])filp(ch[x][1]);&#125;inline void rotate(int x)&#123; int y=f[x],z=f[y],k=chk(x),&amp;v=ch[x][!k]; if(get(y))ch[z][chk(y)]=x;v=y,ch[y][k]=v; if(v)f[v]=y;f[y]=x,f[x]=z;return;&#125;inline void Splay(int x)&#123; int y=x,top=0;hep[++top]=y; while(get(y))hep[++top]=y=f[y]; while(top)pushdown(hep[top--]); while(get(x))&#123; y=f[x],top=f[y]; if(get(y))rotate((ch[y][0]==x)^(ch[top][0]==y)?x:y); rotate(x); &#125;return;&#125; inline void Access(int x)&#123; for(register int y=0;x;x=f[y=x]) Splay(x),ch[x][1]=y;&#125;inline void makeroot(int x)&#123; Access(x);Splay(x);filp(x);&#125;inline int findroot(int x)&#123; Access(x);Splay(x); while(ch[x][0])pushdown(x),x=ch[x][0]; return x;&#125;inline void split(int x,int y)&#123; makeroot(x);Access(y);Splay(y);&#125; inline void link(int x,int y)&#123; makeroot(x);if(findroot(y)!=x)f[x]=y;&#125;inline void cut(int x,int y)&#123; makeroot(x); if(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][1])&#123; f[x]=ch[y][0]=0; &#125;return;&#125;char op[10];int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(register int x,y,i=1;i&lt;=m;++i)&#123; scanf("%s%d%d",op,&amp;x,&amp;y); if(op[0]=='C')link(x,y); else if(op[0]=='D')cut(x,y); else if(op[0]=='Q')&#123; if(findroot(x)==findroot(y))printf("Yes\n"); else printf("No\n"); &#125; &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2010]超级钢琴 RMQ+优先队列 bzoj2006/洛谷P2048]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2048%2F</url>
    <content type="text"><![CDATA[这一道题显然是一道 $RMQ$ 的题目，用一个三元素组$（o，l，r）​$表示：左端点为o，右端点在l到r的区间内的最大子段，元素组用堆维护。 对于每个和弦的值，用前缀和在$O(1)$的时间复杂度求出。 $ans$累加这个三元组的贡献。由于$t$已经被选中，对于这个$o$，$t$已经不能重复选中，但最优解还可能存在于 $t$左右的两端区间中，所以提取出$(o, l, r)$之后，为了避免重复且不丧失其他较优解，我们仍然要把$(o, l, t - 1),(o, t + 1, r)$扔回堆里面去。还要避免重复或错误，即$l = t$或$r = t$的情况要进行特判。 对于$t$的位置，我们直接用ST表预处理出即可。 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define Macth#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=500005,Log=20;ll f[N][Log],sum[N];template &lt;typename Tp&gt; inline void read(Tp &amp;x)&#123; x=0;char ch=getchar(); while(ch&lt;'0'||ch&gt;'9')ch=getchar(); while(ch&gt;='0'&amp;&amp;ch&lt;='9')x=(x&lt;&lt;1)+(x&lt;&lt;3)+ch-'0',ch=getchar();&#125;namespace RMQ&#123;//ST表求区间最优位置(貌似在本题中是这样) inline void make(int n)&#123; for(register int i=1;i&lt;=n;++i)f[i][0]=i; for(register int j=1;(1&lt;&lt;j)&lt;=n;++j) for(register int i=1;i+(1&lt;&lt;j)-1&lt;=n;++i)&#123; int x=f[i][j-1],y=f[i+(1&lt;&lt;(j-1))][j-1]; f[i][j]=sum[x]&gt;sum[y]?x:y;//取更优的位置 &#125;return; &#125; inline int query(int l,int r)&#123; int k=log2(r-l+1); int x=f[l][k],y=f[r-(1&lt;&lt;k)+1][k]; return sum[x]&gt;sum[y]?x:y; &#125;&#125;int n,k,L,R;struct Queue&#123; int l,r,o,t;//t就是最优的位置 Queue()&#123;&#125; Queue(int o,int l,int r):o(o),l(l),r(r),t(RMQ::query(l,r))&#123;&#125;//t:取个l至r区间的最优值 bool operator &lt; (Queue a)const&#123;//重载运算符 return sum[a.t]-sum[a.o-1]&lt;sum[t]-sum[o-1]; &#125;&#125;A;std::priority_queue&lt;Queue&gt; q;int main()&#123; scanf("%d%d%d%d",&amp;n,&amp;k,&amp;L,&amp;R); for(register int i=1;i&lt;=n;++i)&#123; scanf("%lld",&amp;sum[i]);sum[i]+=sum[i-1]; &#125;RMQ::make(n);ll ans=0; for(register int i=1;i&lt;=n;++i)&#123; if(i+L-1&lt;=n)q.push(Queue(i,i+L-1,min(i+R-1,n))); &#125;while(k--)&#123; A=q.top();q.pop(); ans+=sum[A.t]-sum[A.o-1];//更新ans if(A.l!=A.t)q.push(Queue(A.o,A.l,A.t-1)); if(A.r!=A.t)q.push(Queue(A.o,A.t+1,A.r)); &#125;printf("%lld\n",ans); return 0;&#125; 差不多就是这样了……]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>RMQ</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 小清新人渣的本愿 莫队+bitset luoguP3674]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP3674%2F</url>
    <content type="text"><![CDATA[莫队 $+$ $bitset$. 我们可以用 $bitset$ 维护当前 $l,r$ 区间数的出现的状态，莫对依旧按照套路搞，然后来考虑怎么回答每一个询问。 对于操做 $1$ ，要求回答我们从当前区间能否找出 $a,b$ 使得其差为 $x$。 很显然，$a-b=x$ 等价于 $a=b+x$。 我们维护的是数的出现的状态，于是可以将当前的 $bitset$ 左移 $x$ 位，也就是让所有数都加上 $x$，然后与原 $bitset$ 做与运算，看看是否有一个 $a$ 出现，如果与的结果非 $0$ ，那么显然是有的，否则没有。 第二个操作有些不好办，我们再开一个 $bitset$ 集，对于一个出现过的数 $i$，在第二个 $bitset$ 集中记为 $N-i$。然后再来看操作要求，这次是让 $a+b=x$。 那么可以得到：a=x-b 于是设一个数 $z$ ，表示 $N-a$ 。 然后：z=N-x+b 移项得：z-b=N-x 于是我们将第二个 $bitset$ 右移 $N-x$ 为，显然第二个 $bitset$ 集上的第 $i$ 位代表的就是第一个 $bitset$ 上的 $x-i$ 位。 然后，将两个 $bitset$ 与一下，看看是否同时存在 $a$ 和 $x-a$ 即可。 最后对于第三个操作，貌似bitset也不太好搞，那么直接暴力枚举因子就好了，复杂度 $O(\sqrt{n})$，放心不会炸。具体怎么暴力枚举呢？在 $1 - \sqrt{x}$ 的范围类枚举一个 $j$ ，如果 $x$ % $j==0$ 并且同时存在 $j$ 和 $x/j$，显然就有答案了。 Code:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;cmath&gt;#include&lt;bitset&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long long#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))const int N=1e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;std::bitset&lt;N&gt; now1,now2; int n,m,l,r,s,a[N],c[N],Be[N],ans[N];struct MO&#123;int opt,l,r,x,id;&#125;q[N];inline bool cmp(MO a,MO b)&#123;return Be[a.l]==Be[b.l]?a.r&lt;b.r:a.l&lt;b.l;&#125; inline void input()&#123; IN(n),IN(m);s=sqrt(n); for(int i=1;i&lt;=n;++i)IN(a[i]),Be[i]=(i-1)/s+1; for(int i=1;i&lt;=m;++i) IN(q[i].opt),IN(q[i].l),IN(q[i].r),IN(q[i].x),q[i].id=i; std::sort(q+1,q+1+m,cmp); l=1,r=0;now1.reset(),now2.reset();&#125;inline void Add(int x)&#123;if(c[x]++==0)now1[x]=1,now2[N-x]=1;&#125;inline void Del(int x)&#123;if(--c[x]==0)now1[x]=0,now2[N-x]=0;&#125;int main()&#123; input(); for(int i=1;i&lt;=m;++i)&#123; while(l&lt;q[i].l)Del(a[l++]); while(l&gt;q[i].l)Add(a[--l]); while(r&gt;q[i].r)Del(a[r--]); while(r&lt;q[i].r)Add(a[++r]); if(q[i].opt==1)&#123; if((now1&amp;(now1&lt;&lt;q[i].x)).any())ans[q[i].id]=true; &#125;else if(q[i].opt==2)&#123; if((now1&amp;(now2&gt;&gt;(N-q[i].x))).any())ans[q[i].id]=true; &#125;else if(q[i].opt==3)&#123; for(int j=1;j*j&lt;=q[i].x;++j) if(!(q[i].x%j)&amp;&amp;now1[j]&amp;&amp;now1[q[i].x/j]) &#123;ans[q[i].id]=true;break;&#125; &#125; &#125; for(int i=1;i&lt;=m;++i) if(ans[i])printf("hana\n"); else printf("bi\n"); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫队</tag>
        <tag>bitset</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【算法】 点分治总结&学习笔记]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E7%AE%97%E6%B3%95%5D%E7%82%B9%E5%88%86%E6%B2%BB%2F</url>
    <content type="text"><![CDATA[其实很短的啦，感觉……感觉淀粉质这种东西好像没什么可以总结的……只会有一些简单的板子题而已……(实际上是砍不动难的题目)(淀粉质吗？味道真是不错呢嘿嘿嘿) 0XFF—-点分治是啥？ 点分治，是处理树上路径的一个极好的工具。 一般如果需要大规模处理树上路径，点分治是一个不错的选择。 ———一位网上的Dalao 现在有一个问题，给你一颗树，树上的每一条边都有权值，现在给一个 $k$ ，要求你求出树上所有路径中路径权值小于 $k$ 的路径总数，你怎么办？ 暴力？$O(N^3)$ 的复杂度分分钟让你 T 飞！ 当然，你可以用分治来求，复杂度仅有 $O(nlogn)$。 对于树上做分治，不仅有基于点的分治方式，还有基于边的以及基于链的，但是这不在我们的讨论范围类(作者太蒟了不会QvQ)。 0X1F 点分治的流程0X1F—-1 怎么分治？对于所有的路径，很显然我们可以将它们分成两部分： $1.$ 这条路径经过了它所在的子树的根节点 $2.$ 这条路径没经过它所在的子树的根节点 假设现在有一颗树，Ta的根节点是 $1$： 对于路径 $2 -&gt; 1 -&gt; 3 -&gt; 6$ ，它是经过了根节点的，属于 $1$ 类路径。 对于路径 $4 -&gt; 2 -&gt; 5 -&gt; 8$ ，它没有经过根节点 $1$，属于 $2$ 类路径。 对于第一类路径我们直接处理，对于第二类路径，递归处理当前根的儿子，在儿子里面处理，也就是说现在我们只需要处理第一类路径。 怎么确定这个根呢？显然根的好坏可以决定算法的复杂度。 因为每次是递归儿子，显然递归层数越少越好，什么情况下递归层数越少？当前根是当前树的重心时！ 那么，整个算法的框架如下： 12345678910void solve(int u)&#123;//当前节点u 当前树的当前根节点为u，统计第一类路径; 做标记，当前点已经当过根了(总不可能一直是一个点当吧=。=) for(u的所有儿子)&#123; if(儿子当过根节点了)continue; 去掉满足在一个子树条件的不合法答案; 在儿子的子树中得到一个新的根节点; solve(新的根节点); &#125;return;&#125; 其中，在儿子的子树中得到一个新的根节点如下： 现在在 $Solva(1)$ 函数中，并且现在循环到了 $1$ 的儿子 $3$ ，那么 $3$ 的子树就是灰色三角形中的三个节点，我们的新 $root$ 就是灰色三角形这棵树的重心，现在刚开始的时候可以将 $3$ 看成根节点，然后再往下计算。 0X1F—-2 获取树的重心很简单，只需要一个 $DP$ 就行了。 123456789101112void getroot(int u,int fa)&#123; size[u]=1;mxss[u]=0; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; getroot(v,u); size[u]+=size[v]; mxss[u]=max(mxss[u],size[v]); &#125; mxss[u]=max(mxss[u],sum-size[u]); if(mxss[u]&lt;mxss[root])root=u; //mxss[u]为u的子树中size最大的size，size就是u下面的子树大小。&#125; 那么这一句是什么意思呢：mxss[u]=max(mxss[u],sum-size[u]); 我们再举个栗子，假如现在的 $u$ 是 $1$ ：($Qiuly$懒所以用的前面的那个图) 但是 $size[1]$ 统计的只是Ta下面的 ${2,3,4,5,6,7,8}$ 号节点，万一当前树不止这些呢？也就是说上面还有一坨节点，如果计算的时候显然也是要考虑进去的。 0X1F—-怎么统计1类路径？Code:123456789101112131415161718void getdist(int u,int fa)&#123; use[++cnt]=dist[u]; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; dist[v]=dist[u]+G[i].val;getdist(v,u); &#125;return;&#125;int calc(int u,int dist0)&#123; cnt=0;dist[u]=dist0; getdist(u,0); std::sort(use+1,use+1+cnt); int l=1,r=cnt,res=0; while(l&lt;r) if(use[l]+use[r]&lt;=k)res+=r-l,++l; else --r; return res; &#125; 确定了当前树的 $root$ 后，我们可以定义 $dist[root]$ 为 $0$ ，其余的当前树的节点的 $dist$ 为Ta到 $root$ 的距离(路上所有边的权值和)。 显然，这个问题很容易搞定($getdist$)。 想象一下，现在有一条路径 $l -&gt; \cdots -&gt; root -&gt; \cdots -&gt; r$，显然这条路径的权值就是 $dist[l] + dist[r]$。 可是，如果一一去枚举 $l,r$ 并且统计的话复杂度是报表的啊！这没关系，我们依旧可以用线性的时间复杂度解决问题。 得到了所有的 $dist$ 后，我们排个序。 然后就是统计的流程。 假设现在排好序的数列为 {$1,1,2,3,4,4,5,6,7,7,8$}，$l$ 为 $1$ ，$r$ 为 $cnt$。 现在计算 $1+8$ ，显然如果 $1+8$ 小于 $k$ ，那么 $1 + (1/2/3/4/4/5/6/7/7)$ 都会小于 $k$，这个时候直接统计即可。否则 --r ，因为我们还需要统计的是 $l+1,l+2,\cdots$，既然这个 $r$ 不行了，对后面的答案是肯定不会有影响的。 最后 $return;$ 0X2F 总体代码 Test:Luogu P4178 TreeCode:如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))//为了格式不鬼畜这两个宏定义我只能放着了QvQ#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt; const int N=4e4+2;const int inf=1e9+9;int n,m,k,cnt,sum,ans,root,head[N];int vis[N],use[N],dist[N],size[N],mxss[N];struct Edge&#123; int nxt,to,val; &#125;G[N&lt;&lt;1];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;void getroot(int u,int fa)&#123; size[u]=1;mxss[u]=0; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; getroot(v,u); size[u]+=size[v]; mxss[u]=max(mxss[u],size[v]); &#125; mxss[u]=max(mxss[u],sum-size[u]); if(mxss[u]&lt;mxss[root])root=u; &#125;void getdist(int u,int fa)&#123; use[++cnt]=dist[u]; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; dist[v]=dist[u]+G[i].val;getdist(v,u); &#125;return;&#125;int calc(int u,int dist0)&#123; cnt=0;dist[u]=dist0; getdist(u,0); std::sort(use+1,use+1+cnt); int l=1,r=cnt,res=0; while(l&lt;r) if(use[l]+use[r]&lt;=k)res+=r-l,++l; else --r; return res; &#125;void solve(int u)&#123; ans+=calc(u,0); vis[u]=1; for(int v,i=head[u];i;i=G[i].nxt)&#123; if(vis[(v=G[i].to)])continue; ans-=calc(v,G[i].val); sum=size[v];root=0; getroot(v,0); solve(root); &#125;return;&#125;int main()&#123; IN(n),sum=mxss[0]=n; for(int i=1,u,v,w;i&lt;n;++i)&#123; IN(u),IN(v),IN(w); G[++cnt]=(Edge)&#123;head[u],v,w&#125;;head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,w&#125;;head[v]=cnt; &#125; IN(k); getroot(1,0); solve(root); printf("%d\n",ans); return 0; &#125; Test:Luogu P3806 【模板】点分治1Analysis:很显然我们不能像上面那样傻乎乎的While了，那样不能算出路径的权值，只能统计。干脆统计时来个双重循环暴力吧！然后搞个桶。复杂度很高但是能过得了(至少这一题是这样的)Code:如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y))//Q.v.Q........................#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long long#define RI register int const int N=1e4+2;const int inf=1e9+9;int ans[10000005];int n,m,k,cnt,sum,root,head[N];int vis[N],use[N],dist[N],size[N],mxss[N];struct Edge&#123; int nxt,to,val; &#125;G[N&lt;&lt;1];template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;void getroot(int u,int fa)&#123; size[u]=1;mxss[u]=0; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; getroot(v,u); size[u]+=size[v]; mxss[u]=max(mxss[u],size[v]); &#125; mxss[u]=max(mxss[u],sum-size[u]); if(mxss[u]&lt;mxss[root])root=u; &#125;void getdist(int u,int fa)&#123; use[++cnt]=dist[u]; for(int v,i=head[u];i;i=G[i].nxt)&#123; if((v=G[i].to)==fa||vis[v])continue; dist[v]=dist[u]+G[i].val;getdist(v,u); &#125;return;&#125;void calc(int u,int dist0,int add)&#123; cnt=0;dist[u]=dist0; getdist(u,0); for(int i=1;i&lt;=cnt;++i) for(int j=1;j&lt;=cnt;++j) ans[use[i]+use[j]]+=add; &#125;void solve(int u)&#123; calc(u,0,1);vis[u]=1; for(int v,i=head[u];i;i=G[i].nxt)&#123; if(vis[(v=G[i].to)])continue; calc(v,G[i].val,-1); sum=size[v];root=0; getroot(v,0); solve(root); &#125;return;&#125;int main()&#123; IN(n),IN(m),sum=mxss[0]=n; for(int i=1,u,v,w;i&lt;n;++i)&#123; IN(u),IN(v),IN(w); G[++cnt]=(Edge)&#123;head[u],v,w&#125;;head[u]=cnt; G[++cnt]=(Edge)&#123;head[v],u,w&#125;;head[v]=cnt; &#125; getroot(1,0); solve(root); for(int i=1;i&lt;=m;++i) IN(k),printf(ans[k]?"AYE\n":"NAY\n"); return 0; &#125; ~~(还是背板子最重要嘿嘿嘿)]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>算法</tag>
        <tag>学习笔记</tag>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 [NOI2014]魔法森林 动态加边Spfa bzoj3669/luogu2387]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP2387%2F</url>
    <content type="text"><![CDATA[膜法森林2333…… 显然是一道 $LCT$ 动态加边的题目。 然而并不需要这么高深的数据结构来动态加边(实际上是不会)，我们只需要 $Spfa$ 动态加边即可切掉此题。 怎么 $Spfa$?又是个怎么的动态加边法呢？ 在下面我先给出代码，然后再来一步一步剖析(跟 $Spfa$ 板子差不多)。 Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;queue&gt;#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long long#define RI register intconst int N=5e4+2,M=1e5+2;const int inf=1e9+9;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; bool flag=0;char ch;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;bool vis[N];std::queue&lt;int&gt; q;int head[N],dis[N],tot,cnt,ans,n,m;struct Edge_Spfa&#123;int nxt,to,v1,v2;&#125;G[M];struct Edge_Main&#123; int x,y,v1,v2; bool operator &lt; (Edge_Main a)const&#123; return v1&lt;a.v1; &#125;&#125;L[M];inline void make_line(int x,int y,int v1,int v2)&#123; G[++tot].nxt=head[x],head[x]=tot,G[tot].to=y,G[tot].v1=v1,G[tot].v2=v2; G[++tot].nxt=head[y],head[y]=tot,G[tot].to=x,G[tot].v1=v1,G[tot].v2=v2;&#125; #define A printf("A")#define C printf("\n")#define max(x,y) ((x)&gt;(y)?(x):(y))#define min(x,y) ((x)&lt;(y)?(x):(y)) inline void spfa(int star_1,int star_2)&#123; vis[star_1]=true,vis[star_2]=true; q.push(star_1),q.push(star_2); while(!q.empty())&#123; int u=q.front();q.pop(); for(int i=head[u];i;i=G[i].nxt)&#123; int to=G[i].to; if(max(dis[u],G[i].v2)&lt;dis[to])&#123; dis[to]=max(dis[u],G[i].v2); if(!vis[to])q.push(to),vis[to]=true; &#125; &#125;vis[u]=false; &#125;return;&#125;int main()&#123; IN(n),IN(m); memset(dis,127,sizeof(dis)); dis[1]=0,q.push(1),ans=inf; for(int i=1;i&lt;=m;++i) IN(L[i].x),IN(L[i].y),IN(L[i].v1),IN(L[i].v2); std::sort(L+1,L+1+m); for(int i=1;i&lt;=m;++i)&#123; make_line(L[i].x,L[i].y,L[i].v1,L[i].v2); spfa(L[i].x,L[i].y); ans=min(ans,dis[n]+L[i].v1); &#125;printf("%d\n",ans==inf?-1:ans); return 0;&#125; 动态加边，顾名思义，就是按最优顺序依次将边插入，对于每次插完边的图做一次答案统计($Spfa$)，然后每次在 $main$ 函数里统计答案，最后输出即可。 我们固定 $v1$ ，用 $v2$ 跑 $Spfa$，边的插入顺序是按照 $v1$ 的大小来的，小的先插。 之所以上面要用到 $sort$，是因为我们要达到”按最优顺序依次将边插入”。 $Spfa$ 的板子就不解释了，不懂的同学左转搜素 $Spfa$ ，先刷几道黄牌去吧…… 我们来看看动态加边的过程: 12345for(int i=1;i&lt;=m;++i)&#123; make_line(L[i].x,L[i].y,L[i].v1,L[i].v2); spfa(L[i].x,L[i].y); ans=min(ans,dis[n]+L[i].v1); &#125; make_line(L[i].x,L[i].y,L[i].v1,L[i].v2); : 加边，不解释 spfa(L[i].x,L[i].y); : $Spfa$ 过程。 $Q$ :为什么要定义两个起点 $L[i].x$ 和 $L[i].y$ 呢？ $A$ :显然加进来了这条边后，对当前图中一些点的 $dis$ 值可能会有影响，所以以这个边的两端的点为起点，依次更新旁边的点，直到不能再更新。 ans=min(ans,dis[n]+L[i].v1); : 更新 $ans$ 值 $Q$ :为什么使用 $dis[n]+L[i].v1$ 对 $ans$ 进行更新，有可能这条最短路上并不包含这个边啊，为什么要将 $L[i].v1$ 算进去呢？可能会更新错答案啊。 $A$ :对于当前图的最短路，我们分两种情况来讨论： $1.$ 这条最短路上没包含这条新加上的边 $2.$ 这条最短路上包含了这条新加上的边 对于第一种情况，显然这条最短路在加上这条边之前就已经有了，因为这条边的存在跟这条最短路没任何关系，既然之前有了，那么就肯定已经更新过 $ans$ 了。而那个时候的 $v1$ 是肯定比这个时候的 $v1$ 小的，也就是说 $ans$ 在之前已经被比现在的答案更小的答案更新过了，所以 $ans$ 也不会被当前答案更新。 对于第二种情况，因为这条最短路上包含了这条边，而这条边肯定是这条最短路上 $v1$ 最大的边(当然也是当前图上 $v1$ 最大的边)，所以直接更新没错。 每一次循环后数组不要重置吗？ 显然队列是不要的，因为 $Spfa$ 的退出条件是是队列为空，所以每次做完 $Spfa$ 时队列也就空了。 $vis$ 数组也不需要，跟队列是一个道理，只有 $vis$ 数组里面还有 $true$ 的元素，说明还有元素在队列里，队列空了，$vis$ 数组也自然空了。 $dis$ 数组不需要，因为循环中每次跑 $Spfa$ 是为了更新 $dis$ 数组而非做最短路。 然后……然后就没有然后了……]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>LCT</tag>
        <tag>Spfa</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 Tyvj1730二逼平衡树 树套树 luogu3380/bzoj3196]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5DluoguP1730%2F</url>
    <content type="text"><![CDATA[树套树，直接线段树套 $Splay$ . 因为有区间的$k$大，不能直接用$Splay$(大佬忽视这句话)，显然可以用树套树(废话)。对于每一个线段树的节点都建一棵 $Splay$ ，需要查询这个节点所代表的区间第 $k$ 大等操作时直接用 $Splay$ 来完成即可…… 但是，如果不是正好的区间呢？假如询问区间横跨了两个子树区间怎么办呢？ 这就需要技巧了. 下面，对于第一个操作，先贴出代码: 123456789inline void Seg_rank(int x,int l,int r,int L,int R,int Kth)&#123; if(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);return;&#125;//必须判断啊，一定要相等 if(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);//完全属于左子树 else if(L&gt;mid)Seg_rank(rc,mid+1,r,L,R,Kth);//完全属于左子树 else Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+1,r,mid+1,R,Kth); //因为 ans 是 += ，所以直接拆开即可，因为有些抽象，可以画图模拟&#125;;case 1:&#123;IN(v);ans=0;Seg_rank(1,1,n,x,y,v);printf("%d\n",ans+1);&#125;break; 基本上，所有有关的操作都可以参考上面的代码段…… 多说无益，直接看代码吧. 哦，对了，其实理解只需纸笔和一份正确的代码，并不要太多的讲解(感觉网上没找到很优秀的文章……) Code:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;string&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#define ll long long#define RI register int #define A printf("A")#define C printf(" ")#define inf 2147483647#define PI 3.1415926535898using namespace std;const int N=4e6+2;//template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; //template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;template &lt;typename _Tp&gt; inline void IN(_Tp&amp;x)&#123; char ch;bool flag=0;x=0; while(ch=getchar(),!isdigit(ch))if(ch=='-')flag=1; while(isdigit(ch))x=x*10+ch-'0',ch=getchar(); if(flag)x=-x;&#125;int n,m,a[N],ans,MX;/*----------------------------------Splay-------------------------------------*/int f[N],c[N],s[N],v[N],ch[N][2],rt[N],tot;// rt[i] 表示线段树编号为i的节点的Splay的根节点inline int chk(int x)&#123;return ch[f[x]][1]==x;&#125;;inline void Splay_del_node(int x)&#123;f[x]=s[x]=c[x]=v[x]=ch[x][0]=ch[x][1]=0;&#125;;inline void Splay_pushup(int x)&#123;s[x]=(ch[x][0]?s[ch[x][0]]:0)+(ch[x][1]?s[ch[x][1]]:0)+c[x];&#125;;inline void Splay_rotate(int x)&#123; int y=f[x],z=f[y],k=chk(x),v=ch[x][k^1]; ch[y][k]=v;if(v)f[v]=y;f[x]=z;if(z)ch[z][chk(y)]=x; f[y]=x,ch[x][k^1]=y;Splay_pushup(y),Splay_pushup(x);&#125;;inline void Splay(int i,int x,int top=0)&#123; while(f[x]!=top)&#123; int y=f[x],z=f[y]; if(z!=top)Splay_rotate((ch[z][0]==y)==(ch[y][0]==x)?y:x); Splay_rotate(x); &#125;if(!top)rt[i]=x;&#125;;inline void Splay_Insert(int i,int x)&#123; int pos=rt[i]; if(!rt[i])&#123; rt[i]=pos=++tot;v[pos]=x;s[pos]=c[pos]=1; f[pos]=ch[pos][0]=ch[pos][1]=0;return; &#125;int last=0; while(1)&#123; if(v[pos]==x)&#123;++c[pos];Splay_pushup(last);break;&#125; last=pos;pos=ch[pos][x&gt;v[pos]]; if(!pos)&#123; pos=++tot;v[pos]=x;s[pos]=c[pos]=1; ch[last][x&gt;v[last]]=pos; f[pos]=last;ch[pos][0]=ch[pos][1]=0; Splay_pushup(last);break; &#125; &#125;Splay(i,pos);return;&#125;;inline int Splay_rank(int i,int k)&#123; int x=rt[i],cal=0; while(x)&#123; if(v[x]==k)return cal+((ch[x][0])?s[ch[x][0]]:0); else if(v[x]&lt;k)&#123; cal+=((ch[x][0])?s[ch[x][0]]:0)+c[x];x=ch[x][1]; &#125;else x=ch[x][0]; &#125;return cal;&#125;;inline int Splay_find(int i,int x)&#123; int pos=rt[i];while(x)&#123; if(v[pos]==x)&#123;Splay(i,pos);return pos;&#125;; pos=ch[pos][x&gt;v[pos]]; &#125;return 0;&#125;;inline int Splay_pre(int i)&#123;int x=ch[rt[i]][0];while(ch[x][1])x=ch[x][1];return x;&#125;inline int Splay_suc(int i)&#123;int x=ch[rt[i]][1];while(ch[x][0])x=ch[x][0];return x;&#125;inline int Splay_Get_pre(int i,int x)&#123; int pos=rt[i];while(pos)&#123; if(v[pos]&lt;x)&#123;if(ans&lt;v[pos])ans=v[pos];pos=ch[pos][1];&#125; else pos=ch[pos][0]; &#125;return ans;&#125;;inline int Splay_Get_suc(int i,int x)&#123; int pos=rt[i];while(pos)&#123; if(v[pos]&gt;x)&#123;if(ans&gt;v[pos])ans=v[pos];pos=ch[pos][0];&#125; else pos=ch[pos][1]; &#125;return ans;&#125;;inline void Splay_Delete(int i,int key)&#123; int x=Splay_find(i,key); if(c[x]&gt;1)&#123;--c[x];Splay_pushup(x);return;&#125; if(!ch[x][0]&amp;&amp;!ch[x][1])&#123;Splay_del_node(rt[i]);rt[i]=0;return;&#125; if(!ch[x][0])&#123;int y=ch[x][1];rt[i]=y;f[y]=0;return;&#125; if(!ch[x][1])&#123;int y=ch[x][0];rt[i]=y;f[y]=0;return;&#125; int p=Splay_pre(i);int lastrt=rt[i]; Splay(i,p,0);ch[rt[i]][1]=ch[lastrt][1];f[ch[lastrt][1]]=rt[i]; Splay_del_node(lastrt);Splay_pushup(rt[i]);&#125;;/*------------------------------Seg_Tree--------------------------------------*/ #define lc ((x)&lt;&lt;1)#define rc ((x)&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)inline void Seg_Insert(int x,int l,int r,int pos,int val)&#123; Splay_Insert(x,val);if(l==r)return; if(pos&lt;=mid)Seg_Insert(lc,l,mid,pos,val); else Seg_Insert(rc,mid+1,r,pos,val);&#125;;inline void Seg_rank(int x,int l,int r,int L,int R,int Kth)&#123; if(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);return;&#125; if(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth); else if(L&gt;mid)Seg_rank(rc,mid+1,r,L,R,Kth); else Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+1,r,mid+1,R,Kth);&#125;;inline void Seg_change(int x,int l,int r,int pos,int val)&#123;// printf("QvQ:: %d %d %d %d %d\n",x,l,r,pos,val); Splay_Delete(x,a[pos]);Splay_Insert(x,val); if(l==r)&#123;a[pos]=val;return;&#125;; if(pos&lt;=mid)Seg_change(lc,l,mid,pos,val); else Seg_change(rc,mid+1,r,pos,val);&#125;;inline void Seg_pre(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));return;&#125; if(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_pre(rc,mid+1,r,L,R,val); else Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+1,r,mid+1,R,val);&#125;;inline void Seg_suc(int x,int l,int r,int L,int R,int val)&#123; if(l==L&amp;&amp;r==R)&#123;ans=min(ans,Splay_Get_suc(x,val));return;&#125; if(R&lt;=mid)Seg_suc(lc,l,mid,L,R,val); else if(L&gt;mid)Seg_suc(rc,mid+1,r,L,R,val); else Seg_suc(lc,l,mid,L,mid,val),Seg_suc(rc,mid+1,r,mid+1,R,val);&#125;;/*---------------------------------ask----------------------------------------*/inline int Get_Kth(int x,int y,int k)&#123; int L=0,R=MX+1,M; while(L&lt;R)&#123; M=(L+R)&gt;&gt;1; ans=0;Seg_rank(1,1,n,x,y,M); if(ans&lt;k)L=M+1;else R=M; &#125;return L-1;&#125;;/*-------------------------------main-------------------------------------*/int main(int argc,char const* argv[])&#123; IN(n),IN(m); for(RI i=1;i&lt;=n;++i)&#123;IN(a[i]);Seg_Insert(1,1,n,i,a[i]);MX=max(MX,a[i]);&#125; while(m--)&#123; int op,x,y,v;IN(op),IN(x),IN(y); switch(op)&#123; case 1:&#123;IN(v);ans=0;Seg_rank(1,1,n,x,y,v);printf("%d\n",ans+1);&#125;break; case 2:&#123;IN(v);printf("%d\n",Get_Kth(x,y,v));&#125;break; case 3:&#123;Seg_change(1,1,n,x,y);&#125;break; case 4:&#123;IN(v);ans=-inf;Seg_pre(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; case 5:&#123;IN(v);ans=inf;Seg_suc(1,1,n,x,y,v);printf("%d\n",ans);&#125;break; &#125; &#125;return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>树套树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【题解】 楼房重建 线段树 bzoj2957]]></title>
    <url>%2F2019%2F02%2F13%2F%5B%E9%A2%98%E8%A7%A3%5Dbzoj2957%2F</url>
    <content type="text"><![CDATA[每个楼房，还有单点修改操作。简单的想到用线段树来维护信息。 显然线段树只需要维护y/x即可，对于每一个楼房，能看见的条件就是前面楼房的y/x的严格小于当前楼房的y/x。 线段树的区间修改不再赘述。 那么怎么维护可以看到的楼房数呢？ 考虑在线段树的每一个节点上用一个变量sum来表示从这个节点的左端点向右端点看时能看到多少楼房。 假设现在有一区间：1,5,8,0,7,9。维护这个区间信息的节点编号为x。 x的左儿子维护的区间是1,5,8，从1往8看可以看到三个楼房，故x的左儿子的sum的值为3。 x的右儿子维护的区间是0,7,9，从0往9看也可以看到三个楼房，故x的右儿子的sum的值也为3。 难道x的sum值也为3+3=6？错!这显然是不能加在一起的，x的sum的值为4。 为什么会错呢？因为x的右儿子的观察视角不是从1开始的，是从0开始的。 显然0被前面的楼房挡住了。 首先考虑每个线段树节点在维护一个mx，mx代表这个节点所代表的区间中所有的楼房中最高的高度。 上传时，由于两个儿子的sum值是已经处理好的，而左儿子的视角是跟x的视角一样的(对于上面的例子来说都是1)，可以直接上传，即sum(x)+=sum(l(x))。 对于右儿子，考虑递归处理右儿子的区间，递归时带一个Mx变量表示x的左儿子mx(右儿子再左儿子后面，原因下面解释)，递归函数的返回值是当前处理区间可以被看到的楼房数(从x的视角看) 对于现在处理的每一个区间： 如果这个区间的最高的楼房的高度都Mx(可以看到)，那么return 当前区间维护的sum值。 如果这个区间只代表一个楼房，直接判断其能否被看到即可。 对于剩下的情况，递归儿子，分两种情况讨论： 如果左儿子的最高的楼房小于Mx(不能对答案有任何贡献)，直接递归右儿子。 否则，递归左儿子，右儿子能看到的楼房个数为当前区间sum-左儿子sum即可，(应为下面已经更新好了，只需要直接调用就好了。) Code(文中的sum用l代替):12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;bits/stdc++.h&gt;#define ll long long#define inf 0x3f3f3f3f#define lson x&lt;&lt;1#define rson x&lt;&lt;1|1using namespace std;const int N=1e5+2;struct Node &#123; double mx;int l; #define m(x) tree[x].mx #define l(x) tree[x].l&#125; tree[N&lt;&lt;2];int n,m;double val[N];inline void pushup_max(int x) &#123; m(x)=max(m(x&lt;&lt;1),m(x&lt;&lt;1|1));&#125;inline int pushup_sum(double Mx,int x,int l,int r) &#123; if(m(x)&lt;Mx)return 0; if(val[l]&gt;Mx)return l(x); if(l==r)return val[l]&gt;Mx; int mid=(l+r)&gt;&gt;1; if(m(lson)&lt;=Mx)return pushup_sum(Mx,rson,mid+1,r); else return pushup_sum(Mx,lson,l,mid)+l(x)-l(lson);&#125;inline void change(int x,int l,int r,int pos,int value) &#123; if(l==r&amp;&amp;l==pos)&#123;m(x)=(double)value/pos;l(x)=1;return;&#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid)change(lson,l,mid,pos,value); else if(pos&gt;mid)change(rson,mid+1,r,pos,value); pushup_max(x); l(x)=l(lson)+pushup_sum(m(lson),rson,mid+1,r);&#125;int main() &#123; scanf("%d%d",&amp;n,&amp;m); for(register int x,y,i=1; i&lt;=m; ++i) &#123; scanf("%d%d",&amp;x,&amp;y); val[x]=(double)y/x; change(1,1,n,x,y); printf("%d\n",l(1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Welcome,new visitors! Here is Qiuly's blog!]]></title>
    <url>%2F2019%2F02%2F12%2FWelcome%2F</url>
    <content type="text"><![CDATA[预测未来的最好方法是创造未来 ——艾伦·凯 欢迎！这里是 $Qiuly’s\ blog$ ！在翻阅文章之前，$Qiuly$ 有几个小小的要求： 如果需要复制原文的话可以加 $Qiuly$ $QQ:2641450959$ ，请不要擅自复制却不跟 $Qiuly$ 说一声，谢谢理解。$Qiuly$ 目前还只是一个可爱的小学森，更博勤快的确不容易。 如果有图片挂了的，或者是代码缩进变成了 $8$ 的代码，还有就是格式问题爆炸的话(就是字之间突然有若干个空格之类的)也请加 $QQ$ ，$Qiuly’s \ blog$ 没有邮箱提醒的功能，所以如果只的是评论的话 $Qiuly$ 根本不知道。$QQ$ 的验证就填六年级好了，说明的话就填博客问题。 作为一个个人博客，当然欢迎加友链啦！想要加友链的朋友可以再下方评论区提出哦。 或许是使用的 $Latex$ 比较多，有些公式/ $Latex$ 的句子或许会加载的比较慢，需要等待片刻后再食用。 好啦，现在开始你的 $Qiuly’s \ blog$ 之旅吧！]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>公告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello new blog!]]></title>
    <url>%2F2019%2F02%2F12%2FHello%20new%20blog!%2F</url>
    <content type="text"><![CDATA[曾经尝试过用 $Wordpress$ 搭过博客，虽说操作简单，却因为我不想花钱而使用不了 $Makedown$ 格式，对于超级依赖 $Makedown$ 的我，找遍了方法都没法解决…… 于是蠢蠢欲动的想要用 $Hexo$ 搭个博客，虽然听学长说，$Hexo$ 只是静态页面，不是那么好。但是却可以免费，还可以用自己喜欢的编辑器学文章。这个计划就这么开始了。 两天时间，一共搭建了四次，前三次在机房搭的，均未成功。一到家用自己的笔记本电脑，却出奇的顺利，看到页面成功的弹出来时，我真的是激动得不能言语！ 然后，对这个也挺满意的。但是由于本人实在太弱，没有实力与精力去优化博客界面，只是草草的搞了一下 $LATEX$(打错了？) ，不知道能不能用。 之前我的 $Wordpress$ 的第一篇文章叫新的开始，现在看来那还不是，希望这才是一个崭新的开始吧！ （实际上原来叫 $Qiuly$，这个 $“monlights”$ 只是小号而已，$QvQ!$） （逃]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>公告</tag>
      </tags>
  </entry>
</search>
