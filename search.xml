<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【题解】 [HNOI2011]卡农  组合数学+DP  luoguP3214</title>
      <link href="/2019/05/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP3214/"/>
      <url>/2019/05/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP3214/</url>
      
        <content type="html"><![CDATA[<p>什么同种音乐简直是个逗比，最后直接除上 $m!$ 即可。</p><p>现在我们需要算出选出 $m$ 的片段的方案数，考虑 $\rm{DP}$ ，设 $dp_i$ 表示前 $i​$ 个片段已经确定，且满足下列要求：</p><ul><li>这 $i$ 个片段中没有空集</li><li>这 $i$ 个片段互不相同</li><li>这 $i$ 个片段中所有的音符的出现次数全部都要是偶数次</li></ul><a id="more"></a><p>现在考虑如何从 $dp_{i-1}$ 转移到 $dp_i$ 。</p><p>首先看第三个要求，不难发现在知道前 $i-1$ 个片段的情况下，$i$ 的音符集合一定是确定的—— $i$ 的音符集合一定是前 $i-1$ 个片段中出现次数为奇数的音符。也就是说 $i$ 的集合是随着前 $i-1$ 个片段变换的，已知选择前 $i-1$ 个片段的方案数为 $A_{2^n-1}^{i-1}$ ，那么 $i$ 的方案数也自然是 $A_{2^n-1}^{i-1}$  。(注意该统计方案保证前 $i-1$ 个片段互不相同)</p><p>但是 $i$ 可能是空集，那么这个方案就不成立，方案不成立的个数当然是前 $i-1$ 个片段自由搭配<strong>且合法</strong>的情况数，那么自然就是 $dp_{i-1}$ ，为什么要计算和法的呢，因为首先计算了的方案数显然是满足第三个要求的，也就是说我们要去掉的也只能是满足第三个要求的不合法方案数，那么自然就是 $dp_{i-1}$ 个了。</p><p>最后考虑不满足第二种情况的方案数，首先我们令一个片段 $j$ 和 $i$ 一样(在前 $i-1$ 个片段中最多一个和 $i$ 一样)，这个那么这样子我们将这两个片段都去掉的时候全局的方案数就是 $dp_{i-2}$ 了，因为剩下的一定是合法的。显然 $j$ 可以是前 $i-1$ 个片段中的任意一个，并且重复的音乐集的种类数为 $2^n-1-(i-2)$ ，为什么这么说呢，显然 $2^n-1$ 是非空集的音乐集方案数，$i-2$ 就是说剩下的 $i-2$ 个片段不重复，并且 $i,j$ 也不能与之重复，那么可供 $i,j$ 选择的就剩下 $2^n-1-(i-2)$ 个音乐集了。</p><p>也就是说，我们用 $A_{2^n-1}^{i-1}$ 减去这些不合法的方案后剩下的就是 $dp_i$ 了：</p><script type="math/tex; mode=display">dp_i=A_{2^n-1}^{i-1}-dp_{i-1}-(dp_{i-2}\times(i-1)\times(2^n-1-(i-2)))</script><p>最后的答案就是 $dp_m$ 。</p><p>关于初始化的问题，首先 $dp_0=0$ ，那么选一个片段呢可以吗？其实不行，因为音符没有重复偶数次，所以一定是全都不合法的，又不允许空集的存在，也就是说 $dp_1=0$ 。用上面的式子从 $dp_2$ 推起即可。</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> p 100000007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll dp[N],A[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">pow</span><span class="params">(ll x,ll y,ll res=<span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%p) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=res*x%p;</span><br><span class="line">    <span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    ll mul=<span class="built_in">pow</span>(<span class="number">2</span>,n)<span class="number">-1</span>;mul=(mul%p+p)%p;</span><br><span class="line">    A[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        A[i]=<span class="number">1l</span>l*A[i<span class="number">-1</span>]*(mul-i+<span class="number">1</span>)%p;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>,dp[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        dp[i]=A[i<span class="number">-1</span>]%p;</span><br><span class="line">        dp[i]=(dp[i]-dp[i<span class="number">-1</span>]+p)%p;</span><br><span class="line">        dp[i]=(dp[i]<span class="number">-1l</span>l*dp[i<span class="number">-2</span>]*(i<span class="number">-1</span>)%p*(mul-(i<span class="number">-2</span>))%p+p)%p;</span><br><span class="line">        dp[i]=(dp[i]%p+p)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    ll fac=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) fac=<span class="number">1l</span>l*fac*i%p;</span><br><span class="line">    ll inv=<span class="built_in">pow</span>(fac,p<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[m]*inv%p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 Lunar New Year and Red Envelopes  DP  luoguCF1106E</title>
      <link href="/2019/05/22/%5B%E9%A2%98%E8%A7%A3%5DluoguCF1106E/"/>
      <url>/2019/05/22/%5B%E9%A2%98%E8%A7%A3%5DluoguCF1106E/</url>
      
        <content type="html"><![CDATA[<p>很简单的可以想到，设 $f_{i,j}$ 表示到第 $i$ 时刻已经干扰了 $j$ 次时的最少拿到钱数。然后每一次转移的时候只要看第 $i$ 时刻是否干扰即可，然后如果不干扰的话就算一下这一时刻拿到的红包的钱。</p><p>对于第 $i$ 时刻拿到的红包的钱数我们需要预处理，开一个优先队列，按照题意重载运算符，然后按照时刻走一遍即可。</p><a id="more"></a><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">2e2</span>+<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">ll f[N][M];</span><br><span class="line"><span class="keyword">int</span> n,m,k,nxt[N],val[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> s,t,d,w,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node&amp;b) <span class="keyword">const</span> &#123;<span class="keyword">return</span> w==b.w?b.d&gt;d:b.w&gt;w;&#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line">priority_queue&lt;Node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x,Node y)</span> </span>&#123;<span class="keyword">return</span> x.s&lt;y.s;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)</span><br><span class="line">        IN(a[i].s),IN(a[i].t),IN(a[i].d),IN(a[i].w),a[i].id=i;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+k,cmp);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(cnt&lt;=k&amp;&amp;a[cnt].s&lt;=i) q.push(a[cnt++]);</span><br><span class="line">        <span class="keyword">if</span>(q.empty()) nxt[i]=i+<span class="number">1</span>,val[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node now=q.top();</span><br><span class="line">            <span class="keyword">if</span>(now.t&lt;i) &#123;--i,q.pop();<span class="keyword">continue</span>;&#125;</span><br><span class="line">            nxt[i]=now.d+<span class="number">1</span>,val[i]=now.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">127</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;++j)</span><br><span class="line">        f[i+<span class="number">1</span>][j+<span class="number">1</span>]=min(f[i+<span class="number">1</span>][j+<span class="number">1</span>],f[i][j]),</span><br><span class="line">        f[nxt[i]][j]=min(f[nxt[i]][j],f[i][j]+val[i]);</span><br><span class="line">    ll ans=<span class="number">1e18</span>+<span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i) ans=min(ans,f[n+<span class="number">1</span>][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】 扩展中国剩余定理</title>
      <link href="/2019/05/17/%5B%E6%95%B0%E8%AE%BA%5D%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
      <url>/2019/05/17/%5B%E6%95%B0%E8%AE%BA%5D%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="在此输入你的密码以便阅读全文" />    <label for="pass">在此输入你的密码以便阅读全文</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 中国剩余定理 </tag>
            
            <tag> 扩展中国剩余定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2010]古代猪文  组合数学  luoguP2480</title>
      <link href="/2019/05/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP2480/"/>
      <url>/2019/05/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP2480/</url>
      
        <content type="html"><![CDATA[<p>题目传送门：<a href="https://www.luogu.org/problemnew/show/P2480" target="_blank" rel="noopener">传送门戳我</a></p><p>很显然题目需要我们求出 $G^{\sum_{d|n}C_n^d} \ mod\ P$ ( $P=999911659$ ) 。我们知道费马小定理有一个推论：$a^{x}\equiv a^{x \ mod\ (P-1)} \ (mod \ P)$ (需要满足 $P$ 是质数) ，题目中的 $P$ 正好是质数，那么我们可以将上式变换一下：</p><script type="math/tex; mode=display">G^{\sum_{d|n}C_n^d} \ mod\ P=G^{\sum_{d|n}C_n^d \ mod\ (P-1)} \ mod\ P​</script><a id="more"></a><p>现在我们需要快速求出 $\sum_{d|n}C_n^d \ mod\ (P-1)$ ，看样子可以 $lucas$ 直接求组合数，但是模数太大了不方便。分解质因数后发现 $999911658=2\times 3\times 4679\times 35617$ ，对四个模数求出其对应的答案，然后因为四个模数互质，最后 $crt$ 合并答案即可。</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 999911658</span></span><br><span class="line"></span><br><span class="line">ll n,g,fac[<span class="number">35617</span>+<span class="number">7</span>];</span><br><span class="line">ll m[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4679</span>,<span class="number">35617</span>&#125;,a[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> math &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">pow</span><span class="params">(ll x,ll y,ll p)</span> </span>&#123;</span><br><span class="line">        ll res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=<span class="number">1l</span>l*x*x%p) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*x%p; </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(ll n,ll m,ll p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m&gt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ((fac[n]*<span class="built_in">pow</span>(fac[m],p<span class="number">-2</span>,p))%p*<span class="built_in">pow</span>(fac[n-m],p<span class="number">-2</span>,p)%p)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">lucas</span><span class="params">(ll n,ll m,ll p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> C(n%p,m%p,p)*lucas(n/p,m/p,p)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll&amp;x,ll&amp;y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!b) &#123;x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;</span><br><span class="line">        ll gcd=exgcd(b,a%b,x,y),tmp=x;</span><br><span class="line">        x=y,y=tmp-(a/b)*y;<span class="keyword">return</span> gcd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">CRT</span><span class="params">(ll*m,ll*a,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ll res=<span class="number">0</span>,lcm=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i) lcm=lcm*m[i];</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            ll num=lcm/m[i],x,y,gcd=exgcd(num,m[i],x,y);</span><br><span class="line">            x=(x%m[i]+m[i])%m[i];</span><br><span class="line">            res=(res+a[i]*x*num)%lcm;</span><br><span class="line">        &#125;<span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> math;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;g);</span><br><span class="line">    <span class="keyword">if</span>(!(g%(mod+<span class="number">1</span>))) &#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">35617</span>;++i) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;++k) &#123;</span><br><span class="line">        ll p=m[k],res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i*i&lt;=n;++i) <span class="keyword">if</span>(!(n%i)) &#123;</span><br><span class="line">            ll x=i,y=n/i;<span class="keyword">if</span>(x==y) y=<span class="number">0</span>;</span><br><span class="line">            res=(res+lucas(n,x,p)%p)%p;</span><br><span class="line">            <span class="keyword">if</span>(y) res=(res+lucas(n,y,p)%p)%p;</span><br><span class="line">        &#125;</span><br><span class="line">        a[k]=res;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=CRT(m,a,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="built_in">pow</span>(g,ans,mod+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中国剩余定理 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2009]学校食堂 状压DP luoguP2157</title>
      <link href="/2019/05/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP2157/"/>
      <url>/2019/05/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP2157/</url>
      
        <content type="html"><![CDATA[<p>观察发现 $\texttt{B}​$ 及其的小，可以想到对于第 $i​$ 个人，状压自己以及自己后面 $7​$ 个人的打饭状态即可。</p><p>设 $dp_{i,j}$ 表示打饭到第 $i$ 个人，第 $i$ 个人以及其后面 $7$ 人的打饭状态为 $j$ 的时候的最短时间。转移的时候看在当前状态 $j$ 下有那些人没有打饭，然后给其打饭转移即可(显然还有忍耐度的限制)。</p><a id="more"></a><p>但是经过打饭操作我们无法得出这道菜的时间——因为我们不清楚上一个打饭的是谁。这个时候再记一维状态即可。</p><p>设 $dp_{i,j,k}$ 表示( $i,j$ 的意义与上面相同)，上一次打饭的人的编号就是 $i+k$ (注意 $k$ 的取值为 $-8$ 至 $7$ ，所以实际实现中我们需要将 $k$ 加上 $8$ 后再记入数组) 。</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">256</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,t[N],b[N],dp[N][M+<span class="number">2</span>][<span class="number">16</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmin</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> y)</span> </span>&#123;x=min(x,y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmax</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> y)</span> </span>&#123;x=max(x,y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(t[i]),IN(b[i]);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">127</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">int</span> inf=dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">7</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">-8</span>;k&lt;=<span class="number">7</span>;++k) <span class="keyword">if</span>(dp[i][j][k+<span class="number">8</span>]!=inf) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&amp;<span class="number">1</span>) cmin(dp[i+<span class="number">1</span>][j&gt;&gt;<span class="number">1</span>][k+<span class="number">7</span>],dp[i][j][k+<span class="number">8</span>]);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> max_pos=inf;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">0</span>;h&lt;=<span class="number">7</span>;++h) <span class="keyword">if</span>(!((j&gt;&gt;h)&amp;<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i+h&gt;max_pos) <span class="keyword">break</span>;</span><br><span class="line">                    cmin(max_pos,i+h+b[i+h]);</span><br><span class="line">                    cmin(dp[i][j|(<span class="number">1</span>&lt;&lt;h)][h+<span class="number">8</span>],dp[i][j][k+<span class="number">8</span>]+(i+k?t[i+h]^t[i+k]:<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">8</span>;++i) cmin(ans,dp[n+<span class="number">1</span>][<span class="number">0</span>][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;IN(T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [九省联考2018]林克卡特树  树形DP+wqs二分优化  loj2478</title>
      <link href="/2019/05/12/%5B%E9%A2%98%E8%A7%A3%5Dloj2478/"/>
      <url>/2019/05/12/%5B%E9%A2%98%E8%A7%A3%5Dloj2478/</url>
      
        <content type="html"><![CDATA[<p>毒瘤传送门：<a href="https://loj.ac/problem/2478" target="_blank" rel="noopener">戳我戳我</a></p><p>仔细观察会发现该题需要从树上拿出 $k+1$ 条互不相交的链，求这些链的节点的权值总和的最大值。那么我们选出这些链后就可以用 $k$ 条边将其连起来了，这样就满足了题意。</p><a id="more"></a><p>用 $f_{i,j}$ 表示 $i$ 的子树中选出了 $j$ 个链的最大值，但是会发现转移很难办，枚举一个 $i$ 的儿子 $v$ 的时候，我们不好算出 $v$ 对 $i$ 上的链做出的贡献。</p><p>那么我们新增加一个状态，设 $f_{0/1/2,i,j}$ 为我们的状态，$i,j$ 的意思和上面一样，其中 $0/1/2$ 分别表示——<strong>$0$ : $i$ 不属于子树中 $j$ 条链中的任意一条，$1$ : $i$ 属于 $j$ 条链中其中一条，$2$ : $i$ 属于 $j$ 条链中的其中两条</strong> 。</p><p>那么我们枚举一个儿子 $v$ ，现在我们需要转移的对象就是 $u$ (上面的 $i$ ) ，那么我们注意来考虑：</p><p>我们转移的时候枚举一个 $i$ 表示当前的链数，然后枚举 $j$ 表示 $v$ 子树中的链数，那么之前 $u$ 子树中的链数显然就是 $i-j$ 了。</p><p>令 $num_{v,j}=\max(f_{0,v,j},f_{1,v,j},f_{2,v,j})$ .</p><ul><li><p>计算 $v$ 对 $f_{0,u,i}$ 的贡献</p><ul><li><p>因为该状态必须满足 $u$ 不能属于任意一条链，所有我们理所当然也不能连上 $u\rightarrow v$ 这条边。那么也就是说 $v$ 中发生什么事情都跟 $u$ 没有任何关系了，因为要统计最大，我们直接将 $num$ 统计进去即可。</p></li><li><p>转移：</p><script type="math/tex; mode=display">f_{0,u,i}=\max_v\max_j \{f_{0,u,i-j}+num_{v,j}\}</script></li></ul></li><li><p>计算 $v$ 对 $f_{1,u,i}$ 的贡献</p><ul><li><p>考虑两种情况，第一种，这一条和 $u$ 有关的链是连着别的子树的，那么也就肯定不会连上 $u\rightarrow v$ 这条边，按照上面的转移即可。</p></li><li><p>第一种转移：</p><script type="math/tex; mode=display">f_{1,u,i}=\max_v\max_j \{f_{1,u,i-j}+num_{v,j}\}​</script></li><li><p>第二种情况就是这一条链是和 $v$ 相连接的，那么这个时候 $v$ 的状态只能是 $0,1$ ，原因很显然，链不能香蕉(最好吃了🍌) ，那么对于 $v$ 状态是 $0$ 的情况，这样一连接后就会新出现一条链了，记得算上边权：</p></li><li><p>转移 $0$ 情况：</p><script type="math/tex; mode=display">f_{1,u,i}=\max_v\max_j\{f_{0,u,i-j}+f_{0,v,j-1}+w\}​</script><p>$f_{0,u,i-j}$ 不解释，$f_{0,v,j-1}$ 这里为什么要 $j-1$ 呢？因为很显然当前局面只有 $i-1$ 条链，上面讲了连接后会多出来一条，那么 $i-1+1$ 就正好用来转移 $i$ 了。最后的 $w$ 即为当前转移带来的贡献。</p></li><li><p>$v$ 的状态是 $1$ 的时候和上面差不多，但是因为连接 $u,v$ 后 $u$ 属于了原来就存在的一条链，也就是说没有新增链，那么就没必要 $j-1$ 了。</p></li><li><p>转移 $1$ 的情况：</p><script type="math/tex; mode=display">f_{1,u,i}=\max_v\max_j\{f_{0,u,i-1}+f_{1,v,j}+w\}</script></li></ul></li><li><p>计算 $v$ 对 $f_{2,u,i}$ 的贡献</p><ul><li><p>首先如果这两条链连接别的子树了，那么 $v$ 就没有限制了，转移同上：</p></li><li><p>转移：</p><script type="math/tex; mode=display">f_{2,u,i}=\max_v\max_j \{f_{2,u,i-j}+num_{v,j}\}</script></li><li><p>接下来的就很好办了，因为连接 $u,v$ 最多是一条链，也就是说我们不可能将两条链都放到 $v$ 下来。先考虑 $v$ 状态为 $0$ 的情况，因为连接后 $v$ 属于了 $u$ 原来所在的链(没有新增链)，那么直接算贡献：</p></li><li><p>转移：</p><script type="math/tex; mode=display">f_{2,u,i}=\max_v\max_j\{f_{1,u,i-j}+f_{0,v,j}+w\}</script></li><li><p>然后考虑 $v$ 状态为 $1$ 的情况，这个时候连接 $u,v$ 会使得 $v$ 原来所在的链和 $u$ 原来所在的链合并为一条链，那么这里的和上面的 $j-1$ 不同，这里因为是少了一条链所有要变成 $j+1$ 。</p></li><li><p>转移：</p><script type="math/tex; mode=display">f_{2,u,i}=\max_v\max_j\{f_{1,u,i-j}+f_{1,v,j+1}+w\}</script></li></ul></li></ul><p>所有的转移式都得到了，我们来考虑初始化，首先因为是取最大值，我们需要全部初始化为一个很小的负数。然后对于 $f_{0,u,0}$ 这样的状态的值很显然是 $0$ 。</p><p>其他的没了，注意这样的 $\rm{DP}$ 复杂度只能让我们最多拿到 $60$ 分。</p><h3 id="Code-60-pts-："><a href="#Code-60-pts-：" class="headerlink" title="Code (60 $pts$ ) ："></a>Code (60 $pts$ ) ：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,sz[N],head[N],cnt;</span><br><span class="line">ll dp[<span class="number">3</span>][N][<span class="number">110</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125; G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[v],u,w&#125;,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>][u][<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">/*初始化*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=head[u];e;e=G[e].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[e].to,w=G[e].val;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u),sz[u]+=sz[v];</span><br><span class="line">        <span class="comment">/*利用sz数组优化，同样是O(nk^2)的代码，其他的只能拿到30</span></span><br><span class="line"><span class="comment">        ~40，但是这个优化过后是妥妥的60分*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=min(sz[u],k);i;--i) &#123;</span><br><span class="line">            <span class="comment">/*计算v下面没有链的情况，计算初始状态带来的贡献*/</span></span><br><span class="line">            dp[<span class="number">2</span>][u][i]=max(dp[<span class="number">2</span>][u][i],dp[<span class="number">1</span>][u][i]+w);</span><br><span class="line">            dp[<span class="number">2</span>][u][i]=max(dp[<span class="number">2</span>][u][i],dp[<span class="number">1</span>][u][i]+dp[<span class="number">1</span>][v][<span class="number">1</span>]+w);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=min(sz[v],i);j;--j) &#123;</span><br><span class="line">                <span class="comment">/*计算出num*/</span></span><br><span class="line">                ll num=max(dp[<span class="number">0</span>][v][j],max(dp[<span class="number">1</span>][v][j],dp[<span class="number">2</span>][v][j]));</span><br><span class="line">                <span class="comment">/*下面的7个式子就是上文讲的转移了*/</span></span><br><span class="line">                dp[<span class="number">0</span>][u][i]=max(dp[<span class="number">0</span>][u][i],dp[<span class="number">0</span>][u][i-j]+num);</span><br><span class="line"></span><br><span class="line">                dp[<span class="number">1</span>][u][i]=max(dp[<span class="number">1</span>][u][i],dp[<span class="number">1</span>][u][i-j]+num);</span><br><span class="line">                dp[<span class="number">1</span>][u][i]=max(dp[<span class="number">1</span>][u][i],dp[<span class="number">0</span>][u][i-j]+dp[<span class="number">1</span>][v][j]+w);</span><br><span class="line">                dp[<span class="number">1</span>][u][i]=max(dp[<span class="number">1</span>][u][i],dp[<span class="number">0</span>][u][i-j]+dp[<span class="number">0</span>][v][j<span class="number">-1</span>]+w);</span><br><span class="line"></span><br><span class="line">                dp[<span class="number">2</span>][u][i]=max(dp[<span class="number">2</span>][u][i],dp[<span class="number">2</span>][u][i-j]+num);</span><br><span class="line">                dp[<span class="number">2</span>][u][i]=max(dp[<span class="number">2</span>][u][i],dp[<span class="number">1</span>][u][i-j]+dp[<span class="number">0</span>][v][j]+w);</span><br><span class="line">                dp[<span class="number">2</span>][u][i]=max(dp[<span class="number">2</span>][u][i],dp[<span class="number">1</span>][u][i-j]+dp[<span class="number">1</span>][v][j+<span class="number">1</span>]+w);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*也是一种特殊情况，可以直接放到上面去的(v下没有链)*/</span></span><br><span class="line">            dp[<span class="number">1</span>][u][i]=max(dp[<span class="number">1</span>][u][i],dp[<span class="number">0</span>][u][i<span class="number">-1</span>]+w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!sz[u]) dp[<span class="number">0</span>][u][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    ++sz[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,v;IN(x),IN(y),IN(v),add(x,y,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-0x3f</span>,<span class="keyword">sizeof</span>(dp));<span class="comment">/*极小值*/</span></span><br><span class="line">    ++k;dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,max(dp[<span class="number">0</span>][<span class="number">1</span>][k],max(dp[<span class="number">1</span>][<span class="number">1</span>][k],dp[<span class="number">2</span>][<span class="number">1</span>][k])));</span><br><span class="line">    <span class="comment">/*输出最优👆*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>如果打出了表，你会发现对于单调递增的 $k$ ，关于其的最优解所形成的一定是一个上凸的函数，感性理解的话就是说 $k$ 小的时候我们可以选更多的更大的边，但是随着 $k$ 增大，这些边不够了，我们只能选更小的或者是拆掉一些边(将一条链断成两条增加链数) ，这样子答案就好慢慢变小。</p><p>因为是上凸函数，我们可以使用 $\rm{DP}$ 凸优化，带权二分/$wqs$二分套路优化一下就可以过了。</p><p>注意二分边界！还有就是需要注意一个点也可以成为一条链的情况！</p><h3 id="Code-100-pts"><a href="#Code-100-pts" class="headerlink" title="Code (100 $pts$ )"></a>Code (100 $pts$ )</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">6e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e18</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,head[N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> &#123;</span></span><br><span class="line">    ll x;<span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> date&amp;var) <span class="keyword">const</span> &#123;<span class="keyword">return</span> x==var.x?y&gt;var.y:x&lt;var.x;&#125;</span><br><span class="line">    date <span class="keyword">operator</span> + (<span class="keyword">const</span> date&amp;var) &#123;<span class="keyword">return</span> (date)&#123;x+var.x,y+var.y&#125;;&#125;</span><br><span class="line">    date <span class="keyword">operator</span> + (<span class="keyword">const</span> ll&amp;var) &#123;<span class="keyword">return</span> (date)&#123;x+var,y&#125;;&#125;</span><br><span class="line">&#125;dp[<span class="number">3</span>][N];</span><br><span class="line"><span class="function">ll <span class="title">number</span><span class="params">(date var)</span> </span>&#123;<span class="keyword">return</span> var.x;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125; G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[v],u,w&#125;,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(ll add,<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>][u]=(date)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    dp[<span class="number">1</span>][u]=(date)&#123;-inf,<span class="number">0</span>&#125;,</span><br><span class="line">    dp[<span class="number">2</span>][u]=(date)&#123;add,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=head[u];e;e=G[e].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[e].to;</span><br><span class="line">        ll w=G[e].val;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        check(add,v,u);</span><br><span class="line">        date num=max(dp[<span class="number">0</span>][v],max(dp[<span class="number">1</span>][v],dp[<span class="number">2</span>][v]));</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">2</span>][u]=max(dp[<span class="number">2</span>][u],dp[<span class="number">2</span>][u]+num);</span><br><span class="line">        dp[<span class="number">2</span>][u]=max(dp[<span class="number">2</span>][u],dp[<span class="number">1</span>][u]+(date)&#123;w,<span class="number">0</span>&#125;+max(dp[<span class="number">0</span>][v],dp[<span class="number">1</span>][v]+(date)&#123;-add,<span class="number">-1</span>&#125;));</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">1</span>][u]=max(dp[<span class="number">1</span>][u],dp[<span class="number">1</span>][u]+num);</span><br><span class="line">        dp[<span class="number">1</span>][u]=max(dp[<span class="number">1</span>][u],dp[<span class="number">0</span>][u]+(date)&#123;w,<span class="number">0</span>&#125;+max(dp[<span class="number">1</span>][v],dp[<span class="number">0</span>][v]+(date)&#123;add,<span class="number">1</span>&#125;));</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][u]=dp[<span class="number">0</span>][u]+num;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">wqs</span><span class="params">(ll sum)</span> </span>&#123;</span><br><span class="line">    ll l=-sum,r=sum,mid;</span><br><span class="line">    date now;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r) &#123;</span><br><span class="line">        mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,check(mid,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        now=max(dp[<span class="number">0</span>][<span class="number">1</span>],max(dp[<span class="number">1</span>][<span class="number">1</span>],dp[<span class="number">2</span>][<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">if</span>(!(now.y^k)) &#123;l=r=mid;<span class="keyword">break</span>;&#125;</span><br><span class="line">        now.y&lt;k?l=mid:r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mid=l;check(mid,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    now=max(dp[<span class="number">0</span>][<span class="number">1</span>],max(dp[<span class="number">1</span>][<span class="number">1</span>],dp[<span class="number">2</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> now.x-mid*k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("lct2.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("P4383.out","w",stdout);</span></span><br><span class="line">    IN(n),IN(k);++k;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,v;IN(x),IN(y),IN(v);</span><br><span class="line">        add(x,y,v),sum+=<span class="built_in">abs</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,wqs(sum));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
            <tag> wqs二分/带权二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [ZJOI2010]基站选址  线段树优化DP  luoguP2065</title>
      <link href="/2019/05/09/%5B%E9%A2%98%E8%A7%A3%5DluoguP2605/"/>
      <url>/2019/05/09/%5B%E9%A2%98%E8%A7%A3%5DluoguP2605/</url>
      
        <content type="html"><![CDATA[<p>这题居然只有 $luogu$ 有……无法水多倍经验了（逃。</p><p>朴素的 $\rm{DP}$ 很简单，设 $f_{i,j}$ 表示前 $i$ 个村庄建了 $j$ 个基站的花费最小值，注意因为是<strong>前 $i$ 个</strong>，所有完全无视掉后面的所有村庄了。转移的话直接枚举一个 $k$ ，从 $f_{k,j-1}$ 转移过来即可，加上的代价就是中间村庄产生的补偿费用。</p><a id="more"></a><p>那么这样的复杂度就是 $O(n^2k)$ [<del>爆炸</del>] ，我们需要做到的就是如何快速计算中间村庄的补偿，那么外围的 $\rm{DP}$ 复杂度其实是 $O(nk)$ 的，如果中间的补偿可以快速算出那么就可以过掉了。</p><p>我们对于每一个村庄 $i$ ，用二分计算出最左边可以覆盖到其的村庄 $st_i$ 和最右边可以覆盖到其的村庄 $ed_i$ ，那么我们从 $i$ 到 $i+1$ 的时候，所有 $ed$ 值为 $i$ 的点都将失去右边的依靠，这个时候对于 $i+1$ 的最优转移点 $k$ ，有对于一个失去”右边依靠”的村庄 $j$ ，如果 $k$ 的范围在 $[1,st_j-1]$ 之间的话那么就要给 $j$ 补偿了。</p><p>于是我们考虑用线段树优化，对于这样一个村庄 $j$ ，我们在 $[1,st_j-1]$ 区间集体加上 $w_j$ ，表示决策点如果落在那个区间就要多付出 $w_j$ 的费用。</p><p>线段树的每个位置维护的就是 $f_k+$ $i$ 和 $k$ 中间村庄的补偿费用，因为我们每一次的答案就是整个区间的 $\min$ 值了，只是随着 $i$ 的变化线段树维护的值也应当做出变化，所以就会向上面那样更新。</p><p>不过有个问题，有个情况没有考虑道：第 $n$ 个村庄不建基站的情况，对于一个小于 $n$ 的 $i$ ，$f_i$ 管不了 $n$ ，那么 $f_n$ 也仅仅表示 $n$ 建站的情况。</p><p>所以我们需要在 $n+1$ 的位置上建一个辅助基站，当然 $c_{n+1}=0$ ，这样子就很好计算 <q>第 $n$ 个村庄不建站时全局的花费了</q> 。</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">1e2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link</span>&#123;</span><span class="keyword">int</span> nxt,to;&#125; G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;G[++cnt]=(link)&#123;head[u],v&#125;;head[u]=cnt;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,d[N],c[N],s[N],w[N],f[N],st[N],ed[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ls(x) ((x)&lt;&lt;1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rs(x) ((x)&lt;&lt;1|1)</span></span><br><span class="line">    <span class="keyword">int</span> val[N&lt;&lt;<span class="number">2</span>],tag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        val[ls(x)]+=tag[x],tag[ls(x)]+=tag[x];</span><br><span class="line">        val[rs(x)]+=tag[x],tag[rs(x)]+=tag[x];</span><br><span class="line">        tag[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        tag[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;val[x]=f[l];<span class="keyword">return</span>;&#125;</span><br><span class="line">        build(ls(x),l,mid),build(rs(x),mid+<span class="number">1</span>,r);</span><br><span class="line">        val[x]=min(val[ls(x)],val[rs(x)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L==l&amp;&amp;r==R) &#123;val[x]+=v,tag[x]+=v;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(tag[x]) pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(R&lt;=mid) change(ls(x),l,mid,L,R,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid) change(rs(x),mid+<span class="number">1</span>,r,L,R,v);</span><br><span class="line">        <span class="keyword">else</span> change(ls(x),l,mid,L,mid,v),change(rs(x),mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,v);</span><br><span class="line">        val[x]=min(val[ls(x)],val[rs(x)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L==l&amp;&amp;r==R) <span class="keyword">return</span> val[x];</span><br><span class="line">        <span class="keyword">if</span>(tag[x]) pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> query(ls(x),l,mid,L,R);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid) <span class="keyword">return</span> query(rs(x),mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(query(ls(x),l,mid,L,mid),query(rs(x),mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) IN(d[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(c[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(s[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(w[i]);</span><br><span class="line">    ++n;w[n]=d[n]=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        st[i]=lower_bound(d+<span class="number">1</span>,d+<span class="number">1</span>+n,d[i]-s[i])-d;</span><br><span class="line">        ed[i]=lower_bound(d+<span class="number">1</span>,d+<span class="number">1</span>+n,d[i]+s[i])-d;</span><br><span class="line">        <span class="keyword">if</span>(d[ed[i]]&gt;d[i]+s[i]) ed[i]--;add(ed[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j) &#123;</span><br><span class="line">                f[j]=res+c[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> e=head[j];e;e=G[e].nxt)</span><br><span class="line">                    res+=w[G[e].to];</span><br><span class="line">            &#125;ans=f[n];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j) &#123;</span><br><span class="line">                f[j]=(j&gt;i<span class="number">-1</span>?query(<span class="number">1</span>,<span class="number">1</span>,n,i<span class="number">-1</span>,j<span class="number">-1</span>):<span class="number">0</span>)+c[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> e=head[j],v;e;e=G[e].nxt)</span><br><span class="line">                    <span class="keyword">if</span>(st[v=G[e].to]&gt;<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,st[v]<span class="number">-1</span>,w[v]); </span><br><span class="line">            &#125;ans=min(ans,f[n]);</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 最长上升子序列  状压DP  bzoj3591</title>
      <link href="/2019/05/08/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3591/"/>
      <url>/2019/05/08/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3591/</url>
      
        <content type="html"><![CDATA[<p>这题脑洞很大——你需要状压 $\rm{LTS}$ 数组，而且是三进制状压。复杂度很高……大约是 $O(n3^n)$ 左右，当然实际复杂度会小于这个，$1000^+ms$ 是可以通过的。</p><p>对于每一个数字，分别记录其三种状态：该数字没有进过 $\rm{LTS}$ 数组记为 $0$ ，该数字在 $\rm{LTS}$ 数组中记为 $1$ ，该数字进过 $\rm{LTS}$ 数组，结果又出来了记为 $2$ 。</p><a id="more"></a><p>设 $f_i$ 表示 $1$ 到 $n$ 所有数字的状态为 $i$ 时的方案数，接下来考虑转移，首先对于这个 $i$ 状态我们还原其 $\rm{LTS}$ 数组，也就是当前位置上为 $1$ 的那些数字。接着我们枚举所有位置上为 $0$ 的数字，并考虑将其插入当前的 $\rm{LTS}$ 当中。替换掉一个状态为 $1$ 的数。</p><p>我们就选定这个要被替换的状态为 $1$ 的数为当前 $\rm{LTS}$ 中第一个大于当前要加入的数的数，那么这样替换后 $\rm{LTS}$ 依然满足其性质。</p><p>维护一个指针扫一遍就好，碰到需要换的数就将其标记为 $2$ ，然后将当前需要加入的数变成 $1$ 即可。</p><p>需要注意的是，我们这里的”加入”并不是只的在原数组中加入，也就是说跟排列什么的几乎扯不上关系，比如说当前序列为 $1,2,3,4,5$ ，$\rm{LTS}$ 数组为 $1,3,4$ ，我们在这里将 $3$ 丢掉，然后加入 $2$ ，其实是不变的。</p><p>当所有数字都被考虑过的时候就可以直接统计答案了，普通的 $\rm{LTS}$ 也是所有数字都要考虑一回的。</p><p>在做 $\rm{DP}$ 转移的时候我们顺带满足一下题面给出的那些数的递增即可，那么可以保证所有被统计的状态都带有题面要求的 $\rm{LTS}$ 。</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,ans,arr[N],pos[N],mul[N];</span><br><span class="line"><span class="keyword">int</span> hep[N],var[N],dp[<span class="number">14348907</span>+<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"3591.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"3591.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) </span><br><span class="line">        IN(arr[i]),--arr[i],pos[arr[i]]=i;</span><br><span class="line">    mul[<span class="number">0</span>]=dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) mul[i]=mul[i<span class="number">-1</span>]*<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mul[n];++i) <span class="keyword">if</span>(dp[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> state=i,top=<span class="number">0</span>,num=<span class="number">0</span>,per=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j) &#123;</span><br><span class="line">            var[j]=state%<span class="number">3</span>,state/=<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(var[j]) ++num;</span><br><span class="line">            <span class="keyword">if</span>(var[j]==<span class="number">1</span>) hep[top++]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==n) &#123;ans+=dp[i];<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(var[j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(pos[j]&amp;&amp;!var[arr[pos[j]<span class="number">-1</span>]]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span>(hep[per]&lt;j&amp;&amp;per&lt;top) ++per;</span><br><span class="line">            <span class="keyword">if</span>(per&gt;=m) <span class="keyword">continue</span>;</span><br><span class="line">            state=i+mul[j];</span><br><span class="line">            <span class="keyword">if</span>(per&lt;top) state+=mul[hep[per]];</span><br><span class="line">            dp[state]+=dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP进阶必刷题单</title>
      <link href="/2019/05/07/DP%E8%BF%9B%E9%98%B6%E5%BF%85%E5%88%B7%E9%A2%98%E5%8D%95/"/>
      <url>/2019/05/07/DP%E8%BF%9B%E9%98%B6%E5%BF%85%E5%88%B7%E9%A2%98%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="在此输入你的密码以便阅读全文" />    <label for="pass">在此输入你的密码以便阅读全文</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI2009]双递增序列  线性DP  luoguP4728</title>
      <link href="/2019/05/07/%5B%E9%A2%98%E8%A7%A3%5DluoguP4728/"/>
      <url>/2019/05/07/%5B%E9%A2%98%E8%A7%A3%5DluoguP4728/</url>
      
        <content type="html"><![CDATA[<p>其实这题很容易设出四维的 $\rm{DP}$ ，也就是用 $dp_{i,j,x,y}$ 表示<strong>第一个序列的终止位置为 $i$ 且长度为 $x$，第二个序列的终止位置为 $j$ 且长度为 $y$ 是否成立</strong> ，然后也很容易想到降维，枚举当前序列长度 $len$ 的时候知道了 $x$ 就已经知道 $y$ 了—— $y$ 就是 $len-x$ 。也就是说现在的 $DP$ 是 $O(n^3)$ 的，还需要优化。</p><a id="more"></a><p>考虑设 $dp_{i,j}$ 表示第一个序列的最终位置为 $i-1$ 且长度为 $j$ 时第二个序列的最终位置的最小值。枚举当前数字 $i$ ，然后分两种情况进行转移——将 $a_i$ 放到第一个序列末尾 $\texttt{and}$ 将 $a_i$ 放到第二个序列末尾。</p><p>放到第一个序列末尾很好想：因为当前第一个序列的结尾处就是 $a_{i-1}$ ，比较一下大小直接转移就好了：</p><script type="math/tex; mode=display">dp_{i,j}=min(dp_{i,j},dp_{i-1,j-1}) \ \ \ (a_i>a_{i-1})</script><p>因为第二个序列的末尾没变，所有直接转移就好。</p><p>接下来考虑将第 $i$ 个数放到第二个序列末尾的情况，其实第一个序列和第二个序列没区别，当然除了名字上有一个字的差异，假设第 $i-1$ 个数是第二个序列末尾，当前第一个序列的长度为 $j-1$ ，那么第二个序列的长度因该就是 $(i-1)-(j-1)$ 了，因为我们假设了第 $i-1$ 个数是第二个序列末尾，那么 $dp_{i-1,i-j}$ 又可以被解释为<strong>第二个序列的末尾为 $i-1$ 个数且第二个序列的长度为 $i-j$ 的时候第一个序列的末尾的最小值</strong> ，如果这个最小值小于 $a_i$ ，说明 $a_i$ 可以接到第一个序列前面，那么这个时候第二个序列的末尾为 $a_{i-1}$ ，显然又有转移：</p><script type="math/tex; mode=display">dp_{i,j}=min(dp_{i,j},a_{i-1}) \ \ \ (a_i>dp_{i-1,i-j})</script><p>开始的时候我们将 $dp$ 数组赋成极大值，然后最后判断一下 $dp_{n,n/2}$ 这个状态变小没有就好。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e3</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N],f[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;IN(n);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(a[i]);</span><br><span class="line">    a[<span class="number">0</span>]=f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        f[i][<span class="number">0</span>]=a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i&amp;&amp;j&lt;=n/<span class="number">2</span>;++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>]) f[i][j]=min(f[i][j],f[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;f[i<span class="number">-1</span>][i-j]) f[i][j]=min(f[i][j],a[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> f[n][n/<span class="number">2</span>]&lt;<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;IN(T);</span><br><span class="line">    <span class="keyword">while</span>(T--) <span class="built_in">puts</span>(solve()?<span class="string">"Yes!"</span>:<span class="string">"No!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉这道题的确很绕……=。=</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HEOI2013]SAO  组合数学+树形DP  luoguP4099</title>
      <link href="/2019/05/06/%5B%E9%A2%98%E8%A7%A3%5DluoguP4099/"/>
      <url>/2019/05/06/%5B%E9%A2%98%E8%A7%A3%5DluoguP4099/</url>
      
        <content type="html"><![CDATA[<p>$loj$ 上没有此题，$bzoj$ 上是权限题，对于不上 $yzoj$ 的我来说只能去洛谷做题了：<a href="https://www.luogu.org/problemnew/show/P4099" target="_blank" rel="noopener">转送门😄</a> 。</p><p>我们先不考虑边的权值(&lt;与&gt;)，这样子 $n-1$ 条边组成的就是树了，很显然是需要我们求出这棵树的合法拓扑序的个数，考虑使用 $\rm{DP}$ ，对于边的方向(即&lt;,&gt;) ，我们分类讨论即可。</p><p>首先的一个想法就是设 $f_u$ 表示点 $u$ 的子树的合法拓扑序的总数，但是这个时候如何计算呢<a id="more"></a>，对于一个 $u$ 的儿子 $v$ ，我们虽然知道 $u$ 和 $v$ 的攻克的前后关系，但是合并答案貌似并不好合并。这个时候我们增加一维 $j$ ，$f_{u,j}$ 表示 $u$ 的子树的所有合法拓扑序中 $u$ 在第 $j$ 位上的总状态数。</p><p>也就是说，对于一个必须在 $u$ 前面攻克的关卡 $v$ ，我们考虑枚举一个 $j$ ，$v$ 子树中 $j$ 个结点在合并 $u,v$ 后放到 $u$ 前面，另外 $sz_v-j$ 个放到 $u$ 后面，然后枚举一个 $k$ ，表示当前的 $v$ 排在 $v$ 子树的拓扑序中的第 $k$ 位，只有 $k\leq j$ 的时候 $v$ 才可以转移 $u$ ，因为这个时候 $v$ 在 $u$ 前面。</p><p>现在再来考虑$“$ $j$ 个结点放在 $u$ 前面 $”$ 的方案数和$“$ $sz_v-j$ 个结点放在 $u$ 后面的方案数$”$，这个显然可以用组合数算，合并 $v$ 的子树后，$u$ 的排名从 $i$ 变成了 $i+j$ ，也就是说我们需要将 $j$ 个乱序插入到 $u$ 前面 $i+j-1$ 个数中，方案数显然为 $C_{i+j-1}^{j}$ ，那么现在总节点数显然为 $sz_u+sz_v$ (现在 $sz_u$ 和 $sz_v$ 还没有并在一起) ，$u$ 后面理所当然有 $sz_u+sz_v-i-j$ 个位置，将 $sz_v-j$ 个数插进去的方案数显然为 $C_{sz_u+sz_v-i-j}^{sz_v-j}$ 个，这两个数再乘上 $f_{u,i}$ 和 $f_{v,k}$ 就好了，这一次合并后 $u$ 的位置显然到了 $i+j$ ，所以 $f_{u,i+j}$ 显然要加上这一组贡献。</p><p>经整理后的转移方程如下：</p><script type="math/tex; mode=display">pls(f_{u,i+j},f_{u,i}\cdot f_{v,k}\cdot C_{i+j-1}^{j}\cdot C_{sz_u+sz_v-i-j}^{sz_v-j})</script><p>代码就是这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1</span> to sz[u]</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span> to sz[v]</span><br><span class="line">        <span class="keyword">for</span> k=<span class="number">1</span> to j</span><br><span class="line">            pls(f[u][i+j],f[u][i]*f[v][k]*C[i+j<span class="number">-1</span>][j]*C[sz[u]+sz[v]-i-j][sz[v]-j])</span><br></pre></td></tr></table></figure><p>这是 $n^3$ 的，过不去。考虑前缀和优化，几下 $f_v$ 的前缀和，最后的一层循环就可以直接丢掉了。</p><p>这个就是 $v$ 要在 $u$ 前面的情况，$u$ 在 $v$ 前面的情况和这个差不多，不过转移的时候 $j$ 就要从 $0$ 开始了，因为那个时候 $u$ 前面是可以不多放任何东西的，还有就是 $u$ 在 $v$ 前面的时候注意 $k\geq j$ 时才可以转移 !</p><p>最后的答案就是 $\sum\limits_{i=1}^{n} f_{1,i}$ 啦。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> C[N][N],f[N][N],pre[N][N],suf[N][N],sz[N],g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[v],u,w^<span class="number">1</span>&#125;,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OI &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pls</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> y)</span> </span>&#123;x+=y;<span class="keyword">if</span>(x&gt;=mod)x-=mod;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> OI;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    sz[u]=f[u][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=head[u];l;l=G[l].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[l].to,w=G[l].val;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line">        <span class="keyword">if</span>(w) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sz[u];++i)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=sz[v];++j)</span><br><span class="line">                    pls(g[i+j],<span class="number">1l</span>l*f[u][i]*pre[v][j]%mod*C[i+j<span class="number">-1</span>][j]%mod</span><br><span class="line">                    *C[sz[u]+sz[v]-i-j][sz[v]-j]%mod);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sz[u];++i)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=sz[v];++j)</span><br><span class="line">                    pls(g[i+j],<span class="number">1l</span>l*f[u][i]*suf[v][j+<span class="number">1</span>]%mod*C[i+j<span class="number">-1</span>][j]%mod</span><br><span class="line">                    *C[sz[u]+sz[v]-i-j][sz[v]-j]%mod);</span><br><span class="line">        &#125;</span><br><span class="line">        sz[u]+=sz[v];</span><br><span class="line">        <span class="built_in">memcpy</span>(f[u],g,<span class="keyword">sizeof</span>(g));</span><br><span class="line">    &#125;</span><br><span class="line">    pre[u][<span class="number">0</span>]=suf[u][sz[u]+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sz[u];++i) pre[u][i]=(pre[u][i<span class="number">-1</span>]+f[u][i])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=sz[u];i&gt;=<span class="number">1</span>;--i) suf[u][i]=(suf[u][i+<span class="number">1</span>]+f[u][i])%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head)),cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">int</span> n;IN(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;<span class="keyword">char</span> sign;</span><br><span class="line">        IN(u),sign=getchar(),IN(v);</span><br><span class="line">        add(u+<span class="number">1</span>,v+<span class="number">1</span>,sign==<span class="string">'&lt;'</span>?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) pls(ans,f[<span class="number">1</span>][i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*预处理组合数*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N<span class="number">-2</span>;++i) C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N<span class="number">-2</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N<span class="number">-2</span>;++j)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">    <span class="keyword">int</span> T;IN(T);</span><br><span class="line">    <span class="keyword">while</span>(T--) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,solve());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能有人会问，如果 $u$ 的儿子 $v$ 下面的边全都是 $&gt;$ ，并且 $u$ 连向 $v$ 的边也是 $&gt;$ ，那么这个时候 $v$ 以及其子树的所有点都必须在 $u$ 前面完成，在转移的时候为什么可以 $“$ 提出 $j$ 个结点放到 $u$ 前面 $”$ 呢？</p><p>其实想想就可以明白，在向上统计答案的时候对于一个 $v$ 的儿子 $a$ ，我们只统计了合并后 $a$ 在 $v$ 前面的情况，同样在 $u$ 统计 $v$ 时也只是统计了合并后 $v$ 在 $u$ 前面的情况，所有我们也只是统计了 $“$ $a$ 在 $v$ 前面且 $v$ 在 $u$ 前面 $”$ 的情况，所有被统计的情况一定是合法的。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  [HAOI2018]苹果树  组合数学  loj2526</title>
      <link href="/2019/05/05/%5B%E9%A2%98%E8%A7%A3%5Dloj2526/"/>
      <url>/2019/05/05/%5B%E9%A2%98%E8%A7%A3%5Dloj2526/</url>
      
        <content type="html"><![CDATA[<p>有趣的题目，可爱的传送门：<a href="https://loj.ac/problem/2526" target="_blank" rel="noopener">戳这呢=￣ω￣=</a></p><p>刚开始往概率 $\rm{DP}$ 想了，发现对于一个点的概率是好算，但是如果求贡献的话就会很难办。最后万般无赖的点开了题解，发现居然是……组合数学？其实和 $\rm{DP}$ 没有半毛钱关系。</p><p>我们考虑一个节点 $i$ ，我们枚举其子树大小 $j$ 。现在考虑最终有多少种合法的情况可以使得 $i$ 的子树大小恰好为 $j$ 。</p><a id="more"></a><p>易知节点数为 $n$ 的二叉树的总形态数为 $n!$ ，而且 $i$ 子树下的所有节点的编号一定要大于 $i$ ，我们考虑”先将 $i$ 子树构造出来再填入节点”的过程，子树的形态数显然为 $j!$ ，然后我们只能选剩下的 $n-i$ 个节点(编号要比 $i$ 大) ，填入剩下的 $j-1$ 个位置( $i$ 占了一个位置) ，显然这样的方案数为 $C_{n-i}^{j-1}$ 。</p><p>这样的一个 $i$ ，其子树大小为 $j$ ，那么它可以做出多少贡献呢？考虑 $fa_i \Rightarrow i$ 这条边会经过多少次，显然是 $j\cdot(n-j)$ 次( $j$ 为子树节点个数，$n-j$ 为上面的节点个数) ，也就是说这样的方案可以造成 $j\cdot (n-j)$ 的贡献。</p><p>那么现在 $i$ 的子树得到确定了，我们将 $i$ 以及其子树看做一个点，我们考虑 $1$ 到 $i$ 这些节点，它们可以以任意形态组成一棵树，方案数是 $i!$ 。</p><p>接着我们需要将剩下的 $n-j-(i-1)$ 个节点挂到树上去。对于第 $i$ 个挂到树上的点，它有 $i$ 个位置可以挂。但是因为 $i$ 一定要占一个位置，所以这个节点只有 $i-1$ 个位置可以挂了，第二个多出来的节点就有 $i$ 个位置可以挂……第 $k$ 个显然有 $i-2+k$ 个位置可以挂。也就是说这些点挂上去的总方案数为 $\prod\limits_{k=1}^{n-j-(i-1)} (i-2+k)$ 。</p><p>将上面的乘起来就是这一组 $i,j$ 对答案造成的贡献了：</p><script type="math/tex; mode=display">j!\cdot C_{n-i}^{j-1}\cdot j\cdot (n-j)\cdot i!\cdot\prod\limits_{k=1}^{n-j-(i-1)} (i-2+k)</script><p>$\prod\limits_{k=1}^{n-j-(i-1)} (i-2+k)$ 比较不好计算，但是简单的变化后发现这个是和 $(n-j-1)!/(i-2)!$ 等价的，我们带进原式子。</p><script type="math/tex; mode=display">j!\cdot C_{n-i}^{j-1}\cdot j\cdot (n-j)\cdot i!\cdot(n-j-1)!/(i-2)!\\\\=j!\cdot C_{n-i}^{j-1}\cdot j\cdot (n-j)\cdot i\cdot (i-1)\cdot(n-j-1)!\\\\=j!\cdot C_{n-i}^{j-1}\cdot j\cdot i\cdot (i-1)\cdot (n-j)!</script><p>这样就很好算了，我们预处理组合数和阶乘，上面的式子 $O(1)$ 算~</p><p>代码很短。</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e3</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,p,ans,fac[N],C[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OI &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pls</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> y)</span> </span>&#123;x+=y;x%=p;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> OI;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(p);</span><br><span class="line">    fac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;++j)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n-i+<span class="number">1</span>;++j)</span><br><span class="line">            pls(ans,(ll)fac[j]*fac[n-j]%p*C[n-i][j<span class="number">-1</span>]%p*(i*(i<span class="number">-1</span>))%p*j%p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [六省联考2017]分手是祝愿  概率DP  loj2145</title>
      <link href="/2019/05/05/%5B%E9%A2%98%E8%A7%A3%5Dloj2145/"/>
      <url>/2019/05/05/%5B%E9%A2%98%E8%A7%A3%5Dloj2145/</url>
      
        <content type="html"><![CDATA[<p>概率神仙题的传送门：<a href="https://loj.ac/problem/2145" target="_blank" rel="noopener"><del>别戳偏了</del></a></p><p>设 $f_i$ 表示还剩下 $i$ 盏灯亮到还剩下 $i-1$ 盏灯亮的期望操作次数，这个时候有 $\frac{i}{n}$ 的概率按中亮的，但是没有按中亮的的话就只能退到 $f_{i+1}$ 。不难列出转移方程：</p><script type="math/tex; mode=display">f_i=\frac{i}{n}+(1-\frac{i}{n})\cdot (1+f_i+f_{i+1})</script><p>因为转移式中有个 $f_i$ ，有些不好办……推一推式子康康。</p><a id="more"></a><script type="math/tex; mode=display">f_i=\frac{i}{n}+1\cdot (1+f_i+f_{i+1})-\frac{i}{n}\cdot (1+f_i+f_{i+1})\\\\f_i=\frac{i}{n}+1+f_i+f_{i+1}-\frac{i}{n}-\frac{i}{n}f_i-\frac{i}{n}f_{i+1}\\\\f_i=1+f_i+f_{i+1}-\frac{i}{n}f_i-\frac{i}{n}f_{i+1}\\\\\frac{i}{n}f_i=1+f_{i+1}-\frac{i}{n}f_{i+1}\\\\f_i=\frac{1+f_{i+1}-\frac{i}{n}f_{i+1}}{\frac{i}{n}}\\\\f_i=\frac{n\cdot(1+f_{i+1})-i\cdot f_{i+1}}{i}\\\\f_i=\frac{n+(n-i)\cdot f_{i+1}}{i}\\\\f_i=1+\frac{(n-i)\cdot (f_{i+1}+1)}{i}</script><p>预处理逆元就可以直接计算了，记得最后乘上 $n!$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">100003</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,step,a[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,f[N],inv[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(k);</span><br><span class="line">    inv[<span class="number">0</span>]=<span class="number">0</span>,inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) inv[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)(p-p/i)*inv[p%i]%p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=i) g[j].push_back(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) <span class="keyword">if</span>(a[i]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;g[i].size();++j) a[g[i][j]]^=<span class="number">1</span>;</span><br><span class="line">        ++step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(step&lt;=k) ans=step;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        f[n]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">1</span>;--i) f[i]=(<span class="number">1l</span>l+(<span class="number">1l</span>l*n-i)*(f[i+<span class="number">1</span>]+<span class="number">1</span>)*inv[i])%p;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=step;i&gt;k;--i) ans=(ans+f[i])%p;</span><br><span class="line">        ans=(ans+k)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ans=(<span class="number">1l</span>l*i*ans)%p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 概率 </tag>
            
            <tag> 期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SCOI2014]方伯伯的玉米田  树状数组优化DP  luoguP3287</title>
      <link href="/2019/05/04/%5B%E9%A2%98%E8%A7%A3%5DluoguP3287/"/>
      <url>/2019/05/04/%5B%E9%A2%98%E8%A7%A3%5DluoguP3287/</url>
      
        <content type="html"><![CDATA[<p>以后不要被这种傻逼题给蒙骗了。传送门：<a href="https://www.luogu.org/problemnew/show/P3287" target="_blank" rel="noopener">方伯伯的传送门=。=</a></p><p>首先要明确一个道理，每一次拔高的右端点一定是 $n$ ，如果是只拔高中间部分，右边的又要尽可能大于中间部分，索性一起拔了，这一定是最优的。</p><p>设 $f_{i,j}$ 表示第 $i$ 个玉米被拔高了 $j$ 次时以 $i$ 结尾的最长不下降子序列长度，容易得出转移方程：</p><a id="more"></a><script type="math/tex; mode=display">f_{i,j}=\max\{f_{k,l}+1\} \ \ (k<i,l\leq j,h_i+j\geq h_k+l)</script><p>可能有人会问为什么 $l\leq j$ ，很显然就是上面的道理，越大的 $i$ 一定拔高次数是单调不减的。</p><p>发现上面的转移其实是 $O(n^2k^2)$ 的，万恶的出题人不会给这个复杂度一丁点分……这个时候用树状数组优化转移，发现上面有三个限制条件，我们正着枚举 $i$ ，就已经满足第一个条件了，因为这个时候树状数组中的都是小于 $i$ 的 $k$ 。然后将每个点按照 $(j+1,h_i+j)$ 放到平面上，然后树状数组统计答案即可。</p><p>树状数组维护的是 $\max$  ，不是和。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">5e2</span>+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N],n,k,mx;</span><br><span class="line"><span class="keyword">namespace</span> BIT&#123;</span><br><span class="line">    <span class="keyword">int</span> c[N][<span class="number">5009</span>+K];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">const</span> <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;x&lt;=mx+k;x+=(x&amp;-x))<span class="keyword">for</span>(<span class="keyword">int</span> i=y;i&lt;=k+<span class="number">1</span>;i+=(i&amp;-i))</span><br><span class="line">                c[x][i]=max(c[x][i],v); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x-=(x&amp;-x))<span class="keyword">for</span>(<span class="keyword">int</span> i=y;i;i-=(i&amp;-i))</span><br><span class="line">                ans=max(ans,c[x][i]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> BIT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),mx=max(mx,a[i]);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)   </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=k;~j;--j) &#123;</span><br><span class="line">            <span class="keyword">int</span> res=query(a[i]+j,j+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">            ans=max(ans,res),update(a[i]+j,j+<span class="number">1</span>,res);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 二维树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SHOI2014]概率充电器  概率DP  loj2192</title>
      <link href="/2019/05/02/%5B%E9%A2%98%E8%A7%A3%5Dloj2192/"/>
      <url>/2019/05/02/%5B%E9%A2%98%E8%A7%A3%5Dloj2192/</url>
      
        <content type="html"><![CDATA[<p>传送门在这：<a href="https://loj.ac/problem/2192" target="_blank" rel="noopener">我是传送门$QwQ$</a></p><p>其实不难发现，我们需要算的就是 $\sum a_i$ (其中 $a_i$ 为点 $i$ 的通电概率) 。我们需要算出每个点的通电概率即可。因为有些点可以自己发电，所以我们要分别考虑父亲和儿子的通电情况。</p><p>因为直接设通电概率有些棘手，我们设 $f_i$ 表示点 $i$ 的儿子没有向点 $i$ 通电的概率，这个比较好算，我们顺带算上点 $i$ 自己发电的概率。</p><a id="more"></a><p>枚举每一个儿子，对于这个儿子只有两种情况：该儿子没有通上电，该儿子通上电了且传送失败。两种情况的概率都很好算。我们可以列出转移方程：</p><script type="math/tex; mode=display">f_u=(1-q_u)\cdot \prod (f_v+(1-f_v)\cdot(1-G_i.p))</script><p>其中 $(1-q_u)$ 显然为该点本身不通电的概率，然后枚举儿子 $v$ ，$f_v$ 就是该儿子本来就没有通上电的概率，$(1-f_v)\cdot(1-G_i.p)$ 就是通上电的传送失败(注：$G_i.p$ 是当前连接 $u,v$ 的边的通电概率) 。</p><p>那么如何计算父亲传来的电呢？设 $g_i$ 表示点 $i$ 的父亲没有向点 $i$ 通电的概率。计算一下父节点不通电的概率，注意不要计算上该儿子的贡献，不然会乱。计算完不通电的概率后分上面两种情况讨论即可。</p><script type="math/tex; mode=display">res=g_u\cdot f_v / (f_v+(1-f_v)\cdot(1-G_i.p))\\\\g_v=res+(1-res)\cdot(1-G_i.p)</script><p>两边 $dfs$ 就可以搞定。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ans,f[N],g[N],q[N];</span><br><span class="line"><span class="keyword">int</span> head[N],cnt,n,tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to;<span class="keyword">double</span> p;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">double</span> p)</span> </span>&#123;G[++cnt]=(Edge)&#123;head[x],y,p&#125;,head[x]=cnt;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    f[u]=<span class="number">1</span>-q[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u],v;i;i=G[i].nxt) </span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)!=fa)</span><br><span class="line">            dfs1(v,u),f[u]*=(f[v]+(<span class="number">1</span>-f[v])*(<span class="number">1</span>-G[i].p));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u],v;i;i=G[i].nxt) </span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)!=fa) &#123;</span><br><span class="line">            <span class="keyword">double</span> res=g[u]*f[u]/(f[v]+(<span class="number">1</span>-f[v])*(<span class="number">1</span>-G[i].p));</span><br><span class="line">            g[v]=res+(<span class="number">1</span>-res)*(<span class="number">1</span>-G[i].p);dfs2(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,p;IN(x),IN(y),IN(p);</span><br><span class="line">        add(x,y,p/<span class="number">100.0</span>),add(y,x,p/<span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i) IN(x),q[i]=x/<span class="number">100.0</span>;</span><br><span class="line">    dfs1(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    g[<span class="number">1</span>]=<span class="number">1.0</span>,dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ans+=<span class="number">1</span>-f[i]*g[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 概率 </tag>
            
            <tag> 期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2015]寿司晚宴  状压DP  loj2131</title>
      <link href="/2019/05/01/%5B%E9%A2%98%E8%A7%A3%5Dloj2131/"/>
      <url>/2019/05/01/%5B%E9%A2%98%E8%A7%A3%5Dloj2131/</url>
      
        <content type="html"><![CDATA[<p>首先，两个数不互质同理于两个数的质因子集合没有交集。考虑一下 $n\leq 30$ 的情况，可以发现这里面的质数也只有 $10$ 个，那么我们将每一个寿司分解质因数，然后将质因子压成一个状态。</p><p>设 $f[s1][s2]$ 表示小 $\rm{G}$ 吃了的寿司的状态为 $s1$ ，小 $\rm{W}$ 吃了的寿司的状态为 $s2$ 时的方案数。转移的时候枚举寿司，分别判断两个人是否能吃然后转移即可。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mul=<span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pri[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,s[N];ll p,f[<span class="number">2</span>][mul][mul];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OI &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pls</span><span class="params">(ll&amp;x,ll&amp;y)</span> </span>&#123;x+=y;<span class="keyword">if</span>(x&gt;p)x-=p;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> OI;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("1.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("1.out","w",stdout);</span></span><br><span class="line">    IN(n),IN(p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;++j)</span><br><span class="line">            <span class="keyword">if</span>(!(i%pri[j])) s[i]|=<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> now=i&amp;<span class="number">1</span>,lst=!now;</span><br><span class="line">        <span class="built_in">memcpy</span>(f[now],f[lst],<span class="keyword">sizeof</span>(f[lst]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s1=<span class="number">0</span>;s1&lt;mul;++s1)<span class="keyword">for</span>(<span class="keyword">int</span> s2=<span class="number">0</span>;s2&lt;mul;++s2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!f[lst][s1][s2]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(s2&amp;s[i])) pls(f[now][s1|s[i]][s2],f[lst][s1][s2]);</span><br><span class="line">            <span class="keyword">if</span>(!(s1&amp;s[i])) pls(f[now][s1][s2|s[i]],f[lst][s1][s2]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s1=<span class="number">0</span>;s1&lt;mul;++s1)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s2=<span class="number">0</span>;s2&lt;mul;++s2) pls(ans,f[n&amp;<span class="number">1</span>][s1][s2]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>可以知道 $n\leq 500$ 的时候，每一个数最多带上一个大于等于 $23$ 的质因子。我们首先将所有的寿司分为两类：带了大于等于 $23$ 的质因子的和没带的。</p><p>没带的显然可以向上面那样转移。那么带了的呢？这个显然不能压缩吧。</p><p>我们考虑将带了同样的大于等于 $23$ 的质因子的分成一组，这一组要不小 $\rm{G}$ 吃小 $\rm{W}$ 不吃，要不小 $\rm{W}$ 吃小 $G$ 不吃。分别讨论即可。</p><p>设 $f1[s1][s2]$ 表示这一组是小 $\rm{G}$ 吃时，小 $\rm{G}$ 吃了的寿司的状态为 $s1$ ， 小 $\rm{W}$ 吃了的寿司的状态为 $s2$ 时的方案数。同理，设 $f2[s1][s2]$ 表示这一组是小 $\rm{W}$ 吃时，小 $\rm{G}$ 吃了的寿司的状态为 $s1$ ， 小 $\rm{W}$ 吃了的寿司的状态为 $s2$ 时的方案数。分别转移就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=pos+<span class="number">1</span>;i&lt;=n;++i) &#123; <span class="comment">/*枚举这些寿司*/</span></span><br><span class="line">    <span class="keyword">if</span>(a[i].t!=a[i<span class="number">-1</span>].t) <span class="comment">/*大质因子不同了*/</span></span><br><span class="line">        <span class="built_in">memcpy</span>(f1,f,<span class="keyword">sizeof</span>(f)),<span class="built_in">memcpy</span>(f2,f,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s1=M<span class="number">-1</span>;~s1;--s1)<span class="keyword">for</span>(<span class="keyword">int</span> s2=M<span class="number">-1</span>;~s2;--s2) &#123;</span><br><span class="line">        <span class="comment">/*倒着枚举所以没用滚动数组*/</span></span><br><span class="line">        <span class="comment">/*所谓的分别转移*/</span></span><br><span class="line">        <span class="keyword">if</span>(!(s2&amp;a[i].s)) pls(f1[s1|a[i].s][s2],f1[s1][s2]);</span><br><span class="line">        <span class="keyword">if</span>(!(s1&amp;a[i].s)) pls(f2[s1][s2|a[i].s],f2[s1][s2]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*这一组结束了，需要合并答案*/</span></span><br><span class="line">    <span class="keyword">if</span>(a[i].t!=a[i+<span class="number">1</span>].t||i==n)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s1=<span class="number">0</span>;s1&lt;M;++s1)<span class="keyword">for</span>(<span class="keyword">int</span> s2=<span class="number">0</span>;s2&lt;M;++s2)</span><br><span class="line">            <span class="comment">/*因为f1[s1][s2]和f2[s1][s2]都重复算了一遍原来的</span></span><br><span class="line"><span class="comment">            f[s1][s2]，所以减掉后再取膜*/</span></span><br><span class="line">            f[s1][s2]=(f1[s1][s2]+f2[s1][s2]-f[s1][s2]+p)%p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">256</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pri[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line">ll p,f[M][M],f1[M][M],f2[M][M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span><span class="keyword">int</span> t,s;&#125;a[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span> </span>&#123;<span class="keyword">return</span> a.t&lt;b.t;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OI &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pls</span><span class="params">(ll&amp;x,ll&amp;y)</span> </span>&#123;x+=y;<span class="keyword">if</span>(x&gt;=p)x%=p;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> OI;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;IN(n),IN(p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        a[i].t=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;++j)<span class="keyword">if</span>(!(i%pri[j])) &#123;</span><br><span class="line">            a[i].s|=<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>),a[i].t/=pri[j];</span><br><span class="line">            <span class="keyword">while</span>(!(a[i].t%pri[j])) a[i].t/=pri[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    sort(a+<span class="number">2</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(a[pos].t==<span class="number">1</span>) ++pos;--pos;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=pos;++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s1=M<span class="number">-1</span>;~s1;--s1)<span class="keyword">for</span>(<span class="keyword">int</span> s2=M<span class="number">-1</span>;~s2;--s2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(s2&amp;a[i].s)) pls(f[s1|a[i].s][s2],f[s1][s2]);</span><br><span class="line">            <span class="keyword">if</span>(!(s1&amp;a[i].s)) pls(f[s1][s2|a[i].s],f[s1][s2]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=pos+<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].t!=a[i<span class="number">-1</span>].t)</span><br><span class="line">            <span class="built_in">memcpy</span>(f1,f,<span class="keyword">sizeof</span>(f)),<span class="built_in">memcpy</span>(f2,f,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s1=M<span class="number">-1</span>;~s1;--s1)<span class="keyword">for</span>(<span class="keyword">int</span> s2=M<span class="number">-1</span>;~s2;--s2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(s2&amp;a[i].s)) pls(f1[s1|a[i].s][s2],f1[s1][s2]);</span><br><span class="line">            <span class="keyword">if</span>(!(s1&amp;a[i].s)) pls(f2[s1][s2|a[i].s],f2[s1][s2]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i].t!=a[i+<span class="number">1</span>].t||i==n)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> s1=<span class="number">0</span>;s1&lt;M;++s1)<span class="keyword">for</span>(<span class="keyword">int</span> s2=<span class="number">0</span>;s2&lt;M;++s2)</span><br><span class="line">                f[s1][s2]=(f1[s1][s2]+f2[s1][s2]-f[s1][s2]+p)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s1=<span class="number">0</span>;s1&lt;M;++s1)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s2=<span class="number">0</span>;s2&lt;M;++s2) pls(ans,f[s1][s2]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ans+p)%p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [JSOI2016]灯塔  决策单调性&amp;DP  loj2074</title>
      <link href="/2019/04/30/%5B%E9%A2%98%E8%A7%A3%5Dloj2047/"/>
      <url>/2019/04/30/%5B%E9%A2%98%E8%A7%A3%5Dloj2047/</url>
      
        <content type="html"><![CDATA[<p>其实这道题是 $\rm{POI}$ 的原题，$loj$ 传送门链接：<a href="https://loj.ac/problem/2074" target="_blank" rel="noopener">在这呢o(￣︶￣)o</a></p><p>刚开始肯定还是看不出这题是什么 $\rm{DP}$ ，感觉很诡异，但是推一推自然就出来了：</p><script type="math/tex; mode=display">h_j \leq h_i+p-\sqrt{|i−j|}\\\\p\geq h_j-h_i +\sqrt{|i−j|}\\\\p=\max\{ h_j-h_i +\sqrt{|i−j|}\}</script><p>设 $f_i$ 表示 $i$ 的 $p$ 值，那么继续：</p><a id="more"></a><script type="math/tex; mode=display">f_i=\max\{ h_j +\sqrt{|i−j|}\}-h_i</script><p>发现绝对值很烦人，将绝对值拆开。</p><script type="math/tex; mode=display">f_i=\max(\max\limits_{j=1}^{i}\{h_j +\sqrt{i−j}\},\max\limits_{j=i}^{n}\{h_j +\sqrt{j-i}\})-h_i</script><p>原序列翻转一下就可以直接计算后面的式子，也就是说我们只需要考虑第一个：</p><script type="math/tex; mode=display">f_i=\max\limits_{j=1}^{i}\{h_j +\sqrt{i−j}\}-h_i</script><p>假设对于 $i$ 来说 $j$ 是最优的决策，那么如果存在一个小于 $j$ 的 $k$ ，是否在转移一个大于 $i$ 的 $l$ 会更优呢？显然不会，可以知道 $i-k$ 显然是大于 $i-j$ 的，而且根号是增长的越来越慢的。所以如果在 $i$ 时 $k$ 就没有 $j$ 优了，那么在以后所以大于 $i$ 的 $l$ 转移时 $k$ 也不可能比 $j$ 优。</p><p>也就是说上面的式子满足决策单调性，那么我们可以 $O(n\log n)$ 愉快求出了。</p><p>这里说明两个方法：</p><ul><li><strong>1.</strong> 单调队列维护三元组，三元组包含 $v$ (决策点 $v$) ，$l$ (决策点 $v$ 作为最优决策点的最左端点) ，$r$ (决策点 $v$ 作为最优决策点的最右端点) ，每一次排除掉最右端点小于 $i$ 的元素(因为该元素已经没用了) ，插入队列的时候去掉完全劣于 $i$ 的，然后对于折中的二分即可。(具体参见诗人小 $\rm{G}$ 的题解) 。</li><li><strong>2.</strong> 分治计算答案。设 $slove(al,ar,vl,vr)$ 表示在原数组 $al$ 到 $ar$ 这段区间的最优决策点位于 $vl$ 到 $vr$ 区间。我们每一次找到 $al$ 到 $ar$ 的中间点，也就是 $mid$ ，然后在 $vl$ 到 $vr$ 寻找最优的决策点更新 $f_{mid}$ ( $\rm{DP}$ 数组)，设这个最优点为 $g$ 。因为满足决策单调性，$al$ 到 $mid-1$ 的所有点的最优决策点一定在 $vl$ 到 $g$ 之间，右边 $mid+1$ 到 $ar$ 的也同理，就这么分治下去即可。</li></ul><p>实际运用中分治的效率不如三元组，但是代码却好写得多，很短，并且调试难度也大大降低，所以最终我选择了分治……分治的具体细节看代码。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">6e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;ll a[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> f1[N],f2[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_f1</span><span class="params">(<span class="keyword">int</span> al,<span class="keyword">int</span> ar,<span class="keyword">int</span> vl,<span class="keyword">int</span> vr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(al&gt;ar) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(al+ar)&gt;&gt;<span class="number">1</span>,g=<span class="number">0</span>;</span><br><span class="line">    f1[mid]=a[mid];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=vl;i&lt;=min(vr,mid);++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> calc=a[i]+<span class="built_in">sqrt</span>(<span class="keyword">double</span>(mid-i));</span><br><span class="line">        <span class="keyword">if</span>(calc&gt;f1[mid]) f1[mid]=calc,g=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!g) g=mid;f1[mid]-=a[mid];</span><br><span class="line">    solve_f1(al,mid<span class="number">-1</span>,vl,g),solve_f1(mid+<span class="number">1</span>,ar,g,vr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_f2</span><span class="params">(<span class="keyword">int</span> al,<span class="keyword">int</span> ar,<span class="keyword">int</span> vl,<span class="keyword">int</span> vr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(al&gt;ar) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(al+ar)&gt;&gt;<span class="number">1</span>,g=<span class="number">0</span>;</span><br><span class="line">    f2[mid]=a[mid];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=vr;i&gt;=max(vl,mid);--i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> calc=a[i]+<span class="built_in">sqrt</span>(<span class="keyword">double</span>(i-mid));</span><br><span class="line">        <span class="keyword">if</span>(calc&gt;f2[mid]) f2[mid]=calc,g=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!g) g=mid;f2[mid]-=a[mid];</span><br><span class="line">    solve_f2(al,mid<span class="number">-1</span>,vl,g),solve_f2(mid+<span class="number">1</span>,ar,g,vr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(a[i]);</span><br><span class="line">    solve_f1(<span class="number">1</span>,n,<span class="number">1</span>,n),solve_f2(<span class="number">1</span>,n,<span class="number">1</span>,n);</span><br><span class="line">    <span class="comment">/*最终没有翻转序列，而是选择做两遍分治*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ll)<span class="built_in">ceil</span>(max(f1[i],f2[i])));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 决策单调性 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2016]国王饮水记  斜率优化DP  loj2087</title>
      <link href="/2019/04/29/%5B%E9%A2%98%E8%A7%A3%5Dloj2087/"/>
      <url>/2019/04/29/%5B%E9%A2%98%E8%A7%A3%5Dloj2087/</url>
      
        <content type="html"><![CDATA[<p>可爱的题目传送门：<a href="https://loj.ac/problem/2087" target="_blank" rel="noopener">戳我戳我·(<em>╹▽╹</em>)·</a></p><p>说实话这道题如果单看斜率优化 $\texttt{DP}$ ，但是如果没猜到那么多结论，你是怎么也想不到”斜率优化”是从哪里来的。那么我们开始猜结论吧……</p><ul><li><strong>1.</strong> 初始水位小于 $h_1$ 的没有用。</li></ul><p>这很显然。</p><a id="more"></a><ul><li><strong>2.</strong> 如果 $n\leq k$ ，那么只需要将所以大于 $h_1$ 的跟 $1$ 城市连就好了。</li></ul><p>每次连接的城市数越少贡献越大，那么每个逐一连一次一定是最优方案。</p><ul><li><strong>3.</strong> 每次操作必然跟 $1$ 城市有关系。</li></ul><p>不然没贡献。</p><ul><li><strong>4.</strong> 除了 $1$ 号城市，其他每个城市最多连一次。</li></ul><p>因为连过一次的城市的水位已经和 $1$ 城市一样了，简单点说肯定就是废了。</p><ul><li><strong>5.</strong> 每次连的所有城市中最小的 $h_i$ 必然大于上一次链接的最大的 $h_i$ 。</li></ul><p>这很显然，不然不满足最优方案。</p><ul><li><strong>6.</strong> 将所以城市按水位排序后，每次选择的必然是连续一段区间。</li></ul><p>和上一个差不多。</p><ul><li><strong>7.</strong> 每次选择的区间必然和上一次的选择区间接触。</li></ul><p>这很显然。</p><ul><li><strong>8.</strong> 每次选择的区间的长度必定单调不增。</li></ul><p>满足最优，都说了每次连接的城市越少贡献越大。</p><hr><p>那么显然就变成了一个区间问题了，我们需要将这个区间分成若干块。</p><p>设 $f_{i,j}$ 表示排序后前 $i$ 个城市联通了 $j$ 次后 $1$ 号城市的最大水位高度。那么转移直接枚举一个 $k$ ，在新的一次连接中连接了 $k+1$ 到 $i$ 这些城市。转移方程显然：</p><script type="math/tex; mode=display">f_{i,j}=\frac{f_{k,j-1}+(s_i-s_k)}{i-k+1}</script><p>*注：$s_i$ 为前缀和。</p><p>上式的复杂度为 $O(n^2k)$  ，肯定爆炸。但是这个是可以<strong>斜率优化</strong>的：</p><script type="math/tex; mode=display">\frac{f_{k,j-1}+(s_i-s_k)}{i-k+1} =\frac{s_i-(s_k-f_{k,j-1})}{i-(k-1)}\Rightarrow \frac{Y(i)-Y(k)}{X(i)-X(k)}</script><p>然后通过第 $8$ 条性质可以得知 $\texttt{DP}$ 是有<strong>决策单调性</strong>的，故复杂度为 $O(nk)$ 。因为恶心的高精度小数的运算还需要 $O(p)$ 的复杂度，所以最终总时间复杂度为 $O(nkp)$ 。</p><p>我们发现 $k$ 有 $10^9$ ，所以复杂度带 $k$ 的一定假掉了。</p><p>那么观察第 $2$ 条性质会发现，如果 $k$ 大于 $n$ 了直接将 $k$ 设为 $n$ 就好了。也就是说复杂度应该为 $O(n^2p)$ ，这样就是 $86$ 分，通过数据来看会发现这个倾向于大众分，一车厢的人都是这个分数。</p><p>那么如果想要 $\texttt{AC}$ 的话需要最后一条很迷的性质：</p><ul><li><strong>9.</strong> 因为 $h$ 各不同，选择的区间最多只有 $14$ 个区间长度大于 $1$ ，其他的区间均等于 $1$ 。</li></ul><p>很迷，准确的说这样的区间是 $O(\log\frac{nh}{\min_i\{h_i-h_{i-1}\}})$ 个。</p><p>证明不会……但是这里写了证明(唯一的且很迷的证明)：<a href="https://github.com/qiulyblog/image/blob/master/[NOI2016]%E5%9B%BD%E7%8E%8B%E9%A5%AE%E6%B0%B4%E8%AE%B0%E9%A2%98%E8%A7%A3.pdf?raw=true" target="_blank" rel="noopener">哈哈我是传送门O(∩_∩)O</a></p><p>那么就丢代码了，实际上是需要高精小数的，这里先给出一个除去高精小数板子的版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">8e3</span>+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">Decimal ans;</span><br><span class="line"><span class="keyword">int</span> n,k,p,lim,h[N],s[N],pre[N][<span class="number">16</span>],tot;</span><br><span class="line"><span class="keyword">int</span> q[N],head,tail;</span><br><span class="line"><span class="keyword">double</span> f[N][<span class="number">16</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span><span class="keyword">double</span> x,y;&#125;t[N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(point a,point b)</span> </span>&#123;<span class="keyword">return</span> (a.y-b.y)/(a.x-b.x);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Decimal <span class="title">solve</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!j) <span class="keyword">return</span> h[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> (solve(pre[i][j],j<span class="number">-1</span>)+s[i]-s[pre[i][j]])/(i-pre[i][j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;k,&amp;p,&amp;h[tot=<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d\n"</span>,&amp;h[i]);</span><br><span class="line">        <span class="keyword">if</span>(h[i]&gt;h[<span class="number">1</span>]) h[++tot]=h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    n=tot;sort(&amp;h[<span class="number">1</span>],&amp;h[n+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i][<span class="number">0</span>]=h[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) s[i]=s[i<span class="number">-1</span>]+h[i];</span><br><span class="line">    k=min(k,n),lim=min(k,<span class="number">14</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lim;++j) &#123;</span><br><span class="line">        q[head=tail=<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) t[i]=(point)&#123;i<span class="number">-1</span>,s[i]-f[i][j<span class="number">-1</span>]&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            point now=(point)&#123;i,s[i]&#125;;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(now,t[q[head]])&lt;slope(now,t[q[head+<span class="number">1</span>]])) ++head;</span><br><span class="line">            f[i][j]=(f[q[head]][j<span class="number">-1</span>]+s[i]-s[q[head]])/(i-q[head]+<span class="number">1</span>);</span><br><span class="line">            pre[i][j]=q[head];</span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(t[q[tail]],t[q[tail<span class="number">-1</span>]])&gt;slope(t[q[tail]],t[i])) --tail;</span><br><span class="line">            q[++tail]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m=n-k+lim,pos;</span><br><span class="line">    <span class="keyword">double</span> mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lim;++i) </span><br><span class="line">        <span class="keyword">if</span>(f[m][i]&gt;mx) mx=f[m][i],pos=i;</span><br><span class="line">    ans=solve(m,pos);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;=n;++i) ans=(ans+h[i])/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans.to_string(p&lt;&lt;<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么高精度小数板子的下载链接就贴这了：<a href="https://loj.ac/problem/2087/download/additional_file" target="_blank" rel="noopener">$loj$ 的下载地址传送们(～￣▽￣)～</a></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 斜率优化 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 决策单调性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI2015]亚瑟王  概率DP  loj2112</title>
      <link href="/2019/04/28/%5B%E9%A2%98%E8%A7%A3%5Dloj2112/"/>
      <url>/2019/04/28/%5B%E9%A2%98%E8%A7%A3%5Dloj2112/</url>
      
        <content type="html"><![CDATA[<p>发现 <a href="https://loj.ac" target="_blank" rel="noopener">$loj$</a> 真的好用……比 $luogu$ 不知道清爽到哪里去了，更何况 $loj$ 的题目也更多，而且提供数据和代码，更加开放。估计以后都会在 $loj$ 上多逛逛。( $bzoj$ 是真的丑，除非是做 $bzoj$ 的原创题不然我不会上 $bzoj$ 的) 。</p><p>顺便贴一下题目传送门：<a href="https://loj.ac/problem/2112" target="_blank" rel="noopener">$loj$的传送门就戳我啦(～￣▽￣)～</a></p><p>概率 $\texttt{DP}$ ，设 $f_{i,j}$ 表示打了前 $i$ 张牌，还有 $j$ 轮没有打出牌的概率。我们枚举第 $i+1$ 张牌，分别讨论一下该牌打出与不打出的情况即可。</p><a id="more"></a><p>第一种情况：$j$ 轮中都没有打出第 $i+1$ 张牌，由于一轮中不打出第 $i+1$ 张牌的概率为 $1-p_i$ ，那么 $j$ 轮都不打出该牌的概率显然为 $(1-p_i)^j$ 。转移方程显然：</p><script type="math/tex; mode=display">f_{i+1,j}+=f_{i,j}\cdot (1-p_i)^j​</script><p>因为 $f_{i+1,j}$ 可能从多方向转移过来，所以是 $+=$ 。</p><p>第二种情况：$j$ 轮中至少有一轮打出了第 $i+1$ 张牌，概率显然为 $1-(1-p_i)^j$ ，转移也就很显然了：</p><script type="math/tex; mode=display">f_{i+1,j-1}+=f_{i,j}\cdot （1-(1-p_i)^j）</script><p>如果我们打出了第 $i+1$ 张牌，那么肯定是要计算贡献的，这个时候直接用这个概率算贡献就好了。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,r,d[N];</span><br><span class="line"><span class="keyword">double</span> f[N][N],p[N],pw[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;r);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%lf%d"</span>,&amp;p[i],&amp;d[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            pw[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=r;++j) pw[i][j]=pw[i][j<span class="number">-1</span>]*(<span class="number">1</span>-p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        f[<span class="number">0</span>][r]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=r;++j) &#123;</span><br><span class="line">                f[i+<span class="number">1</span>][j]+=f[i][j]*pw[i+<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(j) &#123;</span><br><span class="line">                    <span class="keyword">double</span> calc=f[i][j]*(<span class="number">1</span>-pw[i+<span class="number">1</span>][j]);</span><br><span class="line">                    f[i+<span class="number">1</span>][j<span class="number">-1</span>]+=calc,ans+=calc*d[i+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 概率 </tag>
            
            <tag> 期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 小谈斜率优化</title>
      <link href="/2019/04/28/%5B%E7%AE%97%E6%B3%95%5D%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
      <url>/2019/04/28/%5B%E7%AE%97%E6%B3%95%5D%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="在此输入你的密码以便阅读全文" />    <label for="pass">在此输入你的密码以便阅读全文</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 算法 </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [CEOI2017]Building Bridges 斜率优化DP loj2483</title>
      <link href="/2019/04/27/%5B%E9%A2%98%E8%A7%A3%5Dloj2483/"/>
      <url>/2019/04/27/%5B%E9%A2%98%E8%A7%A3%5Dloj2483/</url>
      
        <content type="html"><![CDATA[<p>愉快的推式子吧(ﾉ≧∀≦)ﾉ！</p><p>设 $f_i$ 表示前 $i$ 根柱子完工后的最小代价。枚举一个小于 $i$ 的 $j$ ，表示为从 $j$ 向 $i$ 连了一座桥，中间的柱子当然全部推掉，计算一下就好：</p><script type="math/tex; mode=display">f_i=\min\{f_j+(s_{i-1}-s_j)+(h_i-h_j)^2\}</script><p>*其中 $s$ 为 $w$ 的前缀和。</p><a id="more"></a><script type="math/tex; mode=display">f_i=f_j+(s_{i-1}-s_j)+(h_i-h_j)^2\\\\f_i=f_j+s_{i-1}-s_j+h_i^2+h_j^2-2h_ih_j\\\\f_j+s_{i-1}-s_j+h_i^2+h_j^2=2h_ih_j+f_i</script><p>于是最终式子变成了 $y=kx+b$ 的形式，斜率优化！</p><p>但是……注意这个式子的 $k$ 不是单调递增的，并且 $x$ 也不是单调递增的！那么我们不能用朴素做法了，也不能用二分……难道用 $Splay$ ？(码量巨大) 。</p><p>不，用 $CDQ$ 分治。</p><p>对于一个 $i$ ，可能可以对 $i$ 做出贡献的只有所有小于 $i$ 的 $j$ 。为了保证 $x$ 单调我们先大力将原来的数组按照 $x$ 从小到大排个序，然后 $CDQ$ 的时候分左右两边，左边的所有元素在初始数组的位置都小于右边的左右元素，也就是说我们直接用左边元素对右边元素做出贡献。</p><p>同时这里也保证了左右两边的 $x$ 一定是单调上增的。</p><p>我们使用单调队列，扫一遍左边的元素，留下能做贡献的点(下凸壳上的点)，这时候左边的所有元素可以保证 $x$ 和斜率都是单调上增的。</p><p>右边呢？因为直线的斜率是 $2x$ ，而右边的 $x$ 也是单调上增的，所以我们可以愉快的做朴素的单调队列了。</p><p>$CDQ$ 分治部分的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;<span class="comment">/*一个点的时候直接计算y值*/</span></span><br><span class="line">        a[l].y=f[a[l].id]-s[a[l].id]+S(a[l].x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l,c1=l,c2=mid+<span class="number">1</span>;i&lt;=r;++i) </span><br><span class="line">        <span class="keyword">if</span>(a[i].id&lt;=mid) b[c1++]=a[i]; <span class="comment">/*编号小的左边去*/</span></span><br><span class="line">        <span class="keyword">else</span> b[c2++]=a[i]; <span class="comment">/*编号大些的右边去*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i) a[i]=b[i];</span><br><span class="line">    CDQ(l,mid); <span class="comment">/*计算出左边所有元素的 f*/</span></span><br><span class="line">    <span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> q[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=mid;++i) &#123; <span class="comment">/*处理出左边所有元素组成的下凸壳*/</span></span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[tail<span class="number">-1</span>],q[tail])&gt;slope(q[tail],i)) --tail;</span><br><span class="line">        q[++tail]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i) &#123; <span class="comment">/*计算左边元素对右边元素产生的贡献*/</span></span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[head],q[head+<span class="number">1</span>])&lt;<span class="number">2</span>*a[i].x) ++head; <span class="comment">/*维护队列*/</span></span><br><span class="line">        <span class="keyword">int</span> x=a[i].id,y=a[q[head]].id;</span><br><span class="line">        f[x]=min(f[x],f[y]+s[x<span class="number">-1</span>]-s[y]+S(a[i].x-a[q[head]].x));</span><br><span class="line">        <span class="comment">/*可能计算多次所以要取min*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    CDQ(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l,c1=l,c2=mid+<span class="number">1</span>;i&lt;=r;++i)  <span class="comment">/*还原a数组至初始状态*/</span></span><br><span class="line">        <span class="keyword">if</span>(c2&gt;r||(c1&lt;=mid&amp;&amp;a[c1].x&lt;a[c2].x)) b[i]=a[c1++];</span><br><span class="line">        <span class="keyword">else</span> b[i]=a[c2++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i) a[i]=b[i];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main函数中</span></span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp),CDQ(<span class="number">1</span>,n); <span class="comment">/*排序后CDQ开始*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]); <span class="comment">/*输出*/</span></span><br></pre></td></tr></table></figure><p>最后因为存在 $0$ ，在计算斜率的时候需要特判一下。还需要注意一下 $long\ long$ 的问题，记得将 $f$ 数组初始化。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e18</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span><span class="keyword">int</span> x,id;ll y;&#125;a[N],b[N];</span><br><span class="line">ll s[N],w[N],f[N];<span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(point x,point y)</span> </span>&#123;<span class="keyword">return</span> x.x&lt;y.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i].x==a[j].x) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[i].y&lt;a[j].y?inf:-inf;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="keyword">double</span>(a[i].y-a[j].y)/<span class="keyword">double</span>(a[i].x-a[j].x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;a[l].y=f[a[l].id]-s[a[l].id]+S(a[l].x);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l,c1=l,c2=mid+<span class="number">1</span>;i&lt;=r;++i) </span><br><span class="line">        <span class="keyword">if</span>(a[i].id&lt;=mid) b[c1++]=a[i];</span><br><span class="line">        <span class="keyword">else</span> b[c2++]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i) a[i]=b[i];</span><br><span class="line">    CDQ(l,mid);</span><br><span class="line">    <span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> q[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=mid;++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[tail<span class="number">-1</span>],q[tail])&gt;slope(q[tail],i)) --tail;</span><br><span class="line">        q[++tail]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[head],q[head+<span class="number">1</span>])&lt;<span class="number">2</span>*a[i].x) ++head;</span><br><span class="line">        <span class="keyword">int</span> x=a[i].id,y=a[q[head]].id;</span><br><span class="line">        f[x]=min(f[x],f[y]+s[x<span class="number">-1</span>]-s[y]+S(a[i].x-a[q[head]].x));</span><br><span class="line">    &#125;</span><br><span class="line">    CDQ(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l,c1=l,c2=mid+<span class="number">1</span>;i&lt;=r;++i) </span><br><span class="line">        <span class="keyword">if</span>(c2&gt;r||(c1&lt;=mid&amp;&amp;a[c1].x&lt;a[c2].x)) b[i]=a[c1++];</span><br><span class="line">        <span class="keyword">else</span> b[i]=a[c2++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i) a[i]=b[i];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        IN(a[i].x),a[i].id=i,f[i]=inf;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(w[i]),s[i]=s[i<span class="number">-1</span>]+w[i];</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp),CDQ(<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 斜率优化 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI2008]玩具装箱TOY  斜率优化DP  luoguP3195</title>
      <link href="/2019/04/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP3195/"/>
      <url>/2019/04/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP3195/</url>
      
        <content type="html"><![CDATA[<p>差不多搞懂了斜率优化吧……说实话网上的文章都写得很迷，还好找到了一个不错的文章：<a href="https://www.cnblogs.com/yangsongyi/p/9630227.html" target="_blank" rel="noopener">转送门戳我(￣▽￣)~*</a> 。(为什么突然发现这道题和诗人小G很像呢) </p><p>这个 $\texttt{DP}$ 方程谁都会设：设 $f_i$ 表示前 $i$ 个玩具的最小费用，转移显然如下：</p><script type="math/tex; mode=display">f_i=\min\limits_{j=1}^{i-1}\{f_j+(sum_i-sum_j+i-j-l)^2\}</script><p>(其中 $sum$ 是前缀和)。这个复杂度是 $O(n^2)$ 的，过不去……</p><a id="more"></a><p>继续推式子：</p><script type="math/tex; mode=display">f_i=\min\limits_{j=1}^{i-1}\{f_j+[(sum_i+i)-(sum_j+j)-l]^2\}</script><p>设 $s_i=sum_i+i$ ，我们假设 $j$ 为最优决策，将 $\min$ 去掉。</p><script type="math/tex; mode=display">f_i=f_j+(s_i-s_j-l)^2\\f_i=f_j+s_i^2+(s_j+l)^2-2\cdot s_i\cdot(s_j+l)\\f_j+s_i^2+(s_j+l)^2=2\cdot s_i\cdot(s_j+l)+f_i​</script><p>于是上面的式子变成了 $y=kx+b$ 的形式，其中 $y=f_j+s_i^2+(s_j+l)^2$ ，$k=2\cdot s_i$ ，$x=s_j+l$ ，$b=f_i$ 。</p><p>然后将 $x,y$ 两个值作为点 $(x,y)$ 放到平面上即可，因为最终答案是取 $min$ ，所以我们需要维护的是下凸壳。有一点需要注意的是，我们算斜率的时候可以将每个点的常数项或者只和 $i$ 有关的项去掉，因为算斜率是相减的，减的时候这些项同样也没了。</p><p>上面的 $x$ 中的 $l$ 是常数项于是可以省略，$y$ 中的 $s_i^2$ 只和 $i$ 有关，于是也省略掉。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(x) ((x)*(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,l,head,tail;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N],s[N],q[N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">X</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="keyword">return</span> s[i];&#125;<span class="comment">/*每个点的x坐标*/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Y</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="keyword">return</span> f[i]+S(s[i]+l);&#125;<span class="comment">/*每个点的y坐标*/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;<span class="keyword">return</span> (Y(j)-Y(i))/(X(j)-X(i));&#125;<span class="comment">/*算斜率*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;s[i]),s[i]+=s[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) s[i]+=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[head],q[head+<span class="number">1</span>])&lt;<span class="number">2</span>*s[i]) ++head;</span><br><span class="line">        f[i]=f[q[head]]+S(s[i]-s[q[head]]-l<span class="number">-1</span>);<span class="comment">/*转移*/</span></span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[tail],i)&lt;slope(q[tail],q[tail<span class="number">-1</span>])) --tail;</span><br><span class="line">        q[++tail]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面来解释一些问题。</p><h3 id="1-为什么要维护下凸壳"><a href="#1-为什么要维护下凸壳" class="headerlink" title="1.为什么要维护下凸壳"></a>1.为什么要维护下凸壳</h3><p>因为我们的 $\texttt{DP}$ 方程是在取 $\min$ ，如果是 $\max$ 的话则维护上凸壳。而且维护下凸壳显然是让 $f_i$ 更小。</p><p>以上面为例，我们用 $y=kx+b​$ 的直线从下面网上扫，注意这条直线的斜率就是 $k​$ 。很显然如果我们从下往上这样扫越往上扫 $b​$ 越大(不明白的画画图)，但是我们的目的是使得 $b​$ 最小( $b​$ 就是 $f_i​$ ) 。下凸壳包含了最下面的所有点，显然不是下凸壳上的点一定不能成为最优的。</p><h3 id="2-维护队列的过程是什么鬼操作"><a href="#2-维护队列的过程是什么鬼操作" class="headerlink" title="2.维护队列的过程是什么鬼操作"></a>2.维护队列的过程是什么鬼操作</h3><p>首先第一个过程，也就是下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[head],q[head+<span class="number">1</span>])&lt;<span class="number">2</span>*s[i]) ++head;</span><br></pre></td></tr></table></figure><p>上面讲了我们需要使得 $b​$ 最小，那么最优的决策点在直线从下往上扫的过程中肯定是最先扫到的，因为那样可以保证 $f_i​$ 最小。假设最优的点为 $i​$ ，上一个点为 $j​$ ，下一个点为 $k​$ ，那么 $i​$ 一定保证 $j​$ 到 $i​$ 的斜率小于直线斜率并且 $i​$ 到 $k​$ 的斜率大于直线斜率。</p><p>然后我们会发现对于单调上增的需要更新的 $i​$ ，其直线的斜率 $k​$ 一定是单调上增的，因为前缀和是单调上增的。</p><p>所以对于斜率已经不满足要求的点直接踢出队就好了。</p><p>然后康康出队的过程。如果在纸上画画会发现，如果满足 <code>slope(q[tail],i)&lt;slope(q[tail],q[tail-1])</code> ，那么说明 $q[tail]$ 已经不再下凸壳中了！没错吧？那么这个时候 $q[tail]$ 永远也不可能成为最优的转移点了，直接丢掉即可。</p><hr><p>最后有一些斜率优化的套路总结(自己总结出来的)：</p><ul><li>$\texttt{DP}$ 方程取 $\min$ 就维护下凸壳，取 $\max$ 就维护上凸壳</li><li>$y=kx+b​$ 中的 $k​$ 一定要是常量或者是完全是 $i​$ 的量(例如 $s_i,2\cdot g_i^2​$ 等)，$b​$ 一定是你需要转移的对象(就是 $f_i​$ )，$x​$ 和 $y​$ 两个值一定要包含和 $j​$ 有关的值，要随 $j​$ 的变化而变化。</li><li>提炼出来的 $x,y$ 放到坐标系上之前记得去掉没用的值。</li></ul><p>差不多就这些吧，也不知道是不是完全正确，至少这个套路还是过了几道题目的。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 斜率优化 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 决策单调性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [APIO2010]特别行动队  斜率优化DP  luoguP3628</title>
      <link href="/2019/04/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP3628/"/>
      <url>/2019/04/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP3628/</url>
      
        <content type="html"><![CDATA[<p>依旧是斜率优化的套路。</p><p>设 $f_i$ 表示前 $i$ 个士兵的最大贡献，转移显然是枚举一个 $j$ ，将 $j+1$ 到 $i$ 这些士兵组成特别行动队算贡献：</p><script type="math/tex; mode=display">f_i=\max\{f_j+a(s_i-s_j)^2+b(s_i-s_j)+c\}​</script><p>其中 $s_i$ 为战斗力的前缀和。这个方程是 $O(n^2)$ 的，需要优化。发现这个转移式貌似不满足单调队列优化的条件，于是将中间的式子拆开看看可不可以斜率优化。</p><a id="more"></a><script type="math/tex; mode=display">f_i=\max\{f_j+a(s_i^2+s_j^2-2s_is_j)+b\cdot s_i-b\cdot s_j+c\}\\f_i=\max\{f_j+a\cdot s_i^2+a\cdot s_j^2-2a\cdot s_is_j)+b\cdot s_i-b\cdot s_j+c\}\\f_i=f_j+a\cdot s_i^2+a\cdot s_j^2-2a\cdot s_is_j+b\cdot s_i-b\cdot s_j+c\\f_j+a\cdot s_i^2+a\cdot s_j^2+b\cdot s_i-b\cdot s_j+c=2a\cdot s_i\cdot s_j +f_i​</script><p>诶，是 $y=kx+b$ 的形式，而且满足斜率优化的条件诶。继续将 $x,y$ 找出来放到坐标系上( $x=s_j$,$y=f_j+a\cdot s_j^2-b\cdot s_j$) 。</p><p>因为是 $\max​$ ，所以用单调队列维护一下上凸壳然后转移即可，复杂度 $O(n)​$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(x) ((x)*(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,a,b,c,head,tail;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s[N],f[N],q[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">X</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="keyword">return</span> s[i];&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Y</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="keyword">return</span> f[i]+<span class="number">1l</span>l*S(s[i])*a<span class="number">-1l</span>l*s[i]*b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;<span class="keyword">return</span> (Y(j)-Y(i))/(X(j)-X(i));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    f[i]=f[j]+<span class="number">1l</span>l*S(s[i]-s[j])*a+<span class="number">1l</span>l*(s[i]-s[j])*b+c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(a),IN(b),IN(c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(s[i]),s[i]+=s[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[head],q[head+<span class="number">1</span>])&gt;<span class="number">2</span>*a*s[i]) ++head;</span><br><span class="line">        calc(i,q[head]);</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[tail],i)&gt;slope(q[tail],q[tail<span class="number">-1</span>])) --tail;</span><br><span class="line">        q[++tail]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 斜率优化 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 决策单调性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SCOI2008]奖励关  状压DP  luoguP2473</title>
      <link href="/2019/04/23/%5B%E9%A2%98%E8%A7%A3%5DluoguP2473/"/>
      <url>/2019/04/23/%5B%E9%A2%98%E8%A7%A3%5DluoguP2473/</url>
      
        <content type="html"><![CDATA[<p>发现数据范围很小，并且涉及到”集合”，很容易可以想到用状压 $\texttt{DP}$ 。</p><p>设 $f[i][j]$ 表示已经抛出了 $i$ 次宝物，获得的宝物集合为 $j$ 时的最优分值。那么转移的时候枚举每一个宝物，分两种情况即可——选当前宝物或者不选。注意选当前宝物的前提是必须满足前提，按照最优情况选取即可。注意最后将所有的宝物的贡献加上后还需要$/n$ ，因为题目要求的是”平均”。</p><a id="more"></a><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> f[<span class="number">101</span>][<span class="number">65540</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">18</span>],d[<span class="number">18</span>],v[<span class="number">18</span>],N,K;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">16</span>;++i) p[i]=<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;K,&amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v[i],&amp;x);</span><br><span class="line">        <span class="keyword">while</span>(x) &#123;d[i]|=p[x];<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=K;i;--i) <span class="comment">/*倒着枚举会好些*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=p[N+<span class="number">1</span>]<span class="number">-1</span>;++j) &#123;</span><br><span class="line">            <span class="comment">/*上面两重循环枚举状态*/</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=N;++k)<span class="comment">/*枚举所有宝物并计算贡献*/</span></span><br><span class="line">                <span class="keyword">if</span>((d[k]&amp;j)==d[k]) <span class="comment">/*可以选取当前宝物*/</span></span><br><span class="line">                    f[i][j]+=max(f[i+<span class="number">1</span>][j],f[i+<span class="number">1</span>][j|p[k]]+v[k]);</span><br><span class="line">                    <span class="comment">/*按照最优选取*/</span></span><br><span class="line">                <span class="keyword">else</span> f[i][j]+=f[i+<span class="number">1</span>][j]; <span class="comment">/*不能选取直接转移*/</span></span><br><span class="line">            f[i][j]/=N;<span class="comment">/*所谓"平均"*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>,f[<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">/*最终答案*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2011]Noi嘉年华  决策单调性优化DP  luoguP1973</title>
      <link href="/2019/04/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP1973/"/>
      <url>/2019/04/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP1973/</url>
      
        <content type="html"><![CDATA[<p>这道题一共有两问，第一问瞎搞 $\texttt{DP}$ ，第二问如果直接 $\texttt{DP}$ 的话复杂度是 $O(n^4)$ 的过不去，这个时候需要用到决策单调性优化复杂度就可以降低至 $O(n^3)$ ，这样就过了。我们先来讨论一下第一问的做法。</p><p>时间的范围太大了，我们需要离散化一下。离散化后时间就控制在 $0$ 到 $2n$ 的范围内了。</p><p>首先可以发现最终的答案一定就是一段一段时间，每一段时间内的活动都是在同一个会场举行。我们可以预处理一个 $tot_{l,r}$ 表示完全在时间 $l,r$ 之内的活动有多少个。计算直接暴力，预处理的复杂度为 $O(n^3)$ 。</p><a id="more"></a><p>然后设一个 $pre_{i,j}​$ 表示 <strong>$1​$ 到 $i​$ 的时间一个会场的活动数为 $j​$ 时另一个会场的最大活动数</strong>。那么转移的话我们枚举一个时间 $k​$ ，然后考虑 $k​$ 到 $i​$ 这段时间中的所有活动分配给哪个会场即可。可以得到转移方程：</p><script type="math/tex; mode=display">pre_{i,j}=\max\limits_{k=1}^{i}\{pre_{k,j}+tot_{k,i},pre_{k,j-tot_{k,i}}\}​</script><p>这里我们 $pre$ 方程的定义中”一个会场”就是一号会场，”另一个会场”就是二号会场$。pre_{k,j}+tot_{k,i}$ 就是将 $k$ 到 $i$ 这段时间中所有活动都分配给了二号会场，$pre_{k,j-tot_{k,i}}$ 很显然就是分配给了一号会场。计算时枚举 $i,j,k$ ，复杂度是 $O(n^3)$ 。(其实准确的复杂度带个常数，因为 $i$ 枚举的是时间，而时间最大是 $2n$ 的) 。</p><p>我们设离散化后时间总长为 $m$ ，那么答案显然为 $\max\limits_{i=1}^m\{\min(pre_{m,i},i)\}$ 。接下来我们解决第二问。</p><p>我们的 $tot_{l,r}$ 统计的就是完全在时间 $l,r$ 的区间有多少个。那么对于第 $i$ 个活动，设该活动的起始时间与终止时间分别为 $s_i,t_i$ ，那么我们再考虑一对 $x,y \ \ (x\leq s_i,t_i\leq y)$ ，那么如果我们将答案计算上 $tot_{x,y}$ ，那么也就选择了第 $i$ 个活动了。</p><p>我们设 $f_{i,j}$ 表示一号会场强制选择 $i$ 到 $j$ 时间中的所有活动时的最优答案。(注意这里的最优答案就是两个会场中活动少的一方的最大值，我们只是考虑在一号会场<strong>强制选择</strong> $i$ 到 $j​$ 中的所有活动的情况下考虑最优的全局答案) 。</p><p>继续看向一号会场，假设在 $i$ 前面的时间中一号会场已经合法举办了 $x$ 场活动，在 $j$ 后面的时间中也合法举办了 $y$ 场活动。那么我们枚举 $i,j,x,y$ 也可以得到二号会场的活动数：$i$ 前面的时间种有 $pre_{i,x}$ 场活动，$j$ 后面的时间中有……诶这里用 $pre$ 貌似不是很好表示诶，于是我们新定义一个 $suf$ ，$suf_{i,j}$ 表示 <strong>$i$ 到 $m$ 的时间一个会场的活动数为 $j$ 时另一个会场的最大活动数</strong>，$suf$ 的状态转移方程和 $pre$ 的同理。</p><p>枚举 $i,j,x,y$ 后就可以得到两个会场的活动个数，那么就可以直接算答案了：</p><script type="math/tex; mode=display">f_{i,j}=\max\limits_{x=1}^{m}\max\limits_{y=1}^{m}\{\min(x+tot_{i,j}+y,pre_{i,x}+suf_{j,y})\}​</script><p>但是这样子的复杂度是 $O(n^4)​$ 的，过不了。</p><p>不过，我们会发现，<strong>对于单调递增的 $x$ ，对应的最优的 $y$ 一定是单调递减的</strong> 。为什么呢？首先对于一个单调递增的 $i$ ，$pre_{?_i},suf_{?_i}$ 一定是单调递减的( $?$ 为任意数) 。那么如果对于单调递增的 $x$ ，$pre_{i,x}$ 一定是单调递减的，这个时候如果 $y$ 单调递增也就意味着 $suf_{j,y}$ 会单调递减，那么 $x+tot_{i,j}+y$ 和 $pre_{i,x}+suf_{j,y}$ 将会越拉越大，对于答案显然是不利的。反过来，如果 $y$ 是单调递减的，那么就会相对比较均衡。(感性理解理解……)</p><p>那么我们就不需要枚举 $y$ 了，只需要扫一扫就好了，最终计算 $f$ 的时间复杂度为 $O(n^3)$ 。</p><p>最终统计答案的时候，对于一个活动 $i$ ，我们的答案显然为 $\max\limits_{x=1}^{s_i}\max\limits_{y=t_i}^{m}f_{x,y}$ 。必须满足 $x\leq s_i,t_i\leq y$ ，因为这样就会满足一定会选择第 $i$ 个活动。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,j,k) for((i)=(j);(i)&lt;=(k);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R(i,j,k) for((i)=(j);(i)&gt;=(k);--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e2</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,i,j,k,l,r,s[N],t[N],b[N];</span><br><span class="line"><span class="keyword">int</span> tot[N][N],pre[N][N],suf[N][N],f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">IN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;<span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> min(x+tot[l][r]+y,pre[l][x]+suf[r][y]);&#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=IN();</span><br><span class="line">    F(i,<span class="number">1</span>,n) b[++m]=s[i]=IN(),b[++m]=t[i]=IN()+s[i];</span><br><span class="line">    sort(b+<span class="number">1</span>,b+<span class="number">1</span>+m),</span><br><span class="line">    m=unique(b+<span class="number">1</span>,b+<span class="number">1</span>+m)-b<span class="number">-1</span>;<span class="comment">/*离散化去重*/</span></span><br><span class="line">    F(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">        s[i]=lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+m,s[i])-b;</span><br><span class="line">        t[i]=lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+m,t[i])-b;</span><br><span class="line">        F(l,<span class="number">1</span>,s[i]) R(r,m,t[i]) ++tot[l][r];<span class="comment">/*计算出tot*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    F(i,<span class="number">1</span>,m) F(j,<span class="number">1</span>,n) pre[i][j]=suf[i][j]=-inf;<span class="comment">/*初始化*/</span> </span><br><span class="line">    <span class="comment">/*----------计算出pre和suf----------*/</span></span><br><span class="line">    F(i,<span class="number">1</span>,m) F(j,<span class="number">0</span>,tot[<span class="number">1</span>][i]) F(k,<span class="number">1</span>,i) &#123;</span><br><span class="line">        pre[i][j]=max(pre[i][j],pre[k][j]+tot[k][i]);</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=tot[k][i]) pre[i][j]=max(pre[i][j],pre[k][j-tot[k][i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    R(i,m,<span class="number">1</span>) F(j,<span class="number">0</span>,tot[i][m]) F(k,i,m) &#123;</span><br><span class="line">        suf[i][j]=max(suf[i][j],suf[k][j]+tot[i][k]);</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=tot[i][k]) suf[i][j]=max(suf[i][j],suf[k][j-tot[i][k]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*计算f*/</span></span><br><span class="line">    F(l,<span class="number">1</span>,m) F(r,l+<span class="number">1</span>,m) <span class="keyword">for</span>(<span class="keyword">int</span> y=n,x=<span class="number">0</span>;x&lt;=n;++x) &#123;<span class="comment">/*y当做指针扫一遍*/</span></span><br><span class="line">        <span class="keyword">int</span> old_calc=calc(x,y),new_calc;</span><br><span class="line">        <span class="keyword">while</span>(y&amp;&amp;old_calc&lt;=(new_calc=calc(x,y<span class="number">-1</span>))) --y,old_calc=new_calc;</span><br><span class="line">        f[l][r]=max(f[l][r],calc(x,y));<span class="comment">/*转移*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*输出答案*/</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    F(i,<span class="number">1</span>,n) ans=max(ans,min(pre[m][i],i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">/*第一问*/</span></span><br><span class="line">    F(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        F(l,<span class="number">1</span>,s[i]) R(r,m,t[i]) ans=max(ans,f[l][r]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">/*第二问*/</span></span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 决策单调性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [十二省联考2019]异或粽子  可持久化Trie树  luoguP5283</title>
      <link href="/2019/04/19/%5B%E9%A2%98%E8%A7%A3%5DluoguP5283/"/>
      <url>/2019/04/19/%5B%E9%A2%98%E8%A7%A3%5DluoguP5283/</url>
      
        <content type="html"><![CDATA[<p>要是我不是 $\texttt{HN}​$ 的该多好，今年十二省联考两道傻逼题，一道异或粽子，一道十二响……</p><p>[十二省联考2019]异或粽子，可持久化 $trie​$ 树的板子题，比最大异或和还要板子些。相信 $60​$ 分入门者都会做，那么 $100​$ 分的话我们上可持久化 $trie​$ 树维护前缀异或和，嗯没错就像主席树那样。然后对于每个节点的可持久化 $trie​$ 树我们将其当成区间右端点，然后在此位置上的 $trie​$ 树中贪心寻找左端点即可。</p><a id="more"></a><p>寻找前 $K$ 大区间的具体操作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">    q.push(MKP(T.query(T.root[i],sum[i],qrank[i]=<span class="number">1</span>),i));</span><br><span class="line"><span class="comment">/*对于每一个右端点，找一个第一大(最优)的左端点放入优先队列*/</span></span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k--) &#123;</span><br><span class="line">    ll i=q.top().second;<span class="comment">/*取出当前最优元素*/</span></span><br><span class="line">    ans+=q.top().first;q.pop();</span><br><span class="line">    <span class="keyword">if</span>(qrank[i]!=i) q.push(MKP(T.query(T.root[i],sum[i],++qrank[i]),i));</span><br><span class="line">    <span class="comment">/*更新队列元素*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度大约是 $O(nlogn)​$ 级别。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MKP make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> ll logN=<span class="number">33</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n,k,sum[N],qrank[N];</span><br><span class="line">priority_queue&lt;pair&lt;ll,ll&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">    ll ch[N*logN][<span class="number">2</span>],sum[N*logN],root[N],tot;</span><br><span class="line">    <span class="function">ll <span class="title">newnode</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">        ++tot,ch[tot][<span class="number">0</span>]=ch[x][<span class="number">0</span>],ch[tot][<span class="number">1</span>]=ch[x][<span class="number">1</span>];</span><br><span class="line">        sum[tot]=sum[x];<span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ll&amp;rt,ll val)</span> </span>&#123;</span><br><span class="line">        rt=newnode(rt),++sum[rt];</span><br><span class="line">        ll now=rt;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">31</span>;~i;--i) &#123;</span><br><span class="line">            <span class="keyword">bool</span> son=(val&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">            ch[now][son]=newnode(ch[now][son]);</span><br><span class="line">            now=ch[now][son],++sum[now];</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(ll now,ll val,ll k)</span> </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">31</span>;~i;--i) &#123;</span><br><span class="line">            <span class="keyword">bool</span> son=!((val&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(k&lt;=sum[ch[now][son]]) now=ch[now][son],ans|=(<span class="number">1u</span>&lt;&lt;i);</span><br><span class="line">            <span class="keyword">else</span> k-=sum[ch[now][son]],now=ch[now][!son];</span><br><span class="line">        &#125;<span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(k);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>,x;i&lt;=n;++i) IN(x),sum[i]=sum[i<span class="number">-1</span>]^x;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i) T.root[i]=T.root[i<span class="number">-1</span>];</span><br><span class="line">        T.Insert(T.root[i],sum[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        q.push(MKP(T.query(T.root[i],sum[i],qrank[i]=<span class="number">1</span>),i));</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">        ll i=q.top().second;</span><br><span class="line">        ans+=q.top().first;q.pop();</span><br><span class="line">        <span class="keyword">if</span>(qrank[i]!=i) q.push(MKP(T.query(T.root[i],sum[i],++qrank[i]),i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 可持久化Trie树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [十二省联考2019]春节十二响  堆+启发式合并  luoguP5290</title>
      <link href="/2019/04/19/%5B%E9%A2%98%E8%A7%A3%5DluoguP5290/"/>
      <url>/2019/04/19/%5B%E9%A2%98%E8%A7%A3%5DluoguP5290/</url>
      
        <content type="html"><![CDATA[<p>要是我不是 $\texttt{HN}$ 的该多好，今年十二省联考两道傻逼题，一道异或粽子，一道十二响……</p><p>[十二省联考2019]春节十二响，启发式合并裸题。对于树中的一个节点 $u$ ，从其子树中选择一段的方式显然只能是从 $u$ 的所有子树中各选出一个节点。于是我们每一个节点开一个堆，存的就是其子树中(包括自己)的所有段的内存。</p><p>然后从下往上启发式合并即可，复杂度大约是 $O(nlogn)$ 。</p><a id="more"></a><p>启发式合并的具体代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q[x].size()&lt;q[y].size()) swap(q[x],q[y]);</span><br><span class="line">    <span class="keyword">while</span>(!q[y].empty()) &#123;</span><br><span class="line">        hep.push_back(max(q[x].top(),q[y].top()));</span><br><span class="line">        q[x].pop(),q[y].pop();</span><br><span class="line">        <span class="comment">/*贪心选取*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(hep.size()) q[x].push(hep.back()),hep.pop_back();</span><br><span class="line">    <span class="comment">/*更新节点*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,sz=G[x].size();i&lt;sz;++i)</span><br><span class="line">        solve(G[x][i]),merge(x,G[x][i]);<span class="comment">/*将当前子树与之前枚举过的子树合并*/</span></span><br><span class="line">    q[x].push(s[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的总代码长度不超过 $40$ 行。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,f,s[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hep,G[N];</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q[x].size()&lt;q[y].size()) swap(q[x],q[y]);</span><br><span class="line">    <span class="keyword">while</span>(!q[y].empty()) &#123;</span><br><span class="line">        hep.push_back(max(q[x].top(),q[y].top()));</span><br><span class="line">        q[x].pop(),q[y].pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(hep.size()) q[x].push(hep.back()),hep.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,sz=G[x].size();i&lt;sz;++i)</span><br><span class="line">        solve(G[x][i]),merge(x,G[x][i]);</span><br><span class="line">    q[x].push(s[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;f),G[f].push_back(i);</span><br><span class="line">    solve(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q[<span class="number">1</span>].empty()) ans+=q[<span class="number">1</span>].top(),q[<span class="number">1</span>].pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 堆 </tag>
            
            <tag> 启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】【模板】动态DP  LCT+DP+矩阵  luoguP4751</title>
      <link href="/2019/04/19/%5B%E9%A2%98%E8%A7%A3%5DluoguP4751/"/>
      <url>/2019/04/19/%5B%E9%A2%98%E8%A7%A3%5DluoguP4751/</url>
      
        <content type="html"><![CDATA[<p>看懂了后发现 $\texttt{DDP}$ 其实不难呢……</p><p>其实主要思想就是将 $\texttt{DP}$ 转移式搞到矩阵上，然后如果是树形 $\texttt{DP}$ 的话就可以直接上树剖或者是 $LCT$ 进行维护，当然还可以用全局平衡二叉树(不费) 。如果只是线性的话可以直接用线段树等数据结构进行维护了。</p><p>注意这道模板树剖的复杂度是 $O(nlog^2n)$ ，而 $LCT$ 的复杂度为 $O(nlogn)$ ，于是窝选择了 $LCT$ ，跑的还挺快。</p><a id="more"></a><p>开始分析题目，如果没有”动态”限制的话就是一个裸的”没有上司的舞会”，解法显然是设 $f[u][0/1]​$ 表示 $u​$ 不选/选 的时候其子树的最大价值，转移显然为：</p><script type="math/tex; mode=display">f[u][0]=\sum \max(f[v][0],f[v][1])\\f[u][1]=val[u]+\sum f[v][0]</script><p>对于树中的一个节点 $u$ 的所有儿子中有个重儿子，其他的儿子就是轻儿子，我们将重儿子和轻儿子的贡献分开算。设一个 $g[u][0/1]$ ，其值为：</p><script type="math/tex; mode=display">g[u][0]=\sum\max(f[v][0],f[v][1])\\g[u][1]=val[u]+\sum f[v][0]</script><p>注意上式中的 $v$ 只的是轻儿子，然后 $f$ 的转移就变成了以下形式( $x$ 为重儿子)：</p><script type="math/tex; mode=display">f[u][0]=\max(f[x][0],f[x][1])+g[u][0]\\f[u][1]=g[u][1]+f[x][0]</script><p>其实这里的 $g$ 很好维护，我们在 $Access$ 的时候只要计算儿子变化时的贡献就好了。</p><p>接着我们构造出转移矩阵：</p><script type="math/tex; mode=display">\begin{bmatrix}g[u][0] & g[u][0]\\g[u][1] & -inf\end{bmatrix}\cdot\begin{bmatrix}f[x][0] \\f[x][1]\end{bmatrix}=\begin{bmatrix}f[u][0]\\f[u][1]\end{bmatrix}</script><p>这样子就可以直接更新了，对于每个节点我们只需要维护两个矩阵即可，一个就是上面乘法中的 $g$ 矩阵，一个就是上面乘法中的 $f$ 矩阵。</p><p>需要注意的是这是广义矩阵乘法，也就是说这个矩阵乘法的运算规则为：</p><script type="math/tex; mode=display">c[i][j]=max(c[i][j],a[i][k]+b[k][j])</script><p>很像 $floyd$ ，可以直接算了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span><span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">2</span>];matrix()&#123;c[<span class="number">0</span>][<span class="number">0</span>]=c[<span class="number">0</span>][<span class="number">1</span>]=c[<span class="number">1</span>][<span class="number">0</span>]=c[<span class="number">1</span>][<span class="number">1</span>]=-inf;&#125;&#125;;</span><br><span class="line">matrix <span class="keyword">operator</span> * (matrix&amp;a,matrix&amp;b) &#123;</span><br><span class="line">    matrix ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;++j)<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;++k)</span><br><span class="line">        ret.c[i][j]=max(ret.c[i][j],a.c[i][k]+b.c[k][j]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[N],dp[N][<span class="number">2</span>],head[N],nxt[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;nxt[++cnt]=head[u],to[cnt]=v,head[u]=cnt;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_cut_tree</span> &#123;</span></span><br><span class="line">    matrix f[N],g[N];</span><br><span class="line">    <span class="keyword">int</span> ch[N][<span class="number">2</span>],fa[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> !((ch[fa[x]][<span class="number">0</span>]==x)||(ch[fa[x]][<span class="number">1</span>]==x));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        f[x]=g[x];</span><br><span class="line">        <span class="keyword">if</span>(ch[x][<span class="number">0</span>]) f[x]=f[ch[x][<span class="number">0</span>]]*f[x];<span class="keyword">if</span>(ch[x][<span class="number">1</span>]) f[x]=f[x]*f[ch[x][<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x],z=fa[y],k=ch[y][<span class="number">1</span>]==x,v=ch[x][!k];</span><br><span class="line">        <span class="keyword">if</span>(!isroot(y)) ch[z][ch[z][<span class="number">1</span>]==y]=x;ch[x][!k]=y,ch[y][k]=v;</span><br><span class="line">        <span class="keyword">if</span>(v) fa[v]=y;fa[y]=x,fa[x]=z;pushup(y);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!isroot(x)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!isroot(fa[x]))</span><br><span class="line">                rotate((ch[fa[x]][<span class="number">0</span>]==x)^(ch[fa[fa[x]]][<span class="number">0</span>]==fa[x])?x:fa[x]);</span><br><span class="line">            rotate(x);</span><br><span class="line">        &#125;pushup(x);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;x;x=fa[y=x]) &#123;</span><br><span class="line">            Splay(x);</span><br><span class="line">            <span class="keyword">if</span>(ch[x][<span class="number">1</span>]) &#123;</span><br><span class="line">                g[x].c[<span class="number">0</span>][<span class="number">0</span>]+=max(f[ch[x][<span class="number">1</span>]].c[<span class="number">0</span>][<span class="number">0</span>],f[ch[x][<span class="number">1</span>]].c[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">                g[x].c[<span class="number">1</span>][<span class="number">0</span>]+=f[ch[x][<span class="number">1</span>]].c[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(y) &#123;</span><br><span class="line">                g[x].c[<span class="number">0</span>][<span class="number">0</span>]-=max(f[y].c[<span class="number">0</span>][<span class="number">0</span>],f[y].c[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">                g[x].c[<span class="number">1</span>][<span class="number">0</span>]-=f[y].c[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            g[x].c[<span class="number">0</span>][<span class="number">1</span>]=g[x].c[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            ch[x][<span class="number">1</span>]=y,pushup(x);</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Access(x),Splay(x),g[x].c[<span class="number">1</span>][<span class="number">0</span>]-=v[x]-y;</span><br><span class="line">        pushup(x),v[x]=y;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        dp[u][<span class="number">1</span>]=v[u];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];<span class="keyword">if</span>(v!=fa[u]) &#123;</span><br><span class="line">                fa[v]=u,build(v);</span><br><span class="line">                dp[u][<span class="number">0</span>]+=max(dp[v][<span class="number">0</span>],dp[v][<span class="number">1</span>]);</span><br><span class="line">                dp[u][<span class="number">1</span>]+=dp[v][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        g[u].c[<span class="number">0</span>][<span class="number">0</span>]=g[u].c[<span class="number">0</span>][<span class="number">1</span>]=dp[u][<span class="number">0</span>];</span><br><span class="line">        g[u].c[<span class="number">1</span>][<span class="number">0</span>]=dp[u][<span class="number">1</span>];f[u]=g[u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(v[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;n;++i)IN(u),IN(v),add(u,v),add(v,u);</span><br><span class="line">    T.build(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        T.change(x,y),T.Splay(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(T.f[<span class="number">1</span>].c[<span class="number">0</span>][<span class="number">0</span>],T.f[<span class="number">1</span>].c[<span class="number">1</span>][<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> LCT </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】[HNOI2019]白兔之舞  单位根反演+MTT  luoguP5293</title>
      <link href="/2019/04/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP5293/"/>
      <url>/2019/04/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP5293/</url>
      
        <content type="html"><![CDATA[<p>单位根反演不会啊怎么搞 $FFT$ 吧，还是了解了单位根反演后才可以搞的好吧……居然有人吐槽我说我<strong>学了 $FFT​$ 但是不会运用？！</strong>，嘤嘤嘤打击有些大……</p><p>实际上所谓的单位根反演就是这个东西：</p><script type="math/tex; mode=display">\frac{1}{n}\sum_{i=0}^{n-1}(\omega_n^d)^i=[n|d]</script><a id="more"></a><p>回到题目，我们先考虑正解的简化版—— $n=1$ 的版本，我们先定义 $W=w[1][1]$ 。</p><p>现在对于每一个 $t$ 的答案显然为 $\sum_{i=0}^{L}[i\% k=t] W^i (^L_i)$</p><p>这个式子显然等于 $\sum_{i=0}^{L}[k|(i-t)] w^i (^L_i)$ 。会发现 $[k|(i-t)]$ 和上面单位根反演的 $[n|d]$ 一样，于是我们尝试将单位根反演的式子带进去。</p><script type="math/tex; mode=display">=\sum_{i=0}^{L}\frac{1}{k}\sum_{j=0}^{k-1}(\omega_k^{i-t})^j W^i \binom{L}{i}\\\\=\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}\sum_{i=0}^{L} \omega_k^{ij} W^i \binom{L}{i}\\\\=\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}\sum_{i=0}^{L} \binom{L}{i}(\omega_k^{j} W)^i\\\\=\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}\sum_{i=0}^{L} \binom{L}{i}(\omega_k^{j} W)^i 1^{n-i}\\\\=\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-tj}(\omega_k^{j} W+1)^L</script><p>后面的 $(\omega_k^{j} W+1)^L$ 显然可以预处理，记为 $num_j$ 。</p><p>然后发现 $-tj=\binom{t}{2}+\binom{j}{2}-\binom{t+j}{2}$</p><script type="math/tex; mode=display">=\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{\binom{t}{2}+\binom{j}{2}-\binom{t+j}{2}}num_j\\\\=\frac{1}{k}\omega_k^{\binom{t}{2}}\sum_{j=0}^{k-1}num_j\omega_k^{\binom{j}{2}}\cdot\omega_k^{-\binom{t+j}{2}}</script><p>后面的式子可以用 $FFT$ 加速，但是值域太大这里需要用到 $MTT$ 。现在就有 $40$ 分了，接下来考虑 $n&gt;1$ 的情况。</p><p>我们建矩阵，然后会发现 $n&gt;1$ 仅会对 $num_j$ 的计算方式有变化。</p><p>我们定义一个 $begin$ 矩阵，该矩阵只有 $(0,x)$ 位置上有值且值为 $1$ ，也就是说这是白兔的起点。那么最后我们需要留下来的也就是矩阵的 $(0,y)$ ，因为只有在第二维为 $y$ 是才会计入答案。</p><p>嗯，差不多可以这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">begin.c[<span class="number">0</span>][x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i) </span><br><span class="line">    num[i]=(begin*<span class="built_in">pow</span>(w*num[i]+I,n)).c[<span class="number">0</span>][y]%MOD;</span><br><span class="line"><span class="comment">/*w就是上文中的W，不过这里是矩阵*/</span></span><br><span class="line"><span class="comment">/*I是矩阵中的单位'1'*/</span></span><br></pre></td></tr></table></figure><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">65536</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1</span>);   </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,k,n,x,y,MOD,G,num[N],A[N&lt;&lt;<span class="number">2</span>],B[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OI &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(x,i,j) for((x)=(i);(x)&lt;=(j);++(x))</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">IN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;ll x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(flag) x=-x;<span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span><span class="keyword">int</span> c[<span class="number">3</span>][<span class="number">3</span>];matrix()&#123;<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));&#125;&#125;;</span><br><span class="line">    matrix <span class="keyword">operator</span> + (<span class="keyword">const</span> matrix&amp;a,<span class="keyword">const</span> matrix&amp;b) &#123;</span><br><span class="line">        matrix ans;<span class="keyword">int</span> i,j;F(i,<span class="number">0</span>,<span class="number">2</span>)F(j,<span class="number">0</span>,<span class="number">2</span>) &#123;</span><br><span class="line">            ans.c[i][j]=a.c[i][j]+b.c[i][j];</span><br><span class="line">            <span class="keyword">if</span>(ans.c[i][j]&gt;=MOD) ans.c[i][j]-=MOD;</span><br><span class="line">        &#125;<span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> matrix&amp;a,<span class="keyword">const</span> matrix&amp;b) &#123;</span><br><span class="line">        matrix ans;<span class="keyword">int</span> i,j,k;F(i,<span class="number">0</span>,<span class="number">2</span>)F(j,<span class="number">0</span>,<span class="number">2</span>)F(k,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">            ans.c[i][k]=(ans.c[i][k]+<span class="number">1l</span>l*a.c[i][j]*b.c[j][k])%MOD;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> matrix&amp;a,<span class="keyword">const</span> <span class="keyword">int</span>&amp;b) &#123;</span><br><span class="line">        matrix ans;<span class="keyword">int</span> i,j;F(i,<span class="number">0</span>,<span class="number">2</span>)F(j,<span class="number">0</span>,<span class="number">2</span>)ans.c[i][j]=<span class="number">1l</span>l*a.c[i][j]*b%MOD;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">long</span> <span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">long</span> <span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">long</span> <span class="keyword">double</span> x,y;&#125;;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;</span><br><span class="line">    matrix I;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=<span class="number">1l</span>l*x*x%MOD) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*x%MOD;</span><br><span class="line">        <span class="keyword">return</span> res%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> matrix <span class="title">pow</span><span class="params">(matrix x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        matrix res=I;<span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=res*x;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> OI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MTT &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BLOCK 32768</span></span><br><span class="line">    <span class="keyword">int</span> limit=<span class="number">1</span>,cnt=<span class="number">0</span>,filp[N&lt;&lt;<span class="number">2</span>],Ans[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">complex</span> A1[N&lt;&lt;<span class="number">2</span>],B1[N&lt;&lt;<span class="number">2</span>],A2[N&lt;&lt;<span class="number">2</span>],B2[N&lt;&lt;<span class="number">2</span>],X[N&lt;&lt;<span class="number">2</span>],omg[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)<span class="keyword">if</span>(i&lt;filp[i])<span class="built_in">std</span>::swap(f[i],f[filp[i]]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">1</span>;p&lt;limit;p&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">complex</span> *a=f;a!=f+limit;a+=(p&lt;&lt;<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;p;++l)&#123;</span><br><span class="line">                    <span class="keyword">complex</span> t=a[l+p]*omg[limit/(p&lt;&lt;<span class="number">1</span>)*l];</span><br><span class="line">                    a[l+p]=a[l]-t,a[l]=a[l]+t;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mtt</span><span class="params">(<span class="keyword">int</span> *A,<span class="keyword">int</span> *B)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(limit&lt;(k*<span class="number">3</span>+<span class="number">5</span>)) limit&lt;&lt;=<span class="number">1</span>,++cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i) filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(cnt<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i) A1[i].x=A[i]&amp;(BLOCK<span class="number">-1</span>),A2[i].x=A[i]&gt;&gt;<span class="number">15</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i) B1[i].x=B[i]&amp;(BLOCK<span class="number">-1</span>),B2[i].x=B[i]&gt;&gt;<span class="number">15</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i) omg[i]=(<span class="keyword">complex</span>)&#123;<span class="built_in">cos</span>(i*PI*<span class="number">2</span>/limit),<span class="built_in">sin</span>(i*PI*<span class="number">2</span>/limit)&#125;;</span><br><span class="line">        fft(A1,<span class="number">1</span>),fft(B1,<span class="number">1</span>);fft(A2,<span class="number">1</span>),fft(B2,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)&#123;</span><br><span class="line">            <span class="keyword">complex</span> a1=A1[i],a2=A2[i],b1=B1[i],b2=B2[i];</span><br><span class="line">            A1[i]=a1*b1,A2[i]=a2*b2,B1[i]=a1*b2,B2[i]=a2*b1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i) omg[i]=(<span class="keyword">complex</span>)&#123;<span class="built_in">cos</span>(i*PI*<span class="number">2</span>/limit),-<span class="built_in">sin</span>(i*PI*<span class="number">2</span>/limit)&#125;;</span><br><span class="line">        fft(A1,<span class="number">-1</span>),fft(B1,<span class="number">-1</span>);fft(A2,<span class="number">-1</span>),fft(B2,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)</span><br><span class="line">            A1[i].x/=limit,A2[i].x/=limit,B1[i].x/=limit,B2[i].x/=limit;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)</span><br><span class="line">            Ans[i]=((ll)(A1[i].x+<span class="number">0.5</span>)%MOD+<span class="number">1073741824l</span>l*((ll)(A2[i].x+<span class="number">0.5</span>)%MOD)%MOD+</span><br><span class="line">            <span class="number">32768l</span>l*((ll)(B1[i].x+<span class="number">0.5</span>)%MOD)%MOD+<span class="number">32768l</span>l*((ll)(B2[i].x+<span class="number">0.5</span>)%MOD)%MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> MTT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> divisor[<span class="number">105</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_G</span><span class="params">()</span> </span>&#123;<span class="comment">/*获取原根*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,S=MOD<span class="number">-1</span>;i&lt;=S;++i) </span><br><span class="line">        <span class="keyword">if</span>(S%i==<span class="number">0</span>) &#123;divisor[++tot]=i;<span class="keyword">while</span>(!(S%i)) S/=i;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> g=<span class="number">2</span>;;++g) &#123;</span><br><span class="line">        <span class="keyword">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;++j) <span class="keyword">if</span>(<span class="built_in">pow</span>(g,(MOD<span class="number">-1</span>)/divisor[j])==<span class="number">1</span>) &#123;ok=<span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(ok) <span class="keyword">return</span> g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">matrix w,s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    I.c[<span class="number">0</span>][<span class="number">0</span>]=I.c[<span class="number">1</span>][<span class="number">1</span>]=I.c[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    m=IN(),k=IN(),n=IN(),x=IN(),y=IN(),MOD=IN();--x,--y;</span><br><span class="line">    <span class="comment">/*num其实就是上文中的单位根，这里预处理一下计算方便些*/</span></span><br><span class="line">    num[<span class="number">0</span>]=<span class="number">1</span>,num[<span class="number">1</span>]=<span class="built_in">pow</span>(G=get_G(),(MOD<span class="number">-1</span>)/k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;k;++i) num[i]=<span class="number">1l</span>l*num[<span class="number">1</span>]*num[i<span class="number">-1</span>]%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j) w.c[i][j]=IN();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);++i) A[i]=num[(k<span class="number">-1l</span>l*i*(i<span class="number">-1</span>)/<span class="number">2</span>%k)%k];</span><br><span class="line">    s.c[<span class="number">0</span>][x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i) B[i]=<span class="number">1l</span>l*num[<span class="number">1l</span>l*i*(i<span class="number">-1</span>)/<span class="number">2</span>%k]*(s*<span class="built_in">pow</span>(w*num[i]+I,n)).c[<span class="number">0</span>][y]%MOD;</span><br><span class="line">    <span class="comment">/*计算后面两个多项式的值*/</span></span><br><span class="line">    reverse(B,B+k+<span class="number">1</span>),mtt(A,B);</span><br><span class="line">    <span class="keyword">int</span> invk=<span class="built_in">pow</span>(k,MOD<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">1l</span>l*Ans[i+k]*invk%MOD*num[<span class="number">1l</span>l*i*(i<span class="number">-1</span>)/<span class="number">2</span>%k]%MOD);</span><br><span class="line">    <span class="comment">/*计算答案*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> FFT </tag>
            
            <tag> 单位根反演 </tag>
            
            <tag> MTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI2019]校园旅行 生成树+DP luoguP5292</title>
      <link href="/2019/04/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP5292/"/>
      <url>/2019/04/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP5292/</url>
      
        <content type="html"><![CDATA[<p>$myy$ 出的神题……貌似正解并不难但是没有人切……</p><p>$30$ 分可以用 $DP$ ，设 $f[i][j]$ 表示 $i$ 到 $j$ 是否有一条满足条件的路径。对于有一条满足条件的路径的 $i,j$ ，我们枚举连接 $i$ 的点和连接 $j$ 的点，如果这两个点的标记相同，那么既然 $i,j​$ 合法，这两个点也一定合法。</p><p>不过这样的复杂度是 $O(m^2)$ 的，所以只能过 $30$ 分。</p><a id="more"></a><p>然后考虑优化，我们发现所有的边也就只有三种：</p><ul><li>该边连接的两个点的标记相同<ul><li>两个点的标记都为 $1$</li><li>两个点的标记都为 $0​$</li></ul></li><li>改边连接的两个点的标记不同</li></ul><p>然后我们开 $3$ 个图，对于每一条读入进来的边，如果属于第一种就插入到第一个图中，其他同理。</p><p>然后会发现这三个图都是有若干个连通块组成的，可以知道，如果我们留下来的仅是该连通块的生成树也不会对答案产生影响，但是边数却大大减少！</p><p>但是直接对每个连通块求生成树是不对的，因为<strong>生成树上任意两个点之间的路径经过的边的条数的奇偶是确定的</strong>，并且只有<strong>二分图</strong>满足该条件，不过我们无法保证连通块是二分图，也就是说，连通块中的任意两个点之间的路径经过的边的条数的奇偶是不确定的。</p><p>那么我们现在需要做的就是，如何使得不是二分图的连通块所求出的生成树可以满足——任意两个点之间的路径经过的边的条数的奇偶是不确定的。</p><p>仔细想想后发现并不难，我们只需要在生成树上加上一个奇环就好了，当然也等价于在生成树上的某一个点上加个自环。</p><p>这就很好办了，现在我们的边数已经大大减少了，这个时候再跑原先的 $30$ 分算法就可以过了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MKP make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,s[N],vis[N],f[N][N];</span><br><span class="line"><span class="keyword">int</span> flag,sta[N],top;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> head[N],nxt[M&lt;&lt;<span class="number">1</span>],to[M&lt;&lt;<span class="number">1</span>],from[N],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        ++cnt,nxt[cnt]=head[u],to[cnt]=v,head[u]=cnt;</span><br><span class="line">        ++cnt,nxt[cnt]=head[v],to[cnt]=u,head[v]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">        vis[u]=col,sta[++top]=u;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])</span><br><span class="line">            <span class="keyword">if</span>(!vis[to[i]]) from[to[i]]=u,check(to[i],<span class="number">3</span>-col);</span><br><span class="line">            <span class="keyword">else</span> flag|=(vis[to[i]]!=<span class="number">3</span>-col);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i][i]=<span class="number">1</span>,q.push(MKP(i,i));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=head[i];j;j=nxt[j])</span><br><span class="line">                <span class="keyword">if</span>(s[i]==s[to[j]]) f[i][to[j]]=<span class="number">1</span>,q.push(MKP(i,to[j]));</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front().first,y=q.front().second,u,v;</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=nxt[i])</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=head[y];j;j=nxt[j]) </span><br><span class="line">                    <span class="keyword">if</span>(!f[u=to[i]][v=to[j]]&amp;&amp;s[u]==s[v])</span><br><span class="line">                        f[u][v]=f[v][u]=<span class="number">1</span>,q.push(MKP(u,v));</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;G[<span class="number">3</span>],t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(q);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) s[i+<span class="number">1</span>]=str[i]-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="keyword">if</span>(s[x]==s[y]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[x]) G[<span class="number">0</span>].ins(x,y);</span><br><span class="line">            <span class="keyword">else</span> G[<span class="number">1</span>].ins(x,y);</span><br><span class="line">        &#125; <span class="keyword">else</span> G[<span class="number">2</span>].ins(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">2</span>;++k) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">            flag=top=<span class="number">0</span>,G[k].check(i,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(top) &#123;</span><br><span class="line">                <span class="keyword">int</span> x=sta[top];</span><br><span class="line">                <span class="keyword">if</span>(G[k].from[x]) t.ins(G[k].from[x],x);</span><br><span class="line">                --top;</span><br><span class="line">            &#125;<span class="keyword">if</span>(flag) t.ins(i,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t.solve();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=q;++i) </span><br><span class="line">        IN(x),IN(y),<span class="built_in">printf</span>(f[x][y]?<span class="string">"YES\n"</span>:<span class="string">"NO\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额……其实这份代码在 $luogu$ 上会被卡成 $70$ ，不过那是在没开 $O2$ 的情况下的，开了 $O2$ 顿时飞起！(幸好这题在考场上就是开 $O2$ 的)。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2012]魔幻棋盘 二维线段树+差分 luoguP2086/bzoj2788</title>
      <link href="/2019/04/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2086/"/>
      <url>/2019/04/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2086/</url>
      
        <content type="html"><![CDATA[<p>细节诸多…………</p><p>$gcd$ 显然可以用线段树维护，但是如果是区间修改的话就不好办了。这个时候我们需要将原矩阵以棋盘守护者的位置为中心进行差分，那么区间修改就变为单点修改了，$gcd$ 自然好维护多了。</p><a id="more"></a><p>但是当我们整体加的时候，因为我们对原矩阵进行了拆分，所以对于每个点是加是减还是不动的话需要分类讨论一番。</p><p>经过观察我们会发现，有三种情况(棋盘守护者的位置为 $(X,Y)$</p><ul><li>询问矩阵不包括 $(X,Y)$<ul><li>询问矩阵包含棋盘守护者所在的 $X$ 轴或是 $Y$ 轴。</li><li>询问矩阵不包含棋盘守护者所在的 $X$ 轴或是 $Y$ 轴。</li></ul></li><li>询问矩阵包括 $(X,Y)$</li></ul><p>这个时候我们可以自己更改原矩阵，然后输出其差分矩阵寻找规律了。需要注意的是判断的时候的边界情况以及自己修改的点的位置是否正确。细节很多，需要注意。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,x,y) for((i)=(x);(i)&lt;=(y);++(i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R(i,x,y) for((i)=(x);(i)&gt;=(y);--(i))</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m;LL a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)*m+y;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> OI &#123;</span><br><span class="line">    <span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span> </span>&#123;<span class="keyword">return</span> x&gt;=<span class="number">0</span>?x:-x;&#125;</span><br><span class="line">    <span class="function">LL <span class="title">gcd</span><span class="params">(LL x,LL y)</span> </span>&#123;<span class="keyword">return</span> y?gcd(y,x%y):<span class="built_in">abs</span>(x);&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> OI;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> _2D_Segment_tree &#123;<span class="comment">/*四分线段树*/</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> midl ((x1+x2)&gt;&gt;1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> midr ((y1+y2)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> tot,root;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span>LL v;<span class="keyword">int</span> ll,lr,rl,rr;&#125;t[N&lt;&lt;<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        LL vl=gcd(t[t[x].ll].v,t[t[x].lr].v);</span><br><span class="line">        LL vr=gcd(t[t[x].rl].v,t[t[x].rr].v);</span><br><span class="line">        t[x].v=gcd(vl,vr);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x1&gt;x2||y1&gt;y2) <span class="keyword">return</span>;x=++tot;</span><br><span class="line">        <span class="keyword">if</span>(x1==x2&amp;&amp;y1==y2) &#123;t[x].v=a[id(x1,y1)];<span class="keyword">return</span>;&#125;</span><br><span class="line">        build(t[x].ll,x1,y1,midl,midr);</span><br><span class="line">        build(t[x].lr,midl+<span class="number">1</span>,y1,x2,midr);</span><br><span class="line">        build(t[x].rl,x1,midr+<span class="number">1</span>,midl,y2);</span><br><span class="line">        build(t[x].rr,midl+<span class="number">1</span>,midr+<span class="number">1</span>,x2,y2);</span><br><span class="line">        pushup(x);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> X,<span class="keyword">int</span> Y,LL val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x1&gt;X||X&gt;x2||y1&gt;Y||Y&gt;y2) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(x1==x2&amp;&amp;y1==y2) &#123;t[x].v+=val;<span class="keyword">return</span>;&#125;</span><br><span class="line">        change(t[x].ll,x1,y1,midl,midr,X,Y,val);</span><br><span class="line">        change(t[x].lr,midl+<span class="number">1</span>,y1,x2,midr,X,Y,val);</span><br><span class="line">        change(t[x].rl,x1,midr+<span class="number">1</span>,midl,y2,X,Y,val);</span><br><span class="line">        change(t[x].rr,midl+<span class="number">1</span>,midr+<span class="number">1</span>,x2,y2,X,Y,val);</span><br><span class="line">        pushup(x);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> X1,<span class="keyword">int</span> Y1,<span class="keyword">int</span> X2,<span class="keyword">int</span> Y2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x1&gt;X2||x2&lt;X1||y1&gt;Y2||y2&lt;Y1) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(X1&lt;=x1&amp;&amp;Y1&lt;=y1&amp;&amp;x2&lt;=X2&amp;&amp;y2&lt;=Y2) <span class="keyword">return</span> t[x].v;</span><br><span class="line">        LL vll=query(t[x].ll,x1,y1,midl,midr,X1,Y1,X2,Y2);</span><br><span class="line">        LL vlr=query(t[x].lr,midl+<span class="number">1</span>,y1,x2,midr,X1,Y1,X2,Y2);</span><br><span class="line">        LL vrl=query(t[x].rl,x1,midr+<span class="number">1</span>,midl,y2,X1,Y1,X2,Y2);</span><br><span class="line">        LL vrr=query(t[x].rr,midl+<span class="number">1</span>,midr+<span class="number">1</span>,x2,y2,X1,Y1,X2,Y2);</span><br><span class="line">        <span class="keyword">return</span> gcd(vll,gcd(vlr,gcd(vrl,vrr)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> _2D_Segment_tree;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">int</span> X,Y,T,i,j;IN(X),IN(Y),IN(T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*m;++i) IN(a[i]);</span><br><span class="line">    <span class="comment">/*-------对原矩阵进行差分-------*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*m;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>((i<span class="number">-1</span>)%m+<span class="number">1</span>&lt;Y) b[i]=a[i]-a[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((i<span class="number">-1</span>)%m+<span class="number">1</span>&gt;Y) b[i]=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">else</span> b[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*m;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>((i<span class="number">-1</span>)/m+<span class="number">1</span>&lt;X) a[i]=b[i]-b[i+m];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((i<span class="number">-1</span>)/m+<span class="number">1</span>&gt;X) a[i]=b[i]-b[i-m];</span><br><span class="line">        <span class="keyword">else</span> a[i]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*----------------------------*/</span></span><br><span class="line">    build(root,<span class="number">1</span>,<span class="number">1</span>,n,m);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> op,x1,y1,x2,y2;IN(op),IN(x1),IN(y1),IN(x2),IN(y2);</span><br><span class="line">        <span class="keyword">if</span>(!op) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,X-x1,Y-y1,X+x2,Y+y2));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            LL val;IN(val);</span><br><span class="line">            <span class="keyword">if</span>(x1&lt;=X&amp;&amp;x2&gt;=X&amp;&amp;y1&lt;=Y&amp;&amp;y2&gt;=Y) &#123;<span class="comment">/*包含了(X,Y)*/</span></span><br><span class="line">                change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,X,Y,val);</span><br><span class="line">                <span class="keyword">if</span>(y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,X,y1<span class="number">-1</span>,-val);</span><br><span class="line">                <span class="keyword">if</span>(y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,X,y2+<span class="number">1</span>,-val);</span><br><span class="line">                <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,Y,-val);</span><br><span class="line">                <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,Y,-val);</span><br><span class="line">                <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y1<span class="number">-1</span>,val);</span><br><span class="line">                <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y2+<span class="number">1</span>,val);</span><br><span class="line">                <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n&amp;&amp;y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y1<span class="number">-1</span>,val);</span><br><span class="line">                <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n&amp;&amp;y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y2+<span class="number">1</span>,val);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(y1&lt;=Y&amp;&amp;Y&lt;=y2) &#123;<span class="comment">/*包含Y轴*/</span></span><br><span class="line">                <span class="keyword">if</span>(x1&lt;X&amp;&amp;x2&lt;X) &#123;<span class="comment">/*在上面*/</span></span><br><span class="line">                    change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2,Y,val);</span><br><span class="line">                    <span class="keyword">if</span>(y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2,y1<span class="number">-1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2,y2+<span class="number">1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,Y,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y1<span class="number">-1</span>,val);</span><br><span class="line">                    <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y2+<span class="number">1</span>,val);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x1&gt;X&amp;&amp;x2&gt;X) &#123;<span class="comment">/*在下面*/</span></span><br><span class="line">                    change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1,Y,val);</span><br><span class="line">                    <span class="keyword">if</span>(y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1,y1<span class="number">-1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1,y2+<span class="number">1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,Y,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n&amp;&amp;y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y1<span class="number">-1</span>,val);</span><br><span class="line">                    <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n&amp;&amp;y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y2+<span class="number">1</span>,val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x1&lt;=X&amp;&amp;X&lt;=x2) &#123;<span class="comment">/*包含X轴*/</span></span><br><span class="line">                <span class="keyword">if</span>(y1&lt;Y&amp;&amp;y2&lt;Y) &#123;<span class="comment">/*在左边*/</span></span><br><span class="line">                    change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,X,y2,val);</span><br><span class="line">                    <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y2,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y2,-val);</span><br><span class="line">                    <span class="keyword">if</span>(y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,X,y1<span class="number">-1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(y1<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;x1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y1<span class="number">-1</span>,val);</span><br><span class="line">                    <span class="keyword">if</span>(y1<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;x2+<span class="number">1</span>&lt;=n) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y1<span class="number">-1</span>,val);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(y1&gt;Y&amp;&amp;y2&gt;Y) &#123;<span class="comment">/*在右边*/</span></span><br><span class="line">                    change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,X,y1,val);</span><br><span class="line">                    <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y1,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y1,-val);</span><br><span class="line">                    <span class="keyword">if</span>(y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,X,y2+<span class="number">1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(y2+<span class="number">1</span>&lt;=m&amp;&amp;x1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y2+<span class="number">1</span>,val);</span><br><span class="line">                    <span class="keyword">if</span>(y2+<span class="number">1</span>&lt;=m&amp;&amp;x2+<span class="number">1</span>&lt;=n) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y2+<span class="number">1</span>,val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//剩下的判断四个角</span></span><br><span class="line">                <span class="keyword">if</span>(x2&lt;X&amp;&amp;y2&lt;Y) &#123;<span class="comment">//左上角</span></span><br><span class="line">                    change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2,y2,val);</span><br><span class="line">                    <span class="keyword">if</span>(y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2,y1<span class="number">-1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y2,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y1<span class="number">-1</span>,val);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x2&lt;X&amp;&amp;y1&gt;Y) &#123;<span class="comment">/*右上角*/</span></span><br><span class="line">                    change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2,y1,val);</span><br><span class="line">                    <span class="keyword">if</span>(y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2,y2+<span class="number">1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y1,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x1<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1<span class="number">-1</span>,y2+<span class="number">1</span>,val);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x1&gt;X&amp;&amp;y2&lt;Y) &#123;<span class="comment">/*左下角*/</span></span><br><span class="line">                    change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1,y2,val);</span><br><span class="line">                    <span class="keyword">if</span>(y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1,y1<span class="number">-1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y2,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n&amp;&amp;y1<span class="number">-1</span>&gt;=<span class="number">1</span>) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y1<span class="number">-1</span>,val);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x1&gt;X&amp;&amp;y1&gt;Y) &#123;<span class="comment">/*右下角*/</span></span><br><span class="line">                    change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1,y1,val);</span><br><span class="line">                    <span class="keyword">if</span>(y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x1,y2+<span class="number">1</span>,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y1,-val);</span><br><span class="line">                    <span class="keyword">if</span>(x2+<span class="number">1</span>&lt;=n&amp;&amp;y2+<span class="number">1</span>&lt;=m) change(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,n,m,x2+<span class="number">1</span>,y2+<span class="number">1</span>,val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 二维线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI2019]多边形  组合数学  luoguP5288</title>
      <link href="/2019/04/12/%5B%E9%A2%98%E8%A7%A3%5DluoguP5288/"/>
      <url>/2019/04/12/%5B%E9%A2%98%E8%A7%A3%5DluoguP5288/</url>
      
        <content type="html"><![CDATA[<p>$\texttt{HNOI2019}$ 终于改出来一道题目了……感谢 $JerryC$ 跟我一起讨论，不然我也看不懂题解。这题真的是 $\texttt{HNOI2019}$ 最可做的题啊，可想而知 $\texttt{HNOI2019}$ 有多么毒瘤了。</p><p>$orz yyb$ ，感谢 $yyb$ 大佬的题解。</p><p>这一题一共有两问，并且部分分也比较多，接下来我们一起来逐一攻破这些特殊条件。</p><a id="more"></a><h2 id="1-只有第一问且-m-0-的情况"><a href="#1-只有第一问且-m-0-的情况" class="headerlink" title="1.只有第一问且 $m=0$ 的情况"></a>1.只有第一问且 $m=0$ 的情况</h2><p>其实这个时候我们可以发现，最终的答案是要满足所有的点都连向 $n$ 。</p><p>对于每一次旋转操作，可以让 <strong>一个没有连向 $n$ 的点连向 $n$ </strong> ，并且一次旋转操作也最多可以使得一个没有连向 $n$ 的点连向 $n$ 。既然要求最少步数，我们考虑最优情况：<strong>每一次旋转都有一个新的点连向 $n$</strong> 。这个时候最终需要的最少步数显然就是 <strong>$n-1-$已经与 $n$ 连接了的点数</strong>，为什么 $-1$ ？因为最终需要连向 $n$ 的点不包括 $n$ 。(<strong>ps：这里指的已经与 $n$ 连接了的点数其实包括 $1$ 与 $n-1$</strong>) 。</p><p>至于代码实现的话，我们用个 $vector$ 来存连接的点，最后统计一下 $size$ 即可。</p><hr><h2 id="2-有两问且-m-0-的情况"><a href="#2-有两问且-m-0-的情况" class="headerlink" title="2.有两问且 $m=0$ 的情况"></a>2.有两问且 $m=0$ 的情况</h2><p>初始局面的第一问我们已经解决了，现在我们来看看怎么解决初始局面的第二问。</p><p>假设当前与 $n$ 连接了的点的集合为 $S=\{a_1,a_2,\cdots ,a_s\}$  ，这个时候我们将 $1$ 到 $n$ 分成若干个区间：$[1,a_1],[a_1,a_2],\cdots,[a_{s-1},a_s],[a_s,n-1]$ ，我们会发现，<strong>每一次旋转操作的四个点一定属于同一个区间</strong> 。<strong>在最终状态，每一个区间中的所有的点都是连向 $n$ 的。</strong></p><p>那么我们考虑计算每一个区间的<strong>操作序列</strong>，我们设 $[a_i,a_{i+1}]$ 区间的操作序列长度为 $sz(a_i)$ 。注意这个操作序列指的就是一个区间从初始状态到最终状态的所有旋转操作组成的序列。</p><p>我们现在考虑方案数，假设我们知道了 $sz(a_i),sz(a_{i+1})$ ，也就是区间 $[a_i,a_{i+1}]$ 和区间 $[a_{i+1},a_{i+2}]$ 的操作序列的长度。那么使得这两个区间都到达最终状态的方案数显然为 $C_{sz(a_i)+sz(a_{i+1})}^{sz(a_i)}$，当然也是 $C_{sz(a_i)+sz(a_{i+1})}^{sz(a_{i+1})}$ 。</p><p>这下子计算就变得简单多了，但是我们怎么求出<strong>使得单个区间变为最终状态的方案数</strong>以及<strong>当个区间的操作序列长度</strong>呢？这个时候我们可以将每一个区间 $[a_i,a_{i+1}]$ 建成一棵二叉树，每一次将 $[a_i,a_{i+1}]$ 拆成 $[a_i,p],[p,a_{i+1}]$ ，在树中这两个子区间就是 $[a_i,a_{i+1}]$ 的两个儿子。</p><p>这下子使得 $[a_i,a_{i+1}]$ 变为最终状态的方案数显然可以从其树中的两个儿子得出了，计算的方法和上面同理。</p><p>至于这个 $p$ ，假设当前区间为 $l,r$ ，我们可以选择 <strong>第一个比 $l+1$ 大且与 $r$ 连了边的点</strong> ，那么这个时候可以理解为 <strong>拆掉 $p,r$ 这条边，然后连起来 $p,n$ 这条边</strong> ，于是 $l,p$ 可以作为一个区间了，$p,r$ 也可以作为一个区间了。</p><p>为什么一定要选择<strong>第一个比 $l+1$ 大且与 $r$ 连了边的点</strong>呢？我们考虑两个点 $a$ 和 $b$ ，其中 $a$ 就是<strong>第一个比 $l+1$ 大且与 $r$ 连了边的点</strong>，$b$ 则是一个<strong>小于 $r$ 大于 $a$ 并且和 $r$ 连了边的点</strong> 。如果这个时候选择将 $b,r$ 断开连接 $b,n$ 的话，线段 $a,r$ 和线段 $b,n$ <strong>显然会交叉</strong> ，那么就不合法了。所以我们选择第一个比 $l+1$ 大且与 $r$ 连了边的点，这样至少是合法的。当然如果这个点大于 $r$ 了就没办法了。</p><p>代码的话一个 $dfs$ 可以搞定。</p><hr><h2 id="3-m-gt-0-且只有第一问的情况"><a href="#3-m-gt-0-且只有第一问的情况" class="headerlink" title="3.$m&gt;0$ 且只有第一问的情况"></a>3.$m&gt;0$ 且只有第一问的情况</h2><p>首先我们会发现，第一问的答案其实就是我们的树的结点个数。</p><p>然后考虑这个旋转操作，现在有 $a&lt;b&lt;c&lt;d​$ ，我们需要求出的就是 $(a,c)​$ 旋转对第一问带来的变化。</p><p>既然 $a,c$ 是连了边的，那么在树中也一定有一个节点代表 $[a,c]$ 区间，我们先在树中找到这个节点，然后再分两种情况来讨论。</p><h3 id="一-该节点在树中有父节点"><a href="#一-该节点在树中有父节点" class="headerlink" title="一.该节点在树中有父节点"></a>一.该节点在树中有父节点</h3><p>我们将图画出来：</p><p><img src="/2019/04/12/[题解]luoguP5288/A.png" alt=""></p><p>（左边的是原来的，右边的是经过了 $(a,c)$ 旋转的）</p><p>可以发现，旋转之后我们损失了 $(a,c)$ 节点，但是多了个 $(b,d)$ 节点，我们的节点数实际上是没有变的。也就是说我们第一问的答案没有变。</p><h3 id="二-该节点在树中没有父节点"><a href="#二-该节点在树中没有父节点" class="headerlink" title="二.该节点在树中没有父节点"></a>二.该节点在树中没有父节点</h3><p>这个时候 $a,c$ 肯定都是已经连向了 $n$ 的，不然不可能没有父节点。那么这个时候 $d$ 要不是 $n$ 要不是其他区间的点了。上文已经讲了，旋转操作只可能在一个区间内进行，也就是说 $d$ 只能等于 $n$ 。</p><p>那么 $d=n$ 的话树会怎么变换呢？很显然，$(a,c)$ 会消失，剩下的就是 $(a,b)$ 和 $(b,c)$ 。这个时候是少了一个点的，那么第一问的答案就要减一了。</p><p>如果从多边形的角度理解的话，会发现多了一个连接了 $n$ 的点，那么第一问的答案自然就少了一。</p><p>这个代码实现就不讲了。</p><hr><h2 id="4-m-gt-0-且两问都有的情况"><a href="#4-m-gt-0-且两问都有的情况" class="headerlink" title="4.$m&gt;0$ 且两问都有的情况"></a>4.$m&gt;0$ 且两问都有的情况</h2><p>解决了这个情况我们就胜利了。</p><p>也就是说现在我们需要解决 $m&gt;0$ 时第二问怎么变化。</p><p>按照上面的来就行了。</p><h3 id="一-该节点在树中有父节点-1"><a href="#一-该节点在树中有父节点-1" class="headerlink" title="一.该节点在树中有父节点"></a>一.该节点在树中有父节点</h3><p>按照上面的图，我们可以先将这些节点的贡献去掉。然后再加上新的贡献即可。</p><h3 id="二-该节点在树中没有父节点-1"><a href="#二-该节点在树中没有父节点-1" class="headerlink" title="二.该节点在树中没有父节点"></a>二.该节点在树中没有父节点</h3><p>我们直接去掉 $(a,c)$ 的贡献，然后加上 $(a,b),(b,c)$ 的贡献即可。</p><p>这一部分可以参照代码了。</p><hr><p>综上，我们解决了所有的问题，接下来贴出代码 $QwQ$ 。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> W,n,Ans1,Ans2=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="comment">/*G[i]表示与i相连接的点的集合*/</span></span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; vis;</span><br><span class="line"><span class="comment">/*这个是为了方便快速找到代表(a,c)节点所用的map*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i) </span><br><span class="line">        G[i].push_back(i+<span class="number">1</span>),G[i].push_back(i<span class="number">-1</span>);</span><br><span class="line">    G[<span class="number">1</span>].push_back(n),G[<span class="number">1</span>].push_back(<span class="number">2</span>);</span><br><span class="line">    G[n].push_back(n<span class="number">-1</span>),G[n].push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) sort(G[i].begin(),G[i].end());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> inv[N&lt;&lt;<span class="number">1</span>],fct[N&lt;&lt;<span class="number">1</span>],fci[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="comment">/*分别对应逆元，阶乘，逆元的阶乘。主要用于计算组合数*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l*fct[n]*fci[m]%MOD*fci[n-m]%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Inv_C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l*fci[n]*fct[m]%MOD*fct[n-m]%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;<span class="keyword">return</span> C(n+m,n);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Inv_calc</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;<span class="keyword">return</span> Inv_C(n+m,n);&#125;</span><br><span class="line"><span class="comment">/*上面的组合数不再赘述......*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> root[N],fa[N&lt;&lt;<span class="number">1</span>],sz[N&lt;&lt;<span class="number">1</span>],ch[N&lt;&lt;<span class="number">1</span>][<span class="number">2</span>],tot;</span><br><span class="line"><span class="comment">/*root[i]就是S集合中的区间ai,ai+1在树中的节点的编号*/</span></span><br><span class="line"><span class="comment">/*fa表示父节点，sz表示节点子树大小，ch表示节点的左右儿子*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> f,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r-l&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    x=++tot,sz[x]=<span class="number">1</span>,fa[x]=f;</span><br><span class="line">    <span class="keyword">int</span> p=lower_bound(G[r].begin(),G[r].end(),l+<span class="number">1</span>)-G[r].begin();</span><br><span class="line">    <span class="comment">/*找到这个p*/</span></span><br><span class="line">    p=G[r][p],vis[make_pair(l,r)]=x;</span><br><span class="line">    <span class="comment">/*找到p在原多边形中对应的点，并记录l,r在树中的点的编号*/</span></span><br><span class="line">    dfs(ch[x][<span class="number">0</span>],x,l,p),dfs(ch[x][<span class="number">1</span>],x,p,r);<span class="comment">/*向下计算子树*/</span></span><br><span class="line">    sz[x]+=sz[ch[x][<span class="number">0</span>]]+sz[ch[x][<span class="number">1</span>]];<span class="comment">/*统计子树大小*/</span></span><br><span class="line">    Ans2=<span class="number">1l</span>l*Ans2*calc(sz[ch[x][<span class="number">0</span>]],sz[ch[x][<span class="number">1</span>]])%MOD;<span class="comment">/*计算贡献*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(W),IN(n);</span><br><span class="line">    inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=fct[<span class="number">0</span>]=fci[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n+n;++i) inv[i]=<span class="number">1l</span>l*(MOD-MOD/i)*inv[MOD%i]%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+n;++i) fct[i]=<span class="number">1l</span>l*fct[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+n;++i) fci[i]=<span class="number">1l</span>l*fci[i<span class="number">-1</span>]*inv[i]%MOD;</span><br><span class="line">    <span class="comment">/*以上为初始化逆元，阶乘，逆元的阶乘*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-3</span>;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        G[x].push_back(y),G[y].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    solve(),Ans1=n<span class="number">-1</span>-G[n].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,len=G[n].size();i&lt;len<span class="number">-1</span>;++i) </span><br><span class="line">        dfs(root[i],<span class="number">0</span>,G[n][i],G[n][i+<span class="number">1</span>]);<span class="comment">/*计算每个区间ai,ai+1的树*/</span></span><br><span class="line">    <span class="keyword">int</span> Size=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,len=G[n].size();i&lt;len<span class="number">-1</span>;++i) </span><br><span class="line">        Ans2=<span class="number">1l</span>l*Ans2*calc(Size,sz[root[i]])%MOD,Size+=sz[root[i]];</span><br><span class="line">    <span class="comment">/*统计答案*/</span></span><br><span class="line">    <span class="keyword">if</span>(!W) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans1);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,Ans1,Ans2);</span><br><span class="line">    <span class="keyword">int</span> q;IN(q);</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;IN(a),IN(b);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) a^=b^=a^=b;</span><br><span class="line">        <span class="keyword">int</span> x=vis[make_pair(a,b)];<span class="comment">/*找到在原树中a,b所代表的节点*/</span></span><br><span class="line">        <span class="keyword">if</span>(!W) &#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans1-(fa[x]?<span class="number">0</span>:<span class="number">1</span>));<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> nowans1=Ans2;</span><br><span class="line">            <span class="keyword">if</span>(fa[x]) &#123;</span><br><span class="line">                <span class="keyword">int</span> y=fa[x],k=ch[y][<span class="number">1</span>]==x;</span><br><span class="line">                nowans1=<span class="number">1l</span>l*nowans1*Inv_calc(sz[ch[x][<span class="number">0</span>]],sz[ch[x][<span class="number">1</span>]])%MOD;</span><br><span class="line">                nowans1=<span class="number">1l</span>l*nowans1*Inv_calc(sz[ch[y][<span class="number">0</span>]],sz[ch[y][<span class="number">1</span>]])%MOD;</span><br><span class="line">                nowans1=<span class="number">1l</span>l*nowans1*calc(sz[ch[x][!k]],sz[ch[y][!k]])%MOD;</span><br><span class="line">                nowans1=<span class="number">1l</span>l*nowans1*calc(<span class="number">1</span>+sz[ch[y][!k]]+sz[ch[x][!k]],sz[ch[x][k]])%MOD;</span><br><span class="line">                <span class="comment">/*除掉贡献与增加贡献*/</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nowans1=<span class="number">1l</span>l*nowans1*Inv_calc(sz[ch[x][<span class="number">0</span>]],sz[ch[x][<span class="number">1</span>]])%MOD;</span><br><span class="line">                nowans1=<span class="number">1l</span>l*nowans1*Inv_calc(Size-sz[x],sz[x])%MOD;</span><br><span class="line">                nowans1=<span class="number">1l</span>l*nowans1*calc(Size-sz[x],sz[ch[x][<span class="number">0</span>]])%MOD;</span><br><span class="line">                nowans1=<span class="number">1l</span>l*nowans1*calc(Size-sz[x]+sz[ch[x][<span class="number">0</span>]],sz[ch[x][<span class="number">1</span>]])%MOD;</span><br><span class="line">                <span class="comment">/*除掉贡献与增加贡献*/</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,Ans1-(fa[x]?<span class="number">0</span>:<span class="number">1</span>),nowans1);<span class="comment">/*输出答案*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】[SDOI2017]数字表格  莫比乌斯反演  luoguP3704</title>
      <link href="/2019/04/10/%5B%E9%A2%98%E8%A7%A3%5DluoguP3704/"/>
      <url>/2019/04/10/%5B%E9%A2%98%E8%A7%A3%5DluoguP3704/</url>
      
        <content type="html"><![CDATA[<p>我们设 $n \leq m​$ ，然后开始推式子，我们将 $gcd(i,j)​$ 的值作为 “$d​$” 提出来：</p><script type="math/tex; mode=display">\prod_{d=1}^{n}\prod_{i=1}^{n}\prod_{j=1}^{m}if(gcd(i,j)=d) f[d]</script><script type="math/tex; mode=display">=\prod_{d=1}^{n}\prod_{i=1}^{n}\prod_{j=1}^{m}if(gcd(i,j)=d) f[d]</script><script type="math/tex; mode=display">=\prod_{d=1}^{n}\prod_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\prod_{j=1}^{ \lfloor\frac{m}{d}\rfloor }if(gcd(i,j)=1) f[d]</script><script type="math/tex; mode=display">=\prod_{d=1}^{n} f[d]^{\sum_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]}</script><a id="more"></a><p>$\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]​$ 是个熟悉的式子，我们从这个式子继续开刀：</p><script type="math/tex; mode=display">\sum_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{ \lfloor\frac{m}{d}\rfloor }[gcd(i,j)=1]​</script><script type="math/tex; mode=display">=\sum_{i=1}^{ \lfloor\frac{n}{d}\rfloor }\sum_{j=1}^{ \lfloor\frac{m}{d}\rfloor }\sum_{x|gcd(i,j)} \mu(x)​</script><script type="math/tex; mode=display">=\sum_{x=1}^{n}\mu(x)\lfloor\frac{n}{dx}\rfloor\lfloor\frac{m}{dx}\rfloor​</script><p>于是原来的式子变成了：</p><script type="math/tex; mode=display">\prod_{d=1}^{n} f[d]^{\sum_{x=1}^{n}\mu(x)\lfloor\frac{n}{dx}\rfloor\lfloor\frac{m}{dx}\rfloor}​</script><p>设 $T=dx$ ，并将 $T$ 提出来枚举：</p><script type="math/tex; mode=display">\prod_{d=1}^{n} f[d]^{\sum_{x=1}^{n}\mu(x)\lfloor\frac{n}{dx}\rfloor\lfloor\frac{m}{dx}\rfloor}​</script><script type="math/tex; mode=display">=\prod_{T=1}^{n}\prod_{d|T} f[d]^{\mu( \lfloor\frac{T}{d}\rfloor )\lfloor\frac{n}{T}\rfloor\lfloor\frac{m}{T}\rfloor}</script><script type="math/tex; mode=display">=\prod_{T=1}^{n}(\prod_{d|T} f[d]^{\mu( \lfloor\frac{T}{d}\rfloor )})^{\lfloor\frac{n}{T}{\rfloor\lfloor\frac{m}{T}\rfloor}}</script><p>这个样子多好啊，我们可以将可爱的 $(\prod_{d|T} f[d]^{\mu( \lfloor\frac{T}{d}\rfloor )})$ 预处理，也就是枚举每一个 $d$ ，然后将可以整除 $d$ 的每一个 $T$ 都算上 $d$ 带来的贡献即可。最后的时候可以整除分块。最终的时间复杂度为 $O(\sqrt{n})$ ，当然不算上预处理时候的复杂度，如果加上预处理的复杂度，最终的复杂度应该为 $O(N(log\ N+log\ mod)+T(\sqrt{n} \  log\ mod))$ ，$log\ mod$ 就是算逆元的复杂度。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N+<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> mui[N+<span class="number">15</span>],inv[N+<span class="number">15</span>],fib[N+<span class="number">15</span>],sum[N+<span class="number">15</span>],prime[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=<span class="number">1l</span>l*x*x%MOD) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*x%MOD;</span><br><span class="line">    <span class="keyword">return</span> res%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fib[<span class="number">1</span>]=inv[<span class="number">1</span>]=sum[<span class="number">0</span>]=sum[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="literal">true</span>,mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i) &#123;</span><br><span class="line">        fib[i]=(fib[i<span class="number">-1</span>]+fib[i<span class="number">-2</span>])%MOD;</span><br><span class="line">        inv[i]=<span class="built_in">pow</span>(fib[i],MOD<span class="number">-2</span>),sum[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=N;++j) &#123;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j])) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=N;++d) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!mui[d]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> T=d;T&lt;=N;T+=d) </span><br><span class="line">            sum[T]=<span class="number">1l</span>l*sum[T]*(mui[d]==<span class="number">1</span>?fib[T/d]:inv[T/d])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i) sum[i]=<span class="number">1l</span>l*sum[i]*sum[i<span class="number">-1</span>]%MOD;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pre(),IN(T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        IN(n),IN(m);</span><br><span class="line">        <span class="keyword">if</span>(n&gt;m) swap(n,m);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>,res,num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>) &#123;</span><br><span class="line">            r=min(n/(n/l),m/(m/l));</span><br><span class="line">            num=<span class="number">1l</span>l*(n/l)*(m/l)%(MOD<span class="number">-1</span>);</span><br><span class="line">            res=<span class="number">1l</span>l*sum[r]*<span class="built_in">pow</span>(sum[l<span class="number">-1</span>],MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">            ans=<span class="number">1l</span>l*ans*<span class="built_in">pow</span>(res,num)%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(ans+MOD)%MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 不同子串个数  后缀数组.SA  luoguP2408</title>
      <link href="/2019/04/10/%5B%E9%A2%98%E8%A7%A3%5DluoguP2408/"/>
      <url>/2019/04/10/%5B%E9%A2%98%E8%A7%A3%5DluoguP2408/</url>
      
        <content type="html"><![CDATA[<p>后缀数组。</p><p>假设我们现在已经求出了 $height$ 数组，我们发现，对两个后缀，其重复了的字串的个数就是 $height$ 数组所记录的数。我们举个例子：</p><blockquote><p>后缀$sa[i-1]$: $aaabbdbs$<br>后缀$sa[i]$ : $aabbdbs$</p></blockquote><a id="more"></a><p>会发现，最前面的”$aa$”是两个串都有的，”$aa$”中包含的”$a$”也是两个串都有的，这样子就有两个重复的了，可以发现这个重复个数正好是 $height[i]$ 的值。</p><p>但是后面还是有重复的啊？没关系，因为我们有所有的后缀，所以整个串中所有的重复的串都会被统计进来。所以这下子我们可以很容易的求出整个串中重复的串的个数了，就是 $\sum_{i=1}^{n}height[i]$ 。</p><p>子串的个数显然是 $\frac{n(n+1)}{2}$ ，这两项相减就是我们需要的答案了，记得开 $longlong$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Suffix_array &#123;</span><br><span class="line">    <span class="keyword">char</span> s[N];</span><br><span class="line">    <span class="keyword">int</span> sa[N],x[N],y[N],hep[N],height[N],n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i) hep[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ++hep[x[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) hep[i]+=hep[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) sa[hep[x[y[i]]]--]=y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pre_sa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) x[i]=s[i],y[i]=i;</span><br><span class="line">        m=<span class="number">129</span>;Sort();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;m=p,p&lt;n;w&lt;&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">            p=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;++i) y[++p]=n-w+i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(sa[i]&gt;w) y[++p]=sa[i]-w;</span><br><span class="line">            Sort(),swap(x,y),x[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">                x[sa[i]]=(y[sa[i]]==y[sa[i<span class="number">-1</span>]]&amp;&amp;y[sa[i]+w]==y[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">Pre_height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) x[sa[i]]=i;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            k-=k&gt;<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> j=sa[x[i]<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">while</span>(i+k&lt;=n&amp;&amp;j+k&lt;=n&amp;&amp;s[i+k]==s[j+k]) ++k;</span><br><span class="line">            height[x[i]]=k,res+=k;</span><br><span class="line">        &#125;<span class="keyword">return</span> res;<span class="comment">//直接返回height数组的和</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Suffix_array;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d\n"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    Pre_sa();</span><br><span class="line">    ll ans=<span class="number">1l</span>l*n*(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    ans-=Pre_height();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后缀数组.SA </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【游记】  HNOI2019酱油记</title>
      <link href="/2019/04/08/%5B%E6%B8%B8%E8%AE%B0%5DHNOI2019/"/>
      <url>/2019/04/08/%5B%E6%B8%B8%E8%AE%B0%5DHNOI2019/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="在此输入你的密码以便阅读全文" />    <label for="pass">在此输入你的密码以便阅读全文</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  [HNOI2012]永无乡  线段树+启发式合并  luoguP3224</title>
      <link href="/2019/04/04/%5B%E9%A2%98%E8%A7%A3%5DluoguP3224/"/>
      <url>/2019/04/04/%5B%E9%A2%98%E8%A7%A3%5DluoguP3224/</url>
      
        <content type="html"><![CDATA[<p>实际上可以用平衡树做的但是不喜欢平衡树。</p><p>还是喜欢可爱的线段树，于是打了一发线段树合并。很久没有这样子的做题感觉了，真是美妙，思路清晰，交上去一遍过(窝不会告诉泥萌窝第一次交的时候忘关文件=。=)。</p><a id="more"></a><p>我们对于每一个点维护一个权值线段树，然后用并查集维护点与点之间的联通关系。对于一个连通块，该连通块的所有结点信息都保留在该连通块的 $root$ 上。</p><p>这样子我们合并两个岛的时候 $x,y$ ，可以直接将 $x$ 所在连通块的 $root$ (简称 $fx$ ) 和  $y$ 所在连通块的 $root$ (简称 $fy$ ) 合并起来，也就是将 $fy$ 的线段树并到 $fx$ 上去。这样子 $fx$ 就维护了这两个连通块的信息了，最后我们按照并查集的套路将 $fy$ 的父亲设为 $fx$ 即可。</p><p>询问就是基础操作，权值线段树就像主席树那样询问即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=N*<span class="number">650</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg_Tree</span> &#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> cnt,rt[N],val[Max],lc[Max],rc[Max];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        val[x]=val[lc[x]]+val[rc[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) x=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;++val[x];<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid) update(lc[x],l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> update(rc[x],mid+<span class="number">1</span>,r,pos);</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> th=val[lc[x]];</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=th) query(lc[x],l,mid,k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(rc[x],mid+<span class="number">1</span>,r,k-th);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;val[x]+=val[y];<span class="keyword">return</span> x;&#125;</span><br><span class="line">        lc[x]=merge(lc[x],lc[y],l,mid),</span><br><span class="line">        rc[x]=merge(rc[x],rc[y],mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(x);<span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[N],pos[N],n,m,q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i)</span><br><span class="line">        fa[i]=i,IN(x),pos[x]=i,T.update(T.rt[i],<span class="number">1</span>,n,x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;IN(u),IN(v);</span><br><span class="line">        <span class="keyword">int</span> fu=find(u),fv=find(v);</span><br><span class="line">        <span class="keyword">if</span>(fu!=fv) T.merge(T.rt[fu],T.rt[fv],<span class="number">1</span>,n),fa[fv]=fu;</span><br><span class="line">    &#125;</span><br><span class="line">    IN(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">2</span>];<span class="keyword">int</span> x,y,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'B'</span>) &#123;</span><br><span class="line">            IN(x),IN(y);</span><br><span class="line">            <span class="keyword">int</span> fx=find(x),fy=find(y);</span><br><span class="line">            <span class="keyword">if</span>(fx!=fy) T.merge(T.rt[fx],T.rt[fy],<span class="number">1</span>,n),fa[fy]=fx;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'Q'</span>) &#123;</span><br><span class="line">            IN(x),IN(k);</span><br><span class="line">            <span class="keyword">int</span> fx=find(x);</span><br><span class="line">            <span class="keyword">if</span>(T.val[T.rt[fx]]&lt;k) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pos[T.query(T.rt[fx],<span class="number">1</span>,n,k)]);</span><br><span class="line">            <span class="comment">/*我们query到的是第K大的权值而非岛屿的编号*/</span></span><br><span class="line">            <span class="comment">/*于是加个pos数组就好了*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【考试总结】  Test-2019.4.3  HNOI2019模拟</title>
      <link href="/2019/04/03/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190403/"/>
      <url>/2019/04/03/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190403/</url>
      
        <content type="html"><![CDATA[<p>三道题目，一眼出算法。</p><blockquote><p>第一道题目显然是后缀自动机，<br>第二道题目显然是莫比乌斯反演加上杜教筛。<br>第三道题目显然是网络流。</p></blockquote><p>然而考场上都没做出来……自闭了。</p><blockquote><p>真的，现在已经是傍晚了，大后天就是毒瘤的省选了……小学中现在正在举办运动会，班级群中一群人在那里一个劲的喊加油，但是，班上有人给我加油吗？除了几个好朋友之外……</p></blockquote><a id="more"></a><p><a href="https://github.com/monlights/image/blob/master/problem20190403.zip?raw=true" target="_blank" rel="noopener">题目压缩包戳我!!!<code>~\(≧▽≦)/~</code>(有时链接可能会崩，如果崩了的话请稍后尝试QwQ)</a></p><hr><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><blockquote><p>期望得分：40分<br>实际得分：40分<br>正解：后缀自动机(SAM)+FFT<br>窝的解法：哈希</p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>嗯后缀自动机是会的但是感觉不好做。</p><p>于是弄了个哈希上去骗分，暴力枚举字串然后玄学哈希即可。</p><p>不会正解。。。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">666</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">100000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k,m,cnt,res[N*N],ans;</span><br><span class="line"><span class="keyword">char</span> s[N],c[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step,<span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(step==k+<span class="number">1</span>&amp;&amp;sum==m) &#123;++ans;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(step==k+<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum&gt;m) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">        dfs(step+<span class="number">1</span>,sum+res[i]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"tele.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"tele.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    IN(k),IN(m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j;++k) tot=(<span class="number">1l</span>l*tot*<span class="number">27</span>%MOD+s[k]-<span class="string">'a'</span>+<span class="number">1</span>)%MOD;</span><br><span class="line">            <span class="comment">/*大力玄学哈希+map判重*/</span></span><br><span class="line">            hash[tot]++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j;++k) tot=(<span class="number">1l</span>l*tot*<span class="number">27</span>%MOD+s[k]-<span class="string">'a'</span>+<span class="number">1</span>)%MOD;</span><br><span class="line">            res[++cnt]=hash[tot];</span><br><span class="line">        &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*灵机一动这样写，那么k打于2的时候如果数据小可以多拿一些分*/</span></span><br><span class="line">    <span class="comment">/*实验证明这样布星*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><blockquote><p>期望得分：60分<br>实际得分：40分<br>正解：莫比乌斯反演+杜教筛<br>窝的解法：莫比乌斯反演</p></blockquote><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>考场上忘记了杜教筛，于是GG。</p><p>本来有六十分的……脑抽的窝，预处理 $\sum_{i=1}^{T}\lfloor\frac{T}{i}\rfloor$ 居然用 $O(n\sqrt{n})$ 来解决……实际上改两个字符就变成 $O(n)$ 的复杂度了，就有 $60$ 分了……</p><p>嗯然后筛 $\mu$ 的时候可以搞个杜教筛加速，这样子的话 $\mu$ 函数的前缀和就可以 $O(n^{\frac{2}{3}})$ 筛出。不过估计是标程质量不行，题目范围只有 $10^9$ ……杜教筛可以解决 $O(10^{11})$ 左右的问题……吧?</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt;N+7&gt; vis;</span><br><span class="line"><span class="keyword">int</span> n,mui[N+<span class="number">7</span>],prime[N],cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;N;++j) &#123;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j])) &#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i) mui[i]+=mui[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(<span class="keyword">int</span> MX)</span> </span>&#123;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=MX;l=r+<span class="number">1</span>) &#123;</span><br><span class="line">        r=MX/(MX/l);</span><br><span class="line">        sum=(sum+<span class="number">1l</span>l*(r-l+<span class="number">1</span>)*(MX/l)%MOD)%MOD;</span><br><span class="line">    &#125;<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; MU;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/*杜教筛*/</span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;N) <span class="keyword">return</span> mui[x];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(MU.count(x)) <span class="keyword">return</span> MU[x];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">2</span>,r;l&lt;=x;l=r+<span class="number">1</span>) &#123;</span><br><span class="line">            r=x/(x/l);</span><br><span class="line">            s-=(r-l+<span class="number">1</span>)*Sum(x/l);</span><br><span class="line">        &#125;<span class="keyword">return</span> MU[x]=s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"math.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"math.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    pre();</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>) &#123;</span><br><span class="line">        r=n/(n/l);</span><br><span class="line">        ll num=S(n/l);</span><br><span class="line">        res=(res+<span class="number">1l</span>l*(Sum(r)-Sum(l<span class="number">-1</span>))*num*num%MOD+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(res+MOD)%MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯实际这题窝觉得是一道莫反板子题，但是没做出来，看来杜教筛还是不会……</p><hr><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><blockquote><p>期望得分：50分<br>实际得分：0分<br>正解：最小割<br>窝的解法：最小割+爆搜</p></blockquote><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>看完题目后，窝决定第一个看这道题。</p><p>哇，一眼网络流题目欸！</p><p>咦这题好像小$M$的作物欸，但是第二个操作又不对劲了……(实际上第二个操作就是文理分科那题，但是窝没做那题)。</p><p>嗯，需要花费的什么费用……费用流？！然后手画了一下图……自己模拟一下发现根本不好模拟，想着费用流板子也就 $10$ 分钟的事，于是打了个费用流照着窝之前的想法建一下边，跑一下后发现错了……</p><p>然后苦苦思索……转眼间 $30$ 分钟过去了。<del>发现时间过得比较快</del>，于是决定先将暴力 $30$ 打好再想……嗯爆搜一下救过了样例(不过窝的爆搜又打错了以至于窝没拿到分？！)</p><p>嗯这个时候感觉前 $30$ 分稳了，于是观察部分分，发现有 $\%20$ 的数据不包含第二个操作，直接上小$M$的作物发现自己忘了，没办法只好自己瞎 $YY$ 一通。最后的结果发现是最小割，然后拆点，拆成牛羊两个点，源点连牛点，边权自然是其收益，羊点同理。然后中间连一条边权为 $inf$ 的边，表示这个要不圈牛要不圈羊只能圈一个。</p><p>嗯，发现还挺有道理的。对于，对于限制的话我们只需要再限制的两个牛羊点之间连上一条边权为 $inf$ 的边即可。</p><p>一遍过样例，美滋滋地开始造数据拍，嗯第一次和爆搜拍得挺顺利 $500$ 组数据全过了。</p><p>没过瘾，再来一组，结果第二组 $500$ 数据，拍到三百多个就 $WA$ 了……</p><p>后面没有想出来，于是弃疗了。</p><p><strong>接下来讲一讲正解怎么做</strong></p><p>小$M$的作物自然不用讲，我们来讲讲文理分科怎么做。</p><p>对于本题的第二个操作，我们需要新建一个结点 $p​$ ，然后如果这个操作的 $a​$ 是 $0​$ 我们就从源点向其连一条边权为 $b​$ 的边，$a​$ 是 $1​$ 的情况同理。</p><p>然后呢，对于 $S$ 中的每个点，如果 $a$ 为 $0$ 则从 $p$ 向该点连边，$a$ 是 $1$ 的情况同理。</p><p>嗯，然后就是不需要拆点。然后就差不多了。</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],b[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">int</span> s,t,head[N],dep[N],cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[v],u,<span class="number">0</span>&#125;,head[v]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s]=<span class="number">1</span>,q.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">                <span class="keyword">if</span>(!dep[v]&amp;&amp;G[i].val&gt;<span class="number">0</span>) </span><br><span class="line">                    dep[v]=dep[u]+<span class="number">1</span>,q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u==t||!flow) <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                used+=(rlow=dfs(v,min(flow-used,G[i].val)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used) dep[u]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"work.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"work.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    IN(n),IN(m),IN(k);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,nodetot=n+<span class="number">1</span>;s=<span class="number">0</span>,t=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(a[i]),sum+=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(b[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;IN(x),IN(y),IN(z);</span><br><span class="line">        add(x,y,z),add(y,x,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> size,x,y;</span><br><span class="line">        IN(size),IN(x),IN(y);</span><br><span class="line">        sum+=y,++nodetot;</span><br><span class="line">        x?add(nodetot,t,y):add(s,nodetot,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=size;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> c;IN(c);</span><br><span class="line">            x?add(c,nodetot,inf):add(nodetot,c,inf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=b[i]) add(s,i,a[i]-b[i]);</span><br><span class="line">        <span class="keyword">else</span> add(i,t,b[i]-a[i]),sum+=b[i]-a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs()) maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum-maxflow);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2005]维护数列  Splay  luoguP2042</title>
      <link href="/2019/04/02/%5B%E9%A2%98%E8%A7%A3%5DluoguP2042/"/>
      <url>/2019/04/02/%5B%E9%A2%98%E8%A7%A3%5DluoguP2042/</url>
      
        <content type="html"><![CDATA[<p>神奇的题目。</p><p>网上说什么做了这道题 $Splay$ 就差不多了，嗯对窝也这么觉得。于是终于码掉了。</p><p>主要涉及的操作还是提取区间，我们组需要将 $l-1$ 提取至 $root$ ， 然后将 $r+1$ 提取至 $l-1$ 的下方，最终询问的 $l,r$ 区间的 $Splay$ 就是 $r+1$ 的左孩子。</p><a id="more"></a><p>这个时候该输出的就输出，该打标记的就打标记就好了。</p><p>至于插入的话我们可以先将所有需要插入的结点 $build$ 成一棵树，然后直接挂到 $r+1$ 的左孩子即可。</p><p>但是毒瘤出题人卡空间，于是我们需要将删除的结点全部重新应用，就像垃圾回收那样，搞个栈就行了。</p><p>最后因为怕 $l-1$ 和 $r+1$ 出界我们还需要新增两个”哨兵结点”，这样子的话需要提取的结点都加上了 $1$ ，提取区间变动的两个节点就变成 $l$ 和 $r+2$ 了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5.5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Splay</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> root,cnt;</span><br><span class="line">    <span class="keyword">int</span> ch[N][<span class="number">2</span>],sz[N],fa[N],val[N],tag[N],rev[N];</span><br><span class="line">    <span class="keyword">int</span> sum[N],lmax[N],rmax[N],smax[N];</span><br><span class="line">    <span class="keyword">int</span> date[N],trash[N],top;</span><br><span class="line"></span><br><span class="line">    Splay()&#123;root=cnt=top=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> ch[fa[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        ch[node][<span class="number">0</span>]=ch[node][<span class="number">0</span>]=sz[node]=fa[node]=val[node]=<span class="number">0</span>,</span><br><span class="line">        rev[node]=sum[node]=lmax[node]=rmax[node]=smax[node]=<span class="number">0</span>;</span><br><span class="line">        tag[node]=inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MKN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> node;</span><br><span class="line">        node=top?trash[top--]:++cnt;</span><br><span class="line">        clear(node);<span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=ch[x][<span class="number">0</span>],r=ch[x][<span class="number">1</span>];</span><br><span class="line">        sz[x]=sz[l]+sz[r]+<span class="number">1</span>;</span><br><span class="line">        sum[x]=sum[l]+sum[r]+val[x];</span><br><span class="line">        lmax[x]=max(lmax[l],sum[l]+val[x]+lmax[r]);</span><br><span class="line">        rmax[x]=max(rmax[r],sum[r]+val[x]+rmax[l]);</span><br><span class="line">        smax[x]=max(rmax[l]+lmax[r]+val[x],max(smax[l],smax[r]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=ch[x][<span class="number">0</span>],r=ch[x][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(tag[x]!=inf) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l) val[l]=tag[l]=tag[x],sum[l]=tag[x]*sz[l];</span><br><span class="line">            <span class="keyword">if</span>(r) val[r]=tag[r]=tag[x],sum[r]=tag[x]*sz[r];</span><br><span class="line">            <span class="keyword">if</span>(tag[x]&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(l) lmax[l]=rmax[l]=smax[l]=sum[l];</span><br><span class="line">                <span class="keyword">if</span>(r) lmax[r]=rmax[r]=smax[r]=sum[r];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(tag[x]&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(l) lmax[l]=rmax[l]=<span class="number">0</span>,smax[l]=tag[x];</span><br><span class="line">                <span class="keyword">if</span>(r) lmax[r]=rmax[r]=<span class="number">0</span>,smax[r]=tag[x];</span><br><span class="line">            &#125;</span><br><span class="line">            tag[x]=inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rev[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l) swap(ch[l][<span class="number">0</span>],ch[l][<span class="number">1</span>]),swap(lmax[l],rmax[l]),rev[l]^=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(r) swap(ch[r][<span class="number">0</span>],ch[r][<span class="number">1</span>]),swap(lmax[r],rmax[r]),rev[r]^=<span class="number">1</span>;</span><br><span class="line">            rev[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">        pushdown(y),pushdown(x);</span><br><span class="line">        <span class="keyword">int</span> k=chk(x),v=ch[x][k^<span class="number">1</span>];</span><br><span class="line">        ch[z][chk(y)]=x,fa[x]=z,ch[y][k]=v,fa[v]=y,</span><br><span class="line">        ch[x][k^<span class="number">1</span>]=y,fa[y]=x;pushup(y),pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> gola=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(fa[x]!=gola) &#123;</span><br><span class="line">            <span class="keyword">if</span>(fa[fa[x]]!=gola)</span><br><span class="line">                rotate(chk(x)^chk(fa[x])?x:fa[x]);</span><br><span class="line">            rotate(x);</span><br><span class="line">        &#125;<span class="keyword">if</span>(!gola) root=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos=root;</span><br><span class="line">        <span class="keyword">while</span>(pos) &#123;</span><br><span class="line">            pushdown(pos);</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=sz[ch[pos][<span class="number">0</span>]]) pos=ch[pos][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                x-=sz[ch[pos][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!x) <span class="keyword">return</span> pos;</span><br><span class="line">                pos=ch[pos][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x=MKN(),mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ch[x][<span class="number">0</span>]=build(l,mid<span class="number">-1</span>,x),ch[x][<span class="number">1</span>]=build(mid+<span class="number">1</span>,r,x);</span><br><span class="line">        val[x]=date[mid],fa[x]=f,pushup(x);</span><br><span class="line">        <span class="keyword">return</span> x;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">trashcan_node</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">        trash[++top]=x,trashcan_node(ch[x][<span class="number">0</span>]),trashcan_node(ch[x][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span>&amp;l,<span class="keyword">int</span>&amp;r,<span class="keyword">int</span> pos,<span class="keyword">int</span> tot)</span> </span>&#123;</span><br><span class="line">        l=kth(pos),r=kth(pos+tot+<span class="number">1</span>);splay(l),splay(r,l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,l,r;</span><br><span class="line">        IN(pos),IN(tot);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) IN(date[i]);</span><br><span class="line">        split(l,r,pos+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        ch[r][<span class="number">0</span>]=build(<span class="number">1</span>,tot,r),pushup(r),pushup(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,l,r;</span><br><span class="line">        IN(pos),IN(tot),split(l,r,pos,tot);</span><br><span class="line">        trashcan_node(ch[r][<span class="number">0</span>]),ch[r][<span class="number">0</span>]=<span class="number">0</span>,pushup(r),pushup(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_same</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,c,l,r;</span><br><span class="line">        IN(pos),IN(tot),IN(c),split(l,r,pos,tot);</span><br><span class="line">        <span class="keyword">int</span> p=ch[r][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(p) &#123;</span><br><span class="line">            val[p]=tag[p]=c,sum[p]=c*sz[p];</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="number">0</span>) lmax[p]=rmax[p]=smax[p]=sum[p];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c&lt;<span class="number">0</span>) lmax[p]=rmax[p]=<span class="number">0</span>,smax[p]=c;</span><br><span class="line">        &#125;pushup(r),pushup(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_rev</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,l,r;</span><br><span class="line">        IN(pos),IN(tot),split(l,r,pos,tot);</span><br><span class="line">        <span class="keyword">if</span>(ch[r][<span class="number">0</span>]) &#123;</span><br><span class="line">            swap(ch[ch[r][<span class="number">0</span>]][<span class="number">0</span>],ch[ch[r][<span class="number">0</span>]][<span class="number">1</span>]);</span><br><span class="line">            swap(lmax[ch[r][<span class="number">0</span>]],rmax[ch[r][<span class="number">0</span>]]);</span><br><span class="line">            rev[ch[r][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line">        &#125;pushup(r),pushup(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos,tot,l,r;</span><br><span class="line">        IN(pos),IN(tot),split(l,r,pos,tot);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum[ch[r][<span class="number">0</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work_max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=kth(<span class="number">1</span>),r=kth(sz[root]);splay(l),splay(r,l);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,smax[ch[r][<span class="number">0</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("testdata.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("myout.out","w",stdout);</span></span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) IN(T.date[i+<span class="number">1</span>]);</span><br><span class="line">    T.smax[<span class="number">0</span>]=T.date[<span class="number">1</span>]=-inf,T.date[n+<span class="number">2</span>]=inf;</span><br><span class="line">    T.root=T.build(<span class="number">1</span>,n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'M'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(op[<span class="number">3</span>]==<span class="string">'E'</span>) T.work_same();</span><br><span class="line">            <span class="keyword">else</span> T.work_max();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'I'</span>) T.work_insert();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'D'</span>) T.work_delete();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'R'</span>) T.work_rev();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'G'</span>) T.work_sum();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哎离 $HNOI2019$ 不远了，感觉多多更博增加 $RP$ …… $QwQ$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [Vani有约会]雨天的尾巴  线段树+启发式合并  luoguP4556</title>
      <link href="/2019/04/02/%5B%E9%A2%98%E8%A7%A3%5DluoguP4556/"/>
      <url>/2019/04/02/%5B%E9%A2%98%E8%A7%A3%5DluoguP4556/</url>
      
        <content type="html"><![CDATA[<p>毒瘤出题人，卡时间卡空间！</p><p>嗯，如果这一题不是在树上的话貌似可以直接权值线段树维护？不过到了树上的话难道可以权值线段树+树链剖分，表示不明白。于是尝试了一发线段树合并，但是我们的线段树是权值线段树。</p><a id="more"></a><p>我们的权值线段树是用来存原树中 $x$ 结点以及其子树中的每种救济粮的个数。</p><p>怎么个合并法呢，其实特别简单，两个线段树同时进行，发现到了一个节点的时候一个线段树有这个结点另一个没有这个节点，那么这个节点以及其下面的结点的信息都可以直接作为新线段树的这个节点的信息。</p><p>当然如果到了一个叶子节点，直接将两个线段树的这个位置的救济粮的个数加起来即可。</p><p>嗯，每个线段树再维护一个值存出现最多次数的救济粮是什么，这样就可以得到答案了。但是为了避免一些结点与其子树压根就没有救济粮的情况，我们需要判断一下这个节点与其子树是否有救济粮即可。</p><p>然后直接一遍 $dfs$ ，遍历 $u$ 的所有孩子然后拿 $u$ 的线段树依次去和 $u$ 的儿子的线段树合并。最终合并完的线段树存储的就是 $u$ 以及其子树的信息了。然后就可以获得答案了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">6e6</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,X[N],Y[N],Z[N],Ans[N],head[N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nxt,to;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[u],v&#125;,head[u]=cnt;</span><br><span class="line">    G[++cnt]=(Edge)&#123;head[v],u&#125;,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=--x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Lca &#123;</span><br><span class="line">    <span class="keyword">int</span> dep[N],fa[N][LogN+<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(G[i].to!=f) dfs(G[i].to,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(dep[x]&lt;dep[y]) swap(x,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            <span class="keyword">if</span>(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i];</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            <span class="keyword">if</span>(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];</span><br><span class="line">        <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Lca;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> &#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> rt[N],lc[M],rc[M],d[M],t[M],tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[lc[x]]&gt;=d[rc[x]]) d[x]=d[lc[x]],t[x]=t[lc[x]];</span><br><span class="line">        <span class="keyword">else</span> d[x]=d[rc[x]],t[x]=t[rc[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) x=++tot;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;d[x]+=val;t[x]=l;<span class="keyword">return</span> x;&#125;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid) lc[x]=update(lc[x],l,mid,pos,val);</span><br><span class="line">        <span class="keyword">else</span> rc[x]=update(rc[x],mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">        pushup(x);<span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span> y;</span><br><span class="line">        <span class="keyword">if</span>(!y) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;d[x]+=d[y];t[x]=l;<span class="keyword">return</span> x;&#125;</span><br><span class="line">        lc[x]=merge(lc[x],lc[y],l,mid);</span><br><span class="line">        rc[x]=merge(rc[x],rc[y],mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(x);<span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=f) </span><br><span class="line">            calc(G[i].to,u),</span><br><span class="line">            T.rt[u]=T.merge(T.rt[u],T.rt[G[i].to],<span class="number">1</span>,m);</span><br><span class="line">    <span class="keyword">if</span>(T.d[T.rt[u]]) Ans[u]=T.t[T.rt[u]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;++i)</span><br><span class="line">        IN(x),IN(y),add(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)</span><br><span class="line">        IN(X[i]),IN(Y[i]),IN(Z[i]),m=max(m,Z[i]);</span><br><span class="line">   <span class="comment">//权值线段树离线处理</span></span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> lca_xy=lca(X[i],Y[i]);</span><br><span class="line">        T.rt[X[i]]=T.update(T.rt[X[i]],<span class="number">1</span>,m,Z[i],<span class="number">1</span>);</span><br><span class="line">        T.rt[Y[i]]=T.update(T.rt[Y[i]],<span class="number">1</span>,m,Z[i],<span class="number">1</span>);</span><br><span class="line">        T.rt[lca_xy]=T.update(T.rt[lca_xy],<span class="number">1</span>,m,Z[i],<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(fa[lca_xy][<span class="number">0</span>]) T.rt[fa[lca_xy][<span class="number">0</span>]]=T.update(T.rt[fa[lca_xy][<span class="number">0</span>]],<span class="number">1</span>,m,Z[i],<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    calc(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 虚树入门</title>
      <link href="/2019/04/01/%5B%E7%AE%97%E6%B3%95%5D%E8%99%9A%E6%A0%91/"/>
      <url>/2019/04/01/%5B%E7%AE%97%E6%B3%95%5D%E8%99%9A%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="在此输入你的密码以便阅读全文" />    <label for="pass">在此输入你的密码以便阅读全文</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 虚树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HAOI2012]高速公路  线段树  luoguP2221</title>
      <link href="/2019/03/31/%5B%E9%A2%98%E8%A7%A3%5DluoguP2221/"/>
      <url>/2019/03/31/%5B%E9%A2%98%E8%A7%A3%5DluoguP2221/</url>
      
        <content type="html"><![CDATA[<p>$3$ 月份的最后一篇题解了呢……明天就属于 $4$ 月了，离省选不远了…$QwQ$…</p><p>发现窝真的很制杖，我们先来聊聊刚开始窝的想法。</p><p>我画了画图，然后发现，对于最后答案的分母(不是最简)，是这个序列中这些数的值(废话)，然后发现了每个点的出现次数，然后线段树维护求和。发现效率很低于是试图将出现次数般到二维平面上，然后曼哈顿距离转切比雪夫距离然后二维树状数组维护然后 $WA$ 了然后弃疗。</p><a id="more"></a><p><del>你可能认为窝很傻对吧？</del></p><p>嗯对窝是挺傻的。</p><p>正解是线段树，没猜错，<del>但是和什么二维树状数组有什么关系</del></p><p>我们考虑区间中的一个点 $i$ ，权值为 $v_i$ 。然后我们观察当前询问区间中有多少子区间包含了 $v_i$ ，这个个数就是点 $i$ 做出的贡献。现在我们来考虑怎么计算这个包含了 $i$ 的子区间个数。</p><p>可以发现，我们从 $i$ 向左扩展若干个点，然后又向右扩展若干个点，这样子一来就成了一个包含了 $i$ 子区间。这个就很好计算了，答案显然为 $(i-l)\times(r-i)$ 。然后还要算进没有向左/右扩展的情况，并且算上权值，最终 $i$ 造成的贡献显然为：</p><script type="math/tex; mode=display">v_i\times(i-l+1)\times (r-i+1)</script><p>那么我们将式子拆开可以得到：</p><script type="math/tex; mode=display">v_i\times [i\times (r-i+1)-l\times(r-i+1)+(r-i+1)]</script><script type="math/tex; mode=display">v_i\times [i\times r-i\times i+i-l\times r+l\times i-l+r-i+1]</script><script type="math/tex; mode=display">v_i\times [i(r+l)-i^2-lr-l+r+1]</script><script type="math/tex; mode=display">v_i i(r+l)-v_ii^2-v_ilr+v_i(r-l)+v_i</script><p>其中 $l,r$ 为当前询问区间，这个是可以直接算出的。我们发现我们需要维护的就是 $v_i\ ,\ v_ii\ ,\ v_ii^2$  三个值，用线段树维护即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OI &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; _<span class="function">Tp <span class="title">gcd</span><span class="params">(_Tp x,_Tp y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y?gcd(y,x%y):x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> OI;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> &#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> LS(x) ((x)&lt;&lt;1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> RS(x) ((x)&lt;&lt;1|1)</span></span><br><span class="line"></span><br><span class="line">    ll ans1,ans2,ans3;</span><br><span class="line">    ll sum1[N&lt;&lt;<span class="number">2</span>],sum2[N&lt;&lt;<span class="number">2</span>],sum3[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    ll tag[N&lt;&lt;<span class="number">2</span>],suq[N&lt;&lt;<span class="number">2</span>],rle[N&lt;&lt;<span class="number">2</span>],len[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll x,ll l,ll r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">            len[x]=<span class="number">1</span>,suq[x]=l,rle[x]=l*l;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        build(LS(x),l,mid),build(RS(x),mid+<span class="number">1</span>,r);</span><br><span class="line">        len[x]=len[LS(x)]+len[RS(x)];</span><br><span class="line">        suq[x]=suq[LS(x)]+suq[RS(x)],</span><br><span class="line">        rle[x]=rle[LS(x)]+rle[RS(x)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(ll x,ll l,ll r)</span> </span>&#123;</span><br><span class="line">        ll k=tag[x];tag[x]=<span class="number">0</span>;</span><br><span class="line">        sum1[LS(x)]+=len[LS(x)]*k,sum1[RS(x)]+=len[RS(x)]*k;</span><br><span class="line">        sum2[LS(x)]+=suq[LS(x)]*k,sum2[RS(x)]+=suq[RS(x)]*k;</span><br><span class="line">        sum3[LS(x)]+=rle[LS(x)]*k,sum3[RS(x)]+=rle[RS(x)]*k;</span><br><span class="line">        tag[LS(x)]+=k,tag[RS(x)]+=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x,ll l,ll r,ll L,ll R,ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">            tag[x]+=v;</span><br><span class="line">            sum1[x]+=len[x]*v;</span><br><span class="line">            sum2[x]+=suq[x]*v;</span><br><span class="line">            sum3[x]+=rle[x]*v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tag[x])pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)update(LS(x),l,mid,L,R,v);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)update(RS(x),mid+<span class="number">1</span>,r,L,R,v);</span><br><span class="line">        sum1[x]=sum1[LS(x)]+sum1[RS(x)];</span><br><span class="line">        sum2[x]=sum2[LS(x)]+sum2[RS(x)];</span><br><span class="line">        sum3[x]=sum3[LS(x)]+sum3[RS(x)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(ll x,ll l,ll r,ll L,ll R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">            ans1+=sum1[x],ans2+=sum2[x],ans3+=sum3[x];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tag[x])pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)query(LS(x),l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)query(RS(x),mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    T.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">        ll l,r;IN(l),IN(r);--r;</span><br><span class="line">        ll v;</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'C'</span>) IN(v),T.update(<span class="number">1</span>,<span class="number">1</span>,n,l,r,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'Q'</span>) &#123;</span><br><span class="line">            T.ans1=T.ans2=T.ans3=<span class="number">0</span>;</span><br><span class="line">            T.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line">            ll res1=T.ans1,res2=T.ans2,res3=T.ans3;</span><br><span class="line">            ll ans=(r-l+<span class="number">1</span>-l*r)*res1+(r+l)*res2-res3;</span><br><span class="line">            ll len=(r-l+<span class="number">1</span>)*(r-l+<span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line">            ll esw=gcd(ans,len);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>,ans/esw,len/esw);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2011]消耗战  虚树+树形DP  luoguP2495</title>
      <link href="/2019/03/31/%5B%E9%A2%98%E8%A7%A3%5DluoguP2495/"/>
      <url>/2019/03/31/%5B%E9%A2%98%E8%A7%A3%5DluoguP2495/</url>
      
        <content type="html"><![CDATA[<p>去 $Mina!$ 上了解了一波虚树，$\%\%\% XZY$ 学长太强辣！</p><p>这次总算明白了些虚树，然后 $XZY$ 大佬的例题就是消耗战。</p><p>于是看了过来。</p><a id="more"></a><p>首先，考虑普通的树形 $DP$ ，设 $dp[u]$ 表示<strong>在 $u$ 为根的子树中满足目标所花费的最小代价</strong> ，那么转移方程也不是很难，我们枚举 $u$ 的孩子 $v$ 。如果 $v$ 本身就是”能源丰富的岛屿”那么 $dp[u]+=G[i].val$ ，其中 $G[i].val$ 表示 $u$ 到 $v$ 的边的边权。为什么这样转移呢？因为 $v$ 必须切断。</p><p>那么没有必要切断的岛屿呢？就分切/不切两种情况了：</p><script type="math/tex; mode=display">dp[u]+=min(G.val[i],dp[G.to[i]]);</script><p>这个也很好懂。</p><p>这个时候我们打完代码交一发发现只有 $40$ 分……往下看，可以看到 $n$ 到最后的顶尖数据有 $250000$ ……</p><p>但是我们可以观察到，$\sum k_i \leq 5*10^5$ ，发现总共的 $k$ 也不过这么大，这个时候我们可以用虚树来解决。</p><p>$Qiuly$ ：有关虚树的文章先咕一下蛤，最近有点忙。</p><p>建好虚树后直接用上面的转移方程做就得了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2.5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> head[N],nxt[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>],val[N&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));cnt=<span class="number">0</span>;&#125;</span><br><span class="line">    graph() &#123;init();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        nxt[cnt]=head[u],to[cnt]=v,val[cnt]=w,head[u]=cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,point[N],<span class="built_in">stack</span>[N],top;</span><br><span class="line">ll dp[N];<span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCA &#123;</span><br><span class="line">    <span class="keyword">int</span> dep[N],fa[N][LogN+<span class="number">3</span>],num[N][LogN+<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> id[N],dfn,Edge_Mx;</span><br><span class="line">    <span class="keyword">void</span> _Pre_Lca(<span class="keyword">int</span> u,<span class="keyword">int</span> f) &#123;</span><br><span class="line">        fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>,id[u]=++dfn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) &#123;</span><br><span class="line">            fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">            num[u][i]=min(num[u][i<span class="number">-1</span>],num[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=G.head[u];~i;i=G.nxt[i]) </span><br><span class="line">            <span class="keyword">if</span>(G.to[i]!=f)num[G.to[i]][<span class="number">0</span>]=G.val[i],_Pre_Lca(G.to[i],u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Edge_Mx=inf;</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            <span class="keyword">if</span>(dep[fa[x][i]]&gt;=dep[y])</span><br><span class="line">                Edge_Mx=min(Edge_Mx,num[x][i]),x=fa[x][i];</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            <span class="keyword">if</span>(fa[x][i]!=fa[y][i])</span><br><span class="line">                Edge_Mx=min(Edge_Mx,min(num[x][i],num[y][i])),</span><br><span class="line">                x=fa[x][i],y=fa[y][i];</span><br><span class="line">        <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> LCA;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> id[x]&lt;id[y];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="comment">//DP过程</span></span><br><span class="line">    dp[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=G.head[u];~i;i=G.nxt[i]) &#123;</span><br><span class="line">        solve(G.to[i]);</span><br><span class="line">        <span class="keyword">if</span>(vis[G.to[i]])dp[u]+=G.val[i];</span><br><span class="line">        <span class="keyword">else</span> dp[u]+=min((ll)G.val[i],dp[G.to[i]]);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;<span class="comment">//建立虚树</span></span><br><span class="line">    sort(point+<span class="number">1</span>,point+<span class="number">1</span>+k,cmp);</span><br><span class="line">    <span class="built_in">stack</span>[top=<span class="number">1</span>]=<span class="number">1</span>,G.cnt=<span class="number">0</span>,G.head[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i) <span class="keyword">if</span>(point[i]!=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> l=lca(<span class="built_in">stack</span>[top],point[i]);</span><br><span class="line">        <span class="keyword">if</span>(l!=<span class="built_in">stack</span>[top]) &#123;</span><br><span class="line">            <span class="keyword">while</span>(id[l]&lt;id[<span class="built_in">stack</span>[top<span class="number">-1</span>]]) &#123;</span><br><span class="line">                lca(<span class="built_in">stack</span>[top<span class="number">-1</span>],<span class="built_in">stack</span>[top]);</span><br><span class="line">                G.add(<span class="built_in">stack</span>[top<span class="number">-1</span>],<span class="built_in">stack</span>[top],Edge_Mx);</span><br><span class="line">                --top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(id[l]&gt;id[<span class="built_in">stack</span>[top<span class="number">-1</span>]]) &#123;</span><br><span class="line">                G.head[l]=<span class="number">-1</span>,lca(l,<span class="built_in">stack</span>[top]);</span><br><span class="line">                G.add(l,<span class="built_in">stack</span>[top],Edge_Mx),<span class="built_in">stack</span>[top]=l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> lca(l,<span class="built_in">stack</span>[top]),G.add(l,<span class="built_in">stack</span>[top],Edge_Mx),--top;</span><br><span class="line">        &#125;</span><br><span class="line">        G.head[point[i]]=<span class="number">-1</span>,<span class="built_in">stack</span>[++top]=point[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;top;++i)</span><br><span class="line">        lca(<span class="built_in">stack</span>[i],<span class="built_in">stack</span>[i+<span class="number">1</span>]),G.add(<span class="built_in">stack</span>[i],<span class="built_in">stack</span>[i+<span class="number">1</span>],Edge_Mx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;IN(u),IN(v),IN(w);</span><br><span class="line">        G.add(u,v,w),G.add(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    _Pre_Lca(<span class="number">1</span>,<span class="number">0</span>),IN(m);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k;IN(k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)IN(point[i]),vis[point[i]]=<span class="literal">true</span>;</span><br><span class="line">        build(k);</span><br><span class="line">        solve(<span class="number">1</span>),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)vis[point[i]]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 虚树 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  [CQOI2011]动态逆序对  CDQ分治  luoguP3157</title>
      <link href="/2019/03/30/%5B%E9%A2%98%E8%A7%A3%5DluoguP3157/"/>
      <url>/2019/03/30/%5B%E9%A2%98%E8%A7%A3%5DluoguP3157/</url>
      
        <content type="html"><![CDATA[<p>一个可爱的 $CDQ$ ，我们将原始序列看成一个一个加入，然后后面的操作就是一个一个删除，这么一个一个操作我们都记下来，然后每个操作记一个 $id$ 表示它将为第几个时间点做出贡献。</p><p>当然对于原始序列的一个一个插入的操作这里的贡献是 $1$ ，删除操作的贡献自然是 $-1$ 。</p><a id="more"></a><p>每个时间点统计答案，最后输出前做一个前缀和然后依次输出就好了。</p><p>这是具体的框架，但是统计 $ans$ 数组具体怎么做呢？</p><p>可以知道对于一个位置 $i$ ，位置上的元素是 $a_i$ 。对于一个 $j$ 满足 $j\leq i$ ，并且 $a_i\leq a_j$ ，而且还要保证 $id_j\leq id_i$ ，那么 $j$ 就可以对 $i$ 做出贡献。这个就是在 $i$ 前面的元素可以做出的贡献。$i$ 后面的元素做出的贡献同理。</p><p>这就是一个很普通的三位偏序了，注意要开 $long\ long$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">0</span>;<span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,cnt,pos[N],a[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span><span class="keyword">int</span> r,v,d,id;&#125;Q[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query a,Query b)</span> </span>&#123;<span class="keyword">return</span> a.d&lt;b.d;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> C[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>&#123;<span class="keyword">for</span>(;x&lt;=n;x+=lowbit(x))C[x]+=v;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">int</span> res=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=lowbit(x))res+=C[x];<span class="keyword">return</span> res;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    CDQ(l,mid),CDQ(mid+<span class="number">1</span>,r);</span><br><span class="line">    sort(Q+l,Q+mid+<span class="number">1</span>,cmp),sort(Q+mid+<span class="number">1</span>,Q+r+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> j=l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=mid&amp;&amp;Q[j].d&lt;=Q[i].d) add(Q[j].v,Q[j].r),++j;</span><br><span class="line">        ans[Q[i].id]+=Q[i].r*(sum(n)-sum(Q[i].v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;j;++i) add(Q[i].v,-Q[i].r);</span><br><span class="line">    j=mid;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&gt;mid;--i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=l&amp;&amp;Q[j].d&gt;=Q[i].d) add(Q[j].v,Q[j].r),--j;</span><br><span class="line">        ans[Q[i].id]+=Q[i].r*sum(Q[i].v<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid;i&gt;j;--i) add(Q[i].v,-Q[i].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(a[i]),pos[a[i]]=i,Q[++cnt]=(Query)&#123;<span class="number">1</span>,a[i],i,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;IN(x);</span><br><span class="line">        Q[++cnt]=(Query)&#123;<span class="number">-1</span>,x,pos[x],i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    CDQ(<span class="number">1</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) ans[i]+=ans[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  [AHOI2013]差异  后缀自动机.SAM  luoguP4248</title>
      <link href="/2019/03/30/%5B%E9%A2%98%E8%A7%A3%5DluoguP4248/"/>
      <url>/2019/03/30/%5B%E9%A2%98%E8%A7%A3%5DluoguP4248/</url>
      
        <content type="html"><![CDATA[<p>刚开始发现 $SA$ 很可做，不过当时没有看范围，心想美滋滋了这个就是 $SA$ 的板子，然后一看范围心就凉了。</p><p>不过可以用 $SAM$ ，我们知道，对于两个串，它们的最长公共子串就是它们在前缀树上的 $Lca$ 。这是显然的，不明白的同学可以康康 $Qiuly$ 酱之前写的 $SAM$ ，可以观察观察图片。</p><a id="more"></a><p>我们观察式子，发现  $\sum_{1\leq i&lt;j\leq n} len(T_i)+len(T_j)$ 是等于 $\frac{(n-1)\times n\times(n+1)}{2}$ 的，这个可以 $O(1)$ 算出。</p><p>那么 $2\times lcp(T_i,T_j)$ 怎么求呢？</p><p>那么对于一个结点 $x$ ，我们依次统计 $x$ 的儿子，并依次更新 $x$ 的 $size$ ，对于一个 $x$ 的儿子 $y$ ，枚举的时候它对答案的贡献显然是 $size[x]\times len[x]\times size[y]$ ，因为 $y$ 的子树中的任意一结点(包括 $y$ ) ，与 $x$ 之前枚举过的所有儿子的子树中的所有结点的 $Lca$ 都是 $x$ 。并且对于一个 $x$ ，它所造成的贡献就是 $Len[x]$ 。 </p><p>最后统计出来的答案再乘上 $2$ 就是后面那个式子啦<code>~\(≧▽≦)/~</code> 。</p><p>不过要注意一点，后缀自动机是会复制结点的，这些复制的结点不属于原串因此不能计算贡献。</p><p>然后就是代码的问题了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> last,cnt;</span><br><span class="line">    <span class="keyword">int</span> ch[N][<span class="number">26</span>],fa[N],len[N],sz[N],hep[N],tot[N];</span><br><span class="line">    SAM() &#123;last=cnt=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=last,np=++cnt;</span><br><span class="line">        last=np,len[np]=len[p]+<span class="number">1</span>,sz[np]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;!ch[p][c]) ch[p][c]=np,p=fa[p];</span><br><span class="line">        <span class="keyword">if</span>(!p)fa[np]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> q=ch[p][c];</span><br><span class="line">            <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>)fa[np]=q;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> nq=++cnt;len[nq]=len[p]+<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(ch[nq],ch[q],<span class="keyword">sizeof</span>(ch[q]));</span><br><span class="line">                fa[nq]=fa[q],fa[q]=fa[np]=nq;</span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;ch[p][c]==q) ch[p][c]=nq,p=fa[p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) hep[len[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) hep[i]+=hep[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) tot[hep[len[i]]--]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;--i) &#123;</span><br><span class="line">            <span class="keyword">int</span> node=tot[i];</span><br><span class="line">            res+=(ll)sz[fa[node]]*sz[node]*len[fa[node]];</span><br><span class="line">            sz[fa[node]]+=sz[node];</span><br><span class="line">        &#125;<span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)T.ins(s[i]-<span class="string">'a'</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ll)(n<span class="number">-1</span>)*n*(n+<span class="number">1</span>)/<span class="number">2</span><span class="number">-2</span>*T.calc());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 后缀自动机.SAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2013]森林  主席树+启发式合并  luoguP3302</title>
      <link href="/2019/03/29/%5B%E9%A2%98%E8%A7%A3%5DluoguP3302/"/>
      <url>/2019/03/29/%5B%E9%A2%98%E8%A7%A3%5DluoguP3302/</url>
      
        <content type="html"><![CDATA[<p>初看题面，看到 $K$ 大我们可以想到主席树，但是连边却又符合 $LCT$ ，但是毕竟 $LCT$ 是不能支持 $K$ 大的，因为 $Splay$ 辅助树不是二叉查找树。</p><p>不过主席树我们可以大力启发式合并，合并的时候重建节点的倍增数组并且重新建立节点的权值线段树。这样子每个节点要被修改的期望次数为 $logn​$ 次，那么时间复杂度就是 $O(nlog^2n)​$ (貌似是的)，这足以让我们过这道题了。</p><a id="more"></a><h3 id="1-主席树如何上树"><a href="#1-主席树如何上树" class="headerlink" title="1.主席树如何上树"></a>1.主席树如何上树</h3><p>上树[手动滑稽]……</p><p>首先，对于节点 $u$ 的权值线段树，$ta$ 是由 $fa[u]$ 的权值线段树继承过来的，因为只是多了一个 $u$ ，所以主席树只是多增加了 $logn$ 个节点。</p><p>既然是从父亲节点继承过来的话，那么很显然我们可以在预处理倍增数组的时候顺便将主席树建好。</p><h4 id="Code-builld"><a href="#Code-builld" class="headerlink" title="Code-builld:"></a>Code-builld:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    update(root[u],root[f],<span class="number">1</span>,tmp,S(a[u]));</span><br><span class="line">    fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=f) dfs(G[i].to,u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个很容易理解，那么我们怎么暴力合并两颗树呢？</p><p>对于要合并的两颗树，我们选择将 $size$ 小的往 $size$ 大的并，对于给出的 $x,y$ ，我们先给 $x,y$ 连好边，然后将 $y$ 的权值线段树从 $x$ 更新，丢掉以前的。最后遍历 $y$ 的子树，更新其倍增数组和权值线段树即可。</p><p>至于 $size$ 的维护的话，我们可以找到 $x,y$ 所在的树的根。这个样子 $size$ 谁大谁小只需要判断 $x,y$ 所在的树的根的 $size$ 谁大谁小即可。我们在网下遍历 $y$ 的子树时每次都将$x$ 所在树的根的 $size$ 加一即可。</p><h4 id="Code-merge"><a href="#Code-merge" class="headerlink" title="Code-merge:"></a>Code-merge:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*rt:x所在树的根，u:当前需要重构的节点,刚进入函数的时候为y*/</span></span><br><span class="line">    <span class="comment">/*f:当前需要重构的节点的父节点，刚进入函数的时候为x*/</span></span><br><span class="line">    fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>;<span class="comment">//更新深度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">/*更新倍增数组*/</span></span><br><span class="line">    size[rt]++,<span class="comment">//更新size</span></span><br><span class="line">    sta[u]=f,<span class="comment">//记录父亲(不是倍增数组,这是用来查询所在树的根的)</span></span><br><span class="line">    vis[u]=<span class="literal">true</span>;<span class="comment">//记录一下</span></span><br><span class="line">    update(root[u],root[f],<span class="number">1</span>,tmp,S(a[u]));<span class="comment">//重建</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) </span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=f) merge(rt,G[i].to,u);<span class="comment">//遍历子树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后差不多了，至于 $sta$ 的话，因为要查询所在树的根，为了提高效率我们可以将其作为并查集的形式。</p><p>还有一点，对于 $vis$ 数组，实际上我们建树的时候就直接用 $merge$ 好了，$vis$ 只是用来判重而已，因为是森林，有很多树。所以说我们可以不用 $dfs$ 就将初始形态的树建好。</p><h4 id="Code-pre"><a href="#Code-pre" class="headerlink" title="Code-pre:"></a>Code-pre:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="keyword">if</span>(!vis[i]) &#123;merge(i,i,<span class="number">0</span>);sta[i]=i;&#125;</span><br></pre></td></tr></table></figure><p>最后需要注意的就是主席树的空间要开很大，差不多是 $nlog^2n$ ，因为有很多结点。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">8e4</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">22</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> testcase,lastans,n,m,T,a[N],b[N],tmp,head[N],cnt;</span><br><span class="line"><span class="keyword">int</span> size[N],sta[N],vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nxt,to;&#125;G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">S</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+tmp,x)-b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    G[++cnt]=&#123;head[u],v&#125;,head[u]=cnt;</span><br><span class="line">    G[++cnt]=&#123;head[v],u&#125;,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> root[N],tot;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tree</span> &#123;</span><span class="keyword">int</span> l,r,v;&#125;t[N*<span class="number">601</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp;now,<span class="keyword">int</span> last,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        now=++tot,t[now]=t[last],t[now].v++;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid) update(t[now].l,t[last].l,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> update(t[now].r,t[last].r,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> r1,<span class="keyword">int</span> r2,<span class="keyword">int</span> r3,<span class="keyword">int</span> r4,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> th=t[t[r1].l].v+t[t[r2].l].v-t[t[r3].l].v-t[t[r4].l].v;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=th) <span class="keyword">return</span> query(t[r1].l,t[r2].l,t[r3].l,t[r4].l,l,mid,k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(t[r1].r,t[r2].r,t[r3].r,t[r4].r,mid+<span class="number">1</span>,r,k-th);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> mid</span></span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N][LogN+<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;dep[y]) swap(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i];</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=LogN;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];</span><br><span class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    fa[u][<span class="number">0</span>]=f,dep[u]=dep[f]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=LogN;++i) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    size[rt]++,</span><br><span class="line">    sta[u]=f,</span><br><span class="line">    vis[u]=<span class="literal">true</span>;</span><br><span class="line">    update(root[u],root[f],<span class="number">1</span>,tmp,S(a[u]));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) </span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=f) merge(rt,G[i].to,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="keyword">return</span> u==sta[u]?u:sta[u]=find(sta[u]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(testcase);</span><br><span class="line">    IN(n),IN(m),IN(T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        IN(a[i]),b[i]=a[i],sta[i]=i;</span><br><span class="line">    sort(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(b[i]!=b[i<span class="number">-1</span>])b[++tmp]=b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);add(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) &#123;merge(i,i,<span class="number">0</span>);sta[i]=i;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">2</span>];<span class="keyword">int</span> x,y,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);IN(x),IN(y);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'L'</span>) &#123;</span><br><span class="line">            x^=lastans,y^=lastans;</span><br><span class="line">            add(x,y);</span><br><span class="line">            <span class="keyword">int</span> a=find(x),b=find(y);</span><br><span class="line">            <span class="keyword">if</span>(size[a]&lt;size[b])swap(x,y),swap(a,b);</span><br><span class="line">            merge(a,y,x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            IN(k);</span><br><span class="line">            x^=lastans,y^=lastans,k^=lastans;</span><br><span class="line">            <span class="keyword">int</span> lca_xy=lca(x,y);</span><br><span class="line">            lastans=b[query(root[x],root[y],</span><br><span class="line">                            root[lca_xy],root[fa[lca_xy][<span class="number">0</span>]],<span class="number">1</span>,tmp,k)];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 启发式合并 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2008]Sandy的卡片  后缀数组.SA  luoguP2463</title>
      <link href="/2019/03/28/%5B%E9%A2%98%E8%A7%A3%5DluoguP2463/"/>
      <url>/2019/03/28/%5B%E9%A2%98%E8%A7%A3%5DluoguP2463/</url>
      
        <content type="html"><![CDATA[<p>后缀数组，我们可以先将所有的卡片连成一个串，每一个卡片数列之间用一个极大数分开保证不出锅。然后的话，对于相同的定义有些鬼，使得我们不能直接做 $SA$ ，这个时候我们将所有的卡片数列的值都转换为当前位置减去上个位置的值即可。</p><a id="more"></a><p>然后就是统计答案，我们二分这个最长公共子序列的长度，每一次去判断是否合法。怎么判断呢？首先对于 $height$ 数组，如果要满足要求的话选取的这一段的 $height$ 数组的值都不能小于当前的 $mid$ ，这是显然的。</p><p>怎么确保我们将所有的卡片数列都选了呢？直接开一个 $vis​$ 数组即可，然后在碰到不合法的地方(也就是 $height[i]​$ 小于了 $mid​$ )全部清空即可。</p><p>最后如何判断当前的 $mid$ 是否合法呢？很显然，只有在所有的卡片数列都成功选择的情况下就合法了。我们用一个栈维护 $vis$ ，清空方便，然后当栈顶为卡片序列数的时候，也就是所有的卡片序列都选择的时候，$mid$ 就合法了。</p><p>然后有个悲催的事情，窝打二分的时候……打成了这样： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid)) ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">    r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，$r$ 前面应该要有 $else$ ，但是窝看了一晚上都没看出来…….</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5e2</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> G=<span class="number">5e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SA &#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,S[N],sa[N],height[N],x[N],y[N],hep[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre_sa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) x[i]=S[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) hep[x[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) hep[i]+=hep[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) sa[hep[x[i]]--]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>,p=<span class="number">0</span>;m=p,p&lt;n;w&lt;&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">            p=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;++i) y[++p]=n-w+i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(sa[i]&gt;w) y[++p]=sa[i]-w;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i) hep[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) hep[x[i]]++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) hep[i]+=hep[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) sa[hep[x[y[i]]]--]=y[i];</span><br><span class="line">            swap(x,y);</span><br><span class="line">            x[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">                x[sa[i]]=(y[sa[i]]==y[sa[i<span class="number">-1</span>]]&amp;&amp;y[sa[i]+w]==y[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre_height</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)x[sa[i]]=i;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            k-=k&gt;<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> j=sa[x[i]<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">while</span>(j+k&lt;=n&amp;&amp;i+k&lt;=n&amp;&amp;S[j+k]==S[i+k])++k;</span><br><span class="line">            height[x[i]]=k;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> SA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[G],<span class="built_in">stack</span>[G],top;</span><br><span class="line"><span class="keyword">int</span> num,len[G],id[N],a[G][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top) vis[<span class="built_in">stack</span>[top--]]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(height[i]&lt;x) &#123;</span><br><span class="line">            <span class="keyword">while</span>(top) vis[<span class="built_in">stack</span>[top--]]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!vis[id[sa[i]]]) &#123;</span><br><span class="line">            <span class="built_in">stack</span>[++top]=id[sa[i]],vis[id[sa[i]]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(top==num) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(num);</span><br><span class="line">    <span class="keyword">int</span> mx=-inf,mi=inf,l=<span class="number">0</span>,r=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i) &#123;</span><br><span class="line">        IN(len[i]),r=min(r,len[i]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len[i];++j) &#123;</span><br><span class="line">            IN(a[i][j]);</span><br><span class="line">            <span class="keyword">if</span>(j!=<span class="number">1</span>)mx=max(mx,a[i][j]-a[i][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=len[i];++j)</span><br><span class="line">            S[++n]=a[i][j]-a[i][j<span class="number">-1</span>],id[n]=i,mi=min(mi,S[n]);</span><br><span class="line">        S[++n]=++mx;</span><br><span class="line">    &#125;</span><br><span class="line">    m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        S[i]=S[i]-mi+<span class="number">1</span>,m=max(m,S[i]);</span><br><span class="line">    pre_sa(),pre_height();</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后缀数组.SA </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【考试总结】  Test-2019.3.28  HNOI2019模拟</title>
      <link href="/2019/03/28/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190328/"/>
      <url>/2019/03/28/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190328/</url>
      
        <content type="html"><![CDATA[<p>今天的题目貌似暴力分好拿写欸，然而……窝只有 $70$ ？不过排名比昨天上升了什么鬼。</p><p>$QwQ$ 题目的确很难懂，所以窝听了讲解后也没听懂多少，不过还是改出了第一题(第一题是人就改的出好吧o(≧口≦)o)。</p><a id="more"></a><p><a href="https://github.com/monlights/image/blob/master/problem20190328.zip?raw=true" target="_blank" rel="noopener">题目压缩包戳我!!!<code>~\(≧▽≦)/~</code>(有时链接可能会崩，如果崩了的话请稍后尝试QwQ)</a></p><hr><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><blockquote><p>期望得分：30分<br>实际得分：30分<br>正解：找规律??<br>窝的解法：暴力模拟题意</p></blockquote><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>第一眼看到题目，欸，如果按照题面模拟就有 $30$ 分！出题人良心啊。然后看数据范围，$100\%$ 的数据的 $n\leq 3\times10^7$ ，这应该是 $O(n)$ 算法才行啊，于是想，或许是线性 $DP$ ，然后推式子，推出这么一个鬼玩意：</p><script type="math/tex; mode=display">f[i]=f[i-1]+sum(a[i])</script><p>$sum(a[i])$ 就是在 $1$ 到 $i-1$ 中大于 $a[i]$ 的数的个数，然后 $f[i]$ 表示将前 $i$ 个元素进行冒泡需要的交换次数。</p><p>很显然这是错的。</p><p>然后我就想到了 $NOI$ 往年的冒泡排序(貌似是 $NOI$ 的?)，其实两道题没什么联系。</p><p>哎好吧发现过不去直接上暴力吧，题目说什么就做什么，于是把我用来对拍的暴力程序提交了上去，$30$ 分。</p><p>接下来讲讲正解。</p><p>很显然，对于一个元素 $a_i$ ，它所在的位置为 $i$ ，然而最后排好序后 $ta$ 应该回到的位置为 $a_i$ 。观察冒泡过程，发现对于一个元素，每次冒泡排序都最多会将 $ta$ 向自己的目标位置移动一格。</p><p>然后就是，比如说当前序列的最小元素，假设最小元素的起点位置为 $s$ ,我们发现每次冒泡总会将 $ta$ 向前移一格，然后在第 $s-1$ 次冒泡排序的时候 $1$ 归位了。然后发现 $1$ 的移动对 $2$ 的移动次数并没有产生影响，这个时候将 $1$ 删去，发现 $2$ 归位的移动次数变成了 $2$ 的初始位置 $-$ $1$ ，放在原序列中就是 $2$ 的初始位置 $-$ $2$ 。</p><p>这至少说明，对于任意一个元素 $i$ ，其所需要的移动次数为 $i-a_i$ 。</p><p>那么，如果要使序列有序，所需要的排序次数就是 $max\{ i-a_i \}$ 。直接计算答案即可。</p><p>(实际上窝也不是很明白…..貌似是这样的吧 $QwQ$ )</p><h2 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,S,B,C,D,A[<span class="number">10006</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"magician.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"magician.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;n,&amp;S,&amp;B,&amp;C,&amp;D);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        A[i]=i;</span><br><span class="line">        S=(S*B+C)%D;</span><br><span class="line">        swap(A[i],A[(S%i)+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> counter=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)counter=max(counter,i-A[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,counter);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><blockquote><p>期望得分：30分<br>实际得分：0分<br>正解：容斥+搜索+剪枝<br>窝的解法：暴搜</p></blockquote><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>不会………….然后暴搜打挂了没得分。</p><p>所以这不能说是题解，留个坑吧。</p><hr><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><blockquote><p>期望得分：40分<br>实际得分：40分<br>正解：将所有颜色维护成链，然后分块加速<br>窝的解法：直接维护成链</p></blockquote><p>对于一个 $i$ ，如果 $a_i=k$ ，并且 $a_j=k$ ，而且 $i$ 和 $j$ 是离得最近的，则将它们向前向星那样连起来，最后对询问的区间直接暴力跳即可。</p><h2 id="Code：-1"><a href="#Code：-1" class="headerlink" title="Code："></a>Code：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">27</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seq;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hashs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q,a[N],head[N],nxt[N],f[LogN+<span class="number">7</span>][N],logs[N],ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre_st</span><span class="params">()</span></span>&#123;</span><br><span class="line">    logs[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)logs[i]=logs[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)f[<span class="number">0</span>][i]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;LogN;++t)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;t)<span class="number">-1</span>&lt;=n)</span><br><span class="line">                f[t][i]=max(f[t<span class="number">-1</span>][i],f[t<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(t<span class="number">-1</span>))]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=logs[y-x+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> max(f[t][x],f[t][y-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> now=x,last=nxt[x];last&gt;=lim;last=nxt[last]) &#123;</span><br><span class="line">        <span class="keyword">while</span>(now&gt;last&amp;&amp;query(last,now)&gt;a[last]) now=nxt[now];</span><br><span class="line">        ans=max(ans,now-last+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make_hashs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">sort(seq.begin(),seq.end());</span><br><span class="line">    seq.erase(unique(seq.begin(),seq.end()),seq.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;seq.size();++i) hashs[seq[i]]=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=hashs[a[i]];</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"spiral.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"spiral.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    IN(n),IN(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(a[i]),seq.push_back(a[i]);</span><br><span class="line">    make_hashs();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        nxt[i]=head[a[i]],head[a[i]]=i;</span><br><span class="line">    pre_st();</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=y;i&gt;=x;--i) solve(i,x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正解不费………………………………….</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【考试总结】  Test-2019.3.27  HNOI2019模拟</title>
      <link href="/2019/03/27/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190327/"/>
      <url>/2019/03/27/%5B%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93%5Dtest20190327/</url>
      
        <content type="html"><![CDATA[<p>今天全是原题，然而窝几乎都没做过，于是挂了……</p><p>丢人的是考场上组合数的式子 $C[i][j]$=$C[i$-$1][j]$+$C[i$-$1][j$-$1]$ 写成了 $C[i][j]$=$C[i][j$-$1]$+$C[i$-$1][j$-$1]$ ，然后第一题光荣爆 $0​$ ……TAT。</p><p>吸取教训！</p><a id="more"></a><p><a href="https://github.com/monlights/image/blob/master/problem20190327.zip?raw=true" target="_blank" rel="noopener">题目压缩包戳我!!!<code>~\(≧▽≦)/~</code>(有时链接可能会崩，如果崩了的话请稍后尝试QwQ)</a></p><hr><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><blockquote><p>期望得分：100分<br>实际得分：0分<br>正解：Purfer+DP+组合数学<br>窝的解法：Purfer+DP+组合数学</p></blockquote><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><del>十年OI一场空，组合数打错见祖宗。</del></p><p>上面的正解有误，听说 $DP$ 不是正解，不过，$DP$ 复杂度高达 $O(n^4)$  ，本应该 $T$ 的，却仗着小常数不仅 $AC$ ，还爆踩标程？<del>这究竟是道德的沦丧还是人性的扭曲？</del></p><p>不了不了，正经一点。众所周知，有个东西叫 $Purfer$ 序列，对于每一个不同的树，都有不同的 $Purfer$ 序列。所以每个树都可以用其 $Purfer$ 序列来表示，这个树中的每个结点在 $Purfer$ 序列中的出现次数为<strong>其度数减一</strong>。至于$Purfer​$ 序列具体是什么就不赘述了。</p><p>那么 $DP​$ 方程怎么设？</p><p>我们设 $f[i][j][k]$ 表示 <strong>从前 $i$ 个结点中选出 $j$ 个结点，并且这 $j$ 个结点共在原树的 $Purfer$ 序列出现了 $k$ 次的合法 $Purfer$ 序列的数量</strong> 。</p><p>那么转移呢？很显然分为两种情况：</p><ul><li>没选第 $i​$ 个点。</li><li>选了第 $i​$ 个点。</li></ul><p>然后分别进行转移，这就很简单了：</p><ul><li>没选：$f[i][j][k]+=f[i-1][j][k]​$ </li><li>选了：$f[i][j][k]+=f[i-1][j-1][k-d]\times C[k][d]​$</li></ul><p>其中 $d​$ 为我们正在枚举的第 $i​$ 个点的出现次数 $(0​$ ~ $du[i]-1)​$ ，然后就是下面的组合数，就是代表着<strong>在 $k-d​$ 长度的序列中插入 $d​$ 个 $i​$ 的方案数</strong> 。<br>当然也可以这么写：</p><script type="math/tex; mode=display">f[i][j+1][d+k]+=C[d+k][d]\times f[i-1][j][k]​</script><p> 我们知道一棵 $n​$ 个结点的树的 $Purfer​$ 序列的长度是 $n-2​$ 的，所以我们的答案应该就是 $f[n][i][i-2]​$ 。</p><p> 最后，记得随时<del>膜</del>模！</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">57</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> du[N],n,T;</span><br><span class="line">ll C[N][N],f[N][N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">50</span>;++i)&#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%MOD;<span class="comment">//就是这儿!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;du[i]);</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n<span class="number">-2</span>;++k) &#123;</span><br><span class="line">                    f[i][j][k]=(f[i][j][k]+f[i<span class="number">-1</span>][j][k])%MOD;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;du[i]&amp;&amp;d+k&lt;=n<span class="number">-2</span>;++d)</span><br><span class="line">                        f[i][j+<span class="number">1</span>][d+k]=(f[i][j+<span class="number">1</span>][d+k]+C[d+k][d]*f[i<span class="number">-1</span>][j][k]%MOD)%MOD;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,f[n][i][i<span class="number">-2</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><blockquote><p>期望得分：5分<br>实际得分：30分<br>正解：???没发sol……<br>窝的解法：手玩小数据+瞎搞</p></blockquote><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>一看就是懵逼题……但是看到 $30$ 分的数据很小，并且还有菊花图，所以我们来瞎搞吧！刚开始的时候以为前六个点都是菊花图，然后都手玩，到后面才看清，只能说数据太弱了啊。</p><p>正解表示不明白……贴一发考场上的代码：</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"b.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"b.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> x,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(x!=<span class="number">0</span>)flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) &#123;<span class="comment">//菊花图输出瞎搞手玩？</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;k&gt;=<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>&amp;&amp;k&gt;=<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">3</span>&amp;&amp;k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">3</span>&amp;&amp;k&gt;=<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"3\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">4</span>&amp;&amp;k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">4</span>&amp;&amp;k==<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"7\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">4</span>&amp;&amp;k&gt;=<span class="number">2</span>)&#123;<span class="built_in">printf</span>(<span class="string">"10\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">5</span>&amp;&amp;k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">5</span>&amp;&amp;k==<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"13\n"</span>),<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//其他情况输出样例？？</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">4</span>)&#123;<span class="built_in">printf</span>(<span class="string">"8\n"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">6</span>)&#123;<span class="built_in">printf</span>(<span class="string">"28\n"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上玩到 $n​$=$5\&amp;\&amp;k​$=$2​$ 的时候我就崩了，玩不下去了。</p><hr><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><blockquote><p>期望得分：0分<br>实际得分：0分<br>正解：最小割<br>窝的解法：没做….</p></blockquote><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>真的看不出来是最小割啊 $QwQ$ ，以为是数论题，还看到质因子了感觉就更不像最小割了……但是在想题目的时候最小割的确出现在了我的脑海中，但是一闪就过了……</p><p>一个有趣的事情：考试期间高二机房神仙一度怀疑此题为数论题，这个时候 $chl$神仙 和另一位 $Dalao$ 走了出去，站在门外讨论此题中的”物理”，说什么重心和”物理”有关因此此题不可做，然后树王神仙表示不懂”物理”中的”重心”准备弃疗，然而最终树王神仙还是选择了网络流……</p><p>好吧不扯淡了，我们来讨论一下这题的粗略解法。</p><p>可以发现题目给出了一个限制：$N$ 最多有两个质因子。这个限制有什么用呢？</p><p>对于一个有 $N$ 个扇叶的风扇，我们考虑平衡的并且独立扇叶只有一个的风扇：</p><p><img src="/2019/03/27/[考试总结]test20190327/A.png" alt=""></p><p>左边的就是有 $(N=8)$ 个扇叶的风扇，右边的呢就是在 $8$ 个扇叶中有 $2$ 个扇叶的风扇 ($(A_1,D_1,F_1),$$(A_1,H_1,B_1)$)，可以知道这个 $2$ 个扇叶的风扇是一定平衡的，因为 $2$ 是 $8$ 的因子。</p><p>可以知道，对于 $8$ 的其他因子(例如 $4$ )是可以被质因子 $2$ 组成的，因此也是平衡的风扇。</p><p>那么对于两个不同的质因子，可以组成两个不同样式的且平衡的 $N$ 个扇叶的风扇的子风扇。</p><p>当然还有位置不同，对于上图中 $2$ 个扇叶的子风扇根据不同的位置有很多个：</p><p><img src="/2019/03/27/[考试总结]test20190327/B.png" alt=""></p><p>这个时候我们的问题就可以转化如下了：</p><blockquote><p>有两种类型的风扇 $p,q$ ，风扇类型等于 $2$ 的样子如上图，现在我们需要用这两种风扇<strong>无重叠</strong>的覆盖尽可能多的剩下的残缺扇叶。</p></blockquote><p>这个时候考虑建图，我们从 $S$ 向所有不同位置的 $p$ 类风扇连一条边，边权为 $p$ ，表示选择了这个风扇可以多覆盖一共 $p$ 个扇叶。所有不同位置的 $q$ 类风扇向 $T$ 连边，边权为 $q$ ，和上面同理。</p><p>然后这个时候的最小割是什么呢？对于一个起点为 $x$ 的 $p$ 类风扇，我们将 $S$ 连向Ta的边切断，表示不使用起点为 $x$ 的 $p$ 类风扇，$q$ 类风扇同理。当然是不使用的风扇越少越好，剩下的可用的风扇当然是越多越好，所以成了最小割。</p><p>那么怎么表示<strong>无重叠</strong>呢？</p><p>可以知道同类风扇是不可能重叠的，我们考虑异类风扇。我们对于一个 $p$ 类风扇和一个 $q$ 类风扇，如果其重叠了，那么只能选择其中一个，于是我们在这两个风扇间连一条边，边权为 $inf$ ，这个时候跑最大流的时候必定有流经过此地，也就是说这两个风扇必然要割掉一个才行。</p><p>所以什么事情都解决了，就差代码了。</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">2e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic &#123;<span class="comment">//Dinic板子封装</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Que;</span><br><span class="line">    <span class="keyword">int</span> s,t,sum,head[N&lt;&lt;<span class="number">1</span>],cnt=<span class="number">1</span>,dep[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        G[++cnt]=&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">        G[++cnt]=&#123;head[v],u,<span class="number">0</span>&#125;,head[v]=cnt;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s]=<span class="number">1</span>,Que.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!Que.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u=Que.front(),v;Que.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">                <span class="keyword">if</span>(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                    dep[v]=dep[u]+<span class="number">1</span>,Que.push(v);</span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flow||u==t) <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow,v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(dep[v=G[i].to]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!used) dep[u]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(bfs()) sum-=dfs(s,inf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"><span class="keyword">int</span> n,m,p,q,point,bock[N],vis[N],fan[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/p;++i) <span class="keyword">if</span>(!bock[i]) &#123;<span class="comment">//起点扇叶没有损坏</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/p) <span class="keyword">if</span>(bock[j]) <span class="keyword">goto</span> end1;</span><br><span class="line">        <span class="comment">//枚举每个扇叶，如果损坏的那么该风扇就不合法</span></span><br><span class="line">        ++point,add(s,point,p),sum+=p;<span class="comment">//连边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/p) fan[j]=point;<span class="comment">//标记</span></span><br><span class="line">        end1:;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/q;++i) <span class="keyword">if</span>(!bock[i]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/q) <span class="keyword">if</span>(bock[j]) <span class="keyword">goto</span> end2;</span><br><span class="line">        ++point,add(point,t,q),sum+=q;<span class="comment">//连边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/q) vis[fan[j]]=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//清理标记，防止有风扇被连两次边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=n/q)</span><br><span class="line">            <span class="keyword">if</span>(fan[j]&amp;&amp;!vis[fan[j]]) </span><br><span class="line">                vis[fan[j]]=<span class="literal">true</span>,add(fan[j],point,inf);<span class="comment">//连边</span></span><br><span class="line">        end2:;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n),IN(m);s=<span class="number">0</span>,t=N<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;<span class="keyword">int</span> x;IN(x),bock[x]=<span class="literal">true</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> copy=n,sqr=<span class="built_in">sqrt</span>(n),first=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sqr;++i) &#123;<span class="comment">/*寻找两个质因子p和q*/</span></span><br><span class="line">        <span class="keyword">if</span>(!(n%i)&amp;&amp;!first) &#123;</span><br><span class="line">            first=<span class="literal">true</span>,p=i;</span><br><span class="line">            <span class="keyword">while</span>(!(n%p))n/=p;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!(n%i)) &#123;</span><br><span class="line">            q=i;</span><br><span class="line">            <span class="keyword">while</span>(!(n%q))n/=q;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>)q=n;n=copy;</span><br><span class="line">    pre(),dinic();</span><br><span class="line">    <span class="keyword">if</span>(!sum)<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-m-sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈K-D Tree&amp;学习笔记</title>
      <link href="/2019/03/26/%5B%E7%AE%97%E6%B3%95%5DKD-Tree/"/>
      <url>/2019/03/26/%5B%E7%AE%97%E6%B3%95%5DKD-Tree/</url>
      
        <content type="html"><![CDATA[<p>又是一个神奇的数据结构……</p><p>$K$-$D \ Tree$ 中 $D$ 是维度($Dimension$)的缩写，所以 $K$-$D \ Tree$ 的实际意思就是 $K$ 维树。当然 $K$-$D \ Tree $ 一般用于维护二维平面上的信息，所以我们平常用的 $K$-$D\ Tree$  又叫 $2$-$D \ Tree$ 。</p><a id="more"></a><p>假设我们现在有一个二维平面，二维平面上有若干个点 ，现在怎么用 $2​$-$D \ Tree​$ 维护这些点呢？很简单，我们将这些点建成一颗树，最好是一颗二叉搜索树，但是怎么建树呢？我们就来分割这个平面，横着一刀，竖着一刀，每次选取最优的结点当根即可。</p><p>可能很抽象，我们以下图为例，假设我们需要将下图的 $7$ 个点建成二叉搜索树：</p><p><img src="/2019/03/26/[算法]KD-Tree/A.png" alt=""></p><p>首先我们准备竖着切，这个竖着切切哪里呢？我们会发现 $D$ 是最中间的结点，于是我们对着 $D$ 就是一刀，现在的矩阵分割成了两半，那么自然的 $A,B,C$ 就是 $D$ 的左子树中的结点，$E,F,G$ 就是 $D$ 的右子树中的结点。</p><p>然后我们先建 $D$ 的左子树，由于上一次是竖着切的，这一次我们需要横着切。我们递归下去，发现 $A,B,C$ 这一块 $B$ 是最中间的(以横着的视角，因为需要横着切嘛)，那么很显然 $D$ 的左儿子就是 $B$ 了，$A,C$ 分别是 $B$ 的两孩子，由于 $A,C$ 已经在 $B$ 的左右了并且只有一个点了，那么理所当然 $C$ 就是 $B$ 的左孩子，$A$ 就是 $B$ 的右儿子(横着看就好了)。</p><p><img src="/2019/03/26/[算法]KD-Tree/B.png" alt=""></p><p>同样的，我们发现 $G$ 是 $D$ 左边横着切时最合适的结点(因为在横着的视角中 $G$ 是最中间的 )，于是我们将 $D$ 的右儿子定为 $G$ ，同样的，$F,E$ 为 $G$ 的两孩子。</p><p>那么这样子我们的树就建好了。</p><h4 id="Code-build-kdt"><a href="#Code-build-kdt" class="headerlink" title="Code-build-kdt:"></a>Code-build-kdt:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> wd)</span> </span>&#123;<span class="comment">//lr:当前对应的结点区间,wd:当前需要切的方向</span></span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x=new_node(),mid=(l+r)&gt;&gt;<span class="number">1</span>;<span class="comment">//新建结点</span></span><br><span class="line">    WD=wd,nth_element(p+l,p+mid,p+r+<span class="number">1</span>),<span class="comment">//重载了运算符，按照当前切的方向排序</span></span><br><span class="line">    tr[x].tp=p[mid];<span class="comment">//找到最合适切割的最中间的结点</span></span><br><span class="line">    tr[x].l=build(l,mid<span class="number">-1</span>,wd^<span class="number">1</span>);<span class="comment">//建立左子树</span></span><br><span class="line">    tr[x].r=build(mid+<span class="number">1</span>,r,wd^<span class="number">1</span>);<span class="comment">//建立右子树</span></span><br><span class="line">    <span class="keyword">return</span> pushup(x),x;<span class="comment">//上传信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是怎么查询呢？实际上查询跟普通的二叉搜索树差不多，按照方位坐标查找即可。</p><p>对于一个结点的信息是这样的：</p><h4 id="Code-node-kdt"><a href="#Code-node-kdt" class="headerlink" title="Code-node-kdt"></a>Code-node-kdt</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mi[<span class="number">2</span>],mx[<span class="number">2</span>],l,r,sz;</span><br><span class="line">    point tp;</span><br><span class="line">&#125;tr[N];</span><br></pre></td></tr></table></figure><p><code>l,r,sz</code> 就是左右儿子以及子树大小，<code>point</code> 显然是该结点代表的二维平面上的点，但是 $mi,mx$ 是干什么的呢？我们用 $mi,mx$ 记录的就是当前结点已经它的子树中的所有节点中，最大/最小的 $x$ 坐标以及最大/最小的 $y$ 坐标。</p><p>这样记录有什么用呢？假设我们将这个看成一个矩形，那么对于一个我们需要搜索的坐标，如果这个需要搜索坐标 已经不属于 $mi,mx$ 围城的矩阵中，那么这个需要搜索的坐标就跟当前子树没关系了，这也就相当于一个剪枝。</p><p>我们的 $pushup$ 上传时就是对 $mi,mx$ 进行更新，所以 $pushup$ 应该这样写：</p><h4 id="Code-pushup-kdt"><a href="#Code-pushup-kdt" class="headerlink" title="Code-pushup-kdt"></a>Code-pushup-kdt</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=tr[x].l,r=tr[x].r;<span class="comment">//简写左右儿子</span></span><br><span class="line">    tr[x].sz=tr[l].sz+tr[r].sz+<span class="number">1</span>;<span class="comment">//更新size</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;++i) &#123;<span class="comment">//枚举方向，节省码量</span></span><br><span class="line">        <span class="comment">/*---------更新mi[x],mx[x]---------*/</span></span><br><span class="line">        tr[x].mi[i]=tr[x].mx[i]=tr[x].tp.x[i];</span><br><span class="line">        <span class="keyword">if</span>(l) &#123;</span><br><span class="line">            tr[x].mi[i]=min(tr[x].mi[i],tr[l].mi[i]);</span><br><span class="line">            tr[x].mx[i]=max(tr[x].mx[i],tr[l].mx[i]);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(r) &#123;</span><br><span class="line">            tr[x].mi[i]=min(tr[x].mi[i],tr[r].mi[i]);</span><br><span class="line">            tr[x].mx[i]=max(tr[x].mx[i],tr[r].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*---------更新mi[x],mx[x]---------*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢，这里不待修改的，那么如果说要兹磁插入节点怎么办？</p><p>需要兹磁插入节点的题目：<a href="https://www.luogu.org/problemnew/show/P4169" target="_blank" rel="noopener">[Violet]天使玩偶/SJY摆棋子</a> </p><p>这道题因为允许离线，我们可以使用 $CDQ​$ ，但是如果强制在线的话就只能用 $K​$-$D \ Tree​$ 了。我们来讨论 $K​$-$D \ Tree​$ 的做法。</p><p>实际上 $K​$-$D \ Tree​$ 插入节点非常简单，就像普通的二叉搜索树那样找个位置插就好了。</p><h4 id="Code-Insert-kdt"><a href="#Code-Insert-kdt" class="headerlink" title="Code-Insert-kdt"></a>Code-Insert-kdt</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(point tmp,<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> wd)</span> </span>&#123;<span class="comment">//tmp:当前需要插入的点,x:当前树中结点,wd:当前切割方向</span></span><br><span class="line">    <span class="keyword">if</span>(!x) &#123;<span class="comment">//找到要插入的位置了</span></span><br><span class="line">        x=new_node();<span class="comment">//新建结点</span></span><br><span class="line">        tr[x].tp=tmp,tr[x].l=tr[x].r=<span class="number">0</span>;</span><br><span class="line">        pushup(x);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].tp.x[wd]&lt;tmp.x[wd]) Insert(tmp,tr[x].r,wd^<span class="number">1</span>);<span class="comment">//应该往右插</span></span><br><span class="line">    <span class="keyword">else</span> Insert(tmp,tr[x].l,wd^<span class="number">1</span>); <span class="comment">//否则往左插</span></span><br><span class="line">    pushup(x);<span class="comment">//更新结点信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是呢，你会发现就像一般的二叉搜索树一样，这个插入很容易被卡，卡成一条链，这就很不舒服了。于是我们需要一些平衡树的思想，使得 $K$-$D \ Tree$ 保持平衡。</p><p><strong>“我会 $Splay$ ！我会 无旋$Treap$ ！”</strong></p><p>呸呸呸，今天我们讲的是替罪羊树，跟你俩没关系。</p><p>没错，就是用替罪羊树的思想，将 $K​$-$D \ Tree​$ 拍扁重建。差不多就是 $insert​$ 的时候，在 $insert​$ 的最后 $check​$ 一下子树是否平衡，如果当前结点的子树已经”不平衡”了，那么拍扁该结点以及该结点子树，重建。</p><p>这里的 $\alpha$ 的值一般定为 $0.75$ 左右，但是也不能确定，如果实在要掐得准的话就得看看询问多还是插入多了。不过一般用 $0.75$ 是没问题的。</p><h4 id="Code-check-amp-pia-kdt"><a href="#Code-check-amp-pia-kdt" class="headerlink" title="Code-check&amp;pia-kdt:"></a>Code-check&amp;pia-kdt:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pia</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span> </span>&#123;<span class="comment">//就是拍扁的意思,sto litble orz</span></span><br><span class="line">    <span class="keyword">if</span>(tr[x].l) pia(tr[x].l,num);<span class="comment">//先拍左子树</span></span><br><span class="line">    p[num+tr[tr[x].l].sz+<span class="number">1</span>]=tr[x].tp,trh[++top]=x;<span class="comment">//再拍自己</span></span><br><span class="line">    <span class="keyword">if</span>(tr[x].r) pia(tr[x].r,num+tr[tr[x].l].sz+<span class="number">1</span>);<span class="comment">//然后拍右子树</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> wd)</span> </span>&#123;<span class="comment">//判断x的子树是否满足"平衡",wd记录当前切割方向,建树的时候有用</span></span><br><span class="line">    <span class="keyword">if</span>(alph*tr[x].sz&lt;tr[tr[x].l].sz||alph*tr[x].sz&lt;tr[tr[x].r].sz)<span class="comment">//判断</span></span><br><span class="line">        pia(x,<span class="number">0</span>),x=build(<span class="number">1</span>,tr[x].sz,wd);<span class="comment">//拍扁 and 重新build建树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是应用了，值得注意的是，如果维护的不是点而是矩形，那么有些地方(例如边界，$mi,mx​$ 都要注意)。</p><p>就像这道题：<a href="https://www.luogu.org/problemnew/show/P4631" target="_blank" rel="noopener">[APIO2018] Circle selection 选圆圈</a>，注意一下细节就好。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> K-D Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 「网络流24题」最长不下降子序列问题  网络流  luoguP2766</title>
      <link href="/2019/03/26/%5B%E9%A2%98%E8%A7%A3%5DluoguP2766/"/>
      <url>/2019/03/26/%5B%E9%A2%98%E8%A7%A3%5DluoguP2766/</url>
      
        <content type="html"><![CDATA[<p>第一问显然是一个很简单的 $DP$ ，但是第二问和第三问就要用最大流来求了，怎么求呢？</p><p>首先我们 $DP$ 出来的 $f$ 数组，$f[i]$ 表示<strong>以i结尾的最长不下降子序列的长度</strong> ，然后就是网络流的连边了。首先因为一个点只能经过两次，我们需要将其拆为入点和出点，中间连的边的边权自然是 $1$ ，然后对于一个 $i$ ，如果 $f[i]$ 等于最长长度($s$)，那么很显然这个 $i$ 就可以给答案做出一个贡献，这个时候 $i$ 的出点向 $t$ 连一条边权为 $1$ 边。</p><a id="more"></a><p>如果 $i$ 等于 $1$ ，那么自然 $1$ 是可以作为一个起点的，那么 $s$ 向 $i$ 的入点连一条边权为 $1$ 的边即可。</p><p>然后就是剩下的情况了，可以想到让 $i$ 向 $i$ 能够最优转移的位置连边，也就是说，如果有一个 $j$ ，使得 $f[j]=f[i]+1$ 并且 $a[i]&lt;=a[j]$ ，这个时候如果是在最优方案中 $i$ 是可以转移到 $j$ 的，这个时候从 $i$ 的出点向 $j$ 的入点连一条边，边权依旧是 $1$ 。</p><p>然后我们这个时候跑最大流，就是第二问的答案。</p><p>那么第三问呢？</p><p>很显然，对于 $1$ ，如果它是连向 $s$ 的，则将其连向 $s$ 的边的边权改为 $inf$ ，并将入点连出点的边权改为 $inf$ ，表示可以取无限次。然后 $n$ 如果连向了 $t$ ，也将边权改为 $inf$ ，并将入点连出点的边权改为 $inf$ ，和上面同理。这个时候再跑一次最大流即可，这就是第三问的答案了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5e2</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic &#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">int</span> s,t,head[N],cnt=<span class="number">1</span>,dep[N];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        G[++cnt]=&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">        G[++cnt]=&#123;head[v],u,<span class="number">0</span>&#125;,head[v]=cnt;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s]=<span class="number">1</span>,q.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front(),v;q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">                <span class="keyword">if</span>(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                    dep[v]=dep[u]+<span class="number">1</span>,q.push(v);</span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flow||u==t) <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow,v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(dep[v=G[i].to]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!used) dep[u]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs()) maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"><span class="keyword">int</span> n,l,ans,a[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> type,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type*n+x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IN(n);s=<span class="number">0</span>,t=<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        IN(a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;=a[i]) f[i]=max(f[i],f[j]+<span class="number">1</span>);</span><br><span class="line">        l=max(l,f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);<span class="comment">/*Q1*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        add(id(<span class="number">0</span>,i),id(<span class="number">1</span>,i),<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(f[i]==<span class="number">1</span>) add(s,id(<span class="number">0</span>,i),<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(f[i]==l) add(id(<span class="number">1</span>,i),t,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j) </span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;=a[i]&amp;&amp;f[i]==f[j]+<span class="number">1</span>)add(id(<span class="number">1</span>,j),id(<span class="number">0</span>,i),<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">/*Q2*/</span></span><br><span class="line">    <span class="keyword">if</span>(f[<span class="number">1</span>]==<span class="number">1</span>)add(s,id(<span class="number">0</span>,<span class="number">1</span>),inf),add(id(<span class="number">0</span>,<span class="number">1</span>),id(<span class="number">1</span>,<span class="number">1</span>),inf);</span><br><span class="line">    <span class="keyword">if</span>(f[n]==l)add(id(<span class="number">1</span>,n),t,inf),add(id(<span class="number">0</span>,n),id(<span class="number">1</span>,n),inf);</span><br><span class="line">    ans+=dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">/*Q3*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SCOI2010]股票交易  单调队列优化DP  luoguP2569</title>
      <link href="/2019/03/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP2569/"/>
      <url>/2019/03/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP2569/</url>
      
        <content type="html"><![CDATA[<p>我们一起来推一推。</p><p>设 $f[i][j]$ 表示：<strong>现在是第 $i$ 天，手上拥有的股票数为 $j$ 时赚到的最多的钱 </strong></p><p>我们考虑转移几个方向：空手买，不买不卖，之前买过了现在继续买，买过后需要卖</p><a id="more"></a><h4 id="空手买"><a href="#空手买" class="headerlink" title="空手买"></a>空手买</h4><p>空手买就是第一次买，显然不要考虑 “间隔 $w$ 天” 的限制，直接买就好。</p><p>那么很容易得到转移式：</p><script type="math/tex; mode=display">f[i][j]= - AP_i\times j</script><p>因为是买入，所以是负数。</p><h4 id="不买不卖"><a href="#不买不卖" class="headerlink" title="不买不卖"></a>不买不卖</h4><p>很显然可以直接从 $f[i-1][j]$ 转移过来。</p><p>转移式：</p><script type="math/tex; mode=display">f[i][j]=f[i-1][j]</script><h4 id="之前买过了现在继续买"><a href="#之前买过了现在继续买" class="headerlink" title="之前买过了现在继续买"></a>之前买过了现在继续买</h4><p>很显然这次我们需要考虑 $w$ 的限制了，不过我们可以直接从 $i-w-1$ 天转移。</p><p>假设我们是从 $f[i-w-1][k]$ 转移过来的，那么这次转移我们多买了 $j-k$ 张股票，容易得到转移式：</p><script type="math/tex; mode=display">f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}</script><p>当然因为规定了一天最多买入 $AS_i$ 股，上面的式子必须满足 $j-AS_i\leq k \leq j$</p><h4 id="买过之后需要卖"><a href="#买过之后需要卖" class="headerlink" title="买过之后需要卖"></a>买过之后需要卖</h4><p>同样的有 $w$ 的限制，但是跟上面的第三种情况没什么两样，转移式：</p><script type="math/tex; mode=display">f[i][j]=max\{ f[i-w-1][k] + (k-j)\times BP_i\}</script><p>因为 $BS_i$ 的限制条件，上面的式子必须满足 $j\leq k \leq j+BS_i$</p><h4 id="时间复杂度？"><a href="#时间复杂度？" class="headerlink" title="时间复杂度？"></a>时间复杂度？</h4><p>枚举 $i,j$ 状态就需要 $n^2$ 的复杂度，在这个基础上转移的复杂度为：</p><ul><li><strong>空手买</strong> ： $O(1)$ </li><li><strong>不买不卖</strong> ： $O(1)$</li><li><strong>之前买过了现在继续买</strong> ：$O(n)$ </li><li><strong>买过之后需要卖</strong> ：$O(n)$</li></ul><p>会发现如果加上枚举状态的复杂度，后面两个转移的总复杂度为 $O(n^3)$ ！</p><p>于是考虑优化。</p><p> 我们观察第三个转移式：</p><script type="math/tex; mode=display">f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}</script><p>对于当前的 $i,j$ ，假设有 $a,b$ 作为 $k$ 的两个选项对 $f[i][j]$ 进行转移，我们算一算 $a$ 比 $b$ 优的条件是什么：</p><script type="math/tex; mode=display">f[i][j]=max\{f[i-w-1][k]-(j-k)\times AP_i\}</script><script type="math/tex; mode=display">=max\{f[i-w-1][k]+k\times AP_i-j\times AP_i\}</script><p>这里我们会发现 $j\times AP_i$ 跟里面的式子没有任何关系，提出来不会产生仍和影响</p><script type="math/tex; mode=display">=max\{f[i-w-1][k]+k\times AP_i\}-j\times AP_i​</script><p>于是我们发现我们只需要得到最大的 $f[i-w-1][k]+k\times AP_i$ 就好了，这里我们可以用到<strong>单调队列优化DP</strong> 。</p><p>具体代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=MaxP;++j) &#123;<span class="comment">/*枚举所有的合法的j*/</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l]&lt;j-AS) ++l;<span class="comment">/*淘汰掉过期的队头*/</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r&amp;&amp;f[i-W<span class="number">-1</span>][q[r]]+q[r]*AP&lt;=f[i-W<span class="number">-1</span>][j]+j*AP) --r;<span class="comment">/*淘汰掉不如当前决策优的队尾*/</span></span><br><span class="line">    q[++r]=j;<span class="comment">/*当前决策进队*/</span></span><br><span class="line">    <span class="keyword">if</span>(l&lt;=r) f[i][j]=max(f[i][j],f[i-W<span class="number">-1</span>][q[l]]+q[l]*AP-j*AP);<span class="comment">/*转移*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为每一个状态都只进队/出队了一次，所以可以证明时间复杂度现在变为 $O(n^2)$ 了。</p><p>第四个操作一样可以这样优化，可以尝试一下，不贴解释了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e3</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,MaxP,W,AP,BP,AS,BS,l,r;</span><br><span class="line"><span class="keyword">int</span> q[N],f[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">128</span>,<span class="keyword">sizeof</span>(f));<span class="comment">/*赋极小值*/</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;T,&amp;MaxP,&amp;W);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;AP,&amp;BP,&amp;AS,&amp;BS);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=AS;++j) f[i][j]=-AP*j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=MaxP;++j) f[i][j]=max(f[i][j],f[i<span class="number">-1</span>][j]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=W)<span class="keyword">continue</span>;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=MaxP;++j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l]&lt;j-AS) ++l;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;f[i-W<span class="number">-1</span>][q[r]]+q[r]*AP&lt;=f[i-W<span class="number">-1</span>][j]+j*AP) --r;</span><br><span class="line">            q[++r]=j;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;=r) f[i][j]=max(f[i][j],f[i-W<span class="number">-1</span>][q[l]]+q[l]*AP-j*AP);</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=MaxP;j&gt;=<span class="number">0</span>;--j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l]&gt;j+BS) ++l;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;f[i-W<span class="number">-1</span>][q[r]]+q[r]*BP&lt;=f[i-W<span class="number">-1</span>][j]+j*BP) --r;</span><br><span class="line">            q[++r]=j;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;=r) f[i][j]=max(f[i][j],f[i-W<span class="number">-1</span>][q[l]]+q[l]*BP-j*BP);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MaxP;++i)ans=max(ans,f[T][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 单调队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2009]植物大战僵尸  网络流  luoguP2805</title>
      <link href="/2019/03/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP2805/"/>
      <url>/2019/03/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP2805/</url>
      
        <content type="html"><![CDATA[<h4 id="前置芝士：网络流-最大权闭合子图"><a href="#前置芝士：网络流-最大权闭合子图" class="headerlink" title="前置芝士：网络流-最大权闭合子图"></a>前置芝士：网络流-最大权闭合子图</h4><p>定义：对于一个图的子图，当且仅当这个子图中的任意一点都不会与该子图外的点联通时，称这个子图为该图的闭合子图。在该图所有的闭合子图中，点权和最大的那个我们称作<strong>最大权闭合子图</strong>。</p><a id="more"></a><p>那么最大权闭合子图怎么求呢？</p><blockquote><p>对于给出的图，如果要求将 $u,v$ 连一条边，那么从 $u$ 向 $v$ 连一条边权为 $inf$ 的边。</p><p>然后对于每个点如果该点的点权为正，那么从 $s$ 向该点连一条边权为该点点权的边，否则从该点向 $t$ 连一条边权为$-1\times$该点权的边。</p><p>跑最小割，这个时候最大权闭合子图的”最大权”为正点点权和-最小割。</p></blockquote><hr><p>最大权闭合子图跟这一题有什么关系呢？</p><p>可以发现，对于一个植物，僵尸必须先吃掉它右边的植物和保护它的植物才能吃它，那么这个植物就像它右边的植物与保护它的植物连边，这个连好边的图的最大权闭合子图就是答案！</p><p>但是值得注意的一点是，可能存在互相保护的关系，比如说样例中的 $(2,0)$ 保护 $(2,1)$ ，但是 $(2,1)$ 又作为 $(2,0)$ 右边的植物保护 $(2,0)$ ，然后这对关系怎么都是攻不破的，<strong>这是一个环！</strong></p><p>于是我们可以先建好图后拓扑一边，然后再在访问过的点之间连边(该点访问过意味着该点不在环内)，最后再跑最小割即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Score[N],n,m,s,t;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(x,y) (((x)-1)*m+(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic &#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">int</span> head[N],dep[N],cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[u],v,w&#125;,head[u]=cnt;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[v],u,<span class="number">0</span>&#125;,head[v]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s]=<span class="number">1</span>;q.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front(),v;q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">                <span class="keyword">if</span>(!dep[v=G[i].to]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                    dep[v]=dep[u]+<span class="number">1</span>,q.push(v);</span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flow||u==t) <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used)dep[u]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs()) maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Topology &#123;</span><br><span class="line">    <span class="keyword">int</span> vis[N],in[N];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; out[N];</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">topology</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">                <span class="keyword">if</span>(!in[id(i,j)]) </span><br><span class="line">                    q.push(id(i,j)),vis[id(i,j)]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;out[u].size();++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> v=out[u][i];--in[v];</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]&amp;&amp;!in[v]) &#123;vis[v]=<span class="literal">true</span>;q.push(v);&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Topology;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("test.in","r",stdin);</span></span><br><span class="line">    IN(n),IN(m);s=<span class="number">0</span>,t=n*m+<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> tot,x,y;</span><br><span class="line">            IN(Score[id(i,j)]),IN(tot);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=tot;++k) &#123;</span><br><span class="line">                IN(x),IN(y);++x,++y;</span><br><span class="line">                out[id(i,j)].push_back(id(x,y));</span><br><span class="line">                ++in[id(x,y)];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;m) &#123;</span><br><span class="line">                out[id(i,j+<span class="number">1</span>)].push_back(id(i,j));</span><br><span class="line">                ++in[id(i,j)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    topology();</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">            <span class="keyword">if</span>(vis[id(i,j)])&#123;</span><br><span class="line">                <span class="keyword">int</span> u=id(i,j);</span><br><span class="line">                <span class="keyword">if</span>(Score[u]&lt;<span class="number">0</span>) &#123;add(u,t,-Score[u]);&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;add(s,u,Score[u]);sum+=Score[u];&#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;out[u].size();++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v=out[u][k];</span><br><span class="line">                    <span class="keyword">if</span>(vis[v])add(v,u,inf);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(sum-dinic(),<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [AH2017/HNOI2017]大佬  搜索+DP  luoguP3724/bzoj4828</title>
      <link href="/2019/03/21/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4828/"/>
      <url>/2019/03/21/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4828/</url>
      
        <content type="html"><![CDATA[<p>首先可以发现，刷水题跟打伤害是可以分开处理的。</p><p>我们先用 $DP$ 预处理出能打伤害的最大天数，其余的天数都只能用刷水题的方式恢复。</p><p>于是设 $dp[i][j]$ 表示前 $i$ 天，信心值还剩 $j$ 的能够打伤害的最大天数。</p><a id="more"></a><p>可以知道一天只有两种情况，我们枚举 $i,j​$ 然后进行转移：</p><ul><li>如果可以坚持到下一天：<code>dp[i+1][j-a[i+1]]=max(dp[i+1][j-a[i+1]],dp[i][j]+1)</code></li><li>如果是要刷水题：<code>dp[i+1][j-a[i+1]+w[i+1]]=max(dp[i+1][j-a[i+1]+w[i+1]],dp[i][j])</code></li></ul><p>当然，如果要做第一个转移的话得先判断一下 <code>j-a[i+1]</code> 是否超了界，超界了的话当然就不能转移了。第二个转移也要注意，<code>j-a[i+1]+w[i+1]</code> 先要跟信心上界($mc$) 取 $min$ 。</p><p>最后在所有的状态中取一个最大值即可。</p><h3 id="Code-DP"><a href="#Code-DP" class="headerlink" title="Code-DP"></a>Code-DP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DP_maxday</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));<span class="comment">//初始化</span></span><br><span class="line">    dp[<span class="number">0</span>][mc]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mc;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j]&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> t1=j-a[i+<span class="number">1</span>];<span class="keyword">if</span>(t1&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            dp[i+<span class="number">1</span>][t1]=max(dp[i+<span class="number">1</span>][t1],dp[i][j]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> t2=min(t1+w[i+<span class="number">1</span>],mc);</span><br><span class="line">            dp[i+<span class="number">1</span>][t2]=max(dp[i+<span class="number">1</span>][t2],dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mc;++j)</span><br><span class="line">            d=max(d,dp[i][j]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 $d$ 就是我们能够打伤害的最大天数。</p><p>然后我们需要预处理出打出伤害的所有状态，这里我用广搜。</p><p>队列的结构体 $Node$ 由三个元素组成：$F,L,D$ ，表示在第 $D$ 天，你的 $F$ 的值为 $F$ ，$L$ 的值为 $L$ 。</p><p>然后就是转移，这里也是两种情况：</p><ul><li>使讽刺能力乘上等级：<code>F,L,D -&gt; F*L,L,D+1 (L&gt;0)</code></li><li>使等级加一：<code>F,L,D -&gt; F,L+1,D+1</code></li></ul><p>直接这样转移就好了，注意我们需要开个数组将这些打出伤害的方案记下来，当然，记录的时候不用记 $L$ ，因为后面打伤害的时候 $L$ 是没太多用的。</p><p>还有就是每次需要判断一下当前的天数，如果当前状态的天数已经大于了 $d$ 那么当前状态显然是不合法的。</p><p>最后就是需要用 $map$ 判个重，不然的话会爆炸，当然判重的时候也不要判 $L$ 。</p><h3 id="Code-Bfs"><a href="#Code-Bfs" class="headerlink" title="Code-Bfs"></a>Code-Bfs</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; vis;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BFS_maxhurt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    q.push((Node)&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;);<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">if</span>(x.D&gt;d)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x.D==d)&#123;T[++cnt]=(Data)&#123;x.F,x.D&#125;;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> T[++cnt]=(Data)&#123;x.F,x.D&#125;;</span><br><span class="line">        <span class="comment">/*第一种转移*/</span></span><br><span class="line">        <span class="keyword">if</span>(x.L&amp;&amp;(ll)x.F*x.L&lt;=<span class="number">1e8</span>&amp;&amp;!vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F*x.L,x.L)])&#123;</span><br><span class="line">            q.push((Node)&#123;x.F*x.L,x.L,x.D+<span class="number">1</span>&#125;);</span><br><span class="line">            vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F*x.L,x.L)]=x.D;<span class="comment">//标记</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*第二种转移*/</span></span><br><span class="line">        <span class="keyword">if</span>(!vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F,x.L+<span class="number">1</span>)])&#123;</span><br><span class="line">            q.push((Node)&#123;x.F,x.L+<span class="number">1</span>,x.D+<span class="number">1</span>&#125;);</span><br><span class="line">            vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F,x.L+<span class="number">1</span>)]=x.D;<span class="comment">//标记</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>抱歉我的英语真的不好</del></p><p>然后我们已经将所有可行的打伤害的方案记录到 $T​$ 数组里面了，接下来就是看看怎么用这些方案打大佬了。</p><p>首先还嘴是可以直接算的，这个是不用考虑的。我们唯一要处理的就是怼大佬，我们可以选择怼一次还是两次。可以发现怼一次的话直接枚举 $T​$ 数组中的方案即可，算上天数，剩下的天数当然是每天还嘴，看看这样可不可以干掉大佬：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)<span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>( $C$ 为当前大佬的信心值)</p><p>首先，<code>T[i].F&lt;=C</code> 是为了保证你不被虐飞，然后 <code>T[i].D&lt;=d</code> 当然就是你有足够的天数来实现这个方案，最后的 <code>C-T[i].F&lt;=d-T[i].D</code> 就是看看打完这个方案后剩下的天数能否通过仅剩的还嘴来干掉大佬。</p><p>那么如果是怼两次大佬呢？</p><p>可以发现其实跟上面差不多，设两次中一次是第 $i$ 套方案，一次是第 $j$ 套方案。那么首先这两套方案的 $F$ 的和不能超过 $C$ ，然后就是要保证剩下的天数中可以通过还嘴干掉大佬，于是我们可以列出式子：</p><script type="math/tex; mode=display">T[i].F+T[j].F \leq C \ , \ T[i].F+T[j].F+(d-T[i].D-T[j].D) \geq C​</script><p>然后前式很容易满足，我们来看看后式：</p><script type="math/tex; mode=display">T[i].F+T[j].F+d-T[i].D-T[j].D \geq C</script><script type="math/tex; mode=display">T[i].F-T[i].D+T[j].F-T[j].D+d \geq C</script><p>我们枚举一个 $i$ ，寻找 $j$ 。既然 $i$ 已经确定，最优的 $j$ 一定满足 $T[j].F-T[j].D$ 最大，取 $max$ 就好。</p><p>至于代码的问题，我们先将 $T[i]$ 按照 $F$ 排序，然后按顺序寻找 $j$ ，代码实现就不是很难了。</p><h3 id="Code-Solve"><a href="#Code-Solve" class="headerlink" title="Code-Solve:"></a>Code-Solve:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(C&lt;=d)<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//可以全程顶嘴干掉大佬，直接retrun</span></span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,mx=-inf;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">        <span class="comment">/*用第i方案怼一次可以干掉大佬，return*/</span></span><br><span class="line">        <span class="keyword">if</span>(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">/*按顺序扫描满足要求的 j*/</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;cnt&amp;&amp;T[i].F+T[l+<span class="number">1</span>].F&lt;=C)</span><br><span class="line">            l++,mx=max(mx,T[l].F-T[l].D);<span class="comment">//取max</span></span><br><span class="line">        <span class="comment">/*可以怼两次干掉大佬，return*/</span></span><br><span class="line">        <span class="keyword">if</span>(T[i].F-T[i].D+mx+d&gt;=C)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//干不掉大佬了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这个时间复杂度很玄学，大概是 $O($状态数$)$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1.5e2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,mc,a[N],w[N];</span><br><span class="line"><span class="keyword">int</span> d,dp[N][N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> F,L,D;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> F,D;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data&amp;x)<span class="keyword">const</span>&#123;<span class="keyword">return</span> F&lt;x.F;&#125;</span><br><span class="line">&#125;T[S];</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; vis;</span><br><span class="line"><span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DP_maxday</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][mc]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mc;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j]&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> t1=j-a[i+<span class="number">1</span>];<span class="keyword">if</span>(t1&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            dp[i+<span class="number">1</span>][t1]=max(dp[i+<span class="number">1</span>][t1],dp[i][j]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> t2=min(t1+w[i+<span class="number">1</span>],mc);</span><br><span class="line">            dp[i+<span class="number">1</span>][t2]=max(dp[i+<span class="number">1</span>][t2],dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mc;++j)</span><br><span class="line">            d=max(d,dp[i][j]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BFS_maxhurt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    q.push((Node)&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">if</span>(x.D&gt;d)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x.D==d)&#123;T[++cnt]=(Data)&#123;x.F,x.D&#125;;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> T[++cnt]=(Data)&#123;x.F,x.D&#125;;</span><br><span class="line">        <span class="keyword">if</span>(x.L&amp;&amp;(ll)x.F*x.L&lt;=<span class="number">1e8</span>&amp;&amp;!vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F*x.L,x.L)])&#123;</span><br><span class="line">            q.push((Node)&#123;x.F*x.L,x.L,x.D+<span class="number">1</span>&#125;);</span><br><span class="line">            vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F*x.L,x.L)]=x.D;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F,x.L+<span class="number">1</span>)])&#123;</span><br><span class="line">            q.push((Node)&#123;x.F,x.L+<span class="number">1</span>,x.D+<span class="number">1</span>&#125;);</span><br><span class="line">            vis[pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(x.F,x.L+<span class="number">1</span>)]=x.D;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(C&lt;=d)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,mx=-inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[i].F&lt;=C&amp;&amp;T[i].D&lt;=d&amp;&amp;C-T[i].F&lt;=d-T[i].D)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;cnt&amp;&amp;T[i].F+T[l+<span class="number">1</span>].F&lt;=C)</span><br><span class="line">            l++,mx=max(mx,T[l].F-T[l].D);</span><br><span class="line">        <span class="keyword">if</span>(T[i].F-T[i].D+mx+d&gt;=C)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(mc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(w[i]);</span><br><span class="line">    DP_maxday();</span><br><span class="line">    BFS_maxhurt();</span><br><span class="line">    sort(T+<span class="number">1</span>,T+cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> C;IN(C);</span><br><span class="line">        <span class="keyword">if</span>(solve(C))<span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [Violet]天使玩偶/SJY摆棋子  K-D Tree  luoguP4169/bzoj2648</title>
      <link href="/2019/03/21/%5B%E9%A2%98%E8%A7%A3%5DluoguP4169/"/>
      <url>/2019/03/21/%5B%E9%A2%98%E8%A7%A3%5DluoguP4169/</url>
      
        <content type="html"><![CDATA[<p>$KDT$ 大法好！</p><p>直接建 $KDT$ 维护一下所有的可能存在玩偶的结点，该插入的时候插入，查询的时候只需要沿着 $KDT$ 往下走，然后随时对 $ans$ 取 $min$ 即可。</p><a id="more"></a><p>注意这题有插入，这意味着 $KDT$ 到后面或许会不平衡，这个时候我们就需要用替罪羊树的思想——拍扁重建即可。注意这里判断是否平衡的 $check$ 函数需要放在 $insert$ 的最后，也就是还要在 $pushup$ 以后再 $check$ 即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> alph (0.75)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch)) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> root,ans,WD,trh[N],top,cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span><span class="keyword">int</span> x[<span class="number">2</span>];&#125;p[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mi[<span class="number">2</span>],mx[<span class="number">2</span>],l,r,sz;</span><br><span class="line">    point tp;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span> &lt; (point a,point b) &#123;<span class="keyword">return</span> a.x[WD]&lt;b.x[WD];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">new_node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top) <span class="keyword">return</span> trh[top--];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=tr[x].l,r=tr[x].r;</span><br><span class="line">    tr[x].sz=tr[l].sz+tr[r].sz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;++i) &#123;</span><br><span class="line">        tr[x].mi[i]=tr[x].mx[i]=tr[x].tp.x[i];</span><br><span class="line">        <span class="keyword">if</span>(l) &#123;</span><br><span class="line">            tr[x].mi[i]=min(tr[x].mi[i],tr[l].mi[i]);</span><br><span class="line">            tr[x].mx[i]=max(tr[x].mx[i],tr[l].mx[i]);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(r) &#123;</span><br><span class="line">            tr[x].mi[i]=min(tr[x].mi[i],tr[r].mi[i]);</span><br><span class="line">            tr[x].mx[i]=max(tr[x].mx[i],tr[r].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> wd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x=new_node(),mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    WD=wd,nth_element(p+l,p+mid,p+r+<span class="number">1</span>),tr[x].tp=p[mid];</span><br><span class="line">    tr[x].l=build(l,mid<span class="number">-1</span>,wd^<span class="number">1</span>);</span><br><span class="line">    tr[x].r=build(mid+<span class="number">1</span>,r,wd^<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> pushup(x),x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pia</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].l) pia(tr[x].l,num);</span><br><span class="line">    p[num+tr[tr[x].l].sz+<span class="number">1</span>]=tr[x].tp,trh[++top]=x;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].r) pia(tr[x].r,num+tr[tr[x].l].sz+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> wd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(alph*tr[x].sz&lt;tr[tr[x].l].sz||alph*tr[x].sz&lt;tr[tr[x].r].sz)</span><br><span class="line">        pia(x,<span class="number">0</span>),x=build(<span class="number">1</span>,tr[x].sz,wd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(point tmp,<span class="keyword">int</span>&amp;x,<span class="keyword">int</span> wd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) &#123;</span><br><span class="line">        x=new_node();</span><br><span class="line">        tr[x].tp=tmp,tr[x].l=tr[x].r=<span class="number">0</span>;</span><br><span class="line">        pushup(x);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].tp.x[wd]&lt;tmp.x[wd]) Insert(tmp,tr[x].r,wd^<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> Insert(tmp,tr[x].l,wd^<span class="number">1</span>);</span><br><span class="line">    pushup(x);check(x,wd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getdist</span><span class="params">(point tmp,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;++i)   </span><br><span class="line">        res+=max(<span class="number">0</span>,tmp.x[i]-tr[x].mx[i])+max(<span class="number">0</span>,tr[x].mi[i]-tmp.x[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(point a,point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.x[<span class="number">0</span>]-b.x[<span class="number">0</span>])+<span class="built_in">abs</span>(a.x[<span class="number">1</span>]-b.x[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(point tmp,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ans=min(ans,dist(tmp,tr[x].tp));</span><br><span class="line">    <span class="keyword">int</span> disl=inf,disr=inf;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].l) disl=getdist(tmp,tr[x].l);</span><br><span class="line">    <span class="keyword">if</span>(tr[x].r) disr=getdist(tmp,tr[x].r);</span><br><span class="line">    <span class="keyword">if</span>(disl&lt;disr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(disl&lt;ans) query(tmp,tr[x].l);</span><br><span class="line">        <span class="keyword">if</span>(disr&lt;ans) query(tmp,tr[x].r);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(disr&lt;ans) query(tmp,tr[x].r);</span><br><span class="line">        <span class="keyword">if</span>(disl&lt;ans) query(tmp,tr[x].l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,op;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(p[i].x[<span class="number">0</span>]),IN(p[i].x[<span class="number">1</span>]);</span><br><span class="line">    root=build(<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">        point tmp;</span><br><span class="line">        IN(op),IN(tmp.x[<span class="number">0</span>]),IN(tmp.x[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) Insert(tmp,root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ans=inf;query(tmp,root);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K-D Tree </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI/AHOI2018]转盘  线段树  luoguP4425</title>
      <link href="/2019/03/20/%5B%E9%A2%98%E8%A7%A3%5DluoguP4425/"/>
      <url>/2019/03/20/%5B%E9%A2%98%E8%A7%A3%5DluoguP4425/</url>
      
        <content type="html"><![CDATA[<p>首先再来讲明一下题意：</p><p>给定一个长度为 $n$ 的环，环上的每个点有一个权值 $T_i$ ，要求你从环上选中任意一个点为起点开始，每个时间可以顺时钟到下一个点，或者停留不动。对于一个点，如果到这个点的时间大于等于了 $T_i$ ，那么这个点将被标记，问最少什么时候可以让所有物品都被标记。</p><p>可以发现，这个问题的答案跟以下问题的答案是等价的：</p><a id="more"></a><p>给定一个长度为 $n​$ 的环，环上的每个点有一个权值 $T_i​$  ，要求你从环上选中任意一个点为起点开始，，开始的时间为 $t​$ ，每个时间可以逆时针到下一个点，或者停留不动。对于一个点，它将在 $T_i​$ 时间损坏 ，求一个最小的 $t​$ 使得我们能够在没有点损坏的情况下遍历所有点。</p><p>我们算一下每一个点离起点的距离，那么这个时候我们就可以在起点等，等一段时间后再出发，这样子我们转一圈就够了，这个方案显然是最优的。</p><p>我们断环为链，枚举起点 $s$ ，对于一个点 $i$ ，$s$ 到达 $i$ 的耗时显然是 $(i-s)$ ，那么我们如果想要等一段时间出发后正好标记该点，这一段等待的时间当然就是 $T_i-(i-s)$ 。我们对所有的点 $i$ 的 $T_i-(i-s)$ 取 $max$ ，最后的结果就是我们应该在 $s$ 等的时间。</p><p>那么很显然我们的答案为：</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,s+n-1]}[T_i-(i-s)] \}+n-1</script><p>$min_{s \in [1,n]}\{  max_{i \in [s,s+n-1]}[T_i-(i-s)] \}​$ 这显然是在选择一个最优的起点使得等待时间最小，$n-1​$ 就是等待完后转一圈的时间。</p><p>这个时候暴力枚举就可以得到 $30$ 分。</p><p>不过我们继续：</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,s+n-1]}[T_i-i+s] \}+n-1</script><p>我们设 $A_i$ 为 $T_i-i$  。</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,s+n-1]}[A_i+s] \}+n-1</script><p>假设现在有一对 $A_i,A_{i+n}$ ，我们可以发现 $A_{i+1}$ 是必然比 $A_i$ 小的，也就是说 $A_{s+n}$ 到 $A_{2n}$ 这一段数就算算进来也造不成影响。</p><p>也就是说原式跟这个式子是等价的：</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,2n]}[A_i+s] \}+n-1</script><p>发现 $max$ 里面 $s$ 并没有什么卵用，直接提出来。</p><script type="math/tex; mode=display">Ans=min_{s \in [1,n]}\{  max_{i \in [s,2n]}A_i +s\}+n-1​</script><p>这个的话……因为 $A_i$ 的值跟 $s$ 没有关系……所以……所以我们可以预处理一个 $ST$ 表……嗯……然后枚举 $s$ ……结果我们是 $O(n)$ 搞定？？？</p><p>哦哦哦作者脑抽了，这题是待修改的。</p><p>不过没关系，我们还有出路。</p><p>现在考虑用线段树来维护，假设结点 $x$ 代表的区间为 $l,r$ ，维护一个 $val[x]$ 表示区间 $[l,r]$ 中 $A_i$ 的最大值，这个是线段树基本操作不再赘述，然后再维护一个 $ans[x]$ 表示区间 $min_{s \in [l,mid]}\{  max_{i \in [s,r]} \}$ 。$1$ 号结点的区间为 $1,2n$ ，我们的答案就是 $ans[1]$ 。</p><p>那么怎么上传 $ans$ 呢。</p><p>我们对于 $[mid,r]$ 区间的最大值 $A_x$ ，这个 $A_x$ 显然可以 $O(1)$ 求出，然后再找到一个 $A_y$ ，表示当 $s$ 为 $y$ 的时候，整个 $[s,r]$ 的 $A_i$ 的最大值为 $A_x$ 。在寻找 $y$ 的时候顺便更新一下 $s\in [l,y-1]$ 的区间的答案就好。</p><p>当 $s\in [y,r]​$ 的时候答案明显为 $A_x+s​$ ，要满足最小嘛。</p><p>有关这一部分的代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Ax)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[k],Ax);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Ax)<span class="keyword">return</span> min(calc(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Ax),ans[k&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> min(calc(k&lt;&lt;<span class="number">1</span>,l,mid,Ax),(mid+<span class="number">1</span>)+Ax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来剖析一下代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Ax)</span></span>&#123;</span><br></pre></td></tr></table></figure><p>这一句表示当前的结点为 $k$ ，$k$ 代表的区间为 $l,r$ ，$Ax$ 为上文中的 $A_x$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[k],Ax);</span><br></pre></td></tr></table></figure><p>这个显然就是找到了 $y$ ，这个时候答案为 $A_x+s$ ，上文也讲了，这里的 $s$ 就是 $y$ 的位置，$A_x$ 已经在函数中了直接调用就好。但是为什么要取 $max$ 呢？<strong>因为怕 $A_y$ 是大于 $A_x$ 的!</strong> ，所以加个 $max$ 就好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(val[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Ax)<span class="keyword">return</span> min(calc(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Ax),ans[k&lt;&lt;<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>这个就是当前结点的右区间有比 $A_x$ 大的数，那么这个时候 $y$ 就不可能到左区间去了，不然的话 $[y,r]$ 中 $max\{A_i\}$ 就不是 $A_x$ 了，所以我们往右子树走。这个时候可以发现 $s$ 属于左区间的时候的答案为 $ans[k&lt;&lt;1]$ ，顺带更新一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> min(calc(k&lt;&lt;<span class="number">1</span>,l,mid,Ax),(mid+<span class="number">1</span>)+Ax);</span><br></pre></td></tr></table></figure><p>这个时候 $y$ 就是在左区间了，那么我们往左区间走，右区间的答案呢？右区间为 $[mid,r]$ ，显然这一段的最大值肯定都为 $A_x$ ——包括 $mid+1$ ，所以不要跟 $mid+1$ 取一下 $max$ 了——尽管第一句是与 $A_y$ 取了 $max$ 的。</p><p>这个时候因为要 $s$ 尽量的小，所以就是右区间的左端点——$mid+1$ 了。</p><p>这个时候 $pushup$ 就应该这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    val[x]=max(val[x&lt;&lt;<span class="number">1</span>],val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ans[x]=calc(x&lt;&lt;<span class="number">1</span>,l,mid,val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p,lastans,a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg_Tree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> ans[N&lt;&lt;<span class="number">2</span>],val[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Mx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[x],Mx);</span><br><span class="line">        <span class="keyword">if</span>(val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Mx)<span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Mx),ans[x]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>,l,mid,Mx),mid+<span class="number">1</span>+Mx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        val[x]=max(val[x&lt;&lt;<span class="number">1</span>],val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">        ans[x]=calc(x&lt;&lt;<span class="number">1</span>,l,mid,val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;<span class="keyword">return</span>;&#125;</span><br><span class="line">        build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(x,l,r);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)updata(x&lt;&lt;<span class="number">1</span>,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid)updata(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">        pushup(x,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]),a[i+n]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>);++i)a[i]-=i;</span><br><span class="line">    T.build(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    lastans=T.ans[<span class="number">1</span>]+n<span class="number">-1</span>,<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="keyword">if</span>(p)x^=lastans,y^=lastans;</span><br><span class="line">        a[x]=y-x,a[x+n]=y-x-n;</span><br><span class="line">        T.updata(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>),x),T.updata(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>),x+n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans=T.ans[<span class="number">1</span>]+n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这份代码是 <strong>TLE</strong> 的。</p><p>这玩意坑了我好久，你知道为什么 <strong>TLE</strong> 吗？</p><p><strong>就是这个鬼东西！：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br></pre></td></tr></table></figure><p>这里的 $x$ 和 $y$ 是调用了两次的，然后我们发现 $calc$ 函数……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Mx)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[x],Mx);</span><br><span class="line">    <span class="keyword">if</span>(val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Mx)<span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Mx),ans[x]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>,l,mid,Mx),mid+<span class="number">1</span>+Mx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$min$ 里面有 $calc$ 函数………..然后 $calc$ 函数调用了两次……….然后………..爆炸！</p><p><del>所以 $Qiuly$ 提醒您：代码千万条，时间第一条，$define$ 不规范，$OIer$ 两行泪 。</del></p><p><del>还是跟着 $std$ 走好嘿嘿嘿，$using\ namespace\ std$ 万岁！</del></p><p>最终 $AC$ 的代码。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p,lastans,a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg_Tree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> ans[N&lt;&lt;<span class="number">2</span>],val[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Mx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(val[x],Mx);</span><br><span class="line">        <span class="keyword">if</span>(val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=Mx)<span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,Mx),ans[x]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(calc(x&lt;&lt;<span class="number">1</span>,l,mid,Mx),mid+<span class="number">1</span>+Mx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        val[x]=max(val[x&lt;&lt;<span class="number">1</span>],val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">        ans[x]=calc(x&lt;&lt;<span class="number">1</span>,l,mid,val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;<span class="keyword">return</span>;&#125;</span><br><span class="line">        build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(x,l,r);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;val[x]=a[l],ans[x]=a[l]+l;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)updata(x&lt;&lt;<span class="number">1</span>,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid)updata(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">        pushup(x,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]),a[i+n]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>);++i)a[i]-=i;</span><br><span class="line">    T.build(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    lastans=T.ans[<span class="number">1</span>]+n<span class="number">-1</span>,<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="keyword">if</span>(p)x^=lastans,y^=lastans;</span><br><span class="line">        a[x]=y-x,a[x+n]=y-x-n;</span><br><span class="line">        T.updata(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>),x),T.updata(<span class="number">1</span>,<span class="number">1</span>,(n&lt;&lt;<span class="number">1</span>),x+n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans=T.ans[<span class="number">1</span>]+n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 历史研究  回滚莫队  luoguAT1219</title>
      <link href="/2019/03/20/%5B%E9%A2%98%E8%A7%A3%5DluoguAT1219/"/>
      <url>/2019/03/20/%5B%E9%A2%98%E8%A7%A3%5DluoguAT1219/</url>
      
        <content type="html"><![CDATA[<p>回滚莫队板子题，在此不再赘述。</p><p>关于回滚莫队的文章戳这 $QwQ$ :<a href="https://monlights.github.io/2019/03/08/[算法]莫队&amp;树上莫队/" target="_blank" rel="noopener">[算法]浅谈4种莫队及例题</a></p><a id="more"></a><p>可以算作一个回滚莫队的板子来参考。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,block,a[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MO&#123;</span><br><span class="line">    ll ans,Ans[N];</span><br><span class="line">    <span class="keyword">int</span> v[N],b[N],blo[N],cnt[N],hep[N];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span><span class="keyword">int</span> l,r,id;&#125;q[N];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query x,Query y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blo[x.l]==blo[y.l]?x.r&lt;y.r:blo[x.l]&lt;blo[y.l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">roll</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;--cnt[b[pos]];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        ++cnt[b[pos]];</span><br><span class="line">        ans=max(ans,<span class="number">1l</span>l*a[pos]*cnt[b[pos]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)hep[b[i]]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">            ++hep[b[i]];</span><br><span class="line">            res=max(res,<span class="number">1l</span>l*a[i]*hep[b[i]]);</span><br><span class="line">        &#125;<span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> bloid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L=min(block*bloid,n);</span><br><span class="line">        <span class="keyword">int</span> i=num,l=L+<span class="number">1</span>,r=l<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;++k)cnt[k]=<span class="number">0</span>;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;blo[q[i].l]==bloid;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(blo[q[i].l]==blo[q[i].r])&#123;</span><br><span class="line">                Ans[q[i].id]=query(q[i].l,q[i].r);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(r&lt;q[i].r)add(++r);</span><br><span class="line">            ll tmp=ans;</span><br><span class="line">            <span class="keyword">while</span>(l&gt;q[i].l)add(--l);</span><br><span class="line">            Ans[q[i].id]=ans;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;L+<span class="number">1</span>)roll(l++);</span><br><span class="line">            ans=tmp;</span><br><span class="line">        &#125;<span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sort(v+<span class="number">1</span>,v+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">int</span> tot=unique(v+<span class="number">1</span>,v+<span class="number">1</span>+n)-(v+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            b[i]=lower_bound(v+<span class="number">1</span>,v+<span class="number">1</span>+tot,a[i])-v;</span><br><span class="line">        sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m,cmp);</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=blo[n];++i)num=solve(num,i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Ans[i]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> MO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);block=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]),v[i]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)blo[i]=(i<span class="number">-1</span>)/block+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        IN(q[i].l),IN(q[i].r);</span><br><span class="line">        q[i].id=i;</span><br><span class="line">    &#125;<span class="keyword">return</span> Main(),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [AH2017/HNOI2017]礼物  FFT  luoguP3723/bzoj4827</title>
      <link href="/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4827/"/>
      <url>/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4827/</url>
      
        <content type="html"><![CDATA[<p><del>题目背景有些……………</del><br>通过题目我们可以知道最终我们要求的式子就是：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}(a_i+c-b_i)^2</script><p>于是我们将式子拆开：</p><script type="math/tex; mode=display">(a_i+c-b_i)^2=a_i^2+b_i^2+c^2+2a_ic-2b_ic-2a_ib_i</script><a id="more"></a><script type="math/tex; mode=display">\sum_{i=1}^{n}(a_i+c-b_i)^2=\sum_{i=1}^{n}a_i^2+\sum_{i=1}^{n}b_i^2+nc^2+2c(\sum_{i=1}^{n}a_i-\sum_{i=1}^{n}b_i)-2\sum_{i=1}^{n}a_ib_i​</script><p>前面的这些都很容易求出，但是最后的 $\sum_{i=1}^{n}a_ib_i​$ 无法很快算出，我们算答案的时候枚举 $c​$ 以及手环旋转了多少，这个时候如果在里面直接大力计算 $\sum_{i=1}^{n}a_ib_i​$ 可以拿到 $30​$ 分。如果将这个式子在之前拿出来预处理一下，将会拿到 $70​$ 分。</p><p>这个时候将 $a_i$ 反向，式子变为：$\sum_{i=1}^{n}a_{n-i+1}b_i$ ，可以发现这是一个卷积，是可以用 $FFT$ 跑的，众所周知 $FFT$ 的复杂度是 $O(nlogn)$ ，是能跑过的。</p><p>具体实现的时候我们需要将 $a​$ 拉成两倍长，或者说是断环为链？至于为什么的话，是因为题目要求了这个数列是可以旋转的。然后按照上式将 $b​$ 反向就好了。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,limit=<span class="number">1</span>,a[N],b[N],filp[N];</span><br><span class="line">ll a1=<span class="number">0</span>,a2=<span class="number">0</span>,b1=<span class="number">0</span>,b2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">complex</span> A[N],B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;filp[i])&#123;<span class="keyword">complex</span> tmp=f[i];f[i]=f[filp[i]];f[filp[i]]=tmp;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>;p&lt;=limit;p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> len=p/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;limit;k+=p)&#123;</span><br><span class="line">            <span class="keyword">complex</span> buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l=k;l&lt;k+len;++l)&#123;</span><br><span class="line">                <span class="keyword">complex</span> t=buf*f[len+l];</span><br><span class="line">                f[len+l]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(a[i]),a1+=a[i]*a[i],a2+=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        IN(b[i]),b1+=b[i]*b[i],b2+=b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        A[i].x=A[i+n].x=a[i],B[i]=b[n-i+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(limit&lt;=(<span class="number">3</span>*n))limit&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?limit&gt;&gt;<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    FFT(A,<span class="number">1</span>),FFT(B,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=limit;++i)A[i]=A[i]*B[i];</span><br><span class="line">    FFT(A,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=limit;++i)A[i].x=(ll)(A[i].x/limit+<span class="number">0.5</span>);</span><br><span class="line">    ll ans=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=-m;j&lt;=m;++j)</span><br><span class="line">            ans=min(ans,a1+b1+<span class="number">1l</span>l*j*j*n+<span class="number">2l</span>l*j*(a2-b2)<span class="number">-2l</span>l*(ll)A[i+n].x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [AH2017/HNOI2017]单旋  线段树  luoguP3721/bzoj4825</title>
      <link href="/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4825/"/>
      <url>/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4825/</url>
      
        <content type="html"><![CDATA[<p>$Spaly​$ 是不会用的，这辈子也不会用的。</p><p>这道题当然可以用 $Splay​$ 做，然而不会。</p><p>于是考虑怎么来做这道题，我们先来观察一下所有的操作：</p><a id="more"></a><h5 id="1-插入操作：很普通的插入操作……"><a href="#1-插入操作：很普通的插入操作……" class="headerlink" title="1.插入操作：很普通的插入操作……"></a>1.插入操作：很普通的插入操作……</h5><h5 id="2-单旋最小值："><a href="#2-单旋最小值：" class="headerlink" title="2.单旋最小值："></a>2.单旋最小值：</h5><p><img src="/2019/03/15/[题解]bzoj4825/A.png" alt=""></p><p>结点的深度的变化如下：</p><ul><li>需要旋转的结点 $(4)$ ：变为 $root$ ，深度变为 $1$ 。</li><li>需要旋转的结点的子树 $(7)$ ：深度不变。</li><li>其他结点 $(1,2,3,5,6)$ ：深度加 $1$ 。</li></ul><h5 id="3-单旋最大值："><a href="#3-单旋最大值：" class="headerlink" title="3.单旋最大值："></a>3.单旋最大值：</h5><p>变化和上面的 “单旋最小值” 一样。</p><h5 id="4-5-删除最大-最小值"><a href="#4-5-删除最大-最小值" class="headerlink" title="4.5 删除最大/最小值"></a>4.5 删除最大/最小值</h5><p>先将需要删除的 最大/最小值 转到树根，这个时候我们将树根删掉，可以发现整棵树的深度全部都减了 $1$ ，一起计算上旋转造成的深度的影响会得到：</p><ul><li>删掉的结点的子树 $(7)$ ：深度减 $1$</li><li>其他节点 $(1,2,3,5,6)$ ：深度不变</li></ul><p>发现深度的变化也不是很大，于是我们考虑用线段树维护每一个节点的深度。<br>线段树不易寻找最大/最小值，这个地方我们用 $set$ 来辅助即可，操作的时候更新一下 $set$ 中树的形态就好。</p><p>线段树的要求很低，一个很普通的兹磁区间修改的线段树即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> dep[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[x])&#123;</span><br><span class="line">            dep[x&lt;&lt;<span class="number">1</span>]+=dep[x],dep[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=dep[x],dep[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;dep[x]+=res;<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)add(x&lt;&lt;<span class="number">1</span>,l,mid,L,R,res);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)add(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;dep[x]=res;<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)change(x&lt;&lt;<span class="number">1</span>,l,mid,pos,res);</span><br><span class="line">        <span class="keyword">else</span> change(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> dep[x];</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)<span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br></pre></td></tr></table></figure><h5 id="1-插入操作的实现："><a href="#1-插入操作的实现：" class="headerlink" title="1.插入操作的实现："></a>1.插入操作的实现：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; Spaly;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=Spaly.insert(x).first;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;<span class="comment">//还没有树根</span></span><br><span class="line">        T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);<span class="comment">//修改x的深度</span></span><br><span class="line">        root=x;<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//深度为1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(it!=Spaly.begin())&#123;<span class="comment">//不是最小值，所以可能成为其他结点的右儿子</span></span><br><span class="line">        <span class="keyword">if</span>(!ch[*--it][<span class="number">1</span>])ch[fa[x]=*it][<span class="number">1</span>]=x;<span class="comment">//成为右儿子</span></span><br><span class="line">        *it++;<span class="comment">//维持it不变</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fa[x])ch[fa[x]=*++it][<span class="number">0</span>]=x;<span class="comment">//成为右儿子失败，于是成为左儿子</span></span><br><span class="line">    <span class="keyword">int</span> dep_x=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,fa[x])+<span class="number">1</span>;<span class="comment">//x的深度就是它父节点的深度加1</span></span><br><span class="line">    T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,dep_x);<span class="comment">//在线段树中修改x的深度</span></span><br><span class="line">    <span class="keyword">return</span> dep_x;<span class="comment">//题目要求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-单旋最小-最大值的实现："><a href="#2-单旋最小-最大值的实现：" class="headerlink" title="2.单旋最小/最大值的实现："></a>2.单旋最小/最大值的实现：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rotate_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=*Spaly.begin(),ans=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,x);<span class="comment">//获取当前的最小值和需要返回的答案</span></span><br><span class="line">    <span class="keyword">if</span>(x==root)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//是根就直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(x+<span class="number">1</span>&lt;fa[x])T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,x+<span class="number">1</span>,fa[x]<span class="number">-1</span>,<span class="number">-1</span>);<span class="comment">//x有子树，先给x的子树的深度整体减1</span></span><br><span class="line">    T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">1</span>);<span class="comment">//整棵树深度加1，这个时候x的子树深度不变了</span></span><br><span class="line">    ch[fa[x]][<span class="number">0</span>]=ch[x][<span class="number">1</span>],fa[ch[x][<span class="number">1</span>]]=fa[x];<span class="comment">//将x的子树接到x的父亲上</span></span><br><span class="line">    ch[x][<span class="number">1</span>]=root,fa[root]=x,root=x;<span class="comment">//更新root</span></span><br><span class="line">    T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);<span class="comment">//修改x的深度，变为1</span></span><br><span class="line">    <span class="keyword">return</span> ans;<span class="comment">//题目要求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rotate_max</span><span class="params">()</span></span>&#123;<span class="comment">//与上面的Rotate_min操作同理</span></span><br><span class="line">    <span class="keyword">int</span> x=*Spaly.rbegin(),ans=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,x);</span><br><span class="line">    <span class="keyword">if</span>(x==root)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x<span class="number">-1</span>&gt;fa[x])T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,fa[x]+<span class="number">1</span>,x<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">    T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">1</span>);</span><br><span class="line">    ch[fa[x]][<span class="number">1</span>]=ch[x][<span class="number">0</span>],fa[ch[x][<span class="number">0</span>]]=fa[x];</span><br><span class="line">    ch[x][<span class="number">0</span>]=root,fa[root]=x,root=x;</span><br><span class="line">    T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-删除最小-最大值的实现："><a href="#3-删除最小-最大值的实现：" class="headerlink" title="3.删除最小/最大值的实现："></a>3.删除最小/最大值的实现：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rotate_min());<span class="comment">//先旋上来，按照题目要求输出</span></span><br><span class="line">    T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">-1</span>);<span class="comment">//整棵树的深度发生变化</span></span><br><span class="line">    Spaly.erase(root),root=ch[root][<span class="number">1</span>],fa[root]=<span class="number">0</span>;<span class="comment">//更新root</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete_max</span><span class="params">()</span></span>&#123;<span class="comment">//与上面的Delete_min操作同理</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rotate_max());</span><br><span class="line">    T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">-1</span>);</span><br><span class="line">    Spaly.erase(root),root=ch[root][<span class="number">0</span>],fa[root]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,tmp,v[N],a[N],op[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">int</span> dep[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[x])&#123;</span><br><span class="line">            dep[x&lt;&lt;<span class="number">1</span>]+=dep[x],dep[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=dep[x],dep[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;dep[x]+=res;<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)add(x&lt;&lt;<span class="number">1</span>,l,mid,L,R,res);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)add(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;dep[x]=res;<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)change(x&lt;&lt;<span class="number">1</span>,l,mid,pos,res);</span><br><span class="line">        <span class="keyword">else</span> change(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> dep[x];</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)<span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Spaly_Tree</span>&#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; Spaly;</span><br><span class="line">    <span class="keyword">int</span> root,fa[N],ch[N][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=Spaly.insert(x).first;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);</span><br><span class="line">            root=x;<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(it!=Spaly.begin())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[*--it][<span class="number">1</span>])ch[fa[x]=*it][<span class="number">1</span>]=x;</span><br><span class="line">            *it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!fa[x])ch[fa[x]=*++it][<span class="number">0</span>]=x;</span><br><span class="line">        <span class="keyword">int</span> dep_x=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,fa[x])+<span class="number">1</span>;</span><br><span class="line">        T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,dep_x);</span><br><span class="line">        <span class="keyword">return</span> dep_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rotate_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=*Spaly.begin(),ans=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,x);</span><br><span class="line">        <span class="keyword">if</span>(x==root)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x+<span class="number">1</span>&lt;fa[x])T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,x+<span class="number">1</span>,fa[x]<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">        T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">1</span>);</span><br><span class="line">        ch[fa[x]][<span class="number">0</span>]=ch[x][<span class="number">1</span>],fa[ch[x][<span class="number">1</span>]]=fa[x];</span><br><span class="line">        ch[x][<span class="number">1</span>]=root,fa[root]=x,root=x;</span><br><span class="line">        T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rotate_max</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=*Spaly.rbegin(),ans=T.query(<span class="number">1</span>,<span class="number">1</span>,tmp,x);</span><br><span class="line">        <span class="keyword">if</span>(x==root)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x<span class="number">-1</span>&gt;fa[x])T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,fa[x]+<span class="number">1</span>,x<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">        T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">1</span>);</span><br><span class="line">        ch[fa[x]][<span class="number">1</span>]=ch[x][<span class="number">0</span>],fa[ch[x][<span class="number">0</span>]]=fa[x];</span><br><span class="line">        ch[x][<span class="number">0</span>]=root,fa[root]=x,root=x;</span><br><span class="line">        T.change(<span class="number">1</span>,<span class="number">1</span>,tmp,x,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rotate_min());</span><br><span class="line">        T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">-1</span>);</span><br><span class="line">        Spaly.erase(root),root=ch[root][<span class="number">1</span>],fa[root]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete_max</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Rotate_max());</span><br><span class="line">        T.add(<span class="number">1</span>,<span class="number">1</span>,tmp,<span class="number">1</span>,tmp,<span class="number">-1</span>);</span><br><span class="line">        Spaly.erase(root),root=ch[root][<span class="number">0</span>],fa[root]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=m;++i)&#123;</span><br><span class="line">        IN(op[i]);</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">1</span>)IN(x),v[++tmp]=a[i]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(v+<span class="number">1</span>,v+<span class="number">1</span>+tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">1</span>)a[i]=<span class="built_in">std</span>::lower_bound(v+<span class="number">1</span>,v+<span class="number">1</span>+tmp,a[i])-v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,S.Insert(a[i]));</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,S.Rotate_min());</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,S.Rotate_max());</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">4</span>)S.Delete_min();</span><br><span class="line">        <span class="keyword">if</span>(op[i]==<span class="number">5</span>)S.Delete_max();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [AH2017/HNOI2017]影魔  线段树  luoguP3722/bzoj4826</title>
      <link href="/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4826/"/>
      <url>/2019/03/15/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4826/</url>
      
        <content type="html"><![CDATA[<p>真心巧妙，不看题解准做不出<del>(之前题解都看不懂QwQ)</del></p><p>这道题貌似有许多的做法，都不费，主席树的话不知道怎么搞，于是建了 $3$ 棵线段树，实测是不会炸的。</p><a id="more"></a><h3 id="30分做法："><a href="#30分做法：" class="headerlink" title="30分做法："></a>30分做法：</h3><hr><p>小学生都能轻易想出来的解法，对于一个询问的区间，暴力枚举其子区间，然后按照题面的要求算贡献，区间最大值可以用 $ST$ 表预处理，复杂度爆炸，但是仍然可以拿到 $30$ 暴力分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">23</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[N],n,m,p1,p2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ST</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> logs[N],f[N][LogN+<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logs[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            f[i][<span class="number">0</span>]=v[i],logs[i]=logs[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=LogN;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">                f[i][j]=max(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=logs[y-x+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> max(f[x][ans],f[y-(<span class="number">1</span>&lt;&lt;ans)+<span class="number">1</span>][ans]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),IN(p1),IN(p2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(v[i]);</span><br><span class="line">    T.make();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r,ans=<span class="number">0</span>;</span><br><span class="line">        IN(l),IN(r);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a=l;a&lt;=r;++a)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> b=a+<span class="number">2</span>;b&lt;=r;++b)&#123;</span><br><span class="line">                <span class="keyword">int</span> sum=T.query(a+<span class="number">1</span>,b<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">if</span>(v[a]&gt;=sum&amp;&amp;v[b]&gt;=sum)ans+=p1;</span><br><span class="line">                <span class="keyword">if</span>((v[a]&lt;sum&amp;&amp;sum&lt;v[b])||(v[b]&lt;sum&amp;&amp;sum&lt;v[a]))ans+=p2;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+(r-l)*p1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="100分做法"><a href="#100分做法" class="headerlink" title="100分做法"></a>100分做法</h3><hr><p>对于一个点 $i$ ，我们设 $lmax[i]$ 为 <strong>$i$ 向左走遇到的第一个大于自己的数</strong>(没有的话为 $0$) ，同样的，设 $rmax[i]$ 为 <strong>$i$ 向右走遇到的第一个大于自己的数</strong>(没有的话为 $n+1$) 。这两个数组比较容易求出，搞个单调栈求就好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top=<span class="number">0</span>,<span class="built_in">stack</span>[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">    <span class="keyword">while</span>(top&amp;&amp;k[<span class="built_in">stack</span>[top]]&lt;k[i])--top;</span><br><span class="line">    lmax[i]=<span class="built_in">stack</span>[top],<span class="built_in">stack</span>[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line">top=<span class="number">0</span>,<span class="built_in">stack</span>[<span class="number">0</span>]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">    <span class="keyword">while</span>(top&amp;&amp;k[<span class="built_in">stack</span>[top]]&lt;k[i])--top;</span><br><span class="line">    rmax[i]=<span class="built_in">stack</span>[top],<span class="built_in">stack</span>[++top]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后可以发现，如果枚举点 $i$ 的话，有了上面的两个数组后有关 $i$ 的贡献就好求些了，首先我们可以知道 $i$ 是区间 $[lmax[i]+1,rmax[i]-1]$ 的最大值，那么对于每种贡献：</p><ul><li>如果 $lmax[i]$ 和 $rmax[i]$ 都在当前询问区间内，那么就可以做出 $p_1$ 的贡献。</li><li>如果 $lmax[i]$ 在当前询问区间中，那么显然 $lmax[i]$ 为区间 $[lmax[i],rmax[i]-1]$ 的最大值，这个时候右端点如果在 $[i+1,rmax[i]-1]$ 区间中，那么可以保证右端点不是 $[lmax[i],rmax[i]-1]$ 的次大值，这个时候可以产生多个 $p_2$ 的贡献。</li><li>如果 $rmax[i]$ 在当前询问区间中，那么显然当左端点为 $[lmax[i]+1,i-1]$ 的时候该子区间均能产生 $p_2$ 的贡献，原因跟上面一样的。</li></ul><p>但是这样的话复杂度依旧是 $O(n^2)$ 的，所以还要优化。</p><p>考虑用线段树维护，我们离线处理询问，把每个询问按左端点排个序，然后反着扫一遍，如果遇到了一个点 $x$ ，它是 某个点/某些点 的 $lmax$ ，假设 $x$ 是 $i$ 的 $lmax$ ，那么我们依次在第一颗线段树中实现区间加：将 $[i+1,rmax[i]-1]$ 区间正题加上 $p_2$ ，因为当前的左端点为 $x$ ，这个时候我们将要计算的是所有的左端点为 $x$ 的区间对答案的贡献，因为对于 $i$ 来说右端点的范围就是  $[i+1,rmax[i]-1]$，这些区间均可以做出贡献，于是都在线段树中加上。当然在做贡献的之前不要忘记判断 $i+1&lt;rmax[i]$ ，如果不满足的话就没有右端点了……</p><p>那么接下来讨论怎么计算 $p_1$ 的贡献，对于询问区间来说，现在我们确定了左端点为 $x$ ，这个时候当右端点落在 $[rmax[i],n+1]$ 的时候询问区间都可以算上 $[lmax[i],rmax[i]]$ 区间的贡献，也就是 $p_1$ 的贡献，于是我们可以在另一个线段树中将 $[rmax[i],n+1]$ 全都加上 $p_1$ 即可。</p><p>按照上面的方法，再正着扫一遍计算 $rmax$ 的情况就好，当然反着扫的时候就不要算 $p_1$ 的贡献了，不然就会重复了，想想就可以明白。最后就是一定要开 $longlong$ 。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg_Tree</span>&#123;</span><span class="comment">//线段树板子</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    ll v[N&lt;&lt;<span class="number">2</span>];<span class="keyword">int</span> tag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tag[x])&#123;</span><br><span class="line">            tag[x&lt;&lt;<span class="number">1</span>]+=tag[x],tag[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=tag[x];</span><br><span class="line">            v[x&lt;&lt;<span class="number">1</span>]+=tag[x]*(mid-l+<span class="number">1</span>),v[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=tag[x]*(r-mid);</span><br><span class="line">        &#125;tag[x]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;v[x]+=r-l+<span class="number">1</span>,++tag[x];<span class="keyword">return</span>;&#125;</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)updata(x&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)updata(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">        v[x]=v[x&lt;&lt;<span class="number">1</span>]+v[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class="keyword">return</span> v[x];</span><br><span class="line">        pushdown(x,l,r);</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)ans+=query(x&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)ans+=query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;st1,st2,st3;<span class="comment">//三棵线段树[滑稽]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k[N];ll p1,p2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span><span class="keyword">int</span> l,r;ll ans;&#125;q[N];</span><br><span class="line"><span class="keyword">int</span> lmax[N],rmax[N],<span class="built_in">stack</span>[N],top;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; li[N],ri[N],lq[N],rq[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Pre_lmax_rmax()&#123;</span><br><span class="line">    top=<span class="number">0</span>,<span class="built_in">stack</span>[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;k[<span class="built_in">stack</span>[top]]&lt;k[i])--top;</span><br><span class="line">        lmax[i]=<span class="built_in">stack</span>[top],li[<span class="built_in">stack</span>[top]].push_back(i);<span class="comment">//统计上文中的x</span></span><br><span class="line">        <span class="built_in">stack</span>[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    top=<span class="number">0</span>,<span class="built_in">stack</span>[<span class="number">0</span>]=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;k[<span class="built_in">stack</span>[top]]&lt;k[i])--top;</span><br><span class="line">        rmax[i]=<span class="built_in">stack</span>[top],ri[<span class="built_in">stack</span>[top]].push_back(i);</span><br><span class="line">        <span class="built_in">stack</span>[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("code.in","r",stdin);</span></span><br><span class="line">    IN(n),IN(m),IN(p1),IN(p2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(k[i]);</span><br><span class="line">    _Pre_lmax_rmax();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        IN(q[i].l),lq[q[i].l].push_back(i);</span><br><span class="line">        IN(q[i].r),rq[q[i].r].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;li[i].size();++j)&#123;<span class="comment">//计算左端点在i的区间的贡献</span></span><br><span class="line">            <span class="keyword">if</span>(li[i][j]+<span class="number">1</span>&lt;rmax[li[i][j]])</span><br><span class="line">                st1.updata(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,li[i][j]+<span class="number">1</span>,rmax[li[i][j]]<span class="number">-1</span>);</span><br><span class="line">            st3.updata(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,rmax[li[i][j]],n+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lq[i].size();++j)&#123;<span class="comment">//统计左端点在i的询问区间的答案</span></span><br><span class="line">            q[lq[i][j]].ans+=st1.query(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,i,q[lq[i][j]].r)*p2;</span><br><span class="line">            q[lq[i][j]].ans+=st3.query(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,q[lq[i][j]].r,q[lq[i][j]].r)*p1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ri[i].size();++j)</span><br><span class="line">            <span class="keyword">if</span>(ri[i][j]<span class="number">-1</span>&gt;lmax[ri[i][j]])</span><br><span class="line">                st2.updata(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,lmax[ri[i][j]]+<span class="number">1</span>,ri[i][j]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;rq[i].size();++j)</span><br><span class="line">            q[rq[i][j]].ans+=st2.query(<span class="number">1</span>,<span class="number">0</span>,n+<span class="number">1</span>,q[rq[i][j]].l,i)*p2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)<span class="comment">//输出答案，不要忘了漏统计的长度为2的区间</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,q[i].ans+<span class="number">1l</span>l*(q[i].r-q[i].l)*p1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI2016]序列  莫队+ST表  luoguP3246</title>
      <link href="/2019/03/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP3246/"/>
      <url>/2019/03/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP3246/</url>
      
        <content type="html"><![CDATA[<p>一道莫队……….</p><p>最主要的就是怎么从当前区间推到相邻区间。</p><p>假设当前区间为 $[l,r]$ ，目标区间为 $[l,r+1]$ 。那么很显然这样子就会增加：</p><script type="math/tex; mode=display">[l,r+1],[l+1,r+1],[l+2,r+1]\cdots \cdots</script><p>这些区间，现在我们要做的就是尽快的算出这些区间的答案。</p><a id="more"></a><p>假设 $p$ 为区间 $[l,r+1]$ 的最小值的位置，那么在上面的区间中，$[l,r+1] \cdots [p,r+1]$ 这些区间显然都包含了 $p$ ，也就是说这些区间的最小值都为 $p$ ，那么这一段区间的贡献显然为 $a[p]\cdot (p-l+1)$ ，其中 $a[p]$ 为 $p$ 位置上的权值。</p><p>很显然我们可以预处理一个 $ST$ 表，通过 $ST$ 表上面的 $p$ 就可以 $O(1)$ 求出。</p><p>然后接下来考虑剩下的 $[p+1,r+1]\cdots [r+1,r+1]$ 这些区间。</p><p>我们设 $f[i][j]$ 表示右端点为 $j$ ，左端点的位置在 $[i,j]$ 范围内的所有区间所造成的贡献。</p><p>我们可以用单调栈预处理出位置 $i$ 的 $lmin$ 和 $rmin$ ，$lmin[i]$ 表示 $i$ 往左走遇到的第一个比 $i$ 小的数的位置，$rmin$ 同理。</p><p>那么我们很轻易的可以得到：</p><script type="math/tex; mode=display">f[i][j]=f[i][lmin_j-1]+a[lmin_j]\cdot (j-lmin_j)</script><p>发现 $i$ 是没有影响的，于是我们将 $i$ 丢掉。</p><script type="math/tex; mode=display">f[j]=f[lmin_j-1]+a[lmin_j]\cdot (j-lmin_j)</script><p>这个式子 $DP$ 与处理一下就好了。</p><p>那么最后我们从 $[l,r]$ 移向 $[l,r+1]$ 产生的贡献为：</p><script type="math/tex; mode=display">a[p]\cdot (p-l+1) + f[r+1]-f[p]</script><p>至于为什么要减去 $f[p]$ ，差不多是容斥的道理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,block,a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MO</span>&#123;</span><span class="keyword">int</span> l,r,id;&#125;q[N];</span><br><span class="line"><span class="keyword">int</span> top,<span class="built_in">stack</span>[N],lmin[N],rmin[N];</span><br><span class="line">ll res,Ans[N],fl[N],fr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(MO a,MO b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.l/block==b.l/block?a.l/block&amp;<span class="number">1</span>?a.r&lt;b.r:a.r&gt;b.r:a.l/block&lt;b.l/block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ST&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">23</span>;</span><br><span class="line">    <span class="keyword">int</span> logs[N],f[N][LogN+<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logs[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            f[i][<span class="number">0</span>]=i,logs[i]=logs[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=logs[n];++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">                f[i][j]=a[f[i][j<span class="number">-1</span>]]&lt;a[f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]]?f[i][j<span class="number">-1</span>]:f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=logs[y-x+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[f[x][ans]]&lt;a[f[y-(<span class="number">1</span>&lt;&lt;ans)+<span class="number">1</span>][ans]]?f[x][ans]:f[y-(<span class="number">1</span>&lt;&lt;ans)+<span class="number">1</span>][ans];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __Pre_lmin_rmin()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;a[<span class="built_in">stack</span>[top]]&gt;a[i])</span><br><span class="line">            rmin[<span class="built_in">stack</span>[top--]]=i;</span><br><span class="line">        lmin[i]=<span class="built_in">stack</span>[top],<span class="built_in">stack</span>[++top]=i;</span><br><span class="line">    &#125;<span class="keyword">while</span>(top)lmin[<span class="built_in">stack</span>[top]]=<span class="built_in">stack</span>[top<span class="number">-1</span>],rmin[<span class="built_in">stack</span>[top--]]=n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">left</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=ST::query(l<span class="number">-1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> (ll)a[p]*(r-p+<span class="number">1</span>)+fl[l<span class="number">-1</span>]-fl[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">right</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=ST::query(l,r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (ll)a[p]*(p-l+<span class="number">1</span>)+fr[r+<span class="number">1</span>]-fr[p];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);block=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    a[<span class="number">0</span>]=a[n+<span class="number">1</span>]=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]);</span><br><span class="line">    __Pre_lmin_rmin();</span><br><span class="line">    ST::Make();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)fr[i]=(ll)a[i]*(i-lmin[i])+fr[lmin[i]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)fl[i]=(ll)a[i]*(rmin[i]-i)+fl[rmin[i]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        IN(q[i].l),IN(q[i].r),q[i].id=i;</span><br><span class="line">    <span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">int</span> L=q[<span class="number">1</span>].l,R=L<span class="number">-1</span>;res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q[i].l,y=q[i].r;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;x)res+=left(L,R),L--;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;y)res+=right(L,R),R++;</span><br><span class="line">        <span class="keyword">while</span>(L&lt;x)res-=left(L+<span class="number">1</span>,R),++L;</span><br><span class="line">        <span class="keyword">while</span>(R&gt;y)res-=right(L,R<span class="number">-1</span>),--R;</span><br><span class="line">        Ans[q[i].id]=res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫队 </tag>
            
            <tag> ST表 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 货车运输  最大生成树+倍增Lca  luoguP1967</title>
      <link href="/2019/03/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP1967/"/>
      <url>/2019/03/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP1967/</url>
      
        <content type="html"><![CDATA[<p>题目大意就是，有多组询问，每组询问包含两个整数 $x,y​$ ，求出 $x​$ 到 $y​$ 的一条路径，满足这条路径在所有的 $x​$ 到 $y​$ 的路径中，边权最小的边权值最大。</p><p>这个很显然我们可以先求出图的最大生成树，那么 $x$ 到 $y$ 的目标路径肯定在最大生成树上，也只能在最大生成树上。</p><a id="more"></a><p>那么我们需要在最大生成树上找到这条路径，最大生成树是一棵树，很显然的我们可以想到在这棵树上做 $Lca$ ，那么这样就超级简单了。</p><p>我们在求 $lca$ 的时候顺带维护一下 $sum$ 数组，$sum[x][i]$ 表示在最大生成树 $x$ 到 $fa[x][i]$ 这条路径上的所有边的边权最小值。转移的方法也很简单：$sum[x][i]=min(sum[x][i-1],sum[fa[x][i-1]][i-1])$ 。</p><p>对于不能到达的情况特判一下就好了。</p><p>于是这题就做完了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">log</span>=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,cnt,f[N];</span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N][<span class="built_in">log</span>+<span class="number">2</span>],sum[N][<span class="built_in">log</span>+<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> from,to,val;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; E[N],V[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span>&#123;<span class="keyword">return</span> a.val&gt;b.val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> f[x]==x?x:f[x]=find(f[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f,<span class="keyword">int</span> dis)</span></span>&#123;</span><br><span class="line">    dep[u]=dep[f]+<span class="number">1</span>,</span><br><span class="line">    fa[u][<span class="number">0</span>]=f,sum[u][<span class="number">0</span>]=dis;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">log</span>;++i)</span><br><span class="line">        fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>],</span><br><span class="line">        sum[u][i]=min(sum[u][i<span class="number">-1</span>],sum[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">int</span> size=E[u].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=E[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v!=f)dfs(v,u,V[u][i]);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=inf;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(dep[fa[x][i]]&gt;=dep[y])</span><br><span class="line">            ans=min(ans,sum[x][i]),x=fa[x][i];</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(fa[x][i]!=fa[y][i])&#123;</span><br><span class="line">            ans=min(ans,min(sum[x][i],sum[y][i]));</span><br><span class="line">            x=fa[x][i],y=fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    ans=min(ans,min(sum[x][<span class="number">0</span>],sum[y][<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">if</span>(fa[x][<span class="number">0</span>]==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)f[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        IN(G[i].from),IN(G[i].to),IN(G[i].val);</span><br><span class="line">    <span class="built_in">std</span>::sort(G+<span class="number">1</span>,G+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> fx=find(G[i].from),fy=find(G[i].to);</span><br><span class="line">        <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">            f[fy]=fx;++cnt;</span><br><span class="line">            E[G[i].from].push_back(G[i].to),V[G[i].from].push_back(G[i].val);</span><br><span class="line">            E[G[i].to].push_back(G[i].from),V[G[i].to].push_back(G[i].val);</span><br><span class="line">            <span class="keyword">if</span>(cnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(!dep[i])dfs(i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    IN(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,solve(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> lca </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [CQOI2015]网络吞吐量  网络流  luoguP3171</title>
      <link href="/2019/03/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP3171/"/>
      <url>/2019/03/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP3171/</url>
      
        <content type="html"><![CDATA[<p>题目要求你做什么就做什么呗。</p><p>我们先跑最短路，然后按照最短路的边连网络流的边就好了。</p><p>这里我选择跑堆优 $Dij$ ，然后我们枚举每一条边，判断着一条边是否为最短路的边，判断的方式很显然，就是看这条边的起点的 $dis$ 加上边权是否等于终点的 $dis$ 就好。</p><a id="more"></a><p>网络流要拆点，除了拆了的点之间连一条该点的权值的边之外，其余的边全部都是 $inf$ ，当然第一个点和第 $n$ 个点拆点后连边也是 $inf$ 而非点权。连完边之后跑最大流即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e18</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to;ll val;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    int cnt(1),dep[N],head[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;</span><br><span class="line">        G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">        G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">        q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">                <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">                <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,ll flow)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">        ll used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">                used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ll maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dijstra&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> P std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line">    <span class="built_in">std</span>::priority_queue&lt;P,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;P&gt;,<span class="built_in">std</span>::greater&lt;P&gt; &gt; q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> vis[N],head[N],cnt;</span><br><span class="line">    ll dis[N];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to;ll w;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;</span><br><span class="line">        G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].w=w,head[u]=cnt;</span><br><span class="line">        G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].w=w,head[v]=cnt; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)dis[i]=inf;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        dis[s]=<span class="number">0</span>;</span><br><span class="line">        q.push(<span class="built_in">std</span>::make_pair(dis[s],s));</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.top().second;</span><br><span class="line">            q.pop();<span class="keyword">if</span>(vis[x])<span class="keyword">continue</span>;vis[x]=<span class="literal">true</span>; </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)</span><br><span class="line">              <span class="keyword">if</span>(dis[G[i].to]&gt;dis[x]+G[i].w)&#123;</span><br><span class="line">               dis[G[i].to]=dis[x]+G[i].w;</span><br><span class="line">                 <span class="keyword">if</span>(!vis[G[i].to])q.push(<span class="built_in">std</span>::make_pair(dis[G[i].to],G[i].to));</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;++x)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)</span><br><span class="line">                <span class="keyword">if</span>(dis[x]+G[i].w==dis[G[i].to])</span><br><span class="line">                    Dinic::add(x+n,G[i].to,inf);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),s=<span class="number">1</span>,t=n&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,w;IN(u),IN(v),IN(w);</span><br><span class="line">    Dijstra::add(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijstra::dijstra(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i)</span><br><span class="line">        IN(x),Dinic::add(i,i+n,(i!=<span class="number">1</span>&amp;&amp;i!=n)?x:inf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Dinic::dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 Willem, Chtholly and Seniorious  珂朵莉树  luoguCF896C</title>
      <link href="/2019/03/11/%5B%E9%A2%98%E8%A7%A3%5DluoguCF896C/"/>
      <url>/2019/03/11/%5B%E9%A2%98%E8%A7%A3%5DluoguCF896C/</url>
      
        <content type="html"><![CDATA[<p>神奇的珂朵莉树，优雅的暴力。</p><p>珂朵莉树的主要思想就是对于一段连续的值相同的区间，将其缩为一个结点，然后丢到 $set$ 里面，主要的操作有拆分区间操作…….这货很强大，码量不短但极好写，而且一般不会出什么问题，调试也很方便。</p><a id="more"></a><p>但是珂朵莉树的思想很暴力，比如说区间第 $K$ 大，珂朵莉树的做法就是直接将区间拿出来排一波序！当然，这样暴力的东西只能在随机数据的情况下食用，或者数据水的情况下，不然分分钟给你 $T$ 飞！</p><p>好吧来看看这道题的操作该怎么办：</p><p>第一个操作的话属于傻逼操作，珂朵莉树，先 $split$ 提取 $l,r$ 区间，然后直接暴力访问，加上 $x$ 即可。</p><p>第二个操作完全就是珂朵莉树的基本操作，跟上面一样，暴力访问然后直接将权值改为 $x$ 即可，更简单的方法就是删除 $l,r$ 区间，然后把权值统一为 $x$ 后再插入 $l,r$ 。</p><p>第三个操作第 $K$ 大，上面说了，直接拿出来排个序就好了，炒鸡暴力。</p><p>第四个操作……仍然是暴力，可以参考第一二个操作，注意 $longlong$ 的问题，不要爆 $long long$ 了。</p><p>对于初始的序列，我们先用题目要求的随机化函数得到序列中每一个位置的值，然后插入到 $set$ 中，这个时候第 $i$ 个元素区间是 $i,i$ 。</p><p>还有一个需要注意的地方，就是在插入完整个序列后还要在最后面插入一个边界的哨兵结点，当然哨兵结点的权值为 $0$ 。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll seed,vmax;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rnd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll ret=seed;</span><br><span class="line">    seed=(seed*<span class="number">7</span>+<span class="number">13</span>)%<span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ODT</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="keyword">mutable</span>ll v;</span><br><span class="line">        Node(<span class="keyword">int</span> L,<span class="keyword">int</span> R=<span class="number">-1</span>,ll V=<span class="number">0</span>):l(L),r(R),v(V) &#123;&#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node&amp;x) <span class="keyword">const</span> &#123;<span class="keyword">return</span> l&lt;x.l;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">set</span>&lt;Node&gt; s;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> IT std::set<span class="meta-string">&lt;Node&gt;::iterator</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> IT <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        IT it=s.lower_bound(Node(pos));</span><br><span class="line">        <span class="keyword">if</span>(it!=s.end()&amp;&amp;it-&gt;l==pos)<span class="keyword">return</span> it;</span><br><span class="line">        <span class="keyword">else</span> --it;</span><br><span class="line">        <span class="keyword">int</span> L=it-&gt;l,R=it-&gt;r;ll V=it-&gt;v;</span><br><span class="line">        s.erase(it);</span><br><span class="line">        <span class="keyword">return</span> s.insert(Node(L,pos<span class="number">-1</span>,V)),s.insert(Node(pos,R,V)).first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll val)</span></span>&#123;</span><br><span class="line">        IT itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">        s.erase(itl,itr);</span><br><span class="line">        s.insert(Node(l,r,val));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll val)</span></span>&#123;</span><br><span class="line">        IT itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">        <span class="keyword">for</span>(;itl!=itr;++itl)itl-&gt;v+=val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">rank</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;ll,<span class="keyword">int</span>&gt; &gt; hep;</span><br><span class="line">        IT itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">        <span class="keyword">for</span>(;itl!=itr;++itl)</span><br><span class="line">            hep.push_back(<span class="built_in">std</span>::make_pair(itl-&gt;v,itl-&gt;r-itl-&gt;l+<span class="number">1</span>));</span><br><span class="line">        <span class="built_in">std</span>::sort(hep.begin(),hep.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;ll,<span class="keyword">int</span>&gt; &gt;::iterator it=hep.begin();it!=hep.end();++it)&#123;</span><br><span class="line">            k-=it-&gt;second;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;=<span class="number">0</span>)<span class="keyword">return</span> it-&gt;first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">pow</span><span class="params">(ll x,ll y,ll mod)</span></span>&#123;</span><br><span class="line">        ll res=<span class="number">1l</span>l;x%=mod;</span><br><span class="line">        <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)res=res*x%mod;</span><br><span class="line">        <span class="keyword">return</span> res%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ex,<span class="keyword">int</span> mod)</span></span>&#123;</span><br><span class="line">        IT itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;itl!=itr;++itl)</span><br><span class="line">            res=(res+(ll)(itl-&gt;r-itl-&gt;l+<span class="number">1</span>)*<span class="built_in">pow</span>(itl-&gt;v,ll(ex),ll(mod)))%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            a=(rnd()%vmax)+<span class="number">1</span>,s.insert(Node(i,i,a));</span><br><span class="line">        s.insert(Node(n+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%lld%lld"</span>,&amp;n,&amp;m,&amp;seed,&amp;vmax);</span><br><span class="line">    T.pre(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> op=(rnd()%<span class="number">4</span>)+<span class="number">1</span>,l=(rnd()%n)+<span class="number">1</span>,r=(rnd()%n)+<span class="number">1</span>,x,y;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)<span class="built_in">std</span>::swap(l,r);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)x=(rnd()%(r-l+<span class="number">1</span>))+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> x=(rnd()%vmax)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>)y=(rnd()%vmax)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)T.add(l,r,ll(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)T.assign(l,r,ll(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.rank(l,r,x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.sum(l,r,x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 珂朵莉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [ZJOI2009]狼和羊的故事  网络流  luoguP2598</title>
      <link href="/2019/03/11/%5B%E9%A2%98%E8%A7%A3%5DluoguP2598/"/>
      <url>/2019/03/11/%5B%E9%A2%98%E8%A7%A3%5DluoguP2598/</url>
      
        <content type="html"><![CDATA[<p>这题真的是裸的网络流……连我这种制杖都可以立刻想到正解。</p><p>如果不考虑领地问题的话，这显然是一道很裸的最小割———割断最少的边使 $S$ 和 $T​$ 不连通。</p><p>但是现在有了领地的问题……就是说限制了有些格子是一起的，不能被割开。</p><p>既然不能被割开，就连一条 $inf$ 的边啊，这样就割不开了啊。</p><a id="more"></a><p>于是我们可以让 $S$ 向所有的狼的领地连一条边权为 $inf$ 的边，然后所有的羊的领地向 $T$ 连一条边权为 $inf$ 的边。然后就是网格边连边了……</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(x,y) (((x)-1)*m+(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    int cnt(1),dep[N],head[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">        G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">        q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">                <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">                <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">                used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);s=n*m+<span class="number">1</span>,t=n*m+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">    <span class="keyword">int</span> a;IN(a);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1</span>)Dinic::add(s,id(i,j),inf);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">2</span>)Dinic::add(id(i,j),t,inf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;++k)&#123;</span><br><span class="line">    <span class="keyword">int</span> tx=i+dx[k],ty=j+dy[k];</span><br><span class="line">    <span class="keyword">if</span>(tx&lt;<span class="number">1</span>||tx&gt;n||ty&lt;<span class="number">1</span>||ty&gt;m)<span class="keyword">continue</span>;</span><br><span class="line">    Dinic::add(id(i,j),id(tx,ty),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Dinic::dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [国家集训队]聪聪可可  树形DP  luoguP2634</title>
      <link href="/2019/03/10/%5B%E9%A2%98%E8%A7%A3%5DluoguP2634/"/>
      <url>/2019/03/10/%5B%E9%A2%98%E8%A7%A3%5DluoguP2634/</url>
      
        <content type="html"><![CDATA[<p>别人都说，什么淀粉质啊之类的轻松水过，然而我有码量恐惧症，不适合如此数据结构(主要也是太弱了QvQ)</p><a id="more"></a><h4 id="那就上树形DP吧！"><a href="#那就上树形DP吧！" class="headerlink" title="那就上树形DP吧！"></a>那就上树形DP吧！</h4><h4 id="f-i-j-表示点i为根的子树中到i路径权值和-3-j的点数"><a href="#f-i-j-表示点i为根的子树中到i路径权值和-3-j的点数" class="headerlink" title="$f[i][j]$表示点i为根的子树中到i路径权值和%3=j的点数."></a>$f[i][j]$表示点<strong>i</strong>为根的子树中到<strong>i</strong>路径权值和<strong>%3=j</strong>的点数.</h4><p>状态转移：Dfs，直接从子树转移即可，具体看代码。</p><p>真是炒鸡简单的啦~~</p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE:"></a>CODE:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> y?gcd(y,x%y):x;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt,head[N];ll f[N][<span class="number">3</span>],ans;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt;</span><br><span class="line">G[++cnt].nxt=head[y],G[cnt].to=x,G[cnt].val=v,head[y]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">f[x][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line"><span class="keyword">int</span> y=G[i].to;<span class="keyword">if</span>(y==fa)<span class="keyword">continue</span>;Dfs(y,x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;++j)ans+=(ll)(f[y][j]*f[x][(((<span class="number">3</span>-j-G[i].val)%<span class="number">3</span>)+<span class="number">3</span>)%<span class="number">3</span>]*<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//从子树转移过来，注意取模，看不懂的同学画图秒懂</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;++j)f[x][(G[i].val+j)%<span class="number">3</span>]+=f[y][j];</span><br><span class="line">        <span class="comment">//跟新 f[x]</span></span><br><span class="line">&#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n);ll s=(ll)n*n,g;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> x,y,v,i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">       IN(x),IN(y),IN(v),add(x,y,v);</span><br><span class="line">    Dfs(<span class="number">1</span>,<span class="number">0</span>);ans+=n,g=gcd(ans,s);<span class="comment">//一定要是最简分数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>,ans/g,s/g);<span class="comment">//输出答案</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 「网络流24题」餐巾计划问题 网络流 luoguP1251</title>
      <link href="/2019/03/09/%5B%E9%A2%98%E8%A7%A3%5DluoguP1251/"/>
      <url>/2019/03/09/%5B%E9%A2%98%E8%A7%A3%5DluoguP1251/</url>
      
        <content type="html"><![CDATA[<p>实际上这道题可以用贪心解的……但是码量惊人 $QwQ$ 。</p><p>于是上网络流吧……这题显然是费用流。</p><p>对于每一天，我们将其拆成两个点，一个表示这天的早晨，一个表示这天的晚上。</p><a id="more"></a><p>我们从源点向每一天的晚上连一条边权为 $x$ 费用为 $0​$ 的边，表示这一天我们需要处理的餐巾数，就是白天用掉的餐巾。</p><p>每一天的早晨，这些餐巾来自题目给出的地方，并且最终连向汇点，边权为 $x$ 费用为 $0$ 。</p><p>然后考虑每天早上餐巾的来源，现在题目给了四个操作：</p><ul><li>买新的</li><li>丢到快洗店</li><li>丢到慢洗店</li><li><del>弃疗</del></li></ul><p>对于买新的，我们只需要从源点连一条边权为 $inf$ 费用为 $p$ 的边到这一天的白天，我们餐巾的获取都来自源点。</p><p>丢到快洗店，也就是说第 $i$ 天晚上这些没有处理的毛巾丢到快洗店，那么第 $i+m$ 天将洗完，这个时候可以在早晨收到餐巾，于是从 $i$ 的晚上连一条边权为 $inf$ 费用为 $f$ 的边连向 $i+m$ 的白天。</p><p>丢到慢洗店，这个跟快洗店是一个道理。</p><p>关于弃疗，就是说放着不管了，可以理解为第 $i$ 天晚上的餐巾留到了第 $i+1$ 天，并且这些餐巾是不能用的，那么不会连向 $i+1$ 的早晨，于是从 $i$ 的晚上连一条边权为 $inf$ 费用为 $f$ 的边连向 $i+1$ 的晚上。</p><p>然后跑一边费用流板子就好了，注意要开 $long long$ 。</p><p>至于上面四个选项为什么边的容量都设为 $inf$ ，我们就拿买新的来说吧，题目又没有限制你最多买多少，所以就是允许你可以一直买，买无限条，就当成 $inf$ 啦。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(type,x) ((type)*n+x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y)) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s,t,r[N],tot(<span class="number">1</span>),head[N],vis[N],dist[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val,cot;&#125;G[N&lt;&lt;<span class="number">8</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pre</span>&#123;</span><span class="keyword">int</span> last,edge;&#125;pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> val,<span class="keyword">int</span> cot)</span></span>&#123;</span><br><span class="line">    G[++tot].nxt=head[u],G[tot].to=v,G[tot].val=val,G[tot].cot=cot,head[u]=tot;</span><br><span class="line">    G[++tot].nxt=head[v],G[tot].to=u,G[tot].val=<span class="number">0</span>,G[tot].cot=-cot,head[v]=tot;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span>(pre));</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s),vis[s]=<span class="number">1</span>,dist[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">    <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(G[i].val&gt;<span class="number">0</span>&amp;&amp;dist[v]&gt;dist[u]+G[i].cot)&#123;</span><br><span class="line">            dist[v]=dist[u]+G[i].cot;</span><br><span class="line">                pre[v].last=u,pre[v].edge=i;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])&#123;q.push(v),vis[v]=<span class="number">1</span>;&#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;vis[u]=<span class="number">0</span>; </span><br><span class="line">    &#125;<span class="keyword">return</span> dist[t]!=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">EK</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll maxflow=<span class="number">0</span>;</span><br><span class="line">    ll cost=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> min_flow;</span><br><span class="line">    <span class="keyword">while</span>(Spfa())&#123;</span><br><span class="line">        min_flow=inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pre[i].last)</span><br><span class="line">           min_flow=min(min_flow,G[pre[i].edge].val);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pre[i].last)&#123;</span><br><span class="line">            G[pre[i].edge].val-=min_flow;</span><br><span class="line">            G[pre[i].edge^<span class="number">1</span>].val+=min_flow; </span><br><span class="line">        &#125;</span><br><span class="line">        maxflow+=min_flow;</span><br><span class="line">        cost+=min_flow*dist[t];</span><br><span class="line">    &#125;<span class="keyword">return</span> cost; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,_n,_p,_m,_f,_s;</span><br><span class="line">    IN(n);s=<span class="number">0</span>,t=n*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;IN(x);</span><br><span class="line">        add(s,id(<span class="number">1</span>,i),x,<span class="number">0</span>),add(id(<span class="number">0</span>,i),t,x,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    IN(_p),IN(_m),IN(_f),IN(_n),IN(_s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n)add(id(<span class="number">1</span>,i),id(<span class="number">1</span>,i+<span class="number">1</span>),inf,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(i+_m&lt;=n)add(id(<span class="number">1</span>,i),id(<span class="number">0</span>,i+_m),inf,_f);</span><br><span class="line">        <span class="keyword">if</span>(i+_n&lt;=n)add(id(<span class="number">1</span>,i),id(<span class="number">0</span>,i+_n),inf,_s);</span><br><span class="line">        add(s,id(<span class="number">0</span>,i),inf,_p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,EK());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈4种莫队及例题</title>
      <link href="/2019/03/08/%5B%E7%AE%97%E6%B3%95%5D%E8%8E%AB%E9%98%9F&amp;%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F/"/>
      <url>/2019/03/08/%5B%E7%AE%97%E6%B3%95%5D%E8%8E%AB%E9%98%9F&amp;%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="在此输入你的密码以便阅读全文" />    <label for="pass">在此输入你的密码以便阅读全文</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [WC2013]糖果公园  树上带修改莫队  luoguP4074/Uoj58</title>
      <link href="/2019/03/08/%5B%E9%A2%98%E8%A7%A3%5DluoguP4074/"/>
      <url>/2019/03/08/%5B%E9%A2%98%E8%A7%A3%5DluoguP4074/</url>
      
        <content type="html"><![CDATA[<p>毒瘤题目，树上带修改莫队板子题。</p><p>关于树上莫队和带修改莫队的文章戳这 $QwQ​$ :<a href="https://monlights.github.io/2019/03/08/[算法]莫队&amp;树上莫队/" target="_blank" rel="noopener">[算法]莫队&amp;树上莫队</a></p><p>然后就是将其结合在一起了，结合的话炒鸡简单，就是码量增大…</p><a id="more"></a><p>可以算作一个树上莫队/树上带修改莫队的板子来看。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">24</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LogN=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">IN</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> flag?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,v[N],w[N],c[N];<span class="comment">/*test*/</span></span><br><span class="line"><span class="keyword">int</span> id[N&lt;&lt;<span class="number">1</span>],in[N],out[N],dep[N],f[N][LogN],sequencelong;<span class="comment">/*dfs&amp;lca*/</span></span><br><span class="line"><span class="keyword">int</span> head[N],cnt;<span class="comment">/*Tree Edge*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to;&#125;G[N&lt;&lt;<span class="number">1</span>];<span class="comment">/*Tree Edge*/</span></span><br><span class="line"><span class="keyword">int</span> c0,c1,block,tot[N],cl[N],cr[N],vis[N],modify[N];<span class="comment">/*MO*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MO</span>&#123;</span><span class="keyword">int</span> l,r,lbe,rbe,time,id,lca,ans;&#125;Q[N];<span class="comment">/*MO*/</span></span><br><span class="line">ll now,Ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(MO a,MO b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.lbe^b.lbe)<span class="keyword">return</span> a.lbe&lt;b.lbe;</span><br><span class="line">    <span class="keyword">if</span>(a.rbe^b.rbe)<span class="keyword">return</span> a.rbe&lt;b.rbe;</span><br><span class="line">    <span class="keyword">if</span>(a.time^b.time)<span class="keyword">return</span> a.time&lt;b.time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_Lca_and_sequence</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    dep[u]=dep[fa]+<span class="number">1</span>,f[u][<span class="number">0</span>]=fa;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;++i)f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    id[in[u]=++sequencelong]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(G[i].to!=fa)Get_Lca_and_sequence(G[i].to,u);</span><br><span class="line">    id[out[u]=++sequencelong]=u;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])swap(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;~i;--i)</span><br><span class="line">        <span class="keyword">if</span>(dep[u]-(<span class="number">1</span>&lt;&lt;i)&gt;=dep[v])u=f[u][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;~i;--i)</span><br><span class="line">        <span class="keyword">if</span>(f[u][i]!=f[v][i])u=f[u][i],v=f[v][i];</span><br><span class="line">    <span class="keyword">return</span> u==v?u:f[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Main_input()&#123;</span><br><span class="line">    n=IN(),m=IN(),q=IN();<span class="comment">/*line 1*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)v[i]=IN();<span class="comment">/*line 2*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)w[i]=IN();<span class="comment">/*line 3*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)add(IN(),IN());<span class="comment">/*line 4 to n+2*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)c[i]=IN();<span class="comment">/*line n+3*/</span></span><br><span class="line">    Get_Lca_and_sequence(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    block=<span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="built_in">std</span>::<span class="built_in">pow</span>(sequencelong,<span class="number">0.66666</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;<span class="comment">/*line n+4 to n+4+q*/</span></span><br><span class="line">        <span class="keyword">int</span> Type=IN(),x=IN(),y=IN();</span><br><span class="line">        <span class="keyword">if</span>(Type==<span class="number">1</span>)&#123;</span><br><span class="line">            Q[++c1].id=c1,Q[c1].time=c0;</span><br><span class="line">            <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">                Q[c1].lbe=(Q[c1].l=in[x])/block;</span><br><span class="line">                Q[c1].rbe=(Q[c1].r=in[x])/block;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(in[x]&lt;in[y]&amp;&amp;out[y]&lt;out[x])&#123;</span><br><span class="line">                    Q[c1].lbe=(Q[c1].l=in[x])/block;</span><br><span class="line">                    Q[c1].rbe=(Q[c1].r=in[y])/block;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(in[y]&lt;in[x]&amp;&amp;out[x]&lt;out[y])&#123;</span><br><span class="line">                    Q[c1].lbe=(Q[c1].l=in[y])/block;</span><br><span class="line">                    Q[c1].rbe=(Q[c1].r=in[x])/block;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(out[x]&lt;in[y])&#123;</span><br><span class="line">                        Q[c1].lbe=(Q[c1].l=out[x])/block;</span><br><span class="line">                        Q[c1].rbe=(Q[c1].r=in[y])/block;</span><br><span class="line">                        Q[c1].lca=Lca(x,y);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(out[y]&lt;in[x])&#123;</span><br><span class="line">                        Q[c1].lbe=(Q[c1].l=out[y])/block;</span><br><span class="line">                        Q[c1].rbe=(Q[c1].r=in[x])/block;</span><br><span class="line">                        Q[c1].lca=Lca(x,y);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> modify[++c0]=x,cl[c0]=c[x],cr[c0]=y,c[x]=y;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[x])now-=<span class="number">1l</span>l*v[c[x]]*w[tot[c[x]]--];</span><br><span class="line">    <span class="keyword">else</span> now+=<span class="number">1l</span>l*v[c[x]]*w[++tot[c[x]]];</span><br><span class="line">    vis[x]^=<span class="number">1</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[modify[x]])&#123;work(modify[x]);c[modify[x]]=cr[x];work(modify[x]);&#125;</span><br><span class="line">    <span class="keyword">else</span> c[modify[x]]=cr[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[modify[x]])&#123;work(modify[x]);c[modify[x]]=cl[x];work(modify[x]);&#125;</span><br><span class="line">    <span class="keyword">else</span> c[modify[x]]=cl[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Main_Mo_Solve()&#123;</span><br><span class="line">    <span class="built_in">std</span>::sort(Q+<span class="number">1</span>,Q+c1+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>,nowtime=c0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c1;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(nowtime&gt;Q[i].time)del(nowtime--);</span><br><span class="line">        <span class="keyword">while</span>(nowtime&lt;Q[i].time)add(++nowtime);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;Q[i].l)work(id[l++]);</span><br><span class="line">        <span class="keyword">while</span>(l&gt;Q[i].l)work(id[--l]);</span><br><span class="line">        <span class="keyword">while</span>(r&lt;Q[i].r)work(id[++r]);</span><br><span class="line">        <span class="keyword">while</span>(r&gt;Q[i].r)work(id[r--]);</span><br><span class="line">        <span class="keyword">if</span>(Q[i].lca)work(Q[i].lca);</span><br><span class="line">        Ans[Q[i].id]=now;</span><br><span class="line">        <span class="keyword">if</span>(Q[i].lca)work(Q[i].lca);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Main_output()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c1;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _Main_input();</span><br><span class="line">    _Main_Mo_Solve();</span><br><span class="line">    _Main_output();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，尽管再毒瘤，这个也只是入门的树上带修改莫队的题目。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SCOI2007]蜥蜴 网络流 luogu2472</title>
      <link href="/2019/03/06/%5B%E9%A2%98%E8%A7%A3%5DluoguP2472/"/>
      <url>/2019/03/06/%5B%E9%A2%98%E8%A7%A3%5DluoguP2472/</url>
      
        <content type="html"><![CDATA[<p>网络流……..题目要求我们求出能逃离的蜥蜴数量的最大值，不就是最大流吗？</p><p>然后考虑怎么建模。</p><p>首先来看看蜥蜴，我们将这些蜥蜴的点跟 $s$ 连边，边权是多少呢？想一想，由于一个位置只有一只蜥蜴，那么边权就当然是 $1$ 了。</p><a id="more"></a><p>然后考虑逃离的这些柱子，题目说什么石柱都不稳定，每次当蜥蜴跳跃时，所离开的石柱高度减 $1$ ，看似很不好办，但是这恰恰就是网络流。对于柱子间的一条边，从 $s$ 经过蜥蜴的点的时候，流量就只有 $1$ 了，这个 $1$ 的流量流过柱子中的边的时候就会让这条边的边权减 $1$ ，减到 $0$ 当然就不能流了。</p><p>那么柱子之间怎么连边呢？</p><p>对于一个柱子，我们将它拆成两个点，一个入点，一个出点。其中入点向出点连一条边，边权为这个柱子的高度。如果一个柱子，判断一下，发现从它这里可以跳出去，那么就将这个柱子的出点向 $t$ 连一条边，这条边仅仅是代表找到了答案，对答案没有影响，边权为 $inf$ 。</p><p>然后我们再看一下，这个柱子能到达的柱子有哪些，这里直接算曼哈顿距离就好了。然后由这条柱子的出点向能到达的柱子的入点连一条边，边权呢？还是为 $inf$ 。因为我们对一个柱子的影响就是入点到出点的那一条边，那一条边的边权已经限制了这个柱子的使用量，所以中间的边权为 $inf$ 。</p><p>注意数组大小，要开大一点。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">---[SCOI2007]蜥蜴.网络流-最大流   毒瘤题目</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID(ty,x,y) ((ty)*r*c+id[(x)][(y)])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">55</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; lizard;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; Pillar;</span><br><span class="line"><span class="keyword">int</span> r,c,d,s,t;</span><br><span class="line"><span class="keyword">int</span> dep[S],head[S],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> val[N][N],id[N][N],tot=<span class="number">0</span>,total=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> str;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N*N*<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">    dep[s]=<span class="number">1</span>;q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(!dep[v]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>,q.push(v);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _pre_in()&#123;</span><br><span class="line">    IN(r),IN(c),IN(d);</span><br><span class="line">    s=<span class="number">0</span>,t=r*c*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    Pillar.clear();<span class="comment">//柱子</span></span><br><span class="line">    lizard.clear();<span class="comment">//蜥蜴</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;++j)&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">            id[i][j]=++tot,val[i][j]=str-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(val[i][j]&gt;<span class="number">0</span>)Pillar.push_back(<span class="built_in">std</span>::make_pair(i,j));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;++j)&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">            <span class="keyword">if</span>(str==<span class="string">'L'</span>)++total,lizard.push_back(<span class="built_in">std</span>::make_pair(i,j));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _pre_add_line()&#123;<span class="comment">//连边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Pillar.size();++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=Pillar[i].first,y=Pillar[i].second;</span><br><span class="line">        add(ID(<span class="number">0</span>,x,y),ID(<span class="number">1</span>,x,y),val[x][y]);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=d||y&lt;=d||x+d&gt;r||y+d&gt;c)add(ID(<span class="number">1</span>,x,y),t,inf);<span class="comment">//可以逃出去</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Pillar.size();++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Pillar.size();++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> xi=Pillar[i].first,yi=Pillar[i].second;</span><br><span class="line">            <span class="keyword">int</span> xj=Pillar[j].first,yj=Pillar[j].second;</span><br><span class="line">            <span class="keyword">if</span>((xi-xj)*(xi-xj)+(yi-yj)*(yi-yj)&lt;=d*d)</span><br><span class="line">                add(ID(<span class="number">1</span>,xi,yi),ID(<span class="number">0</span>,xj,yj),inf);<span class="comment">//柱子之间可以互相到达</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lizard.size();++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=lizard[i].first,y=lizard[i].second;</span><br><span class="line">        add(s,ID(<span class="number">0</span>,x,y),<span class="number">1</span>);<span class="comment">//源点向蜥蜴连边</span></span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _pre_in();</span><br><span class="line">    _pre_add_line();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,total-dinic());</span><br><span class="line">    <span class="comment">/*注意最终要算的是最少的未逃离的数，不是逃离的最大数*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [HNOI2013]切糕 网络流 bzoj3144</title>
      <link href="/2019/03/04/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3144/"/>
      <url>/2019/03/04/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3144/</url>
      
        <content type="html"><![CDATA[<p><del>话说切糕有很多细菌，并且高价，现在不让买了，也不让卖了……..</del></p><p>好吧我们来解决一下这题吧。</p><p>额……感觉题意有点不可读，实际上题目就是说给你一个立方体，然后立方体中的每一个点都有一个权值，表示如果要切这个点的话所花费的代价，那么这时需要让你横着切，将这个立方体切成两半，求最小代价。</p><a id="more"></a><p>这就是很明显的最小割了，切成两半使得 $s$ 和 $t$不连通嘛。</p><p>于是我们可以考虑这样建边：对于这个立方体，我们建一个虚拟层—第 $0$ 层，对于第 $0$ 层的每一个点，我们用 $s$ 与其相连，这个连接的边是不能被割掉的，所以边权为 $inf$ 。然后对于第 $R$ 层的所有点，我们都将其与 $t$ 相连，同样的道理，边权为 $inf$ 。然后中间的点的话，考虑一个点 $(x,y,z)$ ，我们连一条 $(x−1,y,z)$ 到 $(x,y,z)$  的边，权值为 $v(x,y,z)$ (即点 $(x,y,z)$ 的权值) 。</p><p>这个就是基本的了，如果没有第二个光滑性的限制，直接跑 $Dinic$ 就好了。</p><p>但是现在有了这个限制，怎么办呢？</p><p>对于一个竖轴，假设这个竖轴的横竖坐标为 $(x,y)$ ，现在在这个竖轴上有一个高度为 $z$ 的点，这个点的坐标显然为 $(x,y,z)$ ，那么现在的情况就是，如果选了 $z$ ，那么相邻竖轴上的 $z−d,z+d$ 都必须选。</p><p>于是我们考虑，从 $(x,y,z)$ 向相邻数轴的 $z−d,z+d$ 连一条 $inf$ 的边，这样就可以保证正确性了。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">8e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> P,Q,R,D,s,t,pointval[<span class="number">42</span>][<span class="number">42</span>][<span class="number">42</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">point</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;<span class="keyword">return</span> x*P*Q+y*Q+z;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    int cnt(1),dep[N],head[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">        G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">        q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">                <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">                <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">                used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">                G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">        <span class="keyword">return</span> maxflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(P),IN(Q),IN(R),IN(D);s=<span class="number">0</span>,t=N<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)</span><br><span class="line">                IN(pointval[i][j][k]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)</span><br><span class="line">            Dinic::add(s,point(<span class="number">0</span>,j,k),inf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;++i)  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)</span><br><span class="line">                Dinic::add(point(i<span class="number">-1</span>,j,k),point(i,j,k),pointval[i][j][k]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)   </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)   </span><br><span class="line">            Dinic::add(point(R,j,k),t,inf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=D;i&lt;=R;++i)  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=P;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Q;++k)  </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;<span class="number">5</span>;++l)&#123;</span><br><span class="line">                    <span class="keyword">int</span> tx=dx[l]+j,ty=dy[l]+k;</span><br><span class="line">                    <span class="keyword">if</span>(tx&lt;<span class="number">1</span>||tx&gt;P||ty&lt;<span class="number">1</span>||ty&gt;Q)<span class="keyword">continue</span>;</span><br><span class="line">                    Dinic::add(point(i,j,k),point(i-D,tx,ty),inf);</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Dinic::dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2015]约数个数和  莫比乌斯反演  luoguP3327</title>
      <link href="/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP3327/"/>
      <url>/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP3327/</url>
      
        <content type="html"><![CDATA[<p>又是一道神奇的题目。</p><p>一句话题意：给定 $n,m$ 求 $\sum_{i=1}^{n}\sum_{j=1}^{m}d(ij)$</p><p>于是开始推式子：</p><a id="more"></a><p>有这么一条公式：</p><script type="math/tex; mode=display">d(ij)=\sum_{x|i}\sum_{y|j}[gcd(x,y)=1]</script><p>这个非常重要，至于证明的话，本人太弱，留个坑，到时候再填，请大家谅解 $QwQ$ 。</p><p>然后呢？发现题目求的式子后面正好是 $d(ij)$ ，于是美滋滋的套进去。</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{x|i}\sum_{y|j}[gcd(i,j)=1]</script><p>$x$ 和 $y$ 我们扔到前面去枚举，后面来计算它们对它们的倍数做出的贡献。</p><p>可以知道前面的 $x$ 在 $n$ 以内的倍数有 $\lfloor\frac{n}{x}\rfloor$ 个，$y$ 在 $m$ 以内的倍数有 $\lfloor\frac{m}{y}\rfloor$，于是：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{x|i}\sum_{y|j}[gcd(i,j)=1]</script><script type="math/tex; mode=display">=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[gcd(i,j)=1]</script><p>按照套路，我们设：</p><script type="math/tex; mode=display">f(x)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[gcd(i,j)=k]</script><script type="math/tex; mode=display">g(k)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[k|gcd(i,j)]</script><p>那么显然有：</p><script type="math/tex; mode=display">g(k)=\sum_{k|d} f(d)</script><p>这个式子很有熟悉的味道，显然是反演常见的第二种形式。</p><p>所以就有：</p><script type="math/tex; mode=display">f(k)=\sum_{k|d}\mu(\frac{d}{k})g(d)</script><p>我们的答案是$f(1)$，那么就是：</p><script type="math/tex; mode=display">f(1)=\sum_{d=1}^{n}\mu(d)g(d)</script><p>现在来考虑怎么计算 $g$ 。</p><script type="math/tex; mode=display">g(k)=\sum_{x=1}^{n}\sum_{y=1}^{m}\lfloor\frac{n}{x}\rfloor\lfloor\frac{m}{y}\rfloor\cdot[k|gcd(i,j)]</script><p>后面的 $k$ 很碍眼，消掉他。</p><script type="math/tex; mode=display">g(k)=\sum_{x=1}^{\lfloor\frac{n}{k}\rfloor}\sum_{y=1}^{\lfloor\frac{m}{k}\rfloor}\lfloor\frac{n}{xk}\rfloor\lfloor\frac{m}{yk}\rfloor</script><p>于是我们预处理一个函数 $s$ ：</p><script type="math/tex; mode=display">s(k)=\sum_{i=1}^{k}\lfloor\frac{k}{i}\rfloor</script><p>那么 $g(k)$ 就很好算了：</p><script type="math/tex; mode=display">g(k)=s(n/k) \cdot s(m/k)</script><p>复杂度的话还好，预处理 $s$ 时可以整出分块，$O(\sqrt{n})$ 爽歪歪。然后的话，发现统计答案的时候 $g$ 函数也可以整出分块，$O(\sqrt{n})$ 。最后总时间复杂度 $O(T\sqrt{n})$ (???)反正过了就行，我也不会算 $QwQ$ 。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,m,cnt;</span><br><span class="line"><span class="keyword">int</span> mui[N],vis[N],prime[N];</span><br><span class="line">ll s[N]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _pre_mui()&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;<span class="number">5e4</span>)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)mui[i]+=mui[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=N;++x)&#123;<span class="comment">//实际上这里是O(n sqrt(n))，不过影响不大。</span></span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=x;l=r+<span class="number">1</span>)</span><br><span class="line">            r=(x/(x/l)),res+=<span class="number">1l</span>l*(r-l+<span class="number">1</span>)*(x/l);</span><br><span class="line">        s[x]=res;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m)n^=m^=n^=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        ans+=<span class="number">1l</span>l*(mui[r]-mui[l<span class="number">-1</span>])*s[n/l]*s[m/l];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _pre_mui();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,solve(n,m));</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij</script>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [国家集训队]Crash的数字表格  莫比乌斯反演  luoguP1829</title>
      <link href="/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP1829/"/>
      <url>/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP1829/</url>
      
        <content type="html"><![CDATA[<p>吐槽一下Typora这个编辑器：码了一上午的题解，居然突然卡机，并且自动关掉了，然后重新打开，发现保存的也没了。然后弹出一个“Typora意外关闭”的窗口，真想一拳上去。 只好重新自己码了……。(以上是吐槽，请不要在意)</p><p>算了算了，重新写吧。所以你看到的这是第二份稿子。</p><p>仍然上莫比乌斯反演。</p><a id="more"></a><p>众所周知：</p><script type="math/tex; mode=display">lcm(i,j)=\frac{ij}{gcd(i,j)}​</script><p>那么我们将这个带进原式：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}lcm(i,j) = \sum_{i=1}^{n}\sum_{j=1}^{m}\frac{ij}{gcd(i,j)}​</script><p>我们枚举 $gcd(i,j)$ 的值：</p><script type="math/tex; mode=display">\sum_{d=1}^{n}\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)=d]\frac{ij}{d}</script><script type="math/tex; mode=display">=\sum_{d=1}^{n}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ijd</script><script type="math/tex; mode=display">=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij</script><p>设：</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=x]ij</script><script type="math/tex; mode=display">g(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[x|gcd(i,j)]ij</script><p>可得：</p><script type="math/tex; mode=display">g(x)=\sum_{x|d}f(d)</script><p>考虑怎么计算 $g(x)$ ：</p><script type="math/tex; mode=display">g(x)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[x|gcd(i,j)]ij</script><script type="math/tex; mode=display">g(x)=\sum_{i=1}^{\lfloor\frac{n}{dx}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{dx}\rfloor}ij \cdot x^2</script><script type="math/tex; mode=display">g(x)=x^2\sum_{i=1}^{\lfloor\frac{n}{dx}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{dx}\rfloor}ij</script><p>这个显然是可以 $O(1)$ 算出的。</p><p>继续：</p><script type="math/tex; mode=display">ans=\sum_{d=1}^{n}d\cdot f(1)</script><script type="math/tex; mode=display">f(1)=\sum_{d=1}^{\lfloor\frac{n}{}\rfloor}\mu(d)g(d)</script><p>这个时候的复杂度只是 $O(n^2)$ ，继续优化。</p><p>将 $ans$ 写出：</p><script type="math/tex; mode=display">ans=\sum_{d=1}^{n}d\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)=1]ij</script><p>发现后面可以整除分块！</p><p>继续，将 $f(1)$ 写出：</p><script type="math/tex; mode=display">f(1)=\sum_{i=1}^{n}\mu(i)g(i)</script><script type="math/tex; mode=display">f(1)=\sum_{i=1}^{n}\mu(i)i^2\sum_{a=1}^{\lfloor\frac{n}{di}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{di}\rfloor}ab</script><p>将 $g$ 拆开后，我们可以发现后面又可以整除分块！</p><p>那么现在就是 $O(n)$ 了，可以过。</p><h4 id="Code-O-n"><a href="#Code-O-n" class="headerlink" title="Code-$O(n)$"></a>Code-$O(n)$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 20101009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mui[N],sum[N];</span><br><span class="line"><span class="keyword">int</span> vis[N],prime[N],cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _pre_mui(<span class="keyword">int</span> n)&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            mui[id*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1l</span>l*(<span class="number">1l</span>l*(n/l)*(n/l+<span class="number">1</span>)/<span class="number">2</span>%MOD)*(<span class="number">1l</span>l*(m/l)*(m/l+<span class="number">1</span>)/<span class="number">2</span>%MOD)%MOD;</span><br><span class="line">        ans+=<span class="number">1l</span>l*(sum[r]-sum[l<span class="number">-1</span>])%MOD*res%MOD;</span><br><span class="line">        ans%=MOD;</span><br><span class="line">    &#125;<span class="keyword">return</span> (ans+MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m)n^=m^=n^=m;</span><br><span class="line">    _pre_mui(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        sum[i]=(sum[i<span class="number">-1</span>]+<span class="number">1l</span>l*i*i%MOD*mui[i]%MOD+MOD)%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1l</span>l*(l+r)*(r-l+<span class="number">1</span>)/<span class="number">2</span>%MOD;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*solve(n/l,m/l)*res%MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>毒瘤出题人不会放过我们，这个毒瘤更改了数据： $n,m \leq 10^{10}$ 。</p><p><del>“哇咔咔咔卡掉你们的 O(n) !”</del></p><p><del>真想一拳上去这个智障。</del></p><p> $O(\sqrt{n})$ 是过的了的，故考虑向着这个方向前进。</p><p>继续推式子：</p><script type="math/tex; mode=display">ans=\sum_{d=1}^{n}d\sum_{i=1}^{n}\mu(i)i^2\sum_{a=1}^{\lfloor\frac{n}{di}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{di}\rfloor}ab</script><p>看见这个 $di$ 了吗？我们令 $T=di$ ，然后将 $T$ 扔到前面去枚举一下。</p><p>然后就是后面的两个 $\sum$ ，这玩意跟 $i,d$ 没关系，一起扔到前面去。</p><p>于是就变成了：</p><script type="math/tex; mode=display">ans=\sum_{T=1}^{n}\sum_{a=1}^{\lfloor\frac{n}{T}\rfloor}\sum_{b=1}^{\lfloor\frac{m}{T}\rfloor}ab\sum_{i|T}i^2\frac{T}{i}\mu(i)</script><p>？？？？？？？</p><p>首先前面的这段是没有问题的对吧，那么后面的呢？</p><p>后面的原来是不是：</p><script type="math/tex; mode=display">\sum_{d=1}^{n}d\sum_{i=1}^{n}\mu(i)i^2</script><p>那么……现在我们枚举的 $T$ 是 $i \cdot d$ ，我们枚举了一下可能的 $i$ ，成为 $i$ 的必备条件肯定是能被 $T$ 整除对吧？那么这个时候的 $d$ 呢？很显然是 $\frac{T}{i}$ 对吧？</p><p>所以啊……就是这么写了。</p><p>但是这样写有什么用啊 $QwQ$</p><p>首先，我们来看，$i^2$ 是个什么鬼？我们设一个函数 $Q(i)=i^2$ ，于是我们可以发现，这个东西是个完全积性函数，然后看 $\frac{T}{i}$ ，显然是 $id(\frac{T}{i})$ ，也是完全积性函数。于是两个完全积性函数用狄利克雷卷积卷起来，它们的狄利克雷卷积是一定可以筛出来的。后面的 $\mu$ 是积性函数，然后呢？后面的那一坨都可以筛出来！</p><p>于是美滋滋。</p><p>我们设 $sum[k]$ 表示当 $T$ 为 $k$ 的时候后面那一坨的值。</p><p>那么现在分三种情况：</p><ul><li><p>$k$ 是质数，这下子后面的 $i$ 只能是 $1$ 和 $k$ ，$1$ 的时候的值就是 $k$ ，$k$ 的时候的值是 $k^2\cdot \frac{k}{k}\cdot \mu(k)$ ，很显然这个时候的 $\mu(k)$ 的值是 $-1$ ，于是这个时候的值是 $-k^2$ ，那么这个时候 $sum[k]$ 的值是 $k-k^2$ 。</p></li><li><p>$\mu(k)$ 为 $0$ ，这下子的话就肯定有一个 $j$ ，使得 $k$ 可以整除 $j^2$ ，这个时候假设就只能整除 $j^2$ ，也就是说 $\mu(k/j)$ 的值非 $0$ 。那么我们看看，在 $sum$ 所计算的式子中，只有 $T$ 的因子对 $T$ 产生贡献。考虑 $k/j$ 到 $k$ 多了什么因子。这个时候多的因子有两类，一类是包含了 $j^2$ 的，一类是只包含了 $j$ 的。第二类的可以先不管，因为之前 $k/j$ 中有了一个 $j$ ，这类因子的贡献已经算过了。那么对于第一类因子，因为包含了 $j^2$ ，所以 $\mu$ 值为 $0$ ，对答案没有任何贡献。</p><p>那么这个时候对答案有贡献的还是 $k/j$ 的因子，乘上一个 $j$ 后没有更多的对答案造成贡献的因子。</p><p>但是我们发现上限 $T$ 变了，增大了 $j$ 倍，对于原来的每份贡献的值也增大了 $j$ 倍。由于没有其他的贡献，$k$ 的所有的贡献都来自 $k/j$ ，那么直接转移就好。</p><p>所以是$sum[k]=sum[k/j]\cdot j$</p></li><li><p>对于剩下的情况，我们发现，这个可以直接转移了。当我们枚举 $k$ 的时候，考虑怎么用 $k$ 来转移 $k\cdot j$ ，这个时候 $j$ 是质数，并且 $k$ 中不包含 $j$ ，也就是说 $k$ 与 $j$ 互质。于是根据积性函数的性质，$sum[k]=sum[k/j]\cdot sum[j]$ 就好。</p></li></ul><p>于是这个时候前面再整出分块一下，复杂度 $O(\sqrt{n})$ 。</p><p><del>听说有人被卡住 $O(n)$ 后没有推式子了，直接上了个杜教筛，这人一看就是杜教士了，并且也说明不珂学的上杜教筛是布星的</del></p><h4 id="Code-O-sqrt-n"><a href="#Code-O-sqrt-n" class="headerlink" title="Code-$O(\sqrt{n})$"></a>Code-$O(\sqrt{n})$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 20101009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum[N],vis[N],prime[N],cnt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _pre_mui_sum()&#123;</span><br><span class="line">    vis[<span class="number">1</span>]=sum[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,sum[i]=(i<span class="number">-1l</span>l*i*i%MOD+MOD)%MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;=N)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;sum[i*prime[j]]=<span class="number">1l</span>l*sum[i]*prime[j]%MOD;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> sum[i*prime[j]]=<span class="number">1l</span>l*sum[i]*sum[prime[j]]%MOD;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        sum[i]=(sum[i<span class="number">-1</span>]+sum[i])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    _pre_mui_sum();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m)<span class="built_in">std</span>::swap(n,m);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        <span class="keyword">int</span> res=(<span class="number">1l</span>l*(<span class="number">1</span>+n/l)*(n/l)/<span class="number">2</span>%MOD)*(<span class="number">1l</span>l*(<span class="number">1</span>+m/l)*(m/l)/<span class="number">2</span>%MOD)%MOD;</span><br><span class="line">        ans+=<span class="number">1l</span>l*(sum[r]-sum[l<span class="number">-1</span>]+MOD)%MOD*res%MOD;</span><br><span class="line">        ans%=MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ans+MOD)%MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 士兵占领 网络流 luogu4311</title>
      <link href="/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP4311/"/>
      <url>/2019/03/01/%5B%E9%A2%98%E8%A7%A3%5DluoguP4311/</url>
      
        <content type="html"><![CDATA[<p>讨厌死权限题了，然而这题又是 $bzoj$ 的权限题。</p><p>$QwQ$ 只好去洛谷上做了，幸好洛谷收的题目比较多。</p><p>这题就是网络流，我们先假设棋盘上摆满了士兵，这个时候需要拿走一些士兵，使得棋盘仍然是合法的，求拿走的最多数。</p><a id="more"></a><p>额……最多数让我想起了最大流，不过现在还是先来考虑怎么建图。</p><p>我们建两排点，第一排表示行，一共 $M$ 个点，第二排表示列，一共 $N$ 个点。对于一个点 $(x,y)$ ，就像从第一排的第 $x$ 号点向第二排的第 $y$ 号点连一条边权为 $1$ 的边。</p><p>这个显然是没有问题的。</p><p>然后就是限制，对于第 $k$ 行，至少要有 $L_k$ 个士兵，于是我们从 $s$ 连一条边权为 $L_k$  的边，连向第一排的第 $k$ 号点。同样的道理，对于第二排的点，我们也像这样连边，连向 </p><p>$t$ 。</p><p>然后就是跑 $dinic$ 了，别忘了跑出来的不是答案，而是最多拿走的士兵数，这个时候用整个棋盘的空位置的个数减去跑出来的 $maxflow$ 才是答案。</p><p>需要注意几个点：</p><ul><li><p>当我们在看到了一个行/列的时候，需要判断一下。假设这个是行，那么这行的位置显然有 $n$ 个，如果 $n$ 减去这行障碍的个数，再减去最少要放的士兵数后为负数，那么显然就怎么也不可能有合法的方案，于是直接输出 “JIONG” 就好了。</p></li><li><p>注意整个棋盘的空位置不是 $N\cdot M$ ，而是 $N\cdot M-K$!</p></li><li>数组大小的话只需要开到 $2n$ ，并不需要开到 $n^2$ ，因为只有两排点。但是边的数组大小需要开到 $n^2$ ，因为我们对于棋盘上的一个点就要连一条边表示它！</li></ul><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N*N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,s,t,cnt(<span class="number">1</span>),dep[N],head[N];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[N][N],Li[N],Ci[N],Lm[N],Cm[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">    q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">            used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(m),IN(n),IN(k);</span><br><span class="line">    s=<span class="number">1</span>,t=n+m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> atot=n*m-k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)IN(Li[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(Ci[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;IN(x),IN(y);</span><br><span class="line">        <span class="built_in">map</span>[x][y]=<span class="number">1</span>,Lm[x]++,Cm[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">map</span>[i][j])add(i,j+m,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> flow=n-Li[i]-Lm[i];</span><br><span class="line">        <span class="keyword">if</span>(flow&lt;<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"JIONG!"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">else</span> add(s,i,flow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> flow=m-Ci[i]-Cm[i];</span><br><span class="line">        <span class="keyword">if</span>(flow&lt;<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"JIONG!"</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">else</span> add(i+m,t,flow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atot-dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 YY的GCD 莫比乌斯反演 luogu2257</title>
      <link href="/2019/02/28/%5B%E9%A2%98%E8%A7%A3%5DluoguP2257/"/>
      <url>/2019/02/28/%5B%E9%A2%98%E8%A7%A3%5DluoguP2257/</url>
      
        <content type="html"><![CDATA[<p>又是一道反演题，显然，题目要求我们求出下式：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)\in prime]​</script><p>这个不好求，我们来推式子。</p><p>设 $n \leq m$</p><a id="more"></a><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)\in prime]</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{i=1}^{n}\sum_{j=1}^{m}[gcd(i,j)=k] \cdot[k \in prime]​</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[gcd(i,j)=1]\cdot[k \in prime]</script><p>我们知道 $\mu$ 函数的一个性质：</p><script type="math/tex; mode=display">[n=1]=\sum_{d|n} \mu(d)</script><p>将 $n$ 换为 $gcd(i,j)$ ，然后扔回原式。</p><script type="math/tex; mode=display">[n=1]=\sum_{d|n} \mu(d) \  \Rightarrow \ [gcd(i,j)=1]=\sum_{d|gcd(i,j)} \mu(d)</script><script type="math/tex; mode=display">\sum_{k=1}^{n}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}\sum_{d|gcd(i,j)}\mu(d) \ \ \ (k \in prime)​</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[d|gcd(i,j)]\cdot \mu(d) \ \ \ (k \in prime)</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}[1|gcd(i,j)]\cdot \mu(d) \ \ \ (k \in prime)</script><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}\mu(d) \ \ \ (k \in prime)</script><p>我们知道，这里的 $\sum_{i=1}^{\lfloor \frac{n}{kd} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{kd} \rfloor}​$ 可以变成 $\lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor​$ 的，这是等价的。于是：</p><script type="math/tex; mode=display">=\sum_{k=1}^{n}\sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\mu(d)\cdot \lfloor \frac{n}{kd} \rfloor \lfloor \frac{m}{kd} \rfloor \ \ \ (k \in prime)​</script><p>这个式子依旧不可做，因为会超时，考虑如何再一步优化。</p><p>设 $T=kd$ ，那么我们枚举 $T$ ：</p><script type="math/tex; mode=display">=\sum_{T=1}^{n}\sum_{k|T,k\in prime}\mu(\frac{T}{k})\cdot \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor</script><p>$QvQ​$ 我们将 $\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor​$ 扔到前面去。</p><script type="math/tex; mode=display">=\sum_{T=1}^{n}\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor\sum_{k|T,k\in prime}\mu(\frac{T}{k}) ​</script><p>显然后面的可以预处理，预处理好了后，我们所需要计算的就是这一块：</p><script type="math/tex; mode=display">\sum_{T=1}^{n}\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T}\rfloor</script><p>这个特别好处理，整除分块优化一波，复杂度 $O(\sqrt(n))$ 。</p><p>开始居然感觉这题不可做，然后想要不要用毒教筛来筛 $\mu$ 的前缀和，不过显然我是不会这种黑科技的 $QwQ$</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[N],sum[N],mui[N],f[N],prime[N],cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _pre_mui()&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;N)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;prime[i]*j&lt;=N;++j)</span><br><span class="line">            f[j*prime[i]]+=mui[j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)sum[i]=sum[i<span class="number">-1</span>]+f[i];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(n/(n/l),m/(m/l));</span><br><span class="line">        ans+=(ll)(sum[r]-sum[l<span class="number">-1</span>])*(ll)(n/l)*(ll)(m/l);</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _pre_mui();</span><br><span class="line">    <span class="keyword">int</span> n,m,T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n&gt;m)<span class="built_in">std</span>::swap(n,m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,solve(n,m));</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】 从狄利克雷卷积到莫比乌斯反演</title>
      <link href="/2019/02/27/%5B%E6%95%B0%E8%AE%BA%5DDirichley%E5%88%B0Mobius/"/>
      <url>/2019/02/27/%5B%E6%95%B0%E8%AE%BA%5DDirichley%E5%88%B0Mobius/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="在此输入你的密码以便阅读全文" />    <label for="pass">在此输入你的密码以便阅读全文</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 狄利克雷卷积 </tag>
            
            <tag> 莫比乌斯函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [POI2007]ZAP-Queries 莫比乌斯反演 luogu3455</title>
      <link href="/2019/02/27/%5B%E9%A2%98%E8%A7%A3%5DluoguP3455/"/>
      <url>/2019/02/27/%5B%E9%A2%98%E8%A7%A3%5DluoguP3455/</url>
      
        <content type="html"><![CDATA[<p>很显然是让我们求出下式：</p><script type="math/tex; mode=display">ans=\sum_{i=1}^{A}\sum_{j=1}^{B}[gcd(i,j)=K]</script><p>根据性质可以得到：</p><a id="more"></a><script type="math/tex; mode=display">ans=\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[gcd(i,j)=1]</script><p>我们设两个函数：</p><ul><li>函数 $f$，$f(x)$ 表示 $\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[gcd(i,j)=x]$</li><li>函数 $g$ ，$g(x)$ 表示 $\sum_{i=1}^{\lfloor\frac{A}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{B}{K}\rfloor}[x|gcd(i,j)]$</li></ul><p>我们可以得到：</p><script type="math/tex; mode=display">g(x)=\sum_{x|d} f(x)</script><p>这是莫比乌斯反演的第二个形式：</p><script type="math/tex; mode=display">g(n)=\sum_{n|d} f(n) \ \Rightarrow \ f(n)=\sum_{n|d}g(d) \cdot \mu(\frac{d}{n})</script><p>于是：</p><script type="math/tex; mode=display">g(x)=\sum_{x|d} f(x) \ \Rightarrow \ f(x)=\sum_{x|d}g(x) \cdot \mu(\frac{d}{x})</script><script type="math/tex; mode=display">=g(x)=\sum_{x|d} f(x) \ \Rightarrow \ f(x)=\sum_{x|d}g(\frac{d}{x}) \cdot \mu(x)</script><p>设 $n=\lfloor\frac{A}{K}\rfloor\ ,\ m=\lfloor\frac{B}{K}\rfloor$</p><p>那么：</p><script type="math/tex; mode=display">g(x)=\sum_{i=1}^{n}\sum_{i=1}^{m} [x|gcd(i,j)]=\sum_{i=1}^{\lfloor\frac{n}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{K}\rfloor}[1|gcd(i,j)]</script><script type="math/tex; mode=display">=\sum_{i=1}^{\lfloor\frac{n}{K}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{K}\rfloor}[1|gcd(i,j)]=\lfloor\frac{A}{K}\rfloor \times\lfloor\frac{B}{K}\rfloor</script><script type="math/tex; mode=display">ans=f(1)</script><script type="math/tex; mode=display">f(1)=\sum_{i=1}^{n}\mu(i)*g(i)=\sum_{i=1}^{n}\mu(i)*\lfloor\frac{A}{K}\rfloor *\lfloor\frac{B}{K}\rfloor</script><p>这个式子是 $O(n)$ 的。</p><p>发现 $\lfloor\frac{A}{K}\rfloor \times\lfloor\frac{B}{K}\rfloor$ 可以整除分块，于是我们便可以做到 $O(\sqrt{x})$</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,cnt;</span><br><span class="line"><span class="keyword">int</span> prime[N],mui[N],vis[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _Pre_mui()&#123;</span><br><span class="line">    mui[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])prime[++cnt]=i,mui[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;=N)<span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))&#123;mui[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> mui[i*prime[j]]=-mui[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)sum[i]=sum[i<span class="number">-1</span>]+mui[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    n/=k,m/=k;</span><br><span class="line">    <span class="keyword">int</span> lim=min(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lim;)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> j=min(n/(n/i),m/(m/i));</span><br><span class="line">        ans+=<span class="number">1l</span>l*(sum[j]-sum[i<span class="number">-1</span>])*(n/i)*(m/i);</span><br><span class="line">        i=j+<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _Pre_mui();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        solve(n,m,k);</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以就没了。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  tower  网络流  bzoj4657</title>
      <link href="/2019/02/26/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4657/"/>
      <url>/2019/02/26/%5B%E9%A2%98%E8%A7%A3%5Dbzoj4657/</url>
      
        <content type="html"><![CDATA[<p>考试的时候正好考了这道题，全场仅有 $lys$ 大佬 $AC$ 。</p><p>都 $GG$ 了（当然我最惨，暴力分居然被卡了，只有 $10$ 分 $QwQ$）。</p><a id="more"></a><p>我们来看一下题目：</p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226154041.png" alt=""></p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226154156.png" alt=""></p><p>题目的阶梯数据真良心！</p><hr><h4 id="20分做法"><a href="#20分做法" class="headerlink" title="20分做法"></a>20分做法</h4><p>很显然，$n,m \le 5$ ，分明是摆着让我们爆搜，那么直接暴力枚举打那个，处理一下路线的交叉问题就好了。</p><p>然而我菜爆了，这个居然打挂了，然后就只剩下 $10$ 分了 $QvQ$。</p><h4 id="40分做法"><a href="#40分做法" class="headerlink" title="40分做法"></a>40分做法</h4><p>可以加一个剪枝，怎么剪呢？</p><p>对于一个炮塔，假设我们之前在其打击范围内已经找到了一个点，该点跟该炮塔的曼哈顿距离是 $x$ ，其权值为 $a$ ,然后现在我们继续 $dfs$ ，发现又找到了一个点也在打击范围内，该点的与该炮的曼哈顿距离是 $y$ ，其权值是 $b$ 。</p><p>那么现在我们假设 $x<y$ 且="" $a="">b$ ，那么显然，对于最优的方案，该炮塔肯定不会打 $b$ 权值的点。也就是说，$b$ 权值的点没有 $a$ 权值的点优，因为权值少了，收益没那么大，并且风险(距离)(指容易被打断的风险)增加了。这时我们便可以放弃 $b$ 点，这就是一个小小的剪枝优化。</y$></p><h4 id="100分做法"><a href="#100分做法" class="headerlink" title="100分做法"></a>100分做法</h4><p>考虑最小割。</p><p>对于每一个炮塔，我们将其能打出去的范围的所有点连成一条链，这条链的两端分别连着 $s$ 和 $t$ 。</p><p>这个时候的 “割” 就是说你这个炮打到哪里结束。</p><p>如下图：</p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226161927.png" alt=""></p><p>那么网络流的图中，这条链中 $3-4$ 的这条边被切断了。</p><p>所以我们每一个炮有一个打到的地方(当然可以不打)，这个时候每一条链都断了，所以图就断了。</p><p>但是关系并没有那么简单，假设现在又有一个炮塔，其轨迹跟现在的炮相交了，如果相交的点的编号 $&lt;3$，显然这个红炮是不可以打到小蓝点( $3$ 号点)的，我们该如何表示这种关系呢？</p><p>现在所表示的状况：</p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226162746.png" alt=""></p><p>现在的状况就是，相交点上面的点都打不到了(红炮)，相交点右边的点都打不到了(蓝炮)。</p><p>但是我们一定要保证 $S$ 到 $T$ 的联通。</p><p>那么就可以确定，如果红炮所在的点连接 $S$ ，那么蓝炮就连 $T$，这样才可以使 $S$ 和 $T$ 连通。</p><p>然后来解决怎么处理相交点的连边问题。</p><p>但是，如果按照上面的 “红炮连 $S$ ，蓝炮连 $T$” 的话，直接这样连不就好了吗？</p><p><img src="/2019/02/26/[题解]bzoj4657/TIM截图20190226163615.png" alt=""></p><p>仔细想一想，这其实是布星的，因为我们要保证这个相交点的关系不会被割掉，那么就因该将边值设为 $inf$，但是设哪条边呢？这里所有的边的值都是这个点的权值，我们不可能直接改点的权值吧？</p><p>那么很显然，我们将相交点拆成两个点，这两个点中间连有一条边权为 $inf$ 的边，这时无论如何都割不掉这个点了。</p><p>最后就是，既然要求最小割，对于如果炮不启动的话边权是 $0$ ，那么就达成了 “最小” 的效果，这是错的。所以我们设一个常量 $T$ ，将每条边的边权都设为 $T-v_i$ 就好。</p><p>然后就是板子 $Dinic$。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(i,j,type) type*n*m+(i-1)*m+j</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e1</span>+<span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[N][N],ans,n,m,s,t;</span><br><span class="line">int cnt(1),head[N*N*2],dep[N*N*2];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N*N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">    q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(!dep[v]&amp;&amp;G[i].val&gt;<span class="number">0</span>)</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>,q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;G[i].val&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            used+=(rlow=dfs(v,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">    s=<span class="number">0</span>,t=n*m*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> direction=-<span class="built_in">map</span>[i][j]<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> x=i,y=j,Mx_val=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    x+=dx[direction],y+=dy[direction];</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;n||y&lt;<span class="number">1</span>||y&gt;m)<span class="keyword">break</span>;</span><br><span class="line">                    Mx_val=max(Mx_val,<span class="built_in">map</span>[x][y]);</span><br><span class="line">                &#125;ans+=Mx_val;</span><br><span class="line">                <span class="keyword">if</span>(direction&lt;<span class="number">2</span>)add(s,id(i,j,<span class="number">0</span>),inf);</span><br><span class="line">                <span class="keyword">else</span> add(id(i,j,<span class="number">1</span>),t,inf);</span><br><span class="line">                x=i,y=j;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> tx=x,ty=y;</span><br><span class="line">                    x+=dx[direction],y+=dy[direction];</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;n||y&lt;<span class="number">1</span>||y&gt;m)<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span>(direction&lt;<span class="number">2</span>)add(id(tx,ty,<span class="number">0</span>),id(x,y,<span class="number">0</span>),Mx_val-max(<span class="number">0</span>,<span class="built_in">map</span>[tx][ty]));</span><br><span class="line">                    <span class="keyword">else</span> add(id(x,y,<span class="number">1</span>),id(tx,ty,<span class="number">1</span>),Mx_val-max(<span class="number">0</span>,<span class="built_in">map</span>[tx][ty]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> add(id(i,j,<span class="number">0</span>),id(i,j,<span class="number">1</span>),inf);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans-Dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>为什么之前没想出来呢？</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2009]诗人小G 四边形不等式/决策单调性优化DP luoguP1912</title>
      <link href="/2019/02/25/%5B%E9%A2%98%E8%A7%A3%5DluoguP1912/"/>
      <url>/2019/02/25/%5B%E9%A2%98%E8%A7%A3%5DluoguP1912/</url>
      
        <content type="html"><![CDATA[<p>神奇的题目 $QvQ$ ，卡了我好久。</p><p>哎，主要是细节要处理到位，否则就会 <strong>WA</strong> 声满片。</p><a id="more"></a><p>记录一下我壮观的提交记录：</p><p><img src="/2019/02/25/[题解]luoguP1912/5c738cec782df.png" alt=""></p><p>太杯具了 $QvQ$</p><p><del>(扯谈扯不下去了…….)</del></p><p>进入正题吧。</p><blockquote><p><del>路人甲：$bzoj$ 上居然没有这道题？</del><br><del>导演：赶紧走开，不管你的事</del></p></blockquote><p>这题明显是 $DP$，我们可以很简单的得到 $DP$ 方程：</p><p>设 $f[i]$ 表示对前 $i$ 句诗排版后的最小不协调度，那么很显然，对于一个现在我们需要转移的 $i$，我们会找到一个最优的 $j$ ，使得第 $j+1$ 句到第 $i$ 句组成一个新的行。那么之前的行的总共的最小不协调度显然是 $f[j]$，现在我们就来计算一下 $f[i]$ 的最小不协调度。</p><p>显然，是下式(其中 $sum$ 是句子长度的前缀和)：</p><script type="math/tex; mode=display">f[i]=f[j]+{|sum[i]-sum[j]-L-1|}^P</script><p>这就是状态转移方程，的确很好理解。但是……这样子做是 $O(N^2)$ 的复杂度，只能拿 $30$ 分。</p><p>而按照题目的数据范围，正解的复杂度因该是 $O(n log n)$ 左右。接下来考虑怎么优化。</p><p>经<del>打表</del>观察发现，如果我们将每次用作转移 $i$ 的最优的 $j$ 存起来，输出时会发现，$j$ 是单调递增的。</p><p>证明的话的确不好证，可以看看 $lyd$ 的书。但是按照实际理解一下是可以的，我们将 $j$ 后面的一直到 $i$ 的句子组成了新的一行，那么如果 $j$ 不单调上升的话，新的一句将会变的很长很长很长，那么这时这句造成的不协调度将会以几何数的形式疯狂增长，那么唯一的方法就是将这句长句断句，这样子 $j$ 就会变大，可以感性理解一下 $QvQ$。</p><p>但是我们知道了 $j$ 是单调上升的这条性质有什么用呢？</p><p>很显然，每一次转移的时候不必往前找了，直接往后找。</p><p>我们维护一个队列，队列里的每一个元素有三个变量：$l,r,c$ ，其中 $l$ 和 $r$ 表示 $c$ 这个决策的适用范围，并且在这个范围中 $c$ 是最优的 $j$。</p><p>那么现在有了一个新的 $i$，考虑怎么维护这个队列。</p><p>我们可以先找到 $i$ 所在的范围的最优的 $j$，那么这时我们检查队头，如果队头的范围已经不包括 $i$ 了，那么直接弹出，因为既然队头的范围不包括 $i$ 了，那么这个队头对 $i+1$ 及后面的元素都不能产生贡献，故直接弹出。</p><p>弹出无用的队头后，转移的话就是 $O(1)$ 了：直接取队头转移不就好了吗？</p><p>那么现在考虑怎么将 $i$ 加入这个队列，或许这个 $i$ 也会对后面的元素产生贡献。</p><p>我们检查当前的队尾，怎么判断这个队尾是否比 $i$ 更优呢？现在队尾的范围是 $l,r$ ，如果 $i$ 更新 $l$ 比 $c$ 更新 $l$ 更优，显然 $i$ 会比当前 $l,r$ 范围类的所有的 $c$ 更优，故弹出队尾。</p><p>那么，假设现在我们碰到了一个队尾，其中 $i$ 更新 $r$ 更优， $c$ 更新 $l$ 更优，怎么办呢？也就是说这个元素的范围中分成两半，前一半 $c$ 更新更优，后一半 $i$ 更新更优，显然要拆成两个队列元素。那么我们怎么知道这个位置呢？二分！</p><p>那么这个时候我们可以得到答案了，只是输出怎么办呢？</p><p>很简单，每次转移的时候记录一下<strong>转移自哪里</strong>，这就是分行，然后输出即可。</p><p>最后就是精度问题。</p><p>题目要求，如果 $f[n]$ (即所有句子排版后的最小不协调度) 还是大于了 $1e18$ ，那么输出 “$Too \ hard\ to\ arrange$”，但是如果在 $DP$ 的过程中就炸了 $long \ long$，那就 $GG$ 了。所以我们使用 $long \ double$ ，精度更高，(不会 $int$ 的，这辈子也不会用 $int$ 的)。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NS=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,N,L,P;</span><br><span class="line"><span class="keyword">int</span> head,tail;</span><br><span class="line"><span class="keyword">int</span> last[NS],ans[NS],Next[NS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> c,l,r;&#125;q[NS];</span><br><span class="line"><span class="keyword">char</span> s[NS][<span class="number">35</span>];</span><br><span class="line">ld sum[NS],f[NS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="built_in">memset</span>(q,<span class="number">0</span>,<span class="keyword">sizeof</span>(q));</span><br><span class="line">    <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ld <span class="title">pows</span><span class="params">(ld x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//快速幂</span></span><br><span class="line">    ld ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x*=x)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans*=x;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ld <span class="title">val</span><span class="params">(<span class="keyword">int</span> j,<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//转移函数</span></span><br><span class="line">    <span class="keyword">return</span> f[j]+pows(<span class="built_in">abs</span>(sum[i]-sum[j]-L<span class="number">-1</span>),P);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">half</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//二分过程</span></span><br><span class="line">    <span class="keyword">int</span> now=q[tail].c,ls=q[tail].l,rs=q[tail].r;<span class="comment">//当前队尾范围</span></span><br><span class="line">    <span class="keyword">int</span> ret=q[tail].r+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ls&lt;=rs)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(ls+rs)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(val(i,mid)&lt;=val(now,mid))rs=mid<span class="number">-1</span>,ret=mid;<span class="comment">//i更优</span></span><br><span class="line">        <span class="keyword">else</span> ls=mid+<span class="number">1</span>;<span class="comment">//c更优</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret!=q[tail].l)q[tail].r=ret<span class="number">-1</span>;<span class="comment">//分成了两半</span></span><br><span class="line">    <span class="keyword">else</span> --tail;<span class="comment">//整个元素都比不过i</span></span><br><span class="line">    <span class="keyword">if</span>(ret&lt;=N)q[++tail]=(Node)&#123;i,ret,N&#125;;<span class="comment">//i分了一个区间时，加入新元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;<span class="comment">//值得拥有的鬼畜输出</span></span><br><span class="line">    <span class="keyword">if</span>(f[N]&gt;<span class="number">1e18</span>)<span class="built_in">puts</span>(<span class="string">"Too hard to arrange"</span>);<span class="comment">//无解，放心判1e18</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ll)(f[N]+<span class="number">0.5</span>));<span class="comment">//注意精度问题</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i;i=last[i])Next[last[i]]=i;<span class="comment">//输出</span></span><br><span class="line">        <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">            now=Next[now];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;now;++j)<span class="built_in">printf</span>(<span class="string">"%s "</span>,s[j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s[now]);</span><br><span class="line">            i=now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"--------------------"</span>);<span class="comment">//注意</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        clear();</span><br><span class="line">        IN(N),IN(L),IN(P);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]);</span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>]+<span class="built_in">strlen</span>(s[i])+<span class="number">1</span>;<span class="comment">//做前缀和</span></span><br><span class="line">            <span class="comment">/*因为输出是有空格的，所以加上一个1*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        q[head=tail=<span class="number">1</span>]=(Node)&#123;<span class="number">0</span>,<span class="number">1</span>,N&#125;;<span class="comment">//初始元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;q[head].r&lt;i)++head;<span class="comment">//淘汰无用队头</span></span><br><span class="line">            ++q[head].l;</span><br><span class="line">            f[i]=val(q[head].c,i);<span class="comment">//O(1) 转移</span></span><br><span class="line">            last[i]=q[head].c;<span class="comment">//记录“转移自哪里”</span></span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;val(i,q[tail].l)&lt;=val(q[tail].c,q[tail].l))tail--;<span class="comment">//弹出劣质队尾</span></span><br><span class="line">            half(i);<span class="comment">//二分</span></span><br><span class="line">        &#125;</span><br><span class="line">        output();<span class="comment">//鬼畜输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//终于结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我有个问题。</p><p>这是写的什么文章啊 $QvQ$ ，让我们来猜测一下。</p><p><img src="/2019/02/25/[题解]luoguP1912/5c738c9bc658e.png" alt=""><br>白日依山尽，黄河入海流，欲穷千里目，更上一层楼。</p><p>这是 小 $G$  写的？作者明明不是小 $G$ 好不好。</p><p>$QvQ$ 有毒啊……</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
            <tag> 决策单调性 </tag>
            
            <tag> 四边形不等式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】  [USACO4.4]Pollutant Control  网络流  luoguP1344</title>
      <link href="/2019/02/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP1344/"/>
      <url>/2019/02/24/%5B%E9%A2%98%E8%A7%A3%5DluoguP1344/</url>
      
        <content type="html"><![CDATA[<p>有必要么……直接打个电话给零售商：”我的牛奶不对，不要收牛奶！”不久可以了吗……</p><p><del>(好了好了这是扯淡)</del></p><a id="more"></a><p>显然这个运输图的 $1$ 号点就是公司发送牛奶的地方，$n$ 号点就是零售商，然后每一条边就是这个货车的出发点与到达点，边权即为拦截这个货车的代价。</p><p>然后呢？</p><p>最小的损失……使 $1$ 到不了 $n$ ，这显然就是最小割啊 $QwQ$</p><p>那么这样损失数就很容易得到了，那么最少要停的卡车数怎么求呢？很显然，我们任然跑最小割，那么这个图我们将所有边都设为 $1$ ，显然现在的最小割就是最少要停的卡车数。</p><p>很显然，时间爆炸，满屏惊喜！</p><p>这里有一种方法！我们设一个常数 $T$ ，假设当前边的边权是 $w$ ，那么我们实际连一条边权为 $w \times T+1$ 的边，其中最小损失数显然为 $maxflow/T$ ，那么最少要停的卡车数呢？显然就是 $maxflow\ \%\ T$。</p><p>这里的 $T$ 要足够大，否则如果每条边后面的 $+1$ 乘上割的边数大于了 $T$ ，然后 $\%$ 一下，恭喜你！你 $GG$ 了。实际上 “足够大” 只要大于边数就好了，显然这样子建边是要开 $long long$ 的，否则会炸。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll T=<span class="number">2019</span>;<span class="comment">//2019新年快乐(尽管现在不是时候了)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span>ll nxt,to,val;&#125;G[N];</span><br><span class="line">ll n,m,s,t,cnt(<span class="number">1</span>),dep[N],head[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll u,ll v,ll w)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[u],G[cnt].to=v,G[cnt].val=w,head[u]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[v],G[cnt].to=u,G[cnt].val=<span class="number">0</span>,head[v]=cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">    q.push(s);dep[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        ll x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(ll i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            ll y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]||G[i].val&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>,q.push(y);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;<span class="keyword">return</span> dep[t];</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dfs</span><span class="params">(ll x,ll flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    ll used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(ll i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">        ll y=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">            used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);s=<span class="number">1</span>,t=n;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        ll u,v,w;IN(u),IN(v),IN(w);</span><br><span class="line">        add(u,v,w*T+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ll maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxflow+=dfs(s,inf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,maxflow/T,maxflow%T);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2001]食物链 并查集 luoguP2024</title>
      <link href="/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP2024/"/>
      <url>/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP2024/</url>
      
        <content type="html"><![CDATA[<p>并不是很难。</p><p>首先，我们将一个点 $x$ 拆分成三个点：$x_{eat},x_{sim},x_{emy}$， $x_{eat}$ 表示 $x$ 的食物，$x_{sim}$ 表示 $x$ 的同类，$x_{emy}$ 表示 $x$ 的天敌。</p><a id="more"></a><p>然后，对于一句真话：</p><ul><li>如果是表示 $x​$ 是 $y​$ 的同类，那么很显然，$x​$ 的食物就是 $y​$ 的食物， $x​$ 的天敌就是 $y​$ 的天敌，于是讲 $x_{sim}​$ 和 $y_{sim}​$ 所在的并查集合并，将 $x_{eat}​$ 和 $y_{eat}​$ 所在的并查集合并，最后将 $x_{emy}​$ 和 $y_{emy}​$ 所在的并查集合并即可。</li></ul><ul><li>如果这句表示 $x$ 吃 $y$ ，那么很显然，$x$ 的食物就是 $y$ 的同类，$x$ 的天敌就是 $y$ 的食物(因为是环形)，$x$ 的同类都是 $y$ 的天敌，故将这些关系的并查集一次合并即可。</li></ul><p>怎么判断一句话的真假呢？</p><p>显然，如果 $x&gt;n||y&gt;n$ 就是假话，对于两个操作：</p><ul><li>如果表示 $x​$ 是 $y​$ 的同类，那么 $x_{eat}​$ 不能和 $y_{sim}​$ 在同一个并查集中，$x_{sim}​$ 不能和 $y_{eat}​$ 在同一个并查集中，否则就与前面的话冲突了。</li></ul><ul><li>如果表示 $x$ 吃 $y$ ，首先 $x$ 和 $y$ 不能是同类(即 $x_{sim}$ 不能和 $y_{sim}$ 在一个并查集中)，然后 $y_{eat}$ 不能和 $x_{sim}$ 在一个并查集中，显然违反了以上的就是假话。</li></ul><p>然后码量极小：</p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[N*<span class="number">3</span>],ans,n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sim</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">eat</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x+n;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">emy</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x+n+n;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">3</span>;++i)fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(x&gt;n||y&gt;n)&#123;++ans;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(find(eat(x))==find(sim(y))||find(sim(x))==find(eat(y)))&#123;++ans;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fa[find(sim(x))]=find(sim(y));</span><br><span class="line">                fa[find(eat(x))]=find(eat(y));</span><br><span class="line">                fa[find(emy(x))]=find(emy(y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(find(sim(x))==find(sim(y))||find(sim(x))==find(eat(y)))&#123;++ans;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fa[find(eat(x))]=find(sim(y));</span><br><span class="line">                fa[find(emy(x))]=find(eat(y));</span><br><span class="line">                fa[find(sim(x))]=find(emy(y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>我绝对不会告诉你们，我有一处地方 $sim$ 写成了 $sin$ 而调了半个小时</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [BOI2007]Mokia CDQ分治 luogu4390</title>
      <link href="/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP4390/"/>
      <url>/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5DluoguP4390/</url>
      
        <content type="html"><![CDATA[<p><del>BBQ烤翅，CDQ分治。</del></p><p>一道很裸的三位偏序，允许离线的话，就上CDQ分治，当然想当码农可以敲树套树。</p><a id="more"></a><p>很显然，三维就是 $x$ 轴，$y$ 轴，和时间。</p><p>然后将一个矩阵的询问拆成四个询问，按照容斥的方式搞，这显然是可以且简单的，但是询问数将会爆炸 $QvQ$ (但是没有炸，不舒服)</p><p>$long long$ 也要开，不然会炸。</p><p>然后就这样了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">2e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll s,w,tot,c[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ll x,y,ans,pos,type;</span><br><span class="line">&#125;q[N],hep[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node&amp;x,<span class="keyword">const</span> Node&amp;y)</span></span>&#123;<span class="keyword">return</span> x.pos&lt;y.pos;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll v)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=w;x+=(x&amp;-x))c[x]+=v;&#125;;</span><br><span class="line">    <span class="function">ll <span class="title">sum</span><span class="params">(ll x)</span></span>&#123;ll res=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=(x&amp;-x))res+=c[x];<span class="keyword">return</span> res;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=w;x+=(x&amp;-x))c[x]=<span class="number">0</span>;&#125;;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    CDQ(l,mid);CDQ(mid+<span class="number">1</span>,r);</span><br><span class="line">    ll i=l,j=mid+<span class="number">1</span>,cnt=l;</span><br><span class="line">    <span class="comment">/*CDQ的主要流程*/</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].x&lt;=q[j].x)&#123;</span><br><span class="line">        <span class="comment">/*注意这一题询问和修改是不一样的，不像陌上花开那题，每个元素即使修改对答案做贡献，也是询问*/</span></span><br><span class="line">            <span class="keyword">if</span>(!q[i].type)T.add(q[i].y,q[i].ans);<span class="comment">/*这是修改，树状数组标记一下*/</span></span><br><span class="line">            hep[cnt++]=q[i++];<span class="comment">/*归并排序*/</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[j].type)q[j].ans+=T.sum(q[j].y);<span class="comment">/*询问，更新答案*/</span></span><br><span class="line">            hep[cnt++]=q[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*将剩下的元素排序好，更新好答案*/</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!q[i].type)T.add(q[i].y,q[i].ans);</span><br><span class="line">        hep[cnt++]=q[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[j].type)q[j].ans+=T.sum(q[j].y);</span><br><span class="line">        hep[cnt++]=q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll o=l;o&lt;=mid;++o)<span class="comment">/*清除本次操作在树状数组上留下的痕迹*/</span></span><br><span class="line">       <span class="keyword">if</span>(!q[o].type)T.clr(q[o].y);</span><br><span class="line">    <span class="keyword">for</span>(ll o=l;o&lt;=r;++o)q[o]=hep[o];<span class="comment">/*更新原数组*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll op;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;s,&amp;w);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;op),op^<span class="number">3</span>)&#123;</span><br><span class="line">        ll x,y,z,x1,x2,y1,y2;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            q[++tot]=(Node)&#123;x,y,z,tot,<span class="number">0</span>&#125;;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            <span class="comment">/*四个询问*/</span></span><br><span class="line">            q[++tot]=(Node)&#123;x2,y2,<span class="number">0</span>,tot,<span class="number">1</span>&#125;;</span><br><span class="line">            q[++tot]=(Node)&#123;x1<span class="number">-1</span>,y2,<span class="number">0</span>,tot,<span class="number">1</span>&#125;;</span><br><span class="line">            q[++tot]=(Node)&#123;x2,y1<span class="number">-1</span>,<span class="number">0</span>,tot,<span class="number">1</span>&#125;;</span><br><span class="line">            q[++tot]=(Node)&#123;x1<span class="number">-1</span>,y1<span class="number">-1</span>,<span class="number">0</span>,tot,<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CDQ(<span class="number">1</span>,tot);</span><br><span class="line">    <span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+tot+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;++i) </span><br><span class="line">        <span class="keyword">if</span>(q[i].type)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,q[i].ans-q[i+<span class="number">1</span>].ans-q[i+<span class="number">2</span>].ans+q[i+<span class="number">3</span>].ans+s*(q[i].y-q[i+<span class="number">3</span>].y)*(q[i].x-q[i+<span class="number">3</span>].x));</span><br><span class="line">            i+=<span class="number">3</span>;</span><br><span class="line">            <span class="comment">//printf("%lld\n",q[i].ans);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而我还是太弱了，调半个小时的原因既然是</p><h4 id="树状数组打错了"><a href="#树状数组打错了" class="headerlink" title="树状数组打错了"></a>树状数组打错了</h4><p>$QvQ$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 陌上花开 CDQ分治 bzoj3262</title>
      <link href="/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3262/"/>
      <url>/2019/02/22/%5B%E9%A2%98%E8%A7%A3%5Dbzoj3262/</url>
      
        <content type="html"><![CDATA[<blockquote><p>陌上花开，可缓缓归矣                        ——吴越王</p></blockquote><p>每日一学语文[滑稽]。</p><p>当然这题 $KDT​$ 是可以做的，但是不费，所以用 $CDQ​$ 算了吧。</p><p>很显然这道题是 $CDQ$ 三维偏序的板子题(luogu上它本来就是板子题)</p><a id="more"></a><p> $CDQ$ 分治的三维偏序怎么做？</p><p>对于其中的第一维，$CDQ$之前直接 $sort$ 排好序，那么这就可以保证对于一个 $i&lt;j$ ，位置 $j$ 的元素一定是对位置 $i$ 的元素做不出贡献的，因为 $x_i &lt;x_j$ 。</p><p>然后第二维，进入 $CDQ$ ，很显然当前的区间 $l - r$ 是会分成两个子区间分别做 $CDQ$ 的，那么当两个子区间合并的时候，左子区间是可能会对右子区间做出贡献的，但是右子区间对左子区间做不出任何贡献，原因是我们在之前已经按 $x$ 排好了序，那么显然左子区间的元素的 $x$ 始终小于右子区间的元素的 $x$。</p><p>外面排好了第一维，那么我们就在 $CDQ$ 中排第二维，由于我们是分成了两个子区间递归处理，往上面合并的时候，正好可以归并排序。第三位只需要在树状数组中记录一下，然后统计答案的时候调用树状数组的查询，看看比当前元素小的有多少个即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    CDQ(l,mid);CDQ(mid+<span class="number">1</span>,r);<span class="comment">/*分成两个子区间*/</span></span><br><span class="line">    <span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>,cnt=l;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;<span class="comment">/*归并+统计答案*/</span></span><br><span class="line">        <span class="keyword">if</span>(v[i].b&lt;=v[j].b)add(v[i].c,size[v[i].id]),hep[cnt++]=v[i++];</span><br><span class="line">        <span class="comment">/*左子区间的当前元素可能会有贡献，记录一下*/</span></span><br><span class="line">        <span class="keyword">else</span> ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++];</span><br><span class="line">        <span class="comment">/*接下来的左子区间的b是比当前的j.b要大的了，没有贡献了*/</span></span><br><span class="line">        <span class="comment">/*因为在子区间中使用了归并，所以两个子区间中b肯定是升序的*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++];</span><br><span class="line">    <span class="comment">/*将剩下的归并排序完*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=l;h&lt;i;++h)add(v[h].c,-size[v[h].id]);</span><br><span class="line">    <span class="comment">/*清除树状数组留下的痕迹*/</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)hep[cnt++]=v[i++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)v[i]=hep[i];</span><br><span class="line">    <span class="comment">/*更新原数组*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$QvQ$ 就这样了，只是这题需要离散化一下，$Code$ 中的 $size$ 就是元素出现的个数。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> a,b,c,id;&#125;v[N],hep[N];</span><br><span class="line"><span class="keyword">int</span> tre[K],ans[N],num[N],size[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=k;x+=(x&amp;-x))tre[x]+=v;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;ll res=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=(x&amp;-x))res+=tre[x];<span class="keyword">return</span> res;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x,Node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.a!=y.a)<span class="keyword">return</span> x.a&lt;y.a;</span><br><span class="line">    <span class="keyword">if</span>(x.b!=y.b)<span class="keyword">return</span> x.b&lt;y.b;</span><br><span class="line">    <span class="keyword">return</span> x.c&lt;y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    CDQ(l,mid);CDQ(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>,cnt=l;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i].b&lt;=v[j].b)add(v[i].c,size[v[i].id]),hep[cnt++]=v[i++];</span><br><span class="line">        <span class="keyword">else</span> ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)ans[v[j].id]+=sum(v[j].c),hep[cnt++]=v[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=l;h&lt;i;++h)add(v[h].c,-size[v[h].id]);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)hep[cnt++]=v[i++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)v[i]=hep[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v[i].a,&amp;v[i].b,&amp;v[i].c);</span><br><span class="line">    <span class="built_in">std</span>::sort(v+<span class="number">1</span>,v+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[i].a!=v[i<span class="number">-1</span>].a||v[i].b!=v[i<span class="number">-1</span>].b||v[i].c!=v[i<span class="number">-1</span>].c)hep[++tot]=v[i];</span><br><span class="line">    ++size[tot];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)v[i]=hep[i],v[i].id=i;</span><br><span class="line">    CDQ(<span class="number">1</span>,tot);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">       num[ans[v[i].id]+size[v[i].id]<span class="number">-1</span>]+=size[v[i].id];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】 乘法逆元</title>
      <link href="/2019/02/20/%5B%E6%95%B0%E8%AE%BA%5D%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/"/>
      <url>/2019/02/20/%5B%E6%95%B0%E8%AE%BA%5D%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/</url>
      
        <content type="html"><![CDATA[<p>真的我也不知道标题怎么起 $QvQ……$</p><p>本文将介绍两种求乘法逆元的方式。</p><a id="more"></a><h3 id="0XFF-乘法逆元是什么？"><a href="#0XFF-乘法逆元是什么？" class="headerlink" title="0XFF 乘法逆元是什么？"></a>0XFF 乘法逆元是什么？</h3><blockquote><p>乘法逆元，一般用于求</p><script type="math/tex; mode=display">\frac{a}{b} \ \ (mod \ p)</script><p>的值 ($p$ 通常为质数) 。</p><p>对于加、减、乘法的取模直接取就好了，但是对于除法(上面的分数形式)取模的话，显然直接取模是错的，那么这个时候就需要用到乘法逆元。</p><p>如果 $a \times x \equiv 1 \ \ (mod \ p) $，且 $a$ 与 $p$ 互质，那么就可以定义 $p$ 为 $x$ 的逆元，记为 $a^{-1}$，所以我们也可以称 $x$ 为 $a$ 在 $mod \ p$ 意义下的倒数。</p><p>对于 $\frac{a}{b} \ \ (mod \ p)​$，这个分数的值就是 $(b^{-1} \times a) \ mod \ p​$，即 $b​$ 在 $mod \ p​$ 意义下的逆元乘上 $a​$ ，最后对 $p​$ 取模。</p></blockquote><h3 id="0X1F-求乘法逆元的两种方法"><a href="#0X1F-求乘法逆元的两种方法" class="headerlink" title="0X1F 求乘法逆元的两种方法"></a>0X1F 求乘法逆元的两种方法</h3><p>(我只会这两种)……</p><h4 id="0X1F-1-费马小定理求乘法逆元"><a href="#0X1F-1-费马小定理求乘法逆元" class="headerlink" title="0X1F-1 费马小定理求乘法逆元"></a>0X1F-1 费马小定理求乘法逆元</h4><p><strong>费马小定理：</strong></p><blockquote><p>若 $p​$ 为质数，$a​$ 为正整数，且 $a​$ 与 $p​$ 互质。</p><p>那么 $a^{p-1} \equiv  1 \ \ (mod \ p)$。</p></blockquote><p>我们将 $a^{p-1} \equiv  1 \ \ (mod \ p)$ 代入原式：</p><script type="math/tex; mode=display">a \times x \equiv 1 \ \ (mod \ p)</script><script type="math/tex; mode=display">a \times x\equiv  a^{p-1}  \ \ (mod \ p)</script><script type="math/tex; mode=display">x\equiv  a^{p-2}  \ \ (mod \ p)</script><p>那么直接跑一遍快速幂即可。</p><h5 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll x,ll y,ll p)</span> </span>&#123;</span><br><span class="line">x%=p;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)</span><br><span class="line"><span class="keyword">if</span>(power&amp;<span class="number">1</span>)ans=ans*x%mod;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="built_in">pow</span>(a,p<span class="number">-2</span>,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0X1F-2-线性求乘法逆元"><a href="#0X1F-2-线性求乘法逆元" class="headerlink" title="0X1F-2 线性求乘法逆元"></a>0X1F-2 线性求乘法逆元</h4><p>这个算法的时间复杂度是线性的：$O(n)$</p><p>设 $p=s \times i + r$ ，$(1&lt;r&lt;i&lt;p)$.</p><p>将此式套入 $(mod \ p)​$  意义下的式子就可以得到：</p><script type="math/tex; mode=display">s \times i +r \equiv 0 \ \ (mod \ p)​</script><p>两边同时乘上 $i^{-1}$：</p><script type="math/tex; mode=display">s + r \times i^{-1} \equiv 0 \ \ (mod \ p)​</script><p>然后再同时乘上 $r^{-1}​$：</p><script type="math/tex; mode=display">s \times r^{-1} + i^{-1} \equiv 0 \ \ (mod \ p)​</script><p>移项得到：</p><script type="math/tex; mode=display">i^{-1} \equiv -s \times r^{-1} \ \ (mod \ p)</script><p>很显然 $s$ 等于 $[\frac{p}{i}]$，$r$ 等于 $p \ mod \  i$，那么 $r^{-1}$ 就等于 $inv[p \ mod  \ i]$ ($inv[i]$ 表示 $i$ 在 $mod \ p$ 意义下的乘法逆元)</p><p>然后代入公式：</p><script type="math/tex; mode=display">inv[i] \equiv - [\frac{p}{i}] \times inv[p \ mod \ i] \ \ (mod \ p)</script><p>于是代码就很短了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inv[<span class="number">0</span>]=<span class="number">0</span>,inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">inv[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)(p-p/i)*inv[p%i]%p;</span><br></pre></td></tr></table></figure><hr><p>一般来说线性的或许会优秀些，建议使用线性的算法，而且代码也比较短，容易写，处理组乘法逆元的时候，第一种的复杂度为 $O(nlogn)$，第二种只需 $O(n)$。但是在处理单组乘法逆元的时候，第一种复杂度为 $O(logn)$，但是第二种因为要讲 $p \ mod \ i$  求出来，复杂度…..或许还是 $O(n)$。(实际上我也不会证 $QvQ…$)</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 乘法逆元 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [国家集训队]Tree LCT luogu1501/bzoj2631</title>
      <link href="/2019/02/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP1501/"/>
      <url>/2019/02/17/%5B%E9%A2%98%E8%A7%A3%5DluoguP1501/</url>
      
        <content type="html"><![CDATA[<p><strong>Link-Cut-Tree 的懒标记下传正确食用方法。</strong></p><a id="more"></a><hr><h5 id="1：-u-v-c：将-u-到-v-的路径上的点的权值都加上自然数-c"><a href="#1：-u-v-c：将-u-到-v-的路径上的点的权值都加上自然数-c" class="headerlink" title="1：+ u v c：将$u$到$v$的路径上的点的权值都加上自然数$c$;"></a>1：<code>+ u v c</code>：将$u$到$v$的路径上的点的权值都加上自然数$c$;</h5><ul><li><p>解决方法：</p></li><li><p>很显然，我们可以$split(u,v)$来提取<code>u,v</code>这一段区间,提取完了将$Splay(v)$,然后直接在<code>v</code>上打加法标记$add$即可。</p></li><li>代码：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushadd</span><span class="params">(ll x,ll val)</span></span>&#123;<span class="comment">//打标记</span></span><br><span class="line">s[x]+=sz[x]*val,v[x]+=val,add[x]+=val;</span><br><span class="line">s[x]%=MOD,v[x]%=MOD,add[x]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="comment">//LCT基本操作split,不再赘述</span></span><br><span class="line">    makeroot(x);Access(y);Splay(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(main函数中)：</span></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'+'</span>)&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;v);<span class="comment">//输入信息</span></span><br><span class="line"> split(x,y);pushadd(y,v);<span class="comment">//提取链条&amp;打标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="2：-u1-v1-u2-v2：将树中原有的边-u1-v1-删除，加入一条新边-u2-v2-，保证操作完之后仍然是一棵树；"><a href="#2：-u1-v1-u2-v2：将树中原有的边-u1-v1-删除，加入一条新边-u2-v2-，保证操作完之后仍然是一棵树；" class="headerlink" title="2：- u1 v1 u2 v2：将树中原有的边$(u1,v1)$删除，加入一条新边$(u2,v2)$，保证操作完之后仍然是一棵树；"></a>2：<code>- u1 v1 u2 v2</code>：将树中原有的边$(u1,v1)$删除，加入一条新边$(u2,v2)$，保证操作完之后仍然是一棵树；</h5><ul><li>解决方法：</li><li><p>删除边即$cut$操作，加边即$link$操作。</p></li><li><p>代码：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">makeroot(x);<span class="keyword">if</span>(findroot(x)!=y)f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">makeroot(x);split(x,y);</span><br><span class="line"><span class="keyword">if</span>(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][<span class="number">1</span>])</span><br><span class="line">   f[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//LCT基本操作link&amp;cut，不再赘述</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(main函数中)：</span></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);cut(x,y);<span class="comment">//删边</span></span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);link(x,y);<span class="comment">//加边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="3：-u-v-c：将-u-到-v-的路径上的点的权值都乘上自然数-c-；"><a href="#3：-u-v-c：将-u-到-v-的路径上的点的权值都乘上自然数-c-；" class="headerlink" title="3：* u v c：将$u$到$v$的路径上的点的权值都乘上自然数$c$；"></a>3：<code>* u v c</code>：将$u$到$v$的路径上的点的权值都乘上自然数$c$；</h5><ul><li>解决方法：</li><li><p>很显然，我们可以$split(u,v)$来提取<code>u,v</code>这一段区间,提取完了将$Splay(v)$,然后直接在<code>v</code>上打乘法标记$mul$即可。(跟第一个操作基本同理)</p></li><li><p>代码：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushmul</span><span class="params">(ll x,ll val)</span></span>&#123;<span class="comment">//打标记</span></span><br><span class="line"> s[x]*=val,v[x]*=val,mul[x]*=val,add[x]*=val;</span><br><span class="line"> s[x]%=MOD,v[x]%=MOD,mul[x]%=MOD,add[x]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(main函数中)：</span></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'*'</span>)&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line"> split(x,y);pushmul(y,v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="4：-u-v：询问-u-到-v-的路径上的点的权值和，求出答案对于51061的余数。"><a href="#4：-u-v：询问-u-到-v-的路径上的点的权值和，求出答案对于51061的余数。" class="headerlink" title="4：/ u v：询问$u$到$v$的路径上的点的权值和，求出答案对于51061的余数。"></a>4：<code>/ u v</code>：询问$u$到$v$的路径上的点的权值和，求出答案对于<code>51061</code>的余数。</h5><ul><li>解决方法：</li><li><p>$Splay(v)$时已经将所有节点更新过了(懒标记下传过了)，所以最后只需输出$s[v]$即可。</p></li><li><p>代码：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(main函数中)：</span></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'/'</span>)&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);</span><br><span class="line"> split(x,y);<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,s[y]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register ll</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">" "</span>) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 51061</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp; dig)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">bool</span> flag=<span class="number">0</span>;dig=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(c=getchar(),!<span class="built_in">isdigit</span>(c))<span class="keyword">if</span>(c==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))dig=dig*<span class="number">10</span>+c-<span class="string">'0'</span>,c=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)dig=-dig;</span><br><span class="line">&#125;ll f[N],s[N],v[N],sz[N],rev[N],mul[N],add[N],hep[N],ch[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">0</span>]==x||ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">chk</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushfilp</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);rev[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">s[x]=(s[ch[x][<span class="number">0</span>]]+s[ch[x][<span class="number">1</span>]]+v[x])%MOD;</span><br><span class="line">sz[x]=sz[ch[x][<span class="number">0</span>]]+sz[ch[x][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushmul</span><span class="params">(ll x,ll val)</span></span>&#123;</span><br><span class="line">s[x]*=val,v[x]*=val,mul[x]*=val,add[x]*=val;</span><br><span class="line">s[x]%=MOD,v[x]%=MOD,mul[x]%=MOD,add[x]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushadd</span><span class="params">(ll x,ll val)</span></span>&#123;</span><br><span class="line">s[x]+=sz[x]*val,v[x]+=val,add[x]+=val;</span><br><span class="line">s[x]%=MOD,v[x]%=MOD,add[x]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mul[x]!=<span class="number">1</span>)pushmul(ch[x][<span class="number">0</span>],mul[x]),pushmul(ch[x][<span class="number">1</span>],mul[x]);</span><br><span class="line"><span class="keyword">if</span>(add[x])pushadd(ch[x][<span class="number">0</span>],add[x]),pushadd(ch[x][<span class="number">1</span>],add[x]); </span><br><span class="line"><span class="keyword">if</span>(rev[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">0</span>])pushfilp(ch[x][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">1</span>])pushfilp(ch[x][<span class="number">1</span>]);</span><br><span class="line">&#125;rev[x]=<span class="number">0</span>,add[x]=<span class="number">0</span>,mul[x]=<span class="number">1</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">ll y=f[x],z=f[y],k=chk(x),v=ch[x][!k];</span><br><span class="line"><span class="keyword">if</span>(get(y))ch[z][chk(y)]=x;ch[x][!k]=y,ch[y][k]=v;</span><br><span class="line"><span class="keyword">if</span>(v)f[v]=y;f[y]=x,f[x]=z;pushup(y),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">ll y=x,top=<span class="number">0</span>;hep[++top]=y;</span><br><span class="line"><span class="keyword">while</span>(get(y))hep[++top]=y=f[y];</span><br><span class="line"><span class="keyword">while</span>(top)pushdown(hep[top--]);</span><br><span class="line"><span class="keyword">while</span>(get(x))&#123;</span><br><span class="line">y=f[x],top=f[y];</span><br><span class="line"><span class="keyword">if</span>(get(y))rotate((ch[y][<span class="number">0</span>]==x)^(ch[top][<span class="number">0</span>]==y)?y:x);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;pushup(x);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> ll y=<span class="number">0</span>;x;x=f[y=x])</span><br><span class="line">  Splay(x),ch[x][<span class="number">1</span>]=y,pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">findroot</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">Access(x);Splay(x);</span><br><span class="line"><span class="keyword">while</span>(ch[x][<span class="number">0</span>])pushdown(x),x=ch[x][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    Access(x);Splay(x);pushfilp(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">    makeroot(x);Access(y);Splay(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">makeroot(x);<span class="keyword">if</span>(findroot(x)!=y)f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">makeroot(x);split(x,y);</span><br><span class="line"><span class="keyword">if</span>(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][<span class="number">1</span>])</span><br><span class="line">   f[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll n,m,x,y;<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">   mul[i]=sz[i]=v[i]=<span class="number">1</span>;ll v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y),link(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'+'</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line">split(x,y);pushadd(y,v);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'-'</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);cut(x,y);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);link(x,y);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'*'</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line">split(x,y);pushmul(y,v);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'/'</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);</span><br><span class="line">split(x,y);<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,s[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为$51061 * 51061$是会越过$int$界限的，所以我开的$longlong$(当然也可以开无符号$int$)<br>所以就没了。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈后缀自动机(SAM)&amp;学习笔记</title>
      <link href="/2019/02/16/%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BASAM/"/>
      <url>/2019/02/16/%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BASAM/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="在此输入你的密码以便阅读全文" />    <label for="pass">在此输入你的密码以便阅读全文</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 后缀自动机.SAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈后缀数组(SA)&amp;学习笔记</title>
      <link href="/2019/02/16/%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84SA/"/>
      <url>/2019/02/16/%5B%E7%AE%97%E6%B3%95%5D%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84SA/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="在此输入你的密码以便阅读全文" />    <label for="pass">在此输入你的密码以便阅读全文</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 后缀数组.SA </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈FFT&amp;学习笔记</title>
      <link href="/2019/02/15/%5B%E7%AE%97%E6%B3%95%5DFFT/"/>
      <url>/2019/02/15/%5B%E7%AE%97%E6%B3%95%5DFFT/</url>
      
        <content type="html"><![CDATA[<p>$QvQ$ 之前就对这个东西感兴趣，然后被一堆公式踩爆，这样高逼格的名字简直让人无法靠近。终于在 $1$ 月的时候，教练扯着我搞这个，没想到一天左右就会了。</p><p>我们进入正题。</p><a id="more"></a><h3 id="0XFF—-FFT是啥"><a href="#0XFF—-FFT是啥" class="headerlink" title="0XFF—-FFT是啥?"></a>0XFF—-FFT是啥?</h3><blockquote><p>FFT是一种DFT的高效算法，称为快速傅立叶变换（fast Fourier transform），它根据离散傅氏变换的奇、偶、虚、实等                 特性，对离散傅立叶变换的算法进行改进获得的。                                                                                                —-百度百科</p></blockquote><p>对于两个多项式 $F(x)$ 和 $G(x)$ ，要求你将他们乘起来。</p><p>那还不简单？直接暴力相乘啊：</p><p>设 $F(x)$ 的系数数列为 $C$。</p><p>$F(x) \times G(x) = C_nx^nG(x) + C_{n-1}x^{n-1}G(x) + C_{n-2}x^{n-2}G(x) \cdots C_2x^2G(x) + C_1x^1G(x) + C_0G(x)$</p><p>这样下来需要做做 $n$ 次<strong>单项式乘多项式</strong>，每次的时间复杂度 $O(n)$ ，则总复杂度高达 $O(n^2)$</p><p>基本上 $n$ 上了$4000$ 就会被卡吧……那怎么提速呢？</p><p>这就需要我们伟大而又神奇的神器：<strong>$FFT$ (快速博立叶变换)</strong></p><p>复杂度就只有 $O(nlogn)$ 了。</p><hr><h3 id="0X1F—-FFT的前置知识"><a href="#0X1F—-FFT的前置知识" class="headerlink" title="0X1F—-FFT的前置知识."></a>0X1F—-FFT的前置知识.</h3><hr><h4 id="1-复数是什么"><a href="#1-复数是什么" class="headerlink" title="1.复数是什么?"></a>1.复数是什么?</h4><blockquote><p>我们把形如 $z=a+bi$（ $a,b$ 均为实数）的数称为复数，其中 $a$ 称为实部， $b$ 称为虚部， $i$ 称为虚数单位。当虚部等于零时，这个复数可以视为实数；当z的虚部不等于零时，实部等于零时，常称z为纯虚数。复数域是实数域的代数闭包，即任何复系数多项式在复数域中总有根。 复数是由意大利米兰学者卡当在十六世纪首次引入，经过达朗贝尔、棣莫弗、欧拉、高斯等人  的工作，此概念逐渐为数学家所接受。                                                                                 —-百度百科</p></blockquote><p>想必大家都知道实数是啥(不知道重读幼儿园吧……)，实数位于数轴上，就像下图这样：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118145137.png" alt=""></p><p>我们稍微观察一下，$1$ 是怎么变到 $-1$ 的呢？</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118145938.png" alt=""></p><p>在数轴上转了 <em>180°</em>。</p><p>如果，是 <em>90°</em> 的话，会发生什么呢？</p><p>这个时候，会转到 $0$ 上面的位置，但是那里，好像没有数啊!</p><p>不对，其实是有的，只不过这个数不在实数轴上，而是在<strong>虚数轴</strong>上！</p><p>虚数轴的单位是 $i$ ，我们可以这么表示：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118150643.png" alt=""></p><p>嗯，对。这显然是一个平面坐标系。现在我们的数仅限于数轴上，如果是这个平面坐标系上的一个点怎么表达呢？</p><p>对于下面的红色点：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118151010.png" alt=""></p><p>这个点的坐标很容易的可以得到：<strong>$(2,i)$</strong> ，也可以表示成 $2+i$ .</p><p>你没猜错！这个就叫<strong>复数</strong>！</p><p>一个很重要的结论：<strong>复数相乘时，模长相乘，幅角相加！</strong></p><hr><h4 id="2-点值表示法是什么"><a href="#2-点值表示法是什么" class="headerlink" title="2.点值表示法是什么?"></a>2.点值表示法是什么?</h4><p>我们用一个二维平面坐标系，在上面画 $N+1$ 个点，最终可以解出一个 $n$ 元的函数。证明略。</p><p>同样，我们可以用 $N-1$ 个点来表达一个多项式。</p><p>因为点值相乘的复杂度只有 $O(n)$ 显然优秀许多。</p><hr><h4 id="3-单位根是什么"><a href="#3-单位根是什么" class="headerlink" title="3.单位根是什么?"></a>3.单位根是什么?</h4><p><strong>*n次单位根(n为正整数)是n次幂为1的复数!</strong><br><strong>*n次单位根(n为正整数)是n次幂为1的复数!</strong><br><strong>*n次单位根(n为正整数)是n次幂为1的复数!</strong></p><p>我们先在复平面上画个点，就像这样：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118152755.png" alt=""></p><p>Ta叫做<strong>单位圆</strong>。</p><p>圆边上的任意一点的模长都是 $1$.</p><p><strong>只有单位圆上的点表示的复数才有可能成为$n$次单位根!</strong></p><p>单位根的基本符号：$ω$</p><p>一个单位圆，我们将它切成 $n$ 份，从 $(1,0)$ 开始旋转，每次旋转 $\frac{1}{n} \times 360$ 度，每次旋转后的点都记为 $ω_{n}^{k}$，特别的，$ω_{n}^{0}$ 和 $ω_{n}^{n}$ 都是 $(1,0)$ 点。</p><p>还有，当 $k&gt;=n$ 或者 $k&lt;0$ 时，$ω_{n}^{k}$ 也是合法的。</p><h4 id="单位根的性质："><a href="#单位根的性质：" class="headerlink" title="单位根的性质："></a>单位根的性质：</h4><p>$1.$ 对于任意的 $n$ ,  $ω_{n}^{0}$ 都为 $(1,0)$ 点。<br>$2.$ $ω_{n}^{a} \times ω_{n}^{b} = ω_{n}^{a+b} $<br>$3.$ $ω_{an}^{ak} = ω_{n}^{k} $<br>$4.$ $(ω_{n}^{x})^y = (ω_{n}^{y})^x $<br>$5.$ $ω_{n}^{k+n/2} = -ω_{n}^{k} $    if(n%2==0)</p><hr><h3 id="0X2F—-FFT的求解过程"><a href="#0X2F—-FFT的求解过程" class="headerlink" title="0X2F—-FFT的求解过程."></a>0X2F—-FFT的求解过程.</h3><ul><li>分治思想很重要！</li></ul><p>我们将多项式 $F(x)$ 按位置分成两块。</p><p>那么变成了(保证n是2的正整数次幂)：</p><p>$F(x) = (C_0+C_2x^2+C_4x^4+ \cdots +C_{n-2}x^{n-2}) + (C_1x+C_3x^3+C_5x^5+ \cdots +C_{n-1}x^{n-1})$</p><p>设两个多项式 $F1(x),F2(x)$。</p><p>$F1(x) = C_0+C_2x+C_4x^2+ \cdots +C_{n-2}x^{n/2-1}$<br>$F2(x) = C_1x+C_3x+C_5x^2+ \cdots +C_{n-1}x^{n/2-1}$</p><p>则我们可以得出：</p><p>$F(x) = F1(x^2) + F2(x^2) \times x$</p><p>设 $k&lt;n/2$ ， 将 $ω_{n}^{k}$ 带入多项式 $F(x)$.</p><p>$F(ω_{n}^{k}) = F1((ω_{n}^{k})2) + F2((ω_{n}^{k})^2) \times ω_{n}^{k}$</p><p>简化得： $F(ω_{n}^{k}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</p><p>再假设 $k&lt;n/2$ ，将 $ω_{n}^{k+n/2}$ 带入多项式 $F(x)$.</p><p>$F(ω_{n}^{k+n/2}) = F1((ω_{n}^{k+n/2})2) + F2((ω_{n}^{k+n/2})^2) \times ω_{n}^{k}$<br>$F(ω_{n}^{k+n/2}) = F1(ω_{n}^{2k+n}) + F2(ω_{n}^{2k+n}) \times ω_{n}^{k+n/2}$<br>$F(ω_{n}^{k+n/2}) = F1(ω_{n}^{2k}) + F2(ω_{n}^{2k}) \times ω_{n}^{k+n/2}$<br>$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k+n/2}$<br>$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) - F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</p><p>比较一下两个式子：</p><ul><li>$F(ω_{n}^{k}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</li><li>$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) - F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</li></ul><p>等式右边只有一个<strong>负号</strong>的差别!</p><p>这两个式子很关键！</p><hr><h3 id="0X3F—-FFT的代码实现"><a href="#0X3F—-FFT的代码实现" class="headerlink" title="0X3F—-FFT的代码实现."></a>0X3F—-FFT的代码实现.</h3><h4 id="对于复数的使用"><a href="#对于复数的使用" class="headerlink" title="对于复数的使用"></a>对于复数的使用</h4><p>虽然 $C++ STL$ 里面有复数 $(complex)$ 但是太慢不建议大家使用。</p><p>你可以自己手打 $complex$</p><ul><li>手打的 $complex$ :</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;</span><br></pre></td></tr></table></figure><ul><li>FFT:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">int</span> len,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!len)<span class="keyword">return</span>;<span class="keyword">complex</span> f1[len+<span class="number">1</span>],f2[len+<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;len;++k)f1[k]=f[k&lt;&lt;<span class="number">1</span>],f2[k]=f[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];<span class="comment">//按位置分</span></span><br><span class="line">    FFT(f1,len&gt;&gt;<span class="number">1</span>,inv);FFT(f2,len&gt;&gt;<span class="number">1</span>,inv);<span class="comment">//递归处理子问题</span></span><br><span class="line"><span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len)),buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*tmp:做一次平方后坐标的变换*/</span> <span class="comment">/*buf:初始位置*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;len;++k)&#123;</span><br><span class="line">    <span class="keyword">complex</span> t=buf*f2[k];</span><br><span class="line">    f[k]=f1[k]+t,f[k+len]=f1[k]-t;buf=buf*tmp;<span class="comment">//按照公式还原</span></span><br><span class="line">&#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意，inv的作用是判断是 "系数转点值" 还是 "点值转系数"</span></span><br></pre></td></tr></table></figure><p>$Code$ 中提到的公式是这两项：</p><ul><li>$F(ω_{n}^{k}) = F1(ω_{n/2}^{k}) + F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</li><li>$F(ω_{n}^{k+n/2}) = F1(ω_{n/2}^{k}) - F2(ω_{n/2}^{k}) \times ω_{n}^{k}$</li></ul><h4 id="对于文中的”坐标的变换”："><a href="#对于文中的”坐标的变换”：" class="headerlink" title="对于文中的”坐标的变换”："></a>对于文中的”坐标的变换”：</h4><p>我们依旧来看单位圆：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190118162030.png" alt=""></p><p>实际上，这个坐标的变换，直接用园中的三角形，运用三角函数就可以得出解了。</p><p>过程略.</p><p>最后我们得到的结果是：$ω_{n}^{1} = (cos(\frac{2π}{n}),sin(\frac{2π}{n}))$</p><p>求出 $ω_{n}^{1}$ 后将它乘 $n$ 次，可以得到：$ {ω_{n}^{0},ω_{n}^{1},ω_{n}^{2},ω_{n}^{3},ω_{n}^{4},ω_{n}^{5} \cdots ω_{n}^{n-1}} $</p><h4 id="贴出最终的代码："><a href="#贴出最终的代码：" class="headerlink" title="贴出最终的代码："></a>贴出最终的代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">6e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">max</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">min</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x:y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;</span><br><span class="line"><span class="keyword">complex</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">int</span> len,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!len)<span class="keyword">return</span>;<span class="keyword">complex</span> f1[len+<span class="number">1</span>],f2[len+<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;len;++k)f1[k]=f[k&lt;&lt;<span class="number">1</span>],f2[k]=f[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    FFT(f1,len&gt;&gt;<span class="number">1</span>,inv);FFT(f2,len&gt;&gt;<span class="number">1</span>,inv);</span><br><span class="line"><span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len)),buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>); </span><br><span class="line"><span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;len;++k)&#123;</span><br><span class="line">    <span class="keyword">complex</span> t=buf*f2[k];</span><br><span class="line">    f[k]=f1[k]+t,f[k+len]=f1[k]-t;buf=buf*tmp;</span><br><span class="line">&#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a[i].x);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=m;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;b[i].x);</span><br><span class="line">    <span class="keyword">for</span>(m+=n,n=<span class="number">1</span>;n&lt;=m;n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    FFT(a,n&gt;&gt;<span class="number">1</span>,<span class="number">1</span>);FFT(b,n&gt;&gt;<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)a[i]=a[i]*b[i];</span><br><span class="line">    FFT(a,n&gt;&gt;<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%.0f "</span>,<span class="built_in">fabs</span>(a[i].x)/n);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>听说可以优化，那啥的我还不会，就到这吧.</p><p>过了一会儿……</p><p>“原来FFT小优化这么简单啊!”</p><hr><h3 id="0X4F—-FFT的一些小优化"><a href="#0X4F—-FFT的一些小优化" class="headerlink" title="0X4F—-FFT的一些小优化."></a>0X4F—-FFT的一些小优化.</h3><hr><h4 id="不用递归："><a href="#不用递归：" class="headerlink" title="不用递归："></a>不用递归：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">递归版(数组下标，先偶后奇，从<span class="number">0</span>开始)：</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  --第<span class="number">1</span>层</span><br><span class="line"><span class="number">0</span>  <span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span> |<span class="number">1</span>  <span class="number">3</span>  <span class="number">5</span>  <span class="number">7</span>  --第<span class="number">2</span>层</span><br><span class="line"><span class="number">0</span>  <span class="number">4</span> |<span class="number">2</span>  <span class="number">6</span> |<span class="number">1</span>  <span class="number">5</span> |<span class="number">3</span>  <span class="number">7</span>  --第<span class="number">3</span>层</span><br><span class="line"><span class="number">0</span> |<span class="number">4</span> |<span class="number">2</span> |<span class="number">6</span> |<span class="number">1</span> |<span class="number">5</span> |<span class="number">3</span>| <span class="number">7</span>  --第<span class="number">4</span>层</span><br></pre></td></tr></table></figure><p>发现了什么吗？</p><p><strong>最后的序列是原序列的二进制反转</strong>!</p><p>比如： $6 = (110)_2$ 反过来变成了 $(011)_2 = 3$ ！</p><p>如何得到二进制翻转后的数列？递推即可!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?n&gt;&gt;<span class="number">1</span>:<span class="number">0</span>); </span><br><span class="line"><span class="comment">//filp[i] 即为 i 的二进制位翻转</span></span><br></pre></td></tr></table></figure><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,filp[N]; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">max</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">min</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x:y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;</span><br><span class="line"><span class="keyword">complex</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)<span class="keyword">if</span>(i&lt;filp[i])&#123;<span class="keyword">complex</span> tmp=f[i];f[i]=f[filp[i]];f[filp[i]]=tmp;&#125;</span><br><span class="line">    <span class="comment">/*换位置*/</span></span><br><span class="line">    <span class="keyword">for</span>(RI p=<span class="number">2</span>;p&lt;=n;p&lt;&lt;=<span class="number">1</span>)&#123;<span class="comment">//每局区间长度</span></span><br><span class="line">        RI len=p/<span class="number">2</span>;<span class="comment">//合并子区间的长度(所以是p/2)</span></span><br><span class="line">        <span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len));</span><br><span class="line">        <span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;n;k+=p)&#123;<span class="comment">//每局左端点</span></span><br><span class="line">            <span class="keyword">complex</span> buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(RI l=k;l&lt;k+len;++l)&#123;<span class="comment">//遍历区间</span></span><br><span class="line">                <span class="keyword">complex</span> t=buf*f[len+l];</span><br><span class="line">f[len+l]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp;<span class="comment">//赋值有微小的变化，注意顺序！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主程序不变*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a[i].x);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=m;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;b[i].x);</span><br><span class="line">    <span class="keyword">for</span>(m+=n,n=<span class="number">1</span>;n&lt;=m;n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?n&gt;&gt;<span class="number">1</span>:<span class="number">0</span>); </span><br><span class="line">    FFT(a,<span class="number">1</span>);FFT(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)a[i]=a[i]*b[i];</span><br><span class="line">    FFT(a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%.0f "</span>,<span class="built_in">fabs</span>(a[i].x)/n);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>luogu上的题，递归的总是<strong>T</strong>最后一个点，改成非递归版的就<strong>A</strong>了？<br>emmmmmmmmmmmmmm</p><hr><h4 id="所有优化全开："><a href="#所有优化全开：" class="headerlink" title="所有优化全开："></a>所有优化全开：</h4><p>很作死，建议不要轻易尝试[滑稽]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br></pre></td></tr></table></figure><h4 id="滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽"><a href="#滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽-滑稽" class="headerlink" title="[滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽]"></a>[滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽][滑稽]</h4><hr><h2 id="NNT———学习笔记———关于FFT兄弟的那些事"><a href="#NNT———学习笔记———关于FFT兄弟的那些事" class="headerlink" title="NNT———学习笔记———关于FFT兄弟的那些事"></a>NNT———学习笔记———关于FFT兄弟的那些事</h2><hr><h3 id="0X5F—-NTT是啥"><a href="#0X5F—-NTT是啥" class="headerlink" title="0X5F—-NTT是啥?"></a>0X5F—-NTT是啥?</h3><blockquote><p>NTT(快速数论变换)<br>一种快速数论变换算法，这种算法是以数论为基础，对样本点为的数论变换，按时间抽取的方法，得到一组等价的迭代方程，有效高速简化了方程中的计算公式·与直接计算相比，大大减少了运算次数。（见快速傅里叶变换）。<br>在计算机实现多项式乘法中，我们所熟知的快速傅里叶变换(FFT)是基于n次单位根$ω_{n}$ $(omega)$ 的优秀性质实现的，而由于其计算时会使用正弦函数和余弦函数，在不断运算时无法避免地会产生精度误差。而多项式乘法有些时候会建立在模域中，在对一些特殊的大质数取模时，便可以考虑用原根g来代替$ω_{n}$，而这些特殊的大质数的原根恰好满足$ω_{n}$的某些性质，这使得多项式乘法在模域中也可以快速的分治合并。 ———百度百科</p></blockquote><p>实际上，$NTT$ 跟 $FFT$ 没啥差别，优缺点各有。优点，就是省掉了大精度的操作，常数较小。</p><p>贴出我在luogu的<a href="https://www.luogu.org/problemnew/show/P3803" target="_blank" rel="noopener">P3803</a>测评记录：</p><h4 id="O2—-FFT"><a href="#O2—-FFT" class="headerlink" title="O2—-FFT:"></a>O2—-FFT:</h4><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190119163840.png" alt=""></p><h4 id="无优化—NTT"><a href="#无优化—NTT" class="headerlink" title="无优化—NTT:"></a>无优化—NTT:</h4><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190119163941.png" alt=""></p><p>(速度不在一个服务器……)</p><p>当然，什么东西都是有缺点的，$NTT$ 的缺点就是<strong>多项式的系数只能是整数</strong> ，而且普通的 $NTT$ 并不能做到任意模数，比较有限制(但是像XZY这样的奆佬随手可以水过任意模数NTT)，不过对于一般的像<strong>998244353</strong>这样的模数可以跑。</p><h2 id="实现的基础———原根"><a href="#实现的基础———原根" class="headerlink" title="实现的基础———原根"></a>实现的基础———原根</h2><blockquote><p>原根是一种数学符号，设 $m$ 是正整数，$a$ 是整数，若 $a$ 模 $m$ 的阶等于 $φ(m)$ ，则称 $a$ 为模 $m$ 的一个原根。（其中 $φ(m)$ 表示 $m$ 的欧拉函数）———百度百科</p></blockquote><p>为什么 $FFT$ 可以如此优秀？那是因为单位根有着神奇的性质。原根也是如此！</p><p>合并的时候，$p=2len$ .</p><p>单位根：$cos\frac{2π}{P}+i sin\frac{2π}{P} = cos\frac{π}{len} + i sin\frac{π}{len}$</p><p>原根：$g^{\frac{MOD-1}{P}} = g^{\frac{MOD-1}{2len}}$</p><p>$NTT$ 的学习是建立在 $FFT$ 上的，建议大家先理解 $FFT$ 再来看 $NTT$</p><p>多说无益，贴板子吧……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 3</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;ll z=<span class="number">1l</span>l*x,ans=<span class="number">1l</span>l;<span class="keyword">for</span>(;y;y/=<span class="number">2</span>,z=z*z%MOD)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans=ans*z%MOD;<span class="keyword">return</span> (<span class="keyword">int</span>)ans%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;<span class="comment">//NTT板子</span></span><br><span class="line">    <span class="keyword">int</span> bit=<span class="number">0</span>;<span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;bit)&lt;n)bit++;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">    filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>)); </span><br><span class="line">    <span class="keyword">if</span>(i&lt;filp[i])swap(f[i],f[filp[i]]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(RI len=<span class="number">1</span>;len&lt;n;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        RI tmp=<span class="built_in">pow</span>(G,(MOD<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(inv==<span class="number">-1</span>)tmp=<span class="built_in">pow</span>(tmp,MOD<span class="number">-2</span>);<span class="comment">//是逆运算的话就套逆元</span></span><br><span class="line">        <span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;n;k+=len*<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> buf=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(RI l=<span class="number">0</span>;l&lt;len;++l,buf=<span class="number">1l</span>l*buf*tmp%MOD)&#123;</span><br><span class="line">                <span class="keyword">int</span> t=f[l+k],d=<span class="number">1l</span>l*buf*f[l+k+len]%MOD;</span><br><span class="line">                f[l+k]=t+d,f[l+k+len]=t-d,<span class="comment">//注意差别</span></span><br><span class="line">f[l+k]=(f[l+k]%MOD+MOD)%MOD,f[l+k+len]=(f[l+k+len]%MOD+MOD)%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那一题的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 3</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">1</span>,len1,len2,filp[N],a[N],b[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">max</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">min</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x:y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;ll z=<span class="number">1l</span>l*x,ans=<span class="number">1l</span>l;<span class="keyword">for</span>(;y;y/=<span class="number">2</span>,z=z*z%MOD)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans=ans*z%MOD;<span class="keyword">return</span> (<span class="keyword">int</span>)ans%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit=<span class="number">0</span>;<span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;bit)&lt;n)bit++;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">    filp[i]=(filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>)); </span><br><span class="line">    <span class="keyword">if</span>(i&lt;filp[i])swap(f[i],f[filp[i]]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(RI len=<span class="number">1</span>;len&lt;n;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        RI tmp=<span class="built_in">pow</span>(G,(MOD<span class="number">-1</span>)/(len&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(inv==<span class="number">-1</span>)tmp=<span class="built_in">pow</span>(tmp,MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;n;k+=len*<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> buf=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(RI l=<span class="number">0</span>;l&lt;len;++l,buf=<span class="number">1l</span>l*buf*tmp%MOD)&#123;</span><br><span class="line">                <span class="keyword">int</span> t=f[l+k],d=<span class="number">1l</span>l*buf*f[l+k+len]%MOD;</span><br><span class="line">                f[l+k]=t+d,f[l+k+len]=t-d,</span><br><span class="line">f[l+k]=(f[l+k]%MOD+MOD)%MOD,f[l+k+len]=(f[l+k+len]%MOD+MOD)%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(len1),IN(len2);len1++,len2++;</span><br><span class="line">    <span class="keyword">while</span>(n&lt;len1+len2)n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=len1<span class="number">-1</span>;++i)IN(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=len2<span class="number">-1</span>;++i)IN(b[i]);</span><br><span class="line">    NTT(a,<span class="number">1</span>);NTT(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;n;++i)a[i]=<span class="number">1l</span>l*a[i]*b[i]%MOD;</span><br><span class="line">    NTT(a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=len1+len2<span class="number">-2</span>;++i)<span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="number">1l</span>l*a[i]*<span class="built_in">pow</span>(n,MOD<span class="number">-2</span>)%MOD);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="0X3f3f3f3f-附记"><a href="#0X3f3f3f3f-附记" class="headerlink" title="0X3f3f3f3f 附记"></a>0X3f3f3f3f 附记</h2><p>来一张表吧：</p><div class="table-container"><table><thead><tr><th style="text-align:left">模数</th><th style="text-align:right">G的值</th></tr></thead><tbody><tr><td style="text-align:left">3</td><td style="text-align:right">2</td></tr><tr><td style="text-align:left">5</td><td style="text-align:right">2</td></tr><tr><td style="text-align:left">17</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">97</td><td style="text-align:right">5</td></tr><tr><td style="text-align:left">193</td><td style="text-align:right">5</td></tr><tr><td style="text-align:left">257</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">7681</td><td style="text-align:right">17</td></tr><tr><td style="text-align:left">12289</td><td style="text-align:right">11</td></tr><tr><td style="text-align:left">40961</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">65537</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">786433</td><td style="text-align:right">10</td></tr><tr><td style="text-align:left">5767169</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">7340033</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">23068673</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">104857601</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">167772161</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">469762049</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">998244353</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">1004535809</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">2013265921</td><td style="text-align:right">31</td></tr><tr><td style="text-align:left">2281701377</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">3221225473</td><td style="text-align:right">5</td></tr><tr><td style="text-align:left">75161927681</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">77309411329</td><td style="text-align:right">7</td></tr></tbody></table></div><p>最后，因为本人实在太弱了，太蒟了，所以实在写不出啥了。</p><hr><p>$by Qiuly$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 「网络流24题」骑士共存问题 网络流 luoguP3355</title>
      <link href="/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP3355/"/>
      <url>/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP3355/</url>
      
        <content type="html"><![CDATA[<p>最大流于最小割的转换。</p><p>假设现在棋盘上非障碍的位置全部摆满了骑士，我们拿走 $x$ 个的骑士可以使棋盘上的所有骑士互不冲突，求最小的 $x$.</p><p>可以跑匈牙利，也可以跑最大流算法，我选择跑 $Dinic$。</p><a id="more"></a><p>所有编号为奇数的点向源点 $s$ 连边，所有编号为偶数的点向汇点 $t$ ，连边，边权为 $1$.可以知道，同奇偶编号的点是无法互相攻击的，我们将在奇数和偶数之间<strong>可以攻击到彼此</strong>的点连一条边权无限大的边。</p><p>然后跑一遍 $Dinic$ 。</p><p>然后就没了。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID(i,j) ((i-1)*n+j)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">short</span> dx[<span class="number">8</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">short</span> dy[<span class="number">8</span>]=&#123;<span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,sum,cnt,dep[M],head[M];</span><br><span class="line"><span class="keyword">short</span> ok[<span class="number">202</span>][<span class="number">202</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    G[cnt].to=y,G[cnt].val=v,G[cnt].nxt=head[x],head[x]=cnt++;</span><br><span class="line">    G[cnt].to=x,G[cnt].val=<span class="number">0</span>,G[cnt].nxt=head[y],head[y]=cnt++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dep)); </span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;q.push(s);dep[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=G[i].nxt)&#123;</span><br><span class="line">    <span class="keyword">int</span> y=G[i].to;</span><br><span class="line"><span class="keyword">if</span>(dep[y]!=<span class="number">-1</span>||!G[i].val)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;dep[y]=dep[x]+<span class="number">1</span>,q.push(y);<span class="keyword">if</span>(y==t)<span class="keyword">return</span> <span class="literal">true</span>;&#125; </span><br><span class="line">&#125; </span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>,rlow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;G[i].val)&#123;</span><br><span class="line">            used+=(rlow=dfs(y,min(G[i].val,flow-used)));</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">if</span>(!used)dep[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxlow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())maxlow+=dfs(s,<span class="number">1e9</span>);</span><br><span class="line"><span class="keyword">return</span> maxlow; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    IN(n),IN(m);s=<span class="number">0</span>,t=n*n+<span class="number">1</span>;sum=n*n-m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;++i)IN(x),IN(y),ok[x][y]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">           <span class="keyword">if</span>(ok[i][j])<span class="keyword">continue</span>;</span><br><span class="line">           <span class="keyword">if</span>((i+j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">               add(s,ID(i,j),<span class="number">1</span>);</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">8</span>;++k)&#123;</span><br><span class="line">                   <span class="keyword">int</span> nx=i+dx[k],ny=j+dy[k];</span><br><span class="line">                   <span class="keyword">if</span>(nx&lt;<span class="number">1</span>||ny&lt;<span class="number">1</span>||nx&gt;n||ny&gt;n||ok[nx][ny])<span class="keyword">continue</span>;</span><br><span class="line">                   add(ID(i,j),ID(nx,ny),<span class="number">1e9</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">else</span> add(ID(i,j),t,<span class="number">1</span>);</span><br><span class="line">       &#125;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum-dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 跳楼机 同余最短路 luogu3403</title>
      <link href="/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP3403/"/>
      <url>/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP3403/</url>
      
        <content type="html"><![CDATA[<p>对于 $x,y,z$ 三个操作，我们先考虑 $y,z$ 两个操作的情况。</p><p>$f[i]$ 表示通过 $y,z$ 两个操作可以到达的 $mod   x=i$ 最小的楼层。</p><p>可以得知：$f[i+y]=f[i]+y,f[i+z]=f[i]+z.$</p><p>对于最短路，我们可以用一下形式建边：</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(i,(i+y)%x,y); add(i,(i+z)%x,z);</span><br></pre></td></tr></table></figure><p>没问题吧？<code>%x</code>是必须要做的操作，上文讲了。</p><p>那如何统计答案呢？</p><p>首先，如果这个 “最小的楼层” 超出了 $H$ ，那么显然是不用统计的。否则，我们将这样统计：<code>ans+=(H-f[i])/x+1;</code></p><p>为什么要这样写呢？想想，现在我们知道了这个最小楼层，我们可以到达这个最小楼层，对吧？如果现在以这个最小楼层为起点，我们可以选择在往上跳 $x$ 层，或者是 $2x$ 层….知道 $nx$ 层，$(n+1)x$就会超出  $H$，这时上面的式子就好理解多了。</p><h3 id="Code-可以不用-堆优-Dijstra-，没必要，用-Spfa-就行了"><a href="#Code-可以不用-堆优-Dijstra-，没必要，用-Spfa-就行了" class="headerlink" title="Code:(可以不用 堆优$Dijstra$，没必要，用 $Spfa$ 就行了)"></a>Code:(可以不用 堆优$Dijstra$，没必要，用 $Spfa$ 就行了)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line">ll H,x,y,z,ans,f[N];</span><br><span class="line"><span class="keyword">int</span> vis[N],head[N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nxt,to,val;&#125;G[N&lt;&lt;<span class="number">1</span>]; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">127</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;f[<span class="number">1</span>]=<span class="number">1</span>,vis[<span class="number">1</span>]=<span class="number">1</span>,q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();vis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(RI i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[G[i].to]&gt;f[x]+G[i].val)&#123;</span><br><span class="line">        f[G[i].to]=f[x]+G[i].val;</span><br><span class="line"><span class="keyword">if</span>(!vis[G[i].to])q.push(G[i].to),vis[G[i].to]=<span class="number">1</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;H,&amp;x,&amp;y,&amp;z);</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>||y==<span class="number">1</span>||z==<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,H);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;++i)&#123;add(i,(i+y)%x,y);add(i,(i+z)%x,z);&#125; </span><br><span class="line">    spfa();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;++i)</span><br><span class="line">   <span class="keyword">if</span>(f[i]&lt;=H)ans+=(H-f[i])/x+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 同余最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2010]地精部落 线性DP luogu2467</title>
      <link href="/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP2467/"/>
      <url>/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP2467/</url>
      
        <content type="html"><![CDATA[<p>好巧的一道思维题啊！</p><p>思维量极大但是码量极小，真的好巧妙啊！(好了不废话进入主题)</p><a id="more"></a><p>在下文，因为为了方便代码的理解同步，所以应用了百度翻译：</p><blockquote><p>summit: 顶点</p><p>valley: 流域;  山谷，溪谷，峡谷，谷地，深谷;</p></blockquote><hr><p>这显然是道 $DP$ 题(又是废话)</p><p>可以知道题目要求的合法山脉其实是一个波动数列。</p><p>很容易的可以想到，设 $summit[i][j]$ 表示长度为 $j$ 的波动数列，此波动数列的第一个数为 $i$，且在题目中，$i$ 为山峰，这样状态下的方案总数。</p><p>同样的，我们同时设 $valley[i][j]$ 表示长度为 $j$ 的波动数列，此波动数列的第一个数为 $i$，且在题目中，$i$ 为山谷，这样状态下的方案总数。</p><p>那么答案是多少呢？由于数列中的每一个元素都可以做第一个元素，且都有可能做”山峰”或者是”山脉”，所以我们的答案应该是：</p><script type="math/tex; mode=display">\sum_{i=1}^{n} summit[i][n]+valley[i][n]</script><p>现在来考虑怎么转移。</p><p>以 $summit$ 的转移为例子，假设现在需要转移 $summit[i][n]$.</p><p>那么这个波动数列的第二项肯定严格小于 $i$ ，而第三项又严格大于第二项，所以如果不看第一项的话，这个数列就变成了由第二项起头，并且第二项是”山谷”，设第二项的数为 $j$ ，那么其方案数可以用 $valley[j][n-1]$ 来表示。</p><p>由于第二项可以是数列中严格小于 $i$ 的任何数，因此我们可以列出转移式：</p><script type="math/tex; mode=display">summit[i][n] = \sum_{k=1}^{i-1} valley[k][n-1]</script><p>因为题目说了是<strong>严格小于</strong>，所以可以这样子统计。</p><p>同样的，$valley[i][j]$ 也是这样转移：</p><script type="math/tex; mode=display">valley[i][n] = \sum_{k=i}^{n-1} summit[k][n-1]</script><p>我们现在可以很轻易的打出正解了，但是想象一下，我们有那么大的空间吗？$2\cdot 4200\cdot     4200$？貌似很紧诶(虽然我是踩线没有 $MLE$)</p><h4 id="那就使用滚动数组！"><a href="#那就使用滚动数组！" class="headerlink" title="那就使用滚动数组！"></a>那就使用滚动数组！</h4><p>还有，这样子统计，复杂度将会是 $O(n^3)$ ！怎么优化呢？</p><h4 id="前缀和就好了呀！"><a href="#前缀和就好了呀！" class="headerlink" title="前缀和就好了呀！"></a>前缀和就好了呀！</h4><p>然后……然后就没有然后了……</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4205</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> summit[N][<span class="number">2</span>],valley[N][<span class="number">2</span>],ans,sum,p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sum,&amp;p);</span><br><span class="line">    summit[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>,valley[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>,valley[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">3</span>;n&lt;=sum;++n)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">           <span class="keyword">int</span> sum_val,sum_sum;</span><br><span class="line">           sum_val=(summit[n<span class="number">-1</span>][(n<span class="number">-1</span>)&amp;<span class="number">1</span>]-summit[i<span class="number">-1</span>][(n<span class="number">-1</span>)&amp;<span class="number">1</span>]+p)%p;</span><br><span class="line">           valley[i][n&amp;<span class="number">1</span>]=(valley[i<span class="number">-1</span>][n&amp;<span class="number">1</span>]+sum_val)%p;</span><br><span class="line">           sum_sum=valley[i<span class="number">-1</span>][(n<span class="number">-1</span>)&amp;<span class="number">1</span>]%p;</span><br><span class="line">           summit[i][n&amp;<span class="number">1</span>]=(summit[i<span class="number">-1</span>][n&amp;<span class="number">1</span>]+sum_sum)%p;</span><br><span class="line">       &#125;</span><br><span class="line">    ans=(valley[sum][sum&amp;<span class="number">1</span>]+summit[sum][sum&amp;<span class="number">1</span>])%p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意取模，不然会出锅!</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 Qtree3 LCT luoguP4116</title>
      <link href="/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP4116/"/>
      <url>/2019/02/15/%5B%E9%A2%98%E8%A7%A3%5DluoguP4116/</url>
      
        <content type="html"><![CDATA[<p>第一个操作显然是不要考虑的……</p><p>考虑第二个操作怎么办(实际上是超级easy的)</p><p>每个节点维护一个值<code>sum</code>，表示 $Splay$ 中它子树的和，每个点的权值为<strong>1(黑)0(白)</strong>。</p><a id="more"></a><p>对于这个操作，我们可以先 $split(1,x)$ ，现在<code>x</code>是这个 $Splay$ 的根。我们将要找的就是这颗 $Splay$ 中<strong>深度最小且为黑点的节点</strong>。</p><p>找Answer之前先特判一下<code>s[x]</code>是否大于<code>0</code>，如果为<code>0</code>，直接跳过即可。</p><p>不然进入循环，分三种情况：</p><ul><li>1.如果<code>s[ch[x][0]]</code>大于<code>0</code>，说明有更优的答案(左子树深度小于<code>x</code>)，<code>x=ch[x][0]</code>。</li><li>2.否则，如果<code>x</code>本身就是黑点，那么<code>x</code>就是答案了，直接<code>break</code>。</li><li>3.不然，如果<code>x</code>到<code>1</code>的节点都是白色，那就只能去x的右子树找了，<code>x=ch[x][1]</code>。</li></ul><p>退出循环时x即为答案，输出即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>) </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,f[N],s[N],v[N],r[N],ch[N][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">0</span>]==x||ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;s[x]=s[ch[x][<span class="number">0</span>]]+s[ch[x][<span class="number">1</span>]]+v[x];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!r[x])<span class="keyword">return</span>;r[x]=<span class="number">0</span>;</span><br><span class="line">    r[ch[x][<span class="number">0</span>]]^=<span class="number">1</span>,r[ch[x][<span class="number">1</span>]]^=<span class="number">1</span>,swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_push</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">if</span>(isroot(x))Splay_push(f[x]);pushdown(x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=f[x],z=f[y],k=chk(x),v=ch[x][!k];</span><br><span class="line">    <span class="keyword">if</span>(isroot(y))ch[z][chk(y)]=x;ch[x][!k]=y,ch[y][k]=v;</span><br><span class="line">    <span class="keyword">if</span>(v)f[v]=y;f[y]=x,f[x]=z;pushup(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=x;Splay_push(x);</span><br><span class="line">    <span class="keyword">while</span>(isroot(x))&#123;</span><br><span class="line">        <span class="keyword">if</span>(isroot(y=f[x]))</span><br><span class="line">           rotate((ch[y][<span class="number">0</span>]==x)^(ch[f[y]][<span class="number">0</span>]==y)?x:y);</span><br><span class="line">        rotate(x); </span><br><span class="line">    &#125;pushup(x);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> y=<span class="number">0</span>;x;x=f[y=x])</span><br><span class="line">       Splay(x),ch[x][<span class="number">1</span>]=y,pushup(x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Access(x);Splay(x);</span><br><span class="line">    <span class="keyword">while</span>(ch[x][<span class="number">0</span>])pushdown(x),x=ch[x][<span class="number">0</span>];</span><br><span class="line">    Splay(x);<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;Access(x);Splay(x);r[x]^=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);Access(y);Splay(y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);<span class="keyword">if</span>(findroot(x)!=findroot(y))f[x]=y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;split(x,y);<span class="keyword">if</span>(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][<span class="number">1</span>])f[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">    &#123;IN(x),IN(y);link(x,y);&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> op,x,i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        IN(op),IN(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">0</span>)&#123;</span><br><span class="line">            makeroot(x);v[x]^=<span class="number">1</span>;pushup(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            split(<span class="number">1</span>,x);</span><br><span class="line">            <span class="keyword">if</span>(!s[x])&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">while</span>(s[x])&#123;</span><br><span class="line">                pushdown(x);</span><br><span class="line">                <span class="keyword">if</span>(s[ch[x][<span class="number">0</span>]])x=ch[x][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(v[x])<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> x=ch[x][<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [ZJOI2014]力 FFT bzoj3527/luogu3338</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP3338/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP3338/</url>
      
        <content type="html"><![CDATA[<p>这个式子有点……乱。</p><p>嗯，我们来推一推式子……推一推式子。 </p><p>原式推一推，那么就是：</p><script type="math/tex; mode=display">E_i = \frac{F_i}{q_i} = \sum_{j=1}^{i} \frac{q_j}{(i-j)^2} - \sum_{j=i+1}^{n} \frac{q_j}{(i-j)^2}​</script><a id="more"></a><p>令  $x = \frac{1}{y^2}​$ ， 那么：</p><script type="math/tex; mode=display">E_i = \frac{F_i}{q_i} = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} q_j x_{j-i}​</script><p>还可以写成：</p><script type="math/tex; mode=display">E_i = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} q_j x_{j-i}​</script><p>令 $S_i = q_{n-i+1} ​$，那么式子变成了：</p><script type="math/tex; mode=display">E_i = \sum_{j=1}^{i} q_j x_{i-j} - \sum_{j=i+1}^{n} p_{n-j+1} x_{j-i}</script><p>这个时候我们可以发现，$\sum_{j=1}^{i} q_j x_{i-j}​$ 和 $\sum_{j=i+1}^{n} p_{n-j} x_{j-i}​$ 都是卷积，那么我们可以跑两遍 <strong>$FFT​$</strong>，分别求出上面的两个式子，记录为 $A,B​$ 。最后的答案就是 $A[i].x - B[n+1-i].x​$ 了。</p><p>FFT不用做太多修改，套模板跑就行(本来就是模板)。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,limit=<span class="number">1</span>,filp[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">max</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">min</span><span class="params">(<span class="keyword">const</span> _Tp&amp;x,<span class="keyword">const</span> _Tp&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x:y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span><span class="keyword">complex</span>(<span class="keyword">double</span> a=<span class="number">0</span>,<span class="keyword">double</span> b=<span class="number">0</span>)&#123;x=a,y=b;&#125;<span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x,a.y+b.y);&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x,a.y-b.y);&#125;;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123;<span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);&#125;;</span><br><span class="line"><span class="keyword">complex</span> A[N],B[N],C[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *f,<span class="keyword">short</span> inv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;limit;++i)<span class="keyword">if</span>(i&lt;filp[i])&#123;<span class="keyword">complex</span> t=f[i];f[i]=f[filp[i]],f[filp[i]]=t;&#125;</span><br><span class="line">    <span class="keyword">for</span>(RI p=<span class="number">2</span>;p&lt;=limit;p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        RI len=p/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">complex</span> tmp=<span class="keyword">complex</span>(<span class="built_in">cos</span>(PI/len),inv*<span class="built_in">sin</span>(PI/len));</span><br><span class="line">        <span class="keyword">for</span>(RI k=<span class="number">0</span>;k&lt;limit;k+=p)&#123;</span><br><span class="line">            <span class="keyword">complex</span> buf=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(RI l=k;l&lt;k+len;++l)&#123;</span><br><span class="line">                <span class="keyword">complex</span> t=buf*f[l+len];</span><br><span class="line">                f[l+len]=f[l]-t,f[l]=f[l]+t,buf=buf*tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;A[i].x),B[n+<span class="number">1</span>-i].x=A[i].x;&#125;</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)C[i].x=(<span class="number">1.0</span>/<span class="keyword">double</span>(i))/<span class="keyword">double</span>(i);</span><br><span class="line"><span class="keyword">while</span>(limit&lt;=(n&lt;&lt;<span class="number">1</span>))limit&lt;&lt;=<span class="number">1</span>,cnt++;</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;limit;++i)filp[i]=((filp[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(cnt<span class="number">-1</span>)));</span><br><span class="line">FFT(A,<span class="number">1</span>);FFT(B,<span class="number">1</span>);FFT(C,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=limit;++i)A[i]=A[i]*C[i],B[i]=B[i]*C[i];</span><br><span class="line">FFT(A,<span class="number">-1</span>);FFT(B,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">0</span>;i&lt;=limit;++i)A[i].x/=limit,B[i].x/=limit;</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,-B[n+<span class="number">1</span>-i].x+A[i].x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2016]生成魔咒 后缀自动机.SAM bzoj4516/luogu4070</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4070/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4070/</url>
      
        <content type="html"><![CDATA[<p>一眼题目。</p><p>题目简述如下：</p><ul><li>任务一：支持询问当前本质不同的子串的个数</li><li>任务二：支持插入</li></ul><p>很显然后缀自动机可以解决胜任，正好今天刚学了后缀自动机，那么就将它定为练手题了。</p><a id="more"></a><p>插入是很简单的，至于询问本质不同的字串的个数，我们知道新插入一个节点 $now$ 对答案的贡献是: $ |max(now)| - |min(now)| + 1$ 。我们建后缀自动机的时候只保存了 $max(now)$ ，难道还要保存一个 $min(now)$ 吗？其实不需要，根据其性质可以得到：$|max(now)| - |max(fa[now])|$，直接计算即可。</p><p>注意数据范围较大，记得开 $longlong​$ ！</p><p>*注：文中的 $|S|​$ 指的是字符串 $S​$ 的长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ch[N];</span><br><span class="line">    <span class="keyword">int</span> last,cnt,len[N],fa[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=last,now=last=++cnt;</span><br><span class="line">        len[now]=len[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;!ch[p][c])ch[p][c]=now,p=fa[p];</span><br><span class="line">        <span class="keyword">if</span>(!p)fa[now]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> q=ch[p][c];</span><br><span class="line">            <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>)fa[now]=q;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> copy=++cnt;</span><br><span class="line">                len[copy]=len[p]+<span class="number">1</span>,ch[copy]=ch[q];</span><br><span class="line">                fa[copy]=fa[q],fa[q]=fa[now]=copy;</span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;ch[p][c]==q)ch[p][c]=copy,p=fa[p];</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        ans+=len[now]-len[fa[now]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;IN(n);</span><br><span class="line">    sam.last=sam.cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> c;IN(c);</span><br><span class="line">        sam.Insert(c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sam.ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 后缀自动机.SAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [JSOI2008]球形空间产生器  高斯消元  洛谷P4035</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4035/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4035/</url>
      
        <content type="html"><![CDATA[<p>“你要<strong>求出</strong>这个n维球体的<strong>球心坐标</strong>“，这使我想到的解方程……</p><p>先假设n=2，这是一个二维平面。设圆心的坐标为$(x,y)$，有两个坐标$(a_1,b_1)$和$(a_2,b_2)$，显然两个坐标的关系为：</p><a id="more"></a><script type="math/tex; mode=display">(x-a_1)^2+(y-b_1)^2=(x-a_2)^2+(y-b_2)^2</script><p>考虑如何化简上面的式子。</p><script type="math/tex; mode=display">(x-a_1)^2-(x-a_2)^2+(y-b_1)^2-(y-b_2)^2=0</script><p>根据完全平方公式：</p><script type="math/tex; mode=display">(x-a_1)^2=x^2+a_1^2-2 \times x \times a_1</script><script type="math/tex; mode=display">(x-a_1)^2-(x-a_2)^2=x^2+a_1^2-2 \times x \times a_1-x^2-a_2^2+2 \times x \times a_2</script><script type="math/tex; mode=display">(x-a_1)^2-(x-a_2)^2=a_1^2-2 \times x \times a_1-a_2^2+2 \times x \times a_2</script><script type="math/tex; mode=display">(x-a_1)^2-(x-a_2)^2=a_1^2-a_2^2-2(a_1-a_2)x</script><p>同理</p><script type="math/tex; mode=display">(y-b_1)^2-(y-b_2)^2=b_1^2-b_2^2-2(b_1-b_2)y</script><p>整理后：</p><script type="math/tex; mode=display">a_1^2-a_2^2-2(a_1-a_2)x+b_1^2-b_2^2-2(b_1-b_2)y=0</script><p>移项后：</p><script type="math/tex; mode=display">a_1^2-a_2^2+b_1^2-b_2^2=2(a_1-a_2)x+2(b_1-b_2)y</script><p>这个式子最终为：</p><script type="math/tex; mode=display">2(a_1-a_2)x+2(b_1-b_2)y=a_1^2-a_2^2+b_1^2-b_2^2</script><p>由于 $a_1^2-a_2^2+b_1^2-b_2^2​$ 是已知的，我们将 $a_1^2-a_2^2+b_1^2-b_2^2​$ 设为$Sum​$.</p><p>$2(a_1-a_2)​$ 和 $2(b_1-b_2)​$都是已知的项，分别设为 $a​$ 和 $b​$ .</p><p><strong>所以它又变成了我们亲切的小学奥数之解方程</strong>：$ax+by=Sum$</p><p>对于二维的答案是 $(x,y)​$ ，$x​$ 和 $y​$  都可以通过高斯消元的模板来解出。</p><p>对于更高的维数，跟二维同理，只不过”元”多了几个而已。</p><h4 id="所以就这样愉快的A掉了这道大水题。"><a href="#所以就这样愉快的A掉了这道大水题。" class="headerlink" title="所以就这样愉快的A掉了这道大水题。"></a>所以就这样愉快的A掉了这道<del>大水题</del>。</h4><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">double</span> v[N][N],f[N][N],s[N],del;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Gauss</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(RI k=<span class="number">1</span>,i=<span class="number">1</span>;i&lt;=n;++i,k=i)&#123;</span><br><span class="line"><span class="keyword">for</span>(RI j=i+<span class="number">1</span>;j&lt;=n;++j)<span class="keyword">if</span>(<span class="built_in">abs</span>(f[j][i])&gt;<span class="built_in">abs</span>(f[k][i]))k=j;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(del=f[k][i])&lt;eps)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//不判就出BUG，不知道为啥</span></span><br><span class="line">swap(f[i],f[k]);swap(s[i],s[k]);</span><br><span class="line"><span class="keyword">for</span>(RI j=i;j&lt;=n;++j)f[i][j]/=del;s[i]/=del;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;++k)<span class="keyword">if</span>(k!=i)&#123;</span><br><span class="line">del=f[k][i];</span><br><span class="line"><span class="keyword">for</span>(RI j=i;j&lt;=n;++j)f[k][j]-=f[i][j]*del;</span><br><span class="line">s[k]-=s[i]*del;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)<span class="keyword">for</span>(RI j=<span class="number">1</span>;j&lt;=n;++j)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;v[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(RI j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">           s[i]+=(v[i][j]*v[i][j]-v[i+<span class="number">1</span>][j]*v[i+<span class="number">1</span>][j]);<span class="comment">//求上面的 "Sum"</span></span><br><span class="line">   f[i][j]=<span class="number">2</span>*(v[i][j]-v[i+<span class="number">1</span>][j]);<span class="comment">//求上面的 "a"、"b"等</span></span><br><span class="line">   &#125;</span><br><span class="line">Gauss();</span><br><span class="line"><span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;n;++i)<span class="built_in">printf</span>(<span class="string">"%.3lf "</span>,s[i]);<span class="comment">//注意输出格式!</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lf"</span>,s[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题啥都好，就是输出格式有点制杖……请各位小心……</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [USACO18DEC]Balance Beam  期望+凸包  洛谷P5155</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP5155/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP5155/</url>
      
        <content type="html"><![CDATA[<blockquote><p>被概率冲昏的头脑~~~</p></blockquote><p>我们先将样例在图上画下来：</p><a id="more"></a><p><img src="/2019/02/14/[题解]luoguP5155/48586.png" alt=""></p><p>会发现，最大收益是：</p><p><img src="/2019/02/14/[题解]luoguP5155/48587.png" alt="">)</p><p>看出什么了吗？</p><p><strong>这不就是凸包吗？</strong></p><p>跑一遍凸包就好了呀，这些点中，如果i号点是凸包上的点，那么它的ans就是自己(第二个点)，不然的话，从上图来看，i的ans肯定和他相邻的两个是凸包边界的点有关(0节点和2节点)，那么怎么求这个ans呢？(第x号点为横坐标为x的点)</p><p><del>实际上我也不知道</del>就是个期望公式啊!</p><p>l[i]记录i号点往左走第一个为凸包边界的点(如果i为1号，那么l[i]为0，特殊的，如果i为2号，那么l[i]就是本身)，r[i]同理。当l[x]==r[x]时，x时边界。</p><h4 id="就是这个方程：-f-l-i-r-i-i-f-r-i-i-l-i-r-i-l-i"><a href="#就是这个方程：-f-l-i-r-i-i-f-r-i-i-l-i-r-i-l-i" class="headerlink" title="就是这个方程： (f[l[i]])*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);"></a>就是这个方程： <code>(f[l[i]])*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);</code></h4><p>基础的期望方程，在此不再赘述<del>(实际上是不会证)</del></p><p>关于凸包，在这贴一波yyb大神的博客：<a href="http://www.cnblogs.com/cjyyb/p/7260523.html" target="_blank" rel="noopener">传送门戳我QwQ</a>(顺便膜一波yyb大神%%%)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NS=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll f[NS],l[NS],r[NS],hep[NS];</span><br><span class="line"><span class="comment">//f如题,l[i]/r[i]如上文,hep为凸包 </span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,top=<span class="number">0</span>;IN(n);hep[++top]=<span class="number">0</span>;<span class="comment">//注意先加入0!</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(f[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)&#123;<span class="comment">//凸包</span></span><br><span class="line"><span class="keyword">while</span>(top&gt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> a=hep[top],b=hep[top<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(((f[a]-f[b])*(i-a))&lt;((f[i]-f[a])*(a-b)))--top;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;hep[++top]=i;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;top;++i)&#123;</span><br><span class="line"><span class="comment">//中间的节点的l,r值都为hep[i]/hep[i+1]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=hep[i]+<span class="number">1</span>;j&lt;hep[i+<span class="number">1</span>];++j)&#123;</span><br><span class="line">l[j]=hep[i],r[j]=hep[i+<span class="number">1</span>];</span><br><span class="line">&#125;l[hep[i]]=hep[i],r[hep[i]]=hep[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;<span class="comment">//记得LL!</span></span><br><span class="line"><span class="keyword">if</span>(l[i]==r[i])ans=f[i]*F;<span class="comment">//为边界，直接跳下最优</span></span><br><span class="line"><span class="keyword">else</span> ans=(F*(f[l[i]]*(r[i]-i)+f[r[i]]*(i-l[i])))/(r[i]-l[i]);<span class="comment">//否则用方程算</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); </span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 概率 </tag>
            
            <tag> 期望 </tag>
            
            <tag> 凸包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [ICPC-Beijing 2006]狼抓兔子  网络流  bzoj1001/洛谷P4001</title>
      <link href="/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4001/"/>
      <url>/2019/02/14/%5B%E9%A2%98%E8%A7%A3%5DluoguP4001/</url>
      
        <content type="html"><![CDATA[<p>网络流水题。</p><p>既然要抓到所有的兔子，又要用最少的狼，很容易想到，这是在让我们求最小割。</p><a id="more"></a><p>那么如何求最小割呢？</p><p>有一条定理是这样的：<strong>最大流=最小割</strong></p><p>所以我们只要用 $Dinic$ 跑出最大流，然后直接输出就行了。</p><p>不过，为什么<strong>最大流=最小割</strong>呢？</p><p>网上的一名 $Dalao$ 给出了答案：</p><blockquote><p>$Q:$ 如何凭直觉解释最大流等于最小割?</p><p>$A:$ $1.$ 最大流不可能大于最小割, 因为最大流所有的水流都一定经过最小割那些割边, 流过的水流怎么可能比水管容量还大呢? $2.$ 最大流不可能小于最小割, 如果小, 那么说明水管容量没有物尽其用, 可以继续加大水流.</p><p>$Q:$ 如何严谨证明最大流等于最小割?</p><p>$A:$ $1.$ 证明任意的 $s-t$ 流量小于 $s-t$ 割容量, 证明方法: 根据定义即可; $2.$ 根据 $Ford-Fulkerson$ 算法求出的流来选出一个 $s-t$ 割, $S$ 为残余网络中 $s$ 可达的顶点集合, 这样就可以证出算法求出的流$=$这个割的容量, 再根据已经证明的 $1$ 来得出算法求出的流是最大流, 对应的割是最小割.</p><p>$Dalao——Jecvay Notes$</p></blockquote><p>现在要注意的一点就是，直接跑朴素的 $Dinic$ 是会 <strong>T</strong> 的，这个时候或许会要一些优化，比如说用<strong>当前弧优化</strong>，或者可以跑$ISAP$，如果还过不了，吸氧算了[滑稽]。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,val;</span><br><span class="line">&#125;G[N*<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,cnt=<span class="number">1</span>,dep[N],head[N];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y)) </span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)*m+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    G[++cnt].nxt=head[x],G[cnt].to=y,G[cnt].val=v,head[x]=cnt;</span><br><span class="line">    G[++cnt].nxt=head[y],G[cnt].to=x,G[cnt].val=v,head[y]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;q.push(s),dep[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=G[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[y]||!G[i].val)<span class="keyword">continue</span>;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>;q.push(y);</span><br><span class="line">            <span class="keyword">if</span>(y==t)<span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t)<span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i&amp;&amp;used&lt;flow;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(dep[y]!=dep[x]+<span class="number">1</span>||!G[i].val)<span class="keyword">continue</span>; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> rlow=dfs(y,min(G[i].val,flow-used));</span><br><span class="line">            <span class="keyword">if</span>(!rlow)&#123;dep[y]=<span class="number">-1</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            G[i].val-=rlow,G[i^<span class="number">1</span>].val+=rlow,used+=rlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())ans+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    IN(n),IN(m);s=<span class="number">1</span>,t=n*m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;++j)</span><br><span class="line">          IN(v),add(id(i,j<span class="number">-1</span>),id(i,j),v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">          IN(v),add(id(i<span class="number">-1</span>,j),id(i,j),v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;++j)</span><br><span class="line">          IN(v),add(id(i<span class="number">-1</span>,j<span class="number">-1</span>),id(i,j),v);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Dinic());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 浅谈树套树(线段树套平衡树)&amp;学习笔记</title>
      <link href="/2019/02/14/%5B%E7%AE%97%E6%B3%95%5D%E6%A0%91%E5%A5%97%E6%A0%91(%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91)/"/>
      <url>/2019/02/14/%5B%E7%AE%97%E6%B3%95%5D%E6%A0%91%E5%A5%97%E6%A0%91(%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>唉还是太弱了，毕竟只会初级的线段树套平衡树，<br>码量巨大，超级不适合我这种天生码量恐惧症的人……<br>那么我们开始正文</p><p>码量巨大，超级不适合我这种天生码量恐惧症的人……</p><p>那么我们开始正文</p></blockquote><a id="more"></a><hr><h2 id="0XFF-前言"><a href="#0XFF-前言" class="headerlink" title="0XFF 前言"></a>0XFF 前言</h2><blockquote><p><strong>*如果本文有不好的地方，请在下方评论区提出，Monlights感激不尽！</strong></p></blockquote><h2 id="0X1F-这个东西有啥用"><a href="#0X1F-这个东西有啥用" class="headerlink" title="0X1F 这个东西有啥用?"></a>0X1F 这个东西有啥用?</h2><blockquote><p><strong>树套树———线段树套平衡树</strong>，可以用于解决待修改区间$K$大的问题，当然也可以用 树套树———树状数组套可持久化线段树，但是 线段树套平衡树 更加容易理解，更加便于新手理解，所以一般也作为树套树的入门类别。<br>对于静态区间$K$大，我们可以用小巧精悍的主席树来做，也可以用强大无比的$Splay$来做。如果带修改，主席树就无能为力了，$Splay$也会变得很棘手难打。如果用普通线段树，每个节点都有着一课包含子节点的$Splay$，对于一个区间，直接调用线段树上的$Splay$就迎刃而解了。这时的$Splay$不是对全局，而是只对这个线段树节点代表的区间。</p><p>当然，树套树———线段树套平衡树并不是那么的好打，还是要动纸笔 and 动脑筋。缺点也是有的：因为要打$Splay$和线段树，模板的码量就有 $150$ 行！因为线段树本来就是易手滑的数据结构，稍不留神可能会让你调上好久！另外，因为$Splay$的常数极大，再这么通过线段树一罩，效率就下来了许多，常数巨大无比……总之 树套树 是一个很强的数据结构，但是如果题目不是强制在线的话，<strong>$CDQ$分治</strong>和<strong>整体二分</strong>会将<strong>树套树</strong>吊起来打！<br>                                               ——————Qiuly</p></blockquote><hr><h2 id="0X2F-这个东西怎么实现"><a href="#0X2F-这个东西怎么实现" class="headerlink" title="0X2F 这个东西怎么实现?"></a>0X2F 这个东西怎么实现?</h2><p>首先，线段树套平衡树可以解决的一般问题如下：</p><ul><li><ol><li>查询 $k$ 在区间 $l,r$ 内的排名</li></ol></li><li><ol><li>查询区间 $l,r$ 内排名为 $k$ 的值</li></ol></li><li><ol><li>修改某一位置上的数值</li></ol></li><li><ol><li>查询 $k$ 在区间 $l,r$ 内的前驱</li></ol></li><li><ol><li>查询 $k$ 在区间 $l,r$ 内的后继</li></ol></li><li><ol><li>修改区间 $l,r$ 的值(集体加减)(不会)</li></ol></li></ul><p><strong>…………</strong></p><p>我们今天来讲讲前五个基础操作怎么实现<del>(我只会前五个操作)</del></p><h3 id="0X2f-1-查询-k-在区间-l-r-内的排名"><a href="#0X2f-1-查询-k-在区间-l-r-内的排名" class="headerlink" title="0X2f-1 查询 $k$ 在区间 $l,r$ 内的排名"></a>0X2f-1 查询 $k$ 在区间 $l,r$ 内的排名</h3><p>我们先将一个外面的线段树画下来：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121092840.png" alt=""></p><p>(叶子节点中的数字是序列各个元素的权值)</p><p>假设我们现在要查询区间 $3,8$ 中 $5$ 的排名。</p><p>查询一个数的排名，很显然，就是查询这个区间内有多少个数比 Ta 小，然后在+1(即自己)。</p><p>那怎么查询 $3,8$ 区间内有多少个数比他小呢？$3,8$ 不是整个线段树节点啊。</p><p>我们可以将它分成若干个线段树节点来处理。</p><p><strong>Code:</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_rank</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span></span>&#123;<span class="comment">//i表示以线段树的i号节点为根的Splay</span></span><br><span class="line">    <span class="keyword">int</span> x=rt[i],cal=<span class="number">0</span>;<span class="comment">//板子就不再赘述了</span></span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[x]==k)<span class="keyword">return</span> cal+((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v[x]&lt;k)&#123;</span><br><span class="line">            cal+=((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+c[x];x=ch[x][<span class="number">1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span> x=ch[x][<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> cal;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Kth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);<span class="keyword">return</span>;&#125;<span class="comment">//是整个线段树节点</span></span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);<span class="comment">//情况1：完全属于左子树</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_rank(rc,mid+<span class="number">1</span>,r,L,R,Kth);<span class="comment">//情况2：完全属于右子树</span></span><br><span class="line">    <span class="keyword">else</span> Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,Kth);<span class="comment">//情况3：横跨两子树区间</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main 函数中</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;IN(v);ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>没看懂？我们来一步一步解读。</p><p>首先，进入线段树。</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121094021.png" alt=""></p><p>不是整个线段树节点，跳过第一条语句。<br>发现 $3,8$ 横跨了两个子树，拆开询问区间，先询问左子树。这个时候往左子树递归，目标询问区间 $3,4$ ，右子树目标询问区间 $5,8$ 。分别处理。</p><p>进入左子树：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121094852.png" alt=""></p><p>然后，发现询问区间完全属于右子树(当前区间：$1,4$ ,  询问区间：$3~4$)，所以直接递归右子树：</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121095114.png" alt=""></p><p>这个时候，发现当前区间和询问区间合并了(当前区间：$3,4$ ,  询问区间：$3~4$)，$Splay$ 询问小于 $5$ 的数的个数。</p><p>区间：$3,4$ 的 $Splay$ :</p><p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM截图20190121095518.png" alt=""></p><p>至于 $Splay$ 里面的操作不在模拟，因为 $(4,6)$ 中比 $5$ 小的只有一个数，所以 $ans+=1$ ，现在 $ans=1$</p><p>左子树的任务完成，现在处理在右子树的询问区间 $(5,8)$ ，发现一下去 当前区间：$5,8$ ,  询问区间：$5,8$ 合并了！<br>直接跳进 $Splay$。</p><p>跑完 $Splay$ 后，发现有两个数小于 $5$ ($=$的不算)，$ans+=2$ ，现在 $ans=3$ 。</p><p>所以询问区间全部处理完了，退出函数。<br>main函数输出：$ans(3)+1=4$ 即答案为 $4$ .</p><hr><h3 id="0X2f-2-查询区间-l-r-内排名为-k-的值"><a href="#0X2f-2-查询区间-l-r-内排名为-k-的值" class="headerlink" title="0X2f-2 查询区间 $l,r$ 内排名为 $k$ 的值"></a>0X2f-2 查询区间 $l,r$ 内排名为 $k$ 的值</h3><p>这个我们需要用到二分来实现，我们不能讲询问区间拆成两个区间(像第一个操作那样)，因为合并不了答案啊。</p><p>所以我们依靠二分来实现。</p><p><strong>Code:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Kth</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=MX+<span class="number">1</span>,M;<span class="comment">//MX为序列权值的最大值，上图中MX为9.</span></span><br><span class="line">    <span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">        M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,M);<span class="comment">//询问M的排名</span></span><br><span class="line">        <span class="keyword">if</span>(ans&lt;k)L=M+<span class="number">1</span>;<span class="keyword">else</span> R=M;<span class="comment">//二分</span></span><br><span class="line">    &#125;<span class="keyword">return</span> L<span class="number">-1</span>;<span class="comment">//return</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main函数中</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:&#123;IN(v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get_Kth(x,y,v));&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>这个我就不贴图了，不好画图解释。理解不难，多读几遍代码就好了。</p><h3 id="0X2f-3-修改某一位置上的数值"><a href="#0X2f-3-修改某一位置上的数值" class="headerlink" title="0X2f-3 修改某一位置上的数值"></a>0X2f-3 修改某一位置上的数值</h3><p>这个很简单，跟普通的线段树单点修改几乎一模一样，只是要同时更新 $Splay$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    Splay_Delete(x,a[pos]);Splay_Insert(x,val);<span class="comment">//更新 Splay</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;a[pos]=val;<span class="keyword">return</span>;&#125;;<span class="comment">//修改序列的值</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_change(lc,l,mid,pos,val);<span class="comment">//普通的线段树</span></span><br><span class="line">    <span class="keyword">else</span> Seg_change(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main函数中</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:&#123;Seg_change(<span class="number">1</span>,<span class="number">1</span>,n,x,y);&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="0X2f-4-查询-k-在区间-l-r-内的前驱"><a href="#0X2f-4-查询-k-在区间-l-r-内的前驱" class="headerlink" title="0X2f-4 查询 $k$ 在区间 $l,r$ 内的前驱"></a>0X2f-4 查询 $k$ 在区间 $l,r$ 内的前驱</h3><p>对于这个操作，我们依旧可以拆开来操作，合并的时候对于每个拆分后的询问区间的答案取个最大值，因为是求前驱，肯定是越接近 $k$ 越好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_pre(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main函数中</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:&#123;IN(v);ans=-inf;Seg_pre(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="0X2f-4-查询-k-在区间-l-r-内的后继"><a href="#0X2f-4-查询-k-在区间-l-r-内的后继" class="headerlink" title="0X2f-4 查询 $k$ 在区间 $l,r$ 内的后继"></a>0X2f-4 查询 $k$ 在区间 $l,r$ 内的后继</h3><ul><li>跟 $4$ 操作同理.</li></ul><hr><h2 id="0X3F-一些题目"><a href="#0X3F-一些题目" class="headerlink" title="0X3F 一些题目"></a>0X3F 一些题目</h2><blockquote><h4 id="BZOJ3196-Tyvj-1730-二逼平衡树"><a href="#BZOJ3196-Tyvj-1730-二逼平衡树" class="headerlink" title="BZOJ3196: Tyvj 1730 二逼平衡树"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3196" target="_blank" rel="noopener">BZOJ3196: Tyvj 1730 二逼平衡树</a></h4><h4 id="LUOGU-P3380【模板】二逼平衡树-树套树"><a href="#LUOGU-P3380【模板】二逼平衡树-树套树" class="headerlink" title="LUOGU P3380【模板】二逼平衡树(树套树)"></a><a href="https://www.luogu.org/problemnew/show/P3380" target="_blank" rel="noopener">LUOGU P3380【模板】二逼平衡树(树套树)</a></h4></blockquote><p>这道题就是上面讲的那道啊!</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">" "</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="comment">//template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; </span></span><br><span class="line"><span class="comment">//template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],ans,MX;</span><br><span class="line"><span class="comment">/*----------------------------------Splay-------------------------------------*/</span></span><br><span class="line"><span class="keyword">int</span> f[N],c[N],s[N],v[N],ch[N][<span class="number">2</span>],rt[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_del_node</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;f[x]=s[x]=c[x]=v[x]=ch[x][<span class="number">0</span>]=ch[x][<span class="number">1</span>]=<span class="number">0</span>;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;s[x]=(ch[x][<span class="number">0</span>]?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+(ch[x][<span class="number">1</span>]?s[ch[x][<span class="number">1</span>]]:<span class="number">0</span>)+c[x];&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=f[x],z=f[y],k=chk(x),v=ch[x][k^<span class="number">1</span>];</span><br><span class="line">    ch[y][k]=v;<span class="keyword">if</span>(v)f[v]=y;f[x]=z;<span class="keyword">if</span>(z)ch[z][chk(y)]=x;</span><br><span class="line">    f[y]=x,ch[x][k^<span class="number">1</span>]=y;Splay_pushup(y),Splay_pushup(x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x,<span class="keyword">int</span> top=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(f[x]!=top)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=f[x],z=f[y];</span><br><span class="line">        <span class="keyword">if</span>(z!=top)Splay_rotate((ch[z][<span class="number">0</span>]==y)==(ch[y][<span class="number">0</span>]==x)?y:x);</span><br><span class="line">        Splay_rotate(x);</span><br><span class="line">    &#125;<span class="keyword">if</span>(!top)rt[i]=x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_Insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];</span><br><span class="line">    <span class="keyword">if</span>(!rt[i])&#123;</span><br><span class="line">        rt[i]=pos=++tot;v[pos]=x;s[pos]=c[pos]=<span class="number">1</span>;</span><br><span class="line">        f[pos]=ch[pos][<span class="number">0</span>]=ch[pos][<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]==x)&#123;++c[pos];Splay_pushup(last);<span class="keyword">break</span>;&#125;</span><br><span class="line">        last=pos;pos=ch[pos][x&gt;v[pos]];</span><br><span class="line">        <span class="keyword">if</span>(!pos)&#123;</span><br><span class="line">            pos=++tot;v[pos]=x;s[pos]=c[pos]=<span class="number">1</span>;</span><br><span class="line">            ch[last][x&gt;v[last]]=pos;</span><br><span class="line">            f[pos]=last;ch[pos][<span class="number">0</span>]=ch[pos][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            Splay_pushup(last);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;Splay(i,pos);<span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_rank</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=rt[i],cal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[x]==k)<span class="keyword">return</span> cal+((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v[x]&lt;k)&#123;</span><br><span class="line">            cal+=((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+c[x];x=ch[x][<span class="number">1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span> x=ch[x][<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> cal;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_find</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]==x)&#123;Splay(i,pos);<span class="keyword">return</span> pos;&#125;;</span><br><span class="line">        pos=ch[pos][x&gt;v[pos]];</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_pre</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">int</span> x=ch[rt[i]][<span class="number">0</span>];<span class="keyword">while</span>(ch[x][<span class="number">1</span>])x=ch[x][<span class="number">1</span>];<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_suc</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">int</span> x=ch[rt[i]][<span class="number">1</span>];<span class="keyword">while</span>(ch[x][<span class="number">0</span>])x=ch[x][<span class="number">0</span>];<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_Get_pre</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(pos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]&lt;x)&#123;<span class="keyword">if</span>(ans&lt;v[pos])ans=v[pos];pos=ch[pos][<span class="number">1</span>];&#125;</span><br><span class="line">        <span class="keyword">else</span> pos=ch[pos][<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_Get_suc</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(pos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]&gt;x)&#123;<span class="keyword">if</span>(ans&gt;v[pos])ans=v[pos];pos=ch[pos][<span class="number">0</span>];&#125;</span><br><span class="line">        <span class="keyword">else</span> pos=ch[pos][<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_Delete</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=Splay_find(i,key);</span><br><span class="line">    <span class="keyword">if</span>(c[x]&gt;<span class="number">1</span>)&#123;--c[x];Splay_pushup(x);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">0</span>]&amp;&amp;!ch[x][<span class="number">1</span>])&#123;Splay_del_node(rt[i]);rt[i]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">0</span>])&#123;<span class="keyword">int</span> y=ch[x][<span class="number">1</span>];rt[i]=y;f[y]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">1</span>])&#123;<span class="keyword">int</span> y=ch[x][<span class="number">0</span>];rt[i]=y;f[y]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> p=Splay_pre(i);<span class="keyword">int</span> lastrt=rt[i];</span><br><span class="line">    Splay(i,p,<span class="number">0</span>);ch[rt[i]][<span class="number">1</span>]=ch[lastrt][<span class="number">1</span>];f[ch[lastrt][<span class="number">1</span>]]=rt[i];</span><br><span class="line">    Splay_del_node(lastrt);Splay_pushup(rt[i]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*------------------------------Seg_Tree--------------------------------------*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ((x)&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ((x)&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_Insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    Splay_Insert(x,val);<span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_Insert(lc,l,mid,pos,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_Insert(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Kth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_rank(rc,mid+<span class="number">1</span>,r,L,R,Kth);</span><br><span class="line">    <span class="keyword">else</span> Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,Kth);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="comment">//    printf("QvQ:: %d %d %d %d %d\n",x,l,r,pos,val);</span></span><br><span class="line">    Splay_Delete(x,a[pos]);Splay_Insert(x,val);</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;a[pos]=val;<span class="keyword">return</span>;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_change(lc,l,mid,pos,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_change(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_pre(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_suc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=min(ans,Splay_Get_suc(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_suc(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_suc(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_suc(lc,l,mid,L,mid,val),Seg_suc(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*---------------------------------ask----------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Kth</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=MX+<span class="number">1</span>,M;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">        M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,M);</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;k)L=M+<span class="number">1</span>;<span class="keyword">else</span> R=M;</span><br><span class="line">    &#125;<span class="keyword">return</span> L<span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*-------------------------------main-------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> <span class="keyword">const</span>* argv[])</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)&#123;IN(a[i]);Seg_Insert(<span class="number">1</span>,<span class="number">1</span>,n,i,a[i]);MX=max(MX,a[i]);&#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,x,y,v;IN(op),IN(x),IN(y);</span><br><span class="line">        <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;IN(v);ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;IN(v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get_Kth(x,y,v));&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;Seg_change(<span class="number">1</span>,<span class="number">1</span>,n,x,y);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;IN(v);ans=-inf;Seg_pre(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:&#123;IN(v);ans=inf;Seg_suc(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>然后就是这道题，跟上面的那道题差不多，大家可以拿来练练手：</p><blockquote><h4 id="BZOJ3196-1901-Dynamic-Rankings"><a href="#BZOJ3196-1901-Dynamic-Rankings" class="headerlink" title="BZOJ3196: 1901 Dynamic Rankings"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1901" target="_blank" rel="noopener">BZOJ3196: 1901 Dynamic Rankings</a></h4><h4 id="LUOGU-P2617-Dynamic-Rankings"><a href="#LUOGU-P2617-Dynamic-Rankings" class="headerlink" title="LUOGU P2617 Dynamic Rankings"></a><a href="https://www.luogu.org/problemnew/show/P3380" target="_blank" rel="noopener">LUOGU P2617 Dynamic Rankings</a></h4></blockquote><p>不贴代码了。</p><hr><p>一道不错的细节题：</p><blockquote><h4 id="LUOGU-P3332-ZJOI2013-K大数查询"><a href="#LUOGU-P3332-ZJOI2013-K大数查询" class="headerlink" title="LUOGU P3332 [ZJOI2013]K大数查询"></a><a href="https://www.luogu.org/problemnew/show/P3332" target="_blank" rel="noopener">LUOGU P3332 [ZJOI2013]K大数查询</a></h4></blockquote><p>$———by Qiuly$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】 点分治总结&amp;学习笔记</title>
      <link href="/2019/02/13/%5B%E7%AE%97%E6%B3%95%5D%E7%82%B9%E5%88%86%E6%B2%BB/"/>
      <url>/2019/02/13/%5B%E7%AE%97%E6%B3%95%5D%E7%82%B9%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>其实很短的啦，感觉……感觉淀粉质这种东西好像没什么可以总结的……<br>只会有一些简单的板子题而已……(实际上是砍不动难的题目)<br>(淀粉质吗？味道真是不错呢嘿嘿嘿)</p></blockquote><a id="more"></a><h3 id="0XFF—-点分治是啥？"><a href="#0XFF—-点分治是啥？" class="headerlink" title="0XFF—-点分治是啥？"></a>0XFF—-点分治是啥？</h3><blockquote><p>   点分治，是处理树上路径的一个极好的工具。<br>   一般如果需要大规模处理树上路径，点分治是一个不错的选择。<br>   ———一位网上的Dalao</p></blockquote><p>现在有一个问题，给你一颗树，树上的每一条边都有权值，现在给一个 $k$ ，要求你求出树上所有路径中路径权值小于 $k$ 的路径总数，你怎么办？</p><p>暴力？$O(N^3)$ 的复杂度分分钟让你 <strong>T</strong> 飞！</p><p>当然，你可以用分治来求，复杂度仅有 $O(nlogn)$。</p><p>对于树上做分治，不仅有基于点的分治方式，还有基于边的以及基于链的，但是这不在我们的讨论范围类<del>(作者太蒟了不会QvQ)</del>。</p><h3 id="0X1F-点分治的流程"><a href="#0X1F-点分治的流程" class="headerlink" title="0X1F 点分治的流程"></a>0X1F 点分治的流程</h3><h4 id="0X1F—-1-怎么分治？"><a href="#0X1F—-1-怎么分治？" class="headerlink" title="0X1F—-1 怎么分治？"></a>0X1F—-1 怎么分治？</h4><p>对于所有的路径，很显然我们可以将它们分成两部分：</p><ul><li>$1.$ 这条路径经过了它所在的子树的根节点</li><li>$2.$ 这条路径没经过它所在的子树的根节点</li></ul><p>假设现在有一颗树，Ta的根节点是 $1$：</p><p><img src="https://qiulyn.files.wordpress.com/2019/02/time688aae59bbe20190204204228.png" alt=""></p><p>对于路径 $2 -&gt; 1 -&gt; 3 -&gt; 6$ ，它是经过了根节点的，属于 $1$ 类路径。</p><p>对于路径 $4 -&gt; 2 -&gt; 5 -&gt; 8$ ，它没有经过根节点 $1$，属于 $2$ 类路径。</p><p>对于第一类路径我们直接处理，对于第二类路径，递归处理当前根的儿子，在儿子里面处理，也就是说现在我们只需要处理第一类路径。</p><p>怎么确定这个根呢？显然根的好坏可以决定算法的复杂度。</p><p>因为每次是递归儿子，显然递归层数越少越好，什么情况下递归层数越少？<strong>当前根是当前树的重心时</strong>！</p><p>那么，整个算法的框架如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="comment">//当前节点u</span></span><br><span class="line">    当前树的当前根节点为u，统计第一类路径;</span><br><span class="line">    做标记，当前点已经当过根了(总不可能一直是一个点当吧=。=)</span><br><span class="line">    <span class="keyword">for</span>(u的所有儿子)&#123;</span><br><span class="line">        <span class="keyword">if</span>(儿子当过根节点了)<span class="keyword">continue</span>;</span><br><span class="line">        去掉满足在一个子树条件的不合法答案;</span><br><span class="line">        在儿子的子树中得到一个新的根节点;</span><br><span class="line">        solve(新的根节点);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，在儿子的子树中得到一个新的根节点如下：</p><p><img src="https://qiulyn.files.wordpress.com/2019/02/time688aae59bbe20190204210311.png" alt=""></p><p>现在在 $Solva(1)$ 函数中，并且现在循环到了 $1$ 的儿子 $3$ ，那么 $3$ 的子树就是灰色三角形中的三个节点，我们的新 $root$ 就是灰色三角形这棵树的重心，现在刚开始的时候可以将 $3$ 看成根节点，然后再往下计算。</p><h4 id="0X1F—-2-获取树的重心"><a href="#0X1F—-2-获取树的重心" class="headerlink" title="0X1F—-2 获取树的重心"></a>0X1F—-2 获取树的重心</h4><p>很简单，只需要一个 $DP$ 就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;mxss[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        getroot(v,u);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">        mxss[u]=max(mxss[u],size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    mxss[u]=max(mxss[u],sum-size[u]);</span><br><span class="line">    <span class="keyword">if</span>(mxss[u]&lt;mxss[root])root=u; </span><br><span class="line">    <span class="comment">//mxss[u]为u的子树中size最大的size，size就是u下面的子树大小。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这一句是什么意思呢：<code>mxss[u]=max(mxss[u],sum-size[u]);</code></p><p>我们再举个栗子，假如现在的 $u$ 是 $1$ ：($Qiuly$懒所以用的前面的那个图)</p><p><img src="https://qiulyn.files.wordpress.com/2019/02/time688aae59bbe20190204211515.png" alt=""></p><p>但是 $size[1]$ 统计的只是Ta下面的 ${2,3,4,5,6,7,8}$ 号节点，万一当前树不止这些呢？也就是说上面还有一坨节点，如果计算的时候显然也是要考虑进去的。</p><h4 id="0X1F—-怎么统计1类路径？"><a href="#0X1F—-怎么统计1类路径？" class="headerlink" title="0X1F—-怎么统计1类路径？"></a>0X1F—-怎么统计1类路径？</h4><h5 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdist</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    use[++cnt]=dist[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        dist[v]=dist[u]+G[i].val;getdist(v,u);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dist0)</span></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;dist[u]=dist0;</span><br><span class="line">    getdist(u,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(use+<span class="number">1</span>,use+<span class="number">1</span>+cnt);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=cnt,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">       <span class="keyword">if</span>(use[l]+use[r]&lt;=k)res+=r-l,++l;</span><br><span class="line">       <span class="keyword">else</span> --r;</span><br><span class="line">    <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定了当前树的 $root$ 后，我们可以定义 $dist[root]$ 为 $0$ ，其余的当前树的节点的 $dist$ 为Ta到 $root$ 的距离(路上所有边的权值和)。</p><p>显然，这个问题很容易搞定($getdist$)。</p><p>想象一下，现在有一条路径 $l -&gt; \cdots -&gt; root -&gt; \cdots -&gt; r$，显然这条路径的权值就是 $dist[l] + dist[r]$。</p><p>可是，如果一一去枚举 $l,r$ 并且统计的话复杂度是报表的啊！<br>这没关系，我们依旧可以用线性的时间复杂度解决问题。</p><p>得到了所有的 $dist$ 后，我们排个序。</p><p>然后就是统计的流程。</p><p>假设现在排好序的数列为 {$1,1,2,3,4,4,5,6,7,7,8$}，$l$ 为 $1$ ，$r$ 为 $cnt$。</p><p>现在计算 $1+8$ ，显然如果 $1+8$ 小于 $k$ ，那么 $1 + (1/2/3/4/4/5/6/7/7)$ 都会小于 $k$，这个时候直接统计即可。否则  <code>--r</code> ，因为我们还需要统计的是 $l+1,l+2,\cdots$，既然这个 $r$ 不行了，对后面的答案是肯定不会有影响的。</p><p>最后 $return;$</p><h3 id="0X2F-总体代码"><a href="#0X2F-总体代码" class="headerlink" title="0X2F 总体代码"></a>0X2F 总体代码</h3><blockquote><h4 id="Test-Luogu-P4178-Tree"><a href="#Test-Luogu-P4178-Tree" class="headerlink" title="Test:Luogu P4178 Tree"></a>Test:Luogu <a href="https://www.luogu.org/problemnew/show/P4178" target="_blank" rel="noopener">P4178 Tree</a></h4><h4 id="Code-如下"><a href="#Code-如下" class="headerlink" title="Code:如下"></a>Code:如下</h4></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="comment">//为了格式不鬼畜这两个宏定义我只能放着了QvQ</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,cnt,sum,ans,root,head[N];</span><br><span class="line"><span class="keyword">int</span> vis[N],use[N],dist[N],size[N],mxss[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,val; </span><br><span class="line">&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;mxss[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        getroot(v,u);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">        mxss[u]=max(mxss[u],size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    mxss[u]=max(mxss[u],sum-size[u]);</span><br><span class="line">    <span class="keyword">if</span>(mxss[u]&lt;mxss[root])root=u; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdist</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    use[++cnt]=dist[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        dist[v]=dist[u]+G[i].val;getdist(v,u);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dist0)</span></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;dist[u]=dist0;</span><br><span class="line">    getdist(u,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(use+<span class="number">1</span>,use+<span class="number">1</span>+cnt);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=cnt,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">       <span class="keyword">if</span>(use[l]+use[r]&lt;=k)res+=r-l,++l;</span><br><span class="line">       <span class="keyword">else</span> --r;</span><br><span class="line">    <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    ans+=calc(u,<span class="number">0</span>);</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[(v=G[i].to)])<span class="keyword">continue</span>;</span><br><span class="line">        ans-=calc(v,G[i].val);</span><br><span class="line">        sum=size[v];root=<span class="number">0</span>;</span><br><span class="line">        getroot(v,<span class="number">0</span>);</span><br><span class="line">        solve(root);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),sum=mxss[<span class="number">0</span>]=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v,w;i&lt;n;++i)&#123;</span><br><span class="line">        IN(u),IN(v),IN(w);</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[u],v,w&#125;;head[u]=cnt;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[v],u,w&#125;;head[v]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    IN(k);</span><br><span class="line">    getroot(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="Test-Luogu-P3806-【模板】点分治1"><a href="#Test-Luogu-P3806-【模板】点分治1" class="headerlink" title="Test:Luogu P3806 【模板】点分治1"></a>Test:Luogu <a href="https://www.luogu.org/problemnew/show/P3806" target="_blank" rel="noopener">P3806 【模板】点分治1</a></h4><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h4><h6 id="很显然我们不能像上面那样傻乎乎的While了，那样不能算出路径的权值，只能统计。"><a href="#很显然我们不能像上面那样傻乎乎的While了，那样不能算出路径的权值，只能统计。" class="headerlink" title="很显然我们不能像上面那样傻乎乎的While了，那样不能算出路径的权值，只能统计。"></a>很显然我们不能像上面那样傻乎乎的While了，那样不能算出路径的权值，只能统计。</h6><h6 id="干脆统计时来个双重循环暴力吧！然后搞个桶。复杂度很高但是能过得了-至少这一题是这样的"><a href="#干脆统计时来个双重循环暴力吧！然后搞个桶。复杂度很高但是能过得了-至少这一题是这样的" class="headerlink" title="干脆统计时来个双重循环暴力吧！然后搞个桶。复杂度很高但是能过得了(至少这一题是这样的)"></a>干脆统计时来个双重循环暴力吧！然后搞个桶。复杂度很高但是能过得了(至少这一题是这样的)</h6><h4 id="Code-如下-1"><a href="#Code-如下-1" class="headerlink" title="Code:如下"></a>Code:如下</h4></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="comment">//Q.v.Q........................</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">10000005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k,cnt,sum,root,head[N];</span><br><span class="line"><span class="keyword">int</span> vis[N],use[N],dist[N],size[N],mxss[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,val; </span><br><span class="line">&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;mxss[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        getroot(v,u);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">        mxss[u]=max(mxss[u],size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    mxss[u]=max(mxss[u],sum-size[u]);</span><br><span class="line">    <span class="keyword">if</span>(mxss[u]&lt;mxss[root])root=u; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdist</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    use[++cnt]=dist[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>((v=G[i].to)==fa||vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        dist[v]=dist[u]+G[i].val;getdist(v,u);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dist0,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;dist[u]=dist0;</span><br><span class="line">    getdist(u,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)</span><br><span class="line">          ans[use[i]+use[j]]+=add; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    calc(u,<span class="number">0</span>,<span class="number">1</span>);vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[(v=G[i].to)])<span class="keyword">continue</span>;</span><br><span class="line">        calc(v,G[i].val,<span class="number">-1</span>);</span><br><span class="line">        sum=size[v];root=<span class="number">0</span>;</span><br><span class="line">        getroot(v,<span class="number">0</span>);</span><br><span class="line">        solve(root);</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m),sum=mxss[<span class="number">0</span>]=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v,w;i&lt;n;++i)&#123;</span><br><span class="line">        IN(u),IN(v),IN(w);</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[u],v,w&#125;;head[u]=cnt;</span><br><span class="line">        G[++cnt]=(Edge)&#123;head[v],u,w&#125;;head[v]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    getroot(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">       IN(k),<span class="built_in">printf</span>(ans[k]?<span class="string">"AYE\n"</span>:<span class="string">"NAY\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>~~(还是背板子最重要嘿嘿嘿)</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2014]魔法森林  动态加边Spfa  bzoj3669/luogu2387</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2387/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2387/</url>
      
        <content type="html"><![CDATA[<p>膜法森林2333……</p><p>显然是一道 $LCT$ 动态加边的题目。</p><p>然而并不需要这么高深的数据结构来动态加边<del>(实际上是不会)</del>，我们只需要 $Spfa$ 动态加边即可切掉此题。</p><a id="more"></a><p>怎么 $Spfa$?又是个怎么的动态加边法呢？</p><p>在下面我先给出代码，然后再来一步一步剖析(跟 $Spfa$ 板子差不多)。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e4</span>+<span class="number">2</span>,M=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;<span class="keyword">char</span> ch;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> head[N],dis[N],tot,cnt,ans,n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_Spfa</span>&#123;</span><span class="keyword">int</span> nxt,to,v1,v2;&#125;G[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_Main</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,v1,v2;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Edge_Main a)<span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1&lt;a.v1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;L[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make_line</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>&#123;</span><br><span class="line">    G[++tot].nxt=head[x],head[x]=tot,G[tot].to=y,G[tot].v1=v1,G[tot].v2=v2;</span><br><span class="line">    G[++tot].nxt=head[y],head[y]=tot,G[tot].to=x,G[tot].v1=v1,G[tot].v2=v2;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">"\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> star_1,<span class="keyword">int</span> star_2)</span></span>&#123;</span><br><span class="line">    vis[star_1]=<span class="literal">true</span>,vis[star_2]=<span class="literal">true</span>;</span><br><span class="line">    q.push(star_1),q.push(star_2);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=G[i].nxt)&#123;</span><br><span class="line">    <span class="keyword">int</span> to=G[i].to;</span><br><span class="line">    <span class="keyword">if</span>(max(dis[u],G[i].v2)&lt;dis[to])&#123;</span><br><span class="line">        dis[to]=max(dis[u],G[i].v2);</span><br><span class="line"><span class="keyword">if</span>(!vis[to])q.push(to),vis[to]=<span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;vis[u]=<span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">127</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>,q.push(<span class="number">1</span>),ans=inf; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">   IN(L[i].x),IN(L[i].y),IN(L[i].v1),IN(L[i].v2);</span><br><span class="line">    <span class="built_in">std</span>::sort(L+<span class="number">1</span>,L+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    make_line(L[i].x,L[i].y,L[i].v1,L[i].v2);</span><br><span class="line">spfa(L[i].x,L[i].y);</span><br><span class="line">ans=min(ans,dis[n]+L[i].v1); </span><br><span class="line">&#125;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans==inf?<span class="number">-1</span>:ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态加边，顾名思义，就是按最优顺序依次将边插入，对于每次插完边的图做一次答案统计($Spfa$)，然后每次在 $main$ 函数里统计答案，最后输出即可。</p><p>我们固定 $v1$ ，用 $v2$ 跑 $Spfa$，边的插入顺序是按照 $v1$ 的大小来的，小的先插。</p><p>之所以上面要用到 $sort$，是因为我们要达到”按最优顺序依次将边插入”。</p><p>$Spfa$ 的板子就不解释了，不懂的同学左转搜素 $Spfa$ ，先刷几道黄牌去吧……</p><p>我们来看看动态加边的过程:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    make_line(L[i].x,L[i].y,L[i].v1,L[i].v2);</span><br><span class="line">spfa(L[i].x,L[i].y);</span><br><span class="line">ans=min(ans,dis[n]+L[i].v1); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>make_line(L[i].x,L[i].y,L[i].v1,L[i].v2);</code> :</strong></p><ul><li>加边，不解释</li></ul><p><strong><code>spfa(L[i].x,L[i].y);</code> :</strong></p><ul><li><p>$Spfa$ 过程。</p><blockquote><ul><li><p>$Q$ :为什么要定义两个起点 $L[i].x$ 和 $L[i].y$ 呢？</p></li><li><p>$A$ :显然加进来了这条边后，对当前图中一些点的 $dis$ 值可能会有影响，所以以这个边的两端的点为起点，依次更新旁边的点，直到不能再更新。</p></li></ul></blockquote></li></ul><p><strong><code>ans=min(ans,dis[n]+L[i].v1);</code> :</strong></p><ul><li><p>更新 $ans$ 值</p><blockquote><ul><li><p>$Q$ :为什么使用 $dis[n]+L[i].v1$ 对 $ans$ 进行更新，有可能这条最短路上并不包含这个边啊，为什么要将 $L[i].v1$ 算进去呢？可能会更新错答案啊。</p></li><li><p>$A$ :对于当前图的最短路，我们分两种情况来讨论：</p><ul><li>$1.$ 这条最短路上没包含这条新加上的边</li><li>$2.$ 这条最短路上包含了这条新加上的边</li></ul></li><li><p>对于第一种情况，显然这条最短路在加上这条边之前就已经有了，因为这条边的存在跟这条最短路没任何关系，既然之前有了，那么就肯定已经更新过 $ans$ 了。而那个时候的 $v1$ 是肯定比这个时候的 $v1$ 小的，也就是说 $ans$ 在之前已经被比现在的答案更小的答案更新过了，所以 $ans$ 也不会被当前答案更新。</p></li><li><p>对于第二种情况，因为这条最短路上包含了这条边，而这条边肯定是这条最短路上 $v1$ 最大的边(当然也是当前图上 $v1$ 最大的边)，所以直接更新没错。</p></li></ul></blockquote></li></ul><ul><li><p>每一次循环后数组不要重置吗？</p><ul><li><p>显然队列是不要的，因为 $Spfa$ 的退出条件是是队列为空，所以每次做完 $Spfa$ 时队列也就空了。</p></li><li><p>$vis$ 数组也不需要，跟队列是一个道理，只有 $vis$ 数组里面还有 $true$ 的元素，说明还有元素在队列里，队列空了，$vis$  数组也自然空了。</p></li><li><p>$dis$ 数组不需要，因为循环中每次跑 $Spfa$ 是为了<strong>更新 $dis$ 数组而非做最短路</strong>。</p></li></ul></li></ul><p>然后……然后就没有然后了……</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> LCT </tag>
            
            <tag> Spfa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [SDOI2008]Cave洞穴勘测  LCT  bzoj2049/洛谷P2147</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2147/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2147/</url>
      
        <content type="html"><![CDATA[<p>Link-Cut-Tree的模板题啊……(听说还可以用其他的方法做，不管了，直接上LCT)</p><p>没有要求维护点权，只需要维护点的连通性即可。</p><p>就是朴素的LCT，居然还不要pushup。</p><a id="more"></a><p>感觉有些不适应啊…….不得不说LCT是个神器。</p><p>简单分析一下。</p><ul><li>对于每种命令:<ul><li>如果是<code>Connect x y (链接 x y)</code>:直接 <code>link(x,y)</code>即可。</li><li>如果是<code>Destroy x y (切断 x y)</code>:直接 <code>cut(x,y)</code>即可。</li><li>如果是<code>Query x y (询问 x y 的连通性)</code>:判断<code>findroot(x)</code>和<code>findroot(y)</code>是否一致，一致输出<code>Yes</code>，否则输出<code>No</code>。</li></ul></li></ul><p>然后就A了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">" "</span>) </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(Tp &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();x*=f;</span><br><span class="line">&#125;<span class="keyword">int</span> n,m,f[N],r[N],hep[N],ch[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">0</span>]==x||ch[f[x]][<span class="number">1</span>]==x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">filp</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);r[x]^=<span class="number">1</span>;&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!r[x])<span class="keyword">return</span>;r[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">0</span>])filp(ch[x][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">1</span>])filp(ch[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=f[x],z=f[y],k=chk(x),&amp;v=ch[x][!k];</span><br><span class="line"><span class="keyword">if</span>(get(y))ch[z][chk(y)]=x;v=y,ch[y][k]=v;</span><br><span class="line"><span class="keyword">if</span>(v)f[v]=y;f[y]=x,f[x]=z;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=x,top=<span class="number">0</span>;hep[++top]=y;</span><br><span class="line"><span class="keyword">while</span>(get(y))hep[++top]=y=f[y];</span><br><span class="line"><span class="keyword">while</span>(top)pushdown(hep[top--]);</span><br><span class="line"><span class="keyword">while</span>(get(x))&#123;</span><br><span class="line">y=f[x],top=f[y];</span><br><span class="line"><span class="keyword">if</span>(get(y))rotate((ch[y][<span class="number">0</span>]==x)^(ch[top][<span class="number">0</span>]==y)?x:y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;<span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> y=<span class="number">0</span>;x;x=f[y=x])</span><br><span class="line">       Splay(x),ch[x][<span class="number">1</span>]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Access(x);Splay(x);filp(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Access(x);Splay(x);</span><br><span class="line">    <span class="keyword">while</span>(ch[x][<span class="number">0</span>])pushdown(x),x=ch[x][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    makeroot(x);Access(y);Splay(y);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    makeroot(x);<span class="keyword">if</span>(findroot(y)!=x)f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    <span class="keyword">if</span>(findroot(y)==x&amp;&amp;f[x]==y&amp;&amp;!ch[x][<span class="number">1</span>])&#123;</span><br><span class="line">        f[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,op,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'C'</span>)link(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'D'</span>)cut(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">'Q'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(findroot(x)==findroot(y))<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 [NOI2010]超级钢琴 RMQ+优先队列 bzoj2006/洛谷P2048</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2048/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP2048/</url>
      
        <content type="html"><![CDATA[<p>这一道题显然是一道 $RMQ$ 的题目，用一个三元素组$（o，l，r）​$表示：左端点为o，右端点在l到r的区间内的最大子段，元素组用堆维护。</p><a id="more"></a><p>对于每个和弦的值，用前缀和在$O(1)$的时间复杂度求出。</p><p>$ans$累加这个三元组的贡献。由于$t$已经被选中，对于这个$o$，$t$已经不能重复选中，但最优解还可能存在于 $t$左右的两端区间中，所以提取出$(o, l, r)$之后，为了避免重复且不丧失其他较优解，我们仍然要把$(o, l, t - 1),(o, t + 1, r)$扔回堆里面去。还要避免重复或错误，即$l = t$或$r = t$的情况要进行特判。</p><p>对于$t$的位置，我们直接用ST表预处理出即可。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Macth</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500005</span>,Log=<span class="number">20</span>;</span><br><span class="line">ll f[N][Log],sum[N];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> RMQ&#123;<span class="comment">//ST表求区间最优位置(貌似在本题中是这样)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)f[i][<span class="number">0</span>]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;++j)</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)&#123;</span><br><span class="line">             <span class="keyword">int</span> x=f[i][j<span class="number">-1</span>],y=f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">                f[i][j]=sum[x]&gt;sum[y]?x:y;<span class="comment">//取更优的位置</span></span><br><span class="line">        &#125;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> x=f[l][k],y=f[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k];</span><br><span class="line">        <span class="keyword">return</span> sum[x]&gt;sum[y]?x:y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k,L,R;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,o,t;<span class="comment">//t就是最优的位置</span></span><br><span class="line">Queue()&#123;&#125;</span><br><span class="line">Queue(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r):o(o),l(l),r(r),t(RMQ::query(l,r))&#123;&#125;<span class="comment">//t:取个l至r区间的最优值</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Queue a)<span class="keyword">const</span>&#123;<span class="comment">//重载运算符</span></span><br><span class="line"><span class="keyword">return</span> sum[a.t]-sum[a.o<span class="number">-1</span>]&lt;sum[t]-sum[o<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;A;</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;Queue&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;k,&amp;L,&amp;R);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;sum[i]);sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">&#125;RMQ::make(n);ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123; </span><br><span class="line">   <span class="keyword">if</span>(i+L<span class="number">-1</span>&lt;=n)q.push(Queue(i,i+L<span class="number">-1</span>,min(i+R<span class="number">-1</span>,n)));</span><br><span class="line">&#125;<span class="keyword">while</span>(k--)&#123;</span><br><span class="line">A=q.top();q.pop();</span><br><span class="line">ans+=sum[A.t]-sum[A.o<span class="number">-1</span>];<span class="comment">//更新ans</span></span><br><span class="line"><span class="keyword">if</span>(A.l!=A.t)q.push(Queue(A.o,A.l,A.t<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">if</span>(A.r!=A.t)q.push(Queue(A.o,A.t+<span class="number">1</span>,A.r));</span><br><span class="line">&#125;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差不多就是这样了……</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> RMQ </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 Tyvj1730二逼平衡树 树套树  luogu3380/bzoj3196</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP1730/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP1730/</url>
      
        <content type="html"><![CDATA[<p>树套树，直接线段树套 $Splay$ .</p><p>因为有区间的$k$大，不能直接用$Splay$(大佬忽视这句话)，显然可以用树套树(废话)。对于每一个线段树的节点都建一棵 $Splay$ ，需要查询这个节点所代表的区间第 $k$ 大等操作时直接用 $Splay$ 来完成即可……</p><a id="more"></a><p>但是，如果不是正好的区间呢？假如询问区间横跨了两个子树区间怎么办呢？</p><p>这就需要技巧了.</p><p>下面，对于第一个操作，先贴出代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Kth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);<span class="keyword">return</span>;&#125;<span class="comment">//必须判断啊，一定要相等</span></span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);<span class="comment">//完全属于左子树</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_rank(rc,mid+<span class="number">1</span>,r,L,R,Kth);<span class="comment">//完全属于左子树</span></span><br><span class="line">    <span class="keyword">else</span> Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,Kth);</span><br><span class="line">    <span class="comment">//因为 ans 是 += ，所以直接拆开即可，因为有些抽象，可以画图模拟</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;IN(v);ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);&#125;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>基本上，所有有关的操作都可以参考上面的代码段……</p><p>多说无益，直接看代码吧.</p><p>哦，对了，其实理解只需纸笔和一份正确的代码，并不要太多的讲解(感觉网上没找到很优秀的文章……)</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A printf(<span class="meta-string">"A"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C printf(<span class="meta-string">" "</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535898</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="comment">//template &lt;typename _Tp&gt; inline _Tp max(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&gt;y?x:y;&#125; </span></span><br><span class="line"><span class="comment">//template &lt;typename _Tp&gt; inline _Tp min(const _Tp&amp;x,const _Tp&amp;y)&#123;return x&lt;y?x:y;&#125;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],ans,MX;</span><br><span class="line"><span class="comment">/*----------------------------------Splay-------------------------------------*/</span></span><br><span class="line"><span class="keyword">int</span> f[N],c[N],s[N],v[N],ch[N][<span class="number">2</span>],rt[N],tot;</span><br><span class="line"><span class="comment">// rt[i] 表示线段树编号为i的节点的Splay的根节点</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_del_node</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;f[x]=s[x]=c[x]=v[x]=ch[x][<span class="number">0</span>]=ch[x][<span class="number">1</span>]=<span class="number">0</span>;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;s[x]=(ch[x][<span class="number">0</span>]?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+(ch[x][<span class="number">1</span>]?s[ch[x][<span class="number">1</span>]]:<span class="number">0</span>)+c[x];&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=f[x],z=f[y],k=chk(x),v=ch[x][k^<span class="number">1</span>];</span><br><span class="line">ch[y][k]=v;<span class="keyword">if</span>(v)f[v]=y;f[x]=z;<span class="keyword">if</span>(z)ch[z][chk(y)]=x;</span><br><span class="line">f[y]=x,ch[x][k^<span class="number">1</span>]=y;Splay_pushup(y),Splay_pushup(x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x,<span class="keyword">int</span> top=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(f[x]!=top)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=f[x],z=f[y];</span><br><span class="line">        <span class="keyword">if</span>(z!=top)Splay_rotate((ch[z][<span class="number">0</span>]==y)==(ch[y][<span class="number">0</span>]==x)?y:x);</span><br><span class="line">        Splay_rotate(x);</span><br><span class="line">    &#125;<span class="keyword">if</span>(!top)rt[i]=x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_Insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=rt[i];</span><br><span class="line"><span class="keyword">if</span>(!rt[i])&#123;</span><br><span class="line">    rt[i]=pos=++tot;v[pos]=x;s[pos]=c[pos]=<span class="number">1</span>;</span><br><span class="line">        f[pos]=ch[pos][<span class="number">0</span>]=ch[pos][<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[pos]==x)&#123;++c[pos];Splay_pushup(last);<span class="keyword">break</span>;&#125;</span><br><span class="line">        last=pos;pos=ch[pos][x&gt;v[pos]];</span><br><span class="line">        <span class="keyword">if</span>(!pos)&#123;</span><br><span class="line">            pos=++tot;v[pos]=x;s[pos]=c[pos]=<span class="number">1</span>;</span><br><span class="line">            ch[last][x&gt;v[last]]=pos;</span><br><span class="line">            f[pos]=last;ch[pos][<span class="number">0</span>]=ch[pos][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            Splay_pushup(last);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;Splay(i,pos);<span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_rank</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=rt[i],cal=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[x]==k)<span class="keyword">return</span> cal+((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v[x]&lt;k)&#123;</span><br><span class="line">        cal+=((ch[x][<span class="number">0</span>])?s[ch[x][<span class="number">0</span>]]:<span class="number">0</span>)+c[x];x=ch[x][<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> x=ch[x][<span class="number">0</span>];</span><br><span class="line">&#125;<span class="keyword">return</span> cal;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_find</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[pos]==x)&#123;Splay(i,pos);<span class="keyword">return</span> pos;&#125;;</span><br><span class="line">pos=ch[pos][x&gt;v[pos]];</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_pre</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">int</span> x=ch[rt[i]][<span class="number">0</span>];<span class="keyword">while</span>(ch[x][<span class="number">1</span>])x=ch[x][<span class="number">1</span>];<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_suc</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">int</span> x=ch[rt[i]][<span class="number">1</span>];<span class="keyword">while</span>(ch[x][<span class="number">0</span>])x=ch[x][<span class="number">0</span>];<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_Get_pre</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(pos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]&lt;x)&#123;<span class="keyword">if</span>(ans&lt;v[pos])ans=v[pos];pos=ch[pos][<span class="number">1</span>];&#125;</span><br><span class="line">        <span class="keyword">else</span> pos=ch[pos][<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Splay_Get_suc</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=rt[i];<span class="keyword">while</span>(pos)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[pos]&gt;x)&#123;<span class="keyword">if</span>(ans&gt;v[pos])ans=v[pos];pos=ch[pos][<span class="number">0</span>];&#125;</span><br><span class="line">        <span class="keyword">else</span> pos=ch[pos][<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay_Delete</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=Splay_find(i,key);</span><br><span class="line">    <span class="keyword">if</span>(c[x]&gt;<span class="number">1</span>)&#123;--c[x];Splay_pushup(x);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">0</span>]&amp;&amp;!ch[x][<span class="number">1</span>])&#123;Splay_del_node(rt[i]);rt[i]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[x][<span class="number">0</span>])&#123;<span class="keyword">int</span> y=ch[x][<span class="number">1</span>];rt[i]=y;f[y]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(!ch[x][<span class="number">1</span>])&#123;<span class="keyword">int</span> y=ch[x][<span class="number">0</span>];rt[i]=y;f[y]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> p=Splay_pre(i);<span class="keyword">int</span> lastrt=rt[i];</span><br><span class="line">Splay(i,p,<span class="number">0</span>);ch[rt[i]][<span class="number">1</span>]=ch[lastrt][<span class="number">1</span>];f[ch[lastrt][<span class="number">1</span>]]=rt[i];</span><br><span class="line">Splay_del_node(lastrt);Splay_pushup(rt[i]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*------------------------------Seg_Tree--------------------------------------*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ((x)&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ((x)&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_Insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    Splay_Insert(x,val);<span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_Insert(lc,l,mid,pos,val);</span><br><span class="line"><span class="keyword">else</span> Seg_Insert(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Kth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans+=Splay_rank(x,Kth);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_rank(lc,l,mid,L,R,Kth);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_rank(rc,mid+<span class="number">1</span>,r,L,R,Kth);</span><br><span class="line">    <span class="keyword">else</span> Seg_rank(lc,l,mid,L,mid,Kth),Seg_rank(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,Kth);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="comment">//    printf("QvQ:: %d %d %d %d %d\n",x,l,r,pos,val);</span></span><br><span class="line">Splay_Delete(x,a[pos]);Splay_Insert(x,val);</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;a[pos]=val;<span class="keyword">return</span>;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)Seg_change(lc,l,mid,pos,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_change(rc,mid+<span class="number">1</span>,r,pos,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=max(ans,Splay_Get_pre(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_pre(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_pre(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_pre(lc,l,mid,L,mid,val),Seg_pre(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Seg_suc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;ans=min(ans,Splay_Get_suc(x,val));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid)Seg_suc(lc,l,mid,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)Seg_suc(rc,mid+<span class="number">1</span>,r,L,R,val);</span><br><span class="line">    <span class="keyword">else</span> Seg_suc(lc,l,mid,L,mid,val),Seg_suc(rc,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R,val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*---------------------------------ask----------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Kth</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=MX+<span class="number">1</span>,M;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">        M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,M);</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;k)L=M+<span class="number">1</span>;<span class="keyword">else</span> R=M;</span><br><span class="line">    &#125;<span class="keyword">return</span> L<span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*-------------------------------main-------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> <span class="keyword">const</span>* argv[])</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);</span><br><span class="line">    <span class="keyword">for</span>(RI i=<span class="number">1</span>;i&lt;=n;++i)&#123;IN(a[i]);Seg_Insert(<span class="number">1</span>,<span class="number">1</span>,n,i,a[i]);MX=max(MX,a[i]);&#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,x,y,v;IN(op),IN(x),IN(y);</span><br><span class="line">        <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;IN(v);ans=<span class="number">0</span>;Seg_rank(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;IN(v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get_Kth(x,y,v));&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;Seg_change(<span class="number">1</span>,<span class="number">1</span>,n,x,y);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;IN(v);ans=-inf;Seg_pre(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:&#123;IN(v);ans=inf;Seg_suc(<span class="number">1</span>,<span class="number">1</span>,n,x,y,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);&#125;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 楼房重建 线段树 bzoj2957</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5Dbzoj2957/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5Dbzoj2957/</url>
      
        <content type="html"><![CDATA[<p>每个楼房，还有单点修改操作。简单的想到用线段树来维护信息。</p><p>显然线段树只需要维护y/x即可，对于每一个楼房，能看见的条件就是前面楼房的y/x的严格小于当前楼房的y/x。</p><a id="more"></a><p>线段树的区间修改不再赘述。</p><p>那么怎么维护可以看到的楼房数呢？</p><p>考虑在线段树的每一个节点上用一个变量<code>sum</code>来表示从这个节点的左端点向右端点看时能看到多少楼房。</p><p>假设现在有一区间：<code>1,5,8,0,7,9</code>。维护这个区间信息的节点编号为<code>x</code>。</p><p>x的左儿子维护的区间是<code>1,5,8</code>，从<code>1</code>往<code>8</code>看可以看到三个楼房，故x的左儿子的sum的值为<code>3</code>。</p><p>x的右儿子维护的区间是<code>0,7,9</code>，从<code>0</code>往<code>9</code>看也可以看到三个楼房，故x的右儿子的sum的值也为<code>3</code>。</p><h4 id="难道x的sum值也为3-3-6？错"><a href="#难道x的sum值也为3-3-6？错" class="headerlink" title="难道x的sum值也为3+3=6？错!"></a>难道<code>x的sum值</code>也为<code>3+3=6</code>？错!</h4><p>这显然是不能加在一起的，<code>x的sum的值</code>为4。</p><p>为什么会错呢？因为x的右儿子的观察视角不是从1开始的，是从0开始的。</p><p>显然0被前面的楼房挡住了。</p><p>首先考虑每个线段树节点在维护一个<code>mx</code>，<code>mx</code>代表这个节点所代表的区间中所有的楼房中最高的高度。</p><p>上传时，由于两个儿子的<code>sum</code>值是已经处理好的，而左儿子的视角是跟<code>x</code>的视角一样的(对于上面的例子来说都是1)，可以直接上传，即<code>sum(x)+=sum(l(x))</code>。</p><p>对于右儿子，考虑递归处理右儿子的区间，递归时带一个<code>Mx</code>变量表示x的左儿子<code>mx</code>(右儿子再左儿子后面，原因下面解释)，递归函数的返回值是当前处理区间可以被看到的楼房数(从x的视角看)</p><p>对于现在处理的每一个区间：</p><ul><li>如果这个区间的最高的楼房的高度都Mx(可以看到)，那么return 当前区间维护的sum值。</li><li>如果这个区间只代表一个楼房，直接判断其能否被看到即可。</li></ul><ul><li>对于剩下的情况，递归儿子，分两种情况讨论：<ul><li>如果左儿子的最高的楼房小于Mx(不能对答案有任何贡献)，直接递归右儿子。</li><li>否则，递归左儿子，右儿子能看到的楼房个数为当前区间sum-左儿子sum即可，(应为下面已经更新好了，只需要直接调用就好了。)</li></ul></li></ul><h5 id="Code-文中的sum用l代替"><a href="#Code-文中的sum用l代替" class="headerlink" title="Code(文中的sum用l代替):"></a>Code(文中的sum用l代替):</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson x&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson x&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> mx;<span class="keyword">int</span> l;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> m(x) tree[x].mx</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">&#125; tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">double</span> val[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup_max</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">m(x)=max(m(x&lt;&lt;<span class="number">1</span>),m(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pushup_sum</span><span class="params">(<span class="keyword">double</span> Mx,<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m(x)&lt;Mx)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(val[l]&gt;Mx)<span class="keyword">return</span> l(x);</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> val[l]&gt;Mx;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m(lson)&lt;=Mx)<span class="keyword">return</span> pushup_sum(Mx,rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> pushup_sum(Mx,lson,l,mid)+l(x)-l(lson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r&amp;&amp;l==pos)&#123;m(x)=(<span class="keyword">double</span>)value/pos;l(x)=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)change(lson,l,mid,pos,value);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid)change(rson,mid+<span class="number">1</span>,r,pos,value);</span><br><span class="line">pushup_max(x);</span><br><span class="line">l(x)=l(lson)+pushup_sum(m(lson),rson,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> x,y,i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">val[x]=(<span class="keyword">double</span>)y/x;</span><br><span class="line">change(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】 小清新人渣的本愿  莫队+bitset  luoguP3674</title>
      <link href="/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP3674/"/>
      <url>/2019/02/13/%5B%E9%A2%98%E8%A7%A3%5DluoguP3674/</url>
      
        <content type="html"><![CDATA[<p>莫队 $+$ $bitset$.</p><p>我们可以用 $bitset$ 维护当前 $l,r$ 区间数的出现的状态，莫对依旧按照套路搞，然后来考虑怎么回答每一个询问。</p><a id="more"></a><p>对于操做 $1$ ，要求回答我们从当前区间能否找出 $a,b$ 使得其差为 $x$。</p><p>很显然，$a-b=x$ 等价于 $a=b+x$。</p><p>我们维护的是数的出现的状态，于是可以将当前的 $bitset$ 左移 $x$ 位，也就是让所有数都加上 $x$，然后与原 $bitset$ 做与运算，看看是否有一个 $a$ 出现，如果与的结果非 $0$ ，那么显然是有的，否则没有。</p><p>第二个操作有些不好办，我们再开一个 $bitset$ 集，对于一个出现过的数 $i$，在第二个 $bitset$ 集中记为 $N-i$。然后再来看操作要求，这次是让 $a+b=x$。</p><p>那么可以得到：<script type="math/tex">a=x-b</script></p><p>于是设一个数 $z$ ，表示 $N-a$ 。</p><p>然后：<script type="math/tex">z=N-x+b</script></p><p>移项得：<script type="math/tex">z-b=N-x</script></p><p>于是我们将第二个 $bitset$ 右移 $N-x$ 为，显然第二个 $bitset$ 集上的第 $i$ 位代表的就是第一个 $bitset$ 上的 $x-i$ 位。</p><p>然后，将两个 $bitset$ 与一下，看看是否同时存在 $a$ 和 $x-a$ 即可。</p><p>最后对于第三个操作，貌似bitset也不太好搞，那么直接暴力枚举因子就好了，复杂度 $O(\sqrt{n})$，放心不会炸。具体怎么暴力枚举呢？在 $1 - \sqrt{x}$ 的范围类枚举一个 $j$ ，如果 $x$ % $j==0$ 并且同时存在 $j$ 和 $x/j$，显然就有答案了。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(_Tp&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;<span class="keyword">bool</span> flag=<span class="number">0</span>;x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getchar(),!<span class="built_in">isdigit</span>(ch))<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">if</span>(flag)x=-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;N&gt; now1,now2; </span><br><span class="line"><span class="keyword">int</span> n,m,l,r,s,a[N],c[N],Be[N],ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MO</span>&#123;</span><span class="keyword">int</span> opt,l,r,x,id;&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(MO a,MO b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> Be[a.l]==Be[b.l]?a.r&lt;b.r:a.l&lt;b.l;&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IN(n),IN(m);s=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)IN(a[i]),Be[i]=(i<span class="number">-1</span>)/s+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">       IN(q[i].opt),IN(q[i].l),IN(q[i].r),IN(q[i].x),q[i].id=i;</span><br><span class="line">    <span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m,cmp);</span><br><span class="line">    l=<span class="number">1</span>,r=<span class="number">0</span>;now1.reset(),now2.reset();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(c[x]++==<span class="number">0</span>)now1[x]=<span class="number">1</span>,now2[N-x]=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(--c[x]==<span class="number">0</span>)now1[x]=<span class="number">0</span>,now2[N-x]=<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;q[i].l)Del(a[l++]);</span><br><span class="line">        <span class="keyword">while</span>(l&gt;q[i].l)Add(a[--l]);</span><br><span class="line">        <span class="keyword">while</span>(r&gt;q[i].r)Del(a[r--]);</span><br><span class="line">        <span class="keyword">while</span>(r&lt;q[i].r)Add(a[++r]);</span><br><span class="line">        <span class="keyword">if</span>(q[i].opt==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((now1&amp;(now1&lt;&lt;q[i].x)).any())ans[q[i].id]=<span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((now1&amp;(now2&gt;&gt;(N-q[i].x))).any())ans[q[i].id]=<span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j*j&lt;=q[i].x;++j)</span><br><span class="line">           <span class="keyword">if</span>(!(q[i].x%j)&amp;&amp;now1[j]&amp;&amp;now1[q[i].x/j])</span><br><span class="line">           &#123;ans[q[i].id]=<span class="literal">true</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">       <span class="keyword">if</span>(ans[i])<span class="built_in">printf</span>(<span class="string">"hana\n"</span>);</span><br><span class="line">       <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"bi\n"</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 莫队 </tag>
            
            <tag> bitset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello new blog!</title>
      <link href="/2019/02/12/Hello%20new%20blog!/"/>
      <url>/2019/02/12/Hello%20new%20blog!/</url>
      
        <content type="html"><![CDATA[<p>曾经尝试过用 $Wordpress$ 搭过博客，虽说操作简单，却因为我不想花钱而使用不了 $Makedown$ 格式，对于超级依赖 $Makedown$ 的我，找遍了方法都没法解决……</p><a id="more"></a><p>于是蠢蠢欲动的想要用 $Hexo$ 搭个博客，虽然听学长说，$Hexo$ 只是静态页面，不是那么好。但是却可以免费，还可以用自己喜欢的编辑器学文章。这个计划就这么开始了。</p><p>两天时间，一共搭建了四次，前三次在机房搭的，均未成功。一到家用自己的笔记本电脑，却出奇的顺利，看到页面成功的弹出来时，我真的是激动得不能言语！</p><p>然后，对这个也挺满意的。但是由于本人实在太弱，没有实力与精力去优化博客界面，只是草草的搞了一下 $LATEX$(打错了？) ，不知道能不能用。</p><p>之前我的 $Wordpress$ 的第一篇文章叫新的开始，现在看来那还不是，希望这才是一个崭新的开始吧！ </p><p>（实际上原来叫 $Qiuly$，这个 $“monlights”$ 只是小号而已，$QvQ!$）</p><p>（逃</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome,new visitors! Here is Qiuly&#39;s blog!</title>
      <link href="/2019/02/12/Welcome/"/>
      <url>/2019/02/12/Welcome/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/02/12/Welcome/2019.05.jpg" alt=""></p><blockquote><p>预测未来的最好方法是创造未来          ——艾伦·凯</p></blockquote><p>欢迎！这里是 $Qiuly’s\ blog$ ！在翻阅文章之前，$Qiuly$ 有几个小小的要求：</p><ul><li>如果需要复制原文的话可以加 $Qiuly$ $QQ:2641450959$ ，请不要擅自复制却不跟 $Qiuly$ 说一声，谢谢理解。$Qiuly$ 目前还只是一个可爱的小学森，更博<del>勤快</del>的确不容易。</li><li>如果有图片挂了的，或者是代码缩进变成了 $8$ 的代码，还有就是格式问题爆炸的话(就是字之间突然有若干个空格之类的)也请加 $QQ$ ，$Qiuly’s \ blog$ 没有邮箱提醒的功能，所以如果只的是评论的话 $Qiuly$ 根本不知道。$QQ$ 的验证就填六年级好了，说明的话就填博客问题。</li><li>作为一个个人博客，当然欢迎加友链啦！想要加友链的朋友可以再下方评论区提出哦。</li><li>或许是使用的 $Latex$ 比较多，有些公式/ $Latex$ 的句子或许会加载的比较慢，需要等待片刻后再食用。</li><li>好啦，现在开始你的 $Qiuly’s \ blog$ 之旅吧！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
